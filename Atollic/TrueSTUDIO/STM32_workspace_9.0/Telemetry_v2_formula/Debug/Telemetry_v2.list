
Telemetry_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e02c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800e1d8  0800e1d8  0001e1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e228  0800e228  0001e228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e230  0800e230  0001e230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e234  0800e234  0001e234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800e238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000630  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000063c  2000063c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013988  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000023c9  00000000  00000000  000339c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000001e8  00000000  00000000  00035d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004dc3  00000000  00000000  00035f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004058  00000000  00000000  0003ad3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003ed93  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000035a8  00000000  00000000  0003ee10  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000020  00000000  00000000  000423b8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800e1c0 	.word	0x0800e1c0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800e1c0 	.word	0x0800e1c0

080001ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f0:	4a0e      	ldr	r2, [pc, #56]	; (800022c <HAL_Init+0x40>)
 80001f2:	4b0e      	ldr	r3, [pc, #56]	; (800022c <HAL_Init+0x40>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80001fc:	4a0b      	ldr	r2, [pc, #44]	; (800022c <HAL_Init+0x40>)
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <HAL_Init+0x40>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000208:	4a08      	ldr	r2, [pc, #32]	; (800022c <HAL_Init+0x40>)
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <HAL_Init+0x40>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000214:	2003      	movs	r0, #3
 8000216:	f001 fca1 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f842 	bl	80002a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000220:	f00d f9b0 	bl	800d584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000224:	2300      	movs	r3, #0
}
 8000226:	4618      	mov	r0, r3
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40023c00 	.word	0x40023c00

08000230 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000234:	4b13      	ldr	r3, [pc, #76]	; (8000284 <HAL_DeInit+0x54>)
 8000236:	f04f 32ff 	mov.w	r2, #4294967295
 800023a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <HAL_DeInit+0x54>)
 800023e:	2200      	movs	r2, #0
 8000240:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <HAL_DeInit+0x54>)
 8000244:	f04f 32ff 	mov.w	r2, #4294967295
 8000248:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <HAL_DeInit+0x54>)
 800024c:	2200      	movs	r2, #0
 800024e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <HAL_DeInit+0x54>)
 8000252:	f04f 32ff 	mov.w	r2, #4294967295
 8000256:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <HAL_DeInit+0x54>)
 800025a:	2200      	movs	r2, #0
 800025c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <HAL_DeInit+0x54>)
 8000260:	f04f 32ff 	mov.w	r2, #4294967295
 8000264:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000266:	4b07      	ldr	r3, [pc, #28]	; (8000284 <HAL_DeInit+0x54>)
 8000268:	2200      	movs	r2, #0
 800026a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <HAL_DeInit+0x54>)
 800026e:	f04f 32ff 	mov.w	r2, #4294967295
 8000272:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <HAL_DeInit+0x54>)
 8000276:	2200      	movs	r2, #0
 8000278:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800027a:	f000 f80c 	bl	8000296 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800027e:	2300      	movs	r3, #0
}
 8000280:	4618      	mov	r0, r3
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40023800 	.word	0x40023800
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <HAL_InitTick+0x54>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b12      	ldr	r3, [pc, #72]	; (80002fc <HAL_InitTick+0x58>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	4619      	mov	r1, r3
 80002b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80002be:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fc93 	bl	8001bee <HAL_SYSTICK_Config>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002ce:	2301      	movs	r3, #1
 80002d0:	e00e      	b.n	80002f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b0f      	cmp	r3, #15
 80002d6:	d80a      	bhi.n	80002ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002d8:	2200      	movs	r2, #0
 80002da:	6879      	ldr	r1, [r7, #4]
 80002dc:	f04f 30ff 	mov.w	r0, #4294967295
 80002e0:	f001 fc47 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002e4:	4a06      	ldr	r2, [pc, #24]	; (8000300 <HAL_InitTick+0x5c>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80002ea:	2300      	movs	r3, #0
 80002ec:	e000      	b.n	80002f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002ee:	2301      	movs	r3, #1
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000008 	.word	0x20000008
 80002fc:	20000004 	.word	0x20000004
 8000300:	20000000 	.word	0x20000000

08000304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <HAL_IncTick+0x20>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <HAL_IncTick+0x24>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4413      	add	r3, r2
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <HAL_IncTick+0x24>)
 8000316:	6013      	str	r3, [r2, #0]
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	20000004 	.word	0x20000004
 8000328:	20000028 	.word	0x20000028

0800032c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  return uwTick;
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <HAL_GetTick+0x14>)
 8000332:	681b      	ldr	r3, [r3, #0]
}
 8000334:	4618      	mov	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	20000028 	.word	0x20000028

08000344 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <HAL_GetTickPrio+0x14>)
 800034a:	681b      	ldr	r3, [r3, #0]
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000000 	.word	0x20000000

0800035c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8000366:	2300      	movs	r3, #0
 8000368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <HAL_SetTickFreq+0x38>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	79fa      	ldrb	r2, [r7, #7]
 8000370:	429a      	cmp	r2, r3
 8000372:	d009      	beq.n	8000388 <HAL_SetTickFreq+0x2c>
  {
    uwTickFreq = Freq;
 8000374:	4a07      	ldr	r2, [pc, #28]	; (8000394 <HAL_SetTickFreq+0x38>)
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 800037a:	4b07      	ldr	r3, [pc, #28]	; (8000398 <HAL_SetTickFreq+0x3c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff90 	bl	80002a4 <HAL_InitTick>
 8000384:	4603      	mov	r3, r0
 8000386:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000388:	7bfb      	ldrb	r3, [r7, #15]
}
 800038a:	4618      	mov	r0, r3
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000004 	.word	0x20000004
 8000398:	20000000 	.word	0x20000000

0800039c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <HAL_GetTickFreq+0x14>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000004 	.word	0x20000004

080003b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80003bc:	f7ff ffb6 	bl	800032c <HAL_GetTick>
 80003c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003cc:	d005      	beq.n	80003da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <HAL_Delay+0x40>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	461a      	mov	r2, r3
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	4413      	add	r3, r2
 80003d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80003da:	bf00      	nop
 80003dc:	f7ff ffa6 	bl	800032c <HAL_GetTick>
 80003e0:	4602      	mov	r2, r0
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	1ad2      	subs	r2, r2, r3
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d3f7      	bcc.n	80003dc <HAL_Delay+0x28>
  {
  }
}
 80003ec:	bf00      	nop
 80003ee:	3710      	adds	r7, #16
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000004 	.word	0x20000004

080003f8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80003fc:	4a05      	ldr	r2, [pc, #20]	; (8000414 <HAL_SuspendTick+0x1c>)
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <HAL_SuspendTick+0x1c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f023 0302 	bic.w	r3, r3, #2
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000e010 	.word	0xe000e010

08000418 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <HAL_ResumeTick+0x1c>)
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <HAL_ResumeTick+0x1c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f043 0302 	orr.w	r3, r3, #2
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	e000e010 	.word	0xe000e010

08000438 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 800043c:	4b02      	ldr	r3, [pc, #8]	; (8000448 <HAL_GetHalVersion+0x10>)
}
 800043e:	4618      	mov	r0, r3
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	01070400 	.word	0x01070400

0800044c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <HAL_GetREVID+0x14>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	0c1b      	lsrs	r3, r3, #16
}
 8000456:	4618      	mov	r0, r3
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	e0042000 	.word	0xe0042000

08000464 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <HAL_GetDEVID+0x18>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000470:	4618      	mov	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	e0042000 	.word	0xe0042000

08000480 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000484:	4a05      	ldr	r2, [pc, #20]	; (800049c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8000486:	4b05      	ldr	r3, [pc, #20]	; (800049c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	f043 0301 	orr.w	r3, r3, #1
 800048e:	6053      	str	r3, [r2, #4]
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e0042000 	.word	0xe0042000

080004a0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80004a4:	4a05      	ldr	r2, [pc, #20]	; (80004bc <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	f023 0301 	bic.w	r3, r3, #1
 80004ae:	6053      	str	r3, [r2, #4]
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	e0042000 	.word	0xe0042000

080004c0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80004c4:	4a05      	ldr	r2, [pc, #20]	; (80004dc <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	f043 0302 	orr.w	r3, r3, #2
 80004ce:	6053      	str	r3, [r2, #4]
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e0042000 	.word	0xe0042000

080004e0 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80004e4:	4a05      	ldr	r2, [pc, #20]	; (80004fc <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80004e6:	4b05      	ldr	r3, [pc, #20]	; (80004fc <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	f023 0302 	bic.w	r3, r3, #2
 80004ee:	6053      	str	r3, [r2, #4]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	e0042000 	.word	0xe0042000

08000500 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6053      	str	r3, [r2, #4]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e0042000 	.word	0xe0042000

08000520 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000524:	4a05      	ldr	r2, [pc, #20]	; (800053c <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	f023 0304 	bic.w	r3, r3, #4
 800052e:	6053      	str	r3, [r2, #4]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e0042000 	.word	0xe0042000

08000540 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <HAL_EnableCompensationCell+0x14>)
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	42270400 	.word	0x42270400

08000558 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <HAL_DisableCompensationCell+0x14>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	42270400 	.word	0x42270400

08000570 <HAL_GetUID>:
  * @brief Return the unique device identifier (UID based on 96 bits)
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_GetUID+0x30>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	601a      	str	r2, [r3, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3304      	adds	r3, #4
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <HAL_GetUID+0x34>)
 8000586:	6812      	ldr	r2, [r2, #0]
 8000588:	601a      	str	r2, [r3, #0]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3308      	adds	r3, #8
 800058e:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <HAL_GetUID+0x38>)
 8000590:	6812      	ldr	r2, [r2, #0]
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	1fff7a10 	.word	0x1fff7a10
 80005a4:	1fff7a14 	.word	0x1fff7a14
 80005a8:	1fff7a18 	.word	0x1fff7a18

080005ac <HAL_EnableMemorySwappingBank>:
  *         and Flash Bank1 mapped at 0x08100000 (and aliased at 0x00100000)   
  *
  * @retval None
  */
void HAL_EnableMemorySwappingBank(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)UFB_MODE_BB = (uint32_t)ENABLE;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_EnableMemorySwappingBank+0x14>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	42270020 	.word	0x42270020

080005c4 <HAL_DisableMemorySwappingBank>:
  *         and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000) 
  *           
  * @retval None
  */
void HAL_DisableMemorySwappingBank(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)UFB_MODE_BB = (uint32_t)DISABLE;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <HAL_DisableMemorySwappingBank+0x14>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	42270020 	.word	0x42270020

080005dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]

  /* Check CAN handle */
  if (hcan == NULL)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d101      	bne.n	80005f2 <HAL_CAN_Init+0x16>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e0ec      	b.n	80007cc <HAL_CAN_Init+0x1f0>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d102      	bne.n	8000604 <HAL_CAN_Init+0x28>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f00c fff1 	bl	800d5e6 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	6812      	ldr	r2, [r2, #0]
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	f022 0202 	bic.w	r2, r2, #2
 8000612:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000614:	f7ff fe8a 	bl	800032c <HAL_GetTick>
 8000618:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 800061a:	e012      	b.n	8000642 <HAL_CAN_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800061c:	f7ff fe86 	bl	800032c <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	2b0a      	cmp	r3, #10
 8000628:	d90b      	bls.n	8000642 <HAL_CAN_Init+0x66>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2205      	movs	r2, #5
 800063a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	e0c4      	b.n	80007cc <HAL_CAN_Init+0x1f0>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f003 0302 	and.w	r3, r3, #2
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1e5      	bne.n	800061c <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	6812      	ldr	r2, [r2, #0]
 8000658:	6812      	ldr	r2, [r2, #0]
 800065a:	f042 0201 	orr.w	r2, r2, #1
 800065e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000660:	f7ff fe64 	bl	800032c <HAL_GetTick>
 8000664:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8000666:	e012      	b.n	800068e <HAL_CAN_Init+0xb2>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000668:	f7ff fe60 	bl	800032c <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	2b0a      	cmp	r3, #10
 8000674:	d90b      	bls.n	800068e <HAL_CAN_Init+0xb2>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2205      	movs	r2, #5
 8000686:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e09e      	b.n	80007cc <HAL_CAN_Init+0x1f0>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0e5      	beq.n	8000668 <HAL_CAN_Init+0x8c>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7e1b      	ldrb	r3, [r3, #24]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d108      	bne.n	80006b6 <HAL_CAN_Init+0xda>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	6812      	ldr	r2, [r2, #0]
 80006ac:	6812      	ldr	r2, [r2, #0]
 80006ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	e007      	b.n	80006c6 <HAL_CAN_Init+0xea>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	6812      	ldr	r2, [r2, #0]
 80006be:	6812      	ldr	r2, [r2, #0]
 80006c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7e5b      	ldrb	r3, [r3, #25]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d108      	bne.n	80006e0 <HAL_CAN_Init+0x104>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	6812      	ldr	r2, [r2, #0]
 80006d6:	6812      	ldr	r2, [r2, #0]
 80006d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	e007      	b.n	80006f0 <HAL_CAN_Init+0x114>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	6812      	ldr	r2, [r2, #0]
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7e9b      	ldrb	r3, [r3, #26]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d108      	bne.n	800070a <HAL_CAN_Init+0x12e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	6812      	ldr	r2, [r2, #0]
 8000700:	6812      	ldr	r2, [r2, #0]
 8000702:	f042 0220 	orr.w	r2, r2, #32
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	e007      	b.n	800071a <HAL_CAN_Init+0x13e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	6812      	ldr	r2, [r2, #0]
 8000712:	6812      	ldr	r2, [r2, #0]
 8000714:	f022 0220 	bic.w	r2, r2, #32
 8000718:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	7edb      	ldrb	r3, [r3, #27]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d108      	bne.n	8000734 <HAL_CAN_Init+0x158>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	6812      	ldr	r2, [r2, #0]
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	f022 0210 	bic.w	r2, r2, #16
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	e007      	b.n	8000744 <HAL_CAN_Init+0x168>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	6812      	ldr	r2, [r2, #0]
 800073c:	6812      	ldr	r2, [r2, #0]
 800073e:	f042 0210 	orr.w	r2, r2, #16
 8000742:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	7f1b      	ldrb	r3, [r3, #28]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d108      	bne.n	800075e <HAL_CAN_Init+0x182>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	6812      	ldr	r2, [r2, #0]
 8000754:	6812      	ldr	r2, [r2, #0]
 8000756:	f042 0208 	orr.w	r2, r2, #8
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	e007      	b.n	800076e <HAL_CAN_Init+0x192>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	6812      	ldr	r2, [r2, #0]
 8000768:	f022 0208 	bic.w	r2, r2, #8
 800076c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	7f5b      	ldrb	r3, [r3, #29]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d108      	bne.n	8000788 <HAL_CAN_Init+0x1ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	6812      	ldr	r2, [r2, #0]
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	f042 0204 	orr.w	r2, r2, #4
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	e007      	b.n	8000798 <HAL_CAN_Init+0x1bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	6812      	ldr	r2, [r2, #0]
 8000790:	6812      	ldr	r2, [r2, #0]
 8000792:	f022 0204 	bic.w	r2, r2, #4
 8000796:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	6891      	ldr	r1, [r2, #8]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	68d2      	ldr	r2, [r2, #12]
 80007a4:	4311      	orrs	r1, r2
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	6912      	ldr	r2, [r2, #16]
 80007aa:	4311      	orrs	r1, r2
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	6952      	ldr	r2, [r2, #20]
 80007b0:	4311      	orrs	r1, r2
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	6852      	ldr	r2, [r2, #4]
 80007b6:	3a01      	subs	r2, #1
 80007b8:	430a      	orrs	r2, r1
 80007ba:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2201      	movs	r2, #1
 80007c6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d101      	bne.n	80007e6 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e015      	b.n	8000812 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  HAL_CAN_Stop(hcan);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f000 f954 	bl	8000a94 <HAL_CAN_Stop>

  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f00c ff2b 	bl	800d648 <HAL_CAN_MspDeInit>

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000800:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspDeInit could be implemented in the user file
   */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000842:	b480      	push	{r7}
 8000844:	b085      	sub	sp, #20
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0U;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  CAN_TypeDef *can_ip = hcan->Instance;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	60bb      	str	r3, [r7, #8]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b01      	cmp	r3, #1
 8000860:	d006      	beq.n	8000870 <HAL_CAN_ConfigFilter+0x2e>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000868:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800086a:	2b02      	cmp	r3, #2
 800086c:	f040 80bc 	bne.w	80009e8 <HAL_CAN_ConfigFilter+0x1a6>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000870:	4b64      	ldr	r3, [pc, #400]	; (8000a04 <HAL_CAN_ConfigFilter+0x1c2>)
 8000872:	60bb      	str	r3, [r7, #8]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800087a:	f043 0201 	orr.w	r2, r3, #1
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800088a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089e:	021b      	lsls	r3, r3, #8
 80008a0:	431a      	orrs	r2, r3
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	2201      	movs	r2, #1
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	43db      	mvns	r3, r3
 80008be:	401a      	ands	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d123      	bne.n	8000916 <HAL_CAN_ConfigFilter+0xd4>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	43db      	mvns	r3, r3
 80008d8:	401a      	ands	r2, r3
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	3248      	adds	r2, #72	; 0x48
 80008f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	6892      	ldr	r2, [r2, #8]
 8000902:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	6812      	ldr	r2, [r2, #0]
 8000908:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800090a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800090c:	68b9      	ldr	r1, [r7, #8]
 800090e:	3348      	adds	r3, #72	; 0x48
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	440b      	add	r3, r1
 8000914:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d122      	bne.n	8000964 <HAL_CAN_ConfigFilter+0x122>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	431a      	orrs	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800093e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	3248      	adds	r2, #72	; 0x48
 8000944:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800094c:	683a      	ldr	r2, [r7, #0]
 800094e:	6892      	ldr	r2, [r2, #8]
 8000950:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	68d2      	ldr	r2, [r2, #12]
 8000956:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000958:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	3348      	adds	r3, #72	; 0x48
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	440b      	add	r3, r1
 8000962:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d109      	bne.n	8000980 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	43db      	mvns	r3, r3
 8000976:	401a      	ands	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800097e:	e007      	b.n	8000990 <HAL_CAN_ConfigFilter+0x14e>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	431a      	orrs	r2, r3
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d109      	bne.n	80009ac <HAL_CAN_ConfigFilter+0x16a>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	43db      	mvns	r3, r3
 80009a2:	401a      	ands	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80009aa:	e007      	b.n	80009bc <HAL_CAN_ConfigFilter+0x17a>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	431a      	orrs	r2, r3
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == ENABLE)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	6a1b      	ldr	r3, [r3, #32]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d107      	bne.n	80009d4 <HAL_CAN_ConfigFilter+0x192>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	431a      	orrs	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009da:	f023 0201 	bic.w	r2, r3, #1
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	e006      	b.n	80009f6 <HAL_CAN_ConfigFilter+0x1b4>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
  }
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40006400 	.word	0x40006400

08000a08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d12e      	bne.n	8000a7e <HAL_CAN_Start+0x76>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2202      	movs	r2, #2
 8000a24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	6812      	ldr	r2, [r2, #0]
 8000a30:	6812      	ldr	r2, [r2, #0]
 8000a32:	f022 0201 	bic.w	r2, r2, #1
 8000a36:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a38:	f7ff fc78 	bl	800032c <HAL_GetTick>
 8000a3c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 8000a3e:	e012      	b.n	8000a66 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a40:	f7ff fc74 	bl	800032c <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b0a      	cmp	r3, #10
 8000a4c:	d90b      	bls.n	8000a66 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2205      	movs	r2, #5
 8000a5e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e012      	b.n	8000a8c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1e5      	bne.n	8000a40 <HAL_CAN_Start+0x38>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e006      	b.n	8000a8c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
  }
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d133      	bne.n	8000b14 <HAL_CAN_Stop+0x80>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	6812      	ldr	r2, [r2, #0]
 8000ab6:	f042 0201 	orr.w	r2, r2, #1
 8000aba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000abc:	f7ff fc36 	bl	800032c <HAL_GetTick>
 8000ac0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8000ac2:	e012      	b.n	8000aea <HAL_CAN_Stop+0x56>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ac4:	f7ff fc32 	bl	800032c <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	2b0a      	cmp	r3, #10
 8000ad0:	d90b      	bls.n	8000aea <HAL_CAN_Stop+0x56>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2205      	movs	r2, #5
 8000ae2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e01b      	b.n	8000b22 <HAL_CAN_Stop+0x8e>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0e5      	beq.n	8000ac4 <HAL_CAN_Stop+0x30>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	6812      	ldr	r2, [r2, #0]
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	f022 0202 	bic.w	r2, r2, #2
 8000b06:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	e006      	b.n	8000b22 <HAL_CAN_Stop+0x8e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
  }
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_CAN_RequestSleep>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d005      	beq.n	8000b4a <HAL_CAN_RequestSleep+0x20>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b44:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d109      	bne.n	8000b5e <HAL_CAN_RequestSleep+0x34>
  {
    /* Request Sleep mode */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	f042 0202 	orr.w	r2, r2, #2
 8000b58:	601a      	str	r2, [r3, #0]

    /* Return function status */
    return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e006      	b.n	8000b6c <HAL_CAN_RequestSleep+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
  }
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = 1000000U;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_CAN_WakeUp+0x80>)
 8000b86:	60fb      	str	r3, [r7, #12]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d005      	beq.n	8000ba0 <HAL_CAN_WakeUp+0x28>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b9a:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d11e      	bne.n	8000bde <HAL_CAN_WakeUp+0x66>
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	f022 0202 	bic.w	r2, r2, #2
 8000bae:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Check if timeout is reached */
      if (++count > timeout)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d907      	bls.n	8000bcc <HAL_CAN_WakeUp+0x54>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e00f      	b.n	8000bec <HAL_CAN_WakeUp+0x74>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1ea      	bne.n	8000bb0 <HAL_CAN_WakeUp+0x38>

    /* Return function status */
    return HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e006      	b.n	8000bec <HAL_CAN_WakeUp+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
  }
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	000f4240 	.word	0x000f4240

08000bfc <HAL_CAN_IsSleepActive>:
  * @retval Status
  *          - 0 : Sleep mode is not active.
  *          - 1 : Sleep mode is active.
  */
uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t status = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d005      	beq.n	8000c20 <HAL_CAN_IsSleepActive+0x24>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c1a:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d108      	bne.n	8000c32 <HAL_CAN_IsSleepActive+0x36>
  {
    /* Check Sleep mode */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_CAN_IsSleepActive+0x36>
    {
      status = 1U;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return function status */
  return status;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	603b      	str	r3, [r7, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d006      	beq.n	8000c68 <HAL_CAN_AddTxMessage+0x28>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c60:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	f040 80b1 	bne.w	8000dca <HAL_CAN_AddTxMessage+0x18a>
  {
    /* Check that all the Tx mailboxes are not full */
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10e      	bne.n	8000c94 <HAL_CAN_AddTxMessage+0x54>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d107      	bne.n	8000c94 <HAL_CAN_AddTxMessage+0x54>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 8093 	beq.w	8000dba <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	0e1b      	lsrs	r3, r3, #24
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = 1U << transmitmailbox;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10d      	bne.n	8000cd0 <HAL_CAN_AddTxMessage+0x90>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6819      	ldr	r1, [r3, #0]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3318      	adds	r3, #24
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	440b      	add	r3, r1
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e00f      	b.n	8000cf0 <HAL_CAN_AddTxMessage+0xb0>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cde:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 8000ce4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3318      	adds	r3, #24
 8000cea:	011b      	lsls	r3, r3, #4
 8000cec:	440b      	add	r3, r1
 8000cee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6819      	ldr	r1, [r3, #0]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3318      	adds	r3, #24
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	440b      	add	r3, r1
 8000d00:	3304      	adds	r3, #4
 8000d02:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	7d1b      	ldrb	r3, [r3, #20]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d111      	bne.n	8000d30 <HAL_CAN_AddTxMessage+0xf0>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6819      	ldr	r1, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3318      	adds	r3, #24
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	4413      	add	r3, r2
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3318      	adds	r3, #24
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	440b      	add	r3, r1
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6819      	ldr	r1, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3307      	adds	r3, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	061a      	lsls	r2, r3, #24
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3306      	adds	r3, #6
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	041b      	lsls	r3, r3, #16
 8000d44:	431a      	orrs	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3305      	adds	r3, #5
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	3204      	adds	r2, #4
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	431a      	orrs	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	440b      	add	r3, r1
 8000d5e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d62:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6819      	ldr	r1, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3303      	adds	r3, #3
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	061a      	lsls	r2, r3, #24
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3302      	adds	r3, #2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	041b      	lsls	r3, r3, #16
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	4313      	orrs	r3, r2
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	7812      	ldrb	r2, [r2, #0]
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	440b      	add	r3, r1
 8000d90:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6819      	ldr	r1, [r3, #0]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3318      	adds	r3, #24
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	4413      	add	r3, r2
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f043 0201 	orr.w	r2, r3, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3318      	adds	r3, #24
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	440b      	add	r3, r1
 8000db4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e00e      	b.n	8000dd8 <HAL_CAN_AddTxMessage+0x198>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e006      	b.n	8000dd8 <HAL_CAN_AddTxMessage+0x198>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
  }
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	371c      	adds	r7, #28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d005      	beq.n	8000e06 <HAL_CAN_AbortTxRequest+0x22>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e00:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d128      	bne.n	8000e58 <HAL_CAN_AbortTxRequest+0x74>
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != RESET)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d007      	beq.n	8000e20 <HAL_CAN_AbortTxRequest+0x3c>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	6812      	ldr	r2, [r2, #0]
 8000e18:	6892      	ldr	r2, [r2, #8]
 8000e1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e1e:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != RESET)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d007      	beq.n	8000e3a <HAL_CAN_AbortTxRequest+0x56>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	6892      	ldr	r2, [r2, #8]
 8000e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e38:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != RESET)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d007      	beq.n	8000e54 <HAL_CAN_AbortTxRequest+0x70>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	6892      	ldr	r2, [r2, #8]
 8000e4e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e52:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	e006      	b.n	8000e66 <HAL_CAN_AbortTxRequest+0x82>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
  }
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b085      	sub	sp, #20
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d005      	beq.n	8000e96 <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e90:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d11d      	bne.n	8000ed2 <HAL_CAN_GetTxMailboxesFreeLevel+0x60>
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <HAL_CAN_GetTxMailboxesFreeLevel+0x38>
    {
      freelevel++;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <HAL_CAN_GetTxMailboxesFreeLevel+0x4c>
    {
      freelevel++;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d002      	beq.n	8000ed2 <HAL_CAN_GetTxMailboxesFreeLevel+0x60>
    {
      freelevel++;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d005      	beq.n	8000f06 <HAL_CAN_IsTxMessagePending+0x26>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f00:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d10b      	bne.n	8000f1e <HAL_CAN_IsTxMessagePending+0x3e>
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	069b      	lsls	r3, r3, #26
 8000f10:	401a      	ands	r2, r3
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	069b      	lsls	r3, r3, #26
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d001      	beq.n	8000f1e <HAL_CAN_IsTxMessagePending+0x3e>
    {
      status = 1U;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_CAN_GetTxTimestamp>:
  *         read.
  *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
  * @retval Timestamp of message sent from Tx Mailbox.
  */
uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t timestamp = 0U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  uint32_t transmitmailbox;

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX(TxMailbox));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d005      	beq.n	8000f52 <HAL_CAN_GetTxTimestamp+0x26>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f4c:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d114      	bne.n	8000f7c <HAL_CAN_GetTxTimestamp+0x50>
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Select the Tx mailbox */
    transmitmailbox = POSITION_VAL(TxMailbox);
 8000f60:	fab3 f383 	clz	r3, r3
 8000f64:	613b      	str	r3, [r7, #16]

    /* Get timestamp */
    timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TIME_Pos;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	3318      	adds	r3, #24
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	4413      	add	r3, r2
 8000f72:	3304      	adds	r3, #4
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  }

  /* Return the timestamp */
  return timestamp;
 8000f7c:	697b      	ldr	r3, [r7, #20]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	603b      	str	r3, [r7, #0]
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d006      	beq.n	8000fb2 <HAL_CAN_GetRxMessage+0x28>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000faa:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	f040 80fa 	bne.w	80011a6 <HAL_CAN_GetRxMessage+0x21c>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10e      	bne.n	8000fd6 <HAL_CAN_GetRxMessage+0x4c>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d119      	bne.n	8000ffa <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e0ee      	b.n	80011b4 <HAL_CAN_GetRxMessage+0x22a>
      }
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10e      	bne.n	8000ffa <HAL_CAN_GetRxMessage+0x70>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d107      	bne.n	8000ffa <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e0dc      	b.n	80011b4 <HAL_CAN_GetRxMessage+0x22a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	331b      	adds	r3, #27
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	4413      	add	r3, r2
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0204 	and.w	r2, r3, #4
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10c      	bne.n	8001032 <HAL_CAN_GetRxMessage+0xa8>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	331b      	adds	r3, #27
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	0d5b      	lsrs	r3, r3, #21
 8001028:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	e00b      	b.n	800104a <HAL_CAN_GetRxMessage+0xc0>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	331b      	adds	r3, #27
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	4413      	add	r3, r2
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	08db      	lsrs	r3, r3, #3
 8001042:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	331b      	adds	r3, #27
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	085b      	lsrs	r3, r3, #1
 800105a:	f003 0201 	and.w	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	331b      	adds	r3, #27
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	4413      	add	r3, r2
 800106e:	3304      	adds	r3, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 020f 	and.w	r2, r3, #15
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	331b      	adds	r3, #27
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	4413      	add	r3, r2
 8001086:	3304      	adds	r3, #4
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b2da      	uxtb	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	331b      	adds	r3, #27
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	4413      	add	r3, r2
 800109e:	3304      	adds	r3, #4
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	0c1b      	lsrs	r3, r3, #16
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	4413      	add	r3, r2
 80010b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	701a      	strb	r2, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	6811      	ldr	r1, [r2, #0]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	440a      	add	r2, r1
 80010ce:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	0a12      	lsrs	r2, r2, #8
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3302      	adds	r3, #2
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	6811      	ldr	r1, [r2, #0]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	440a      	add	r2, r1
 80010e8:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	0c12      	lsrs	r2, r2, #16
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3303      	adds	r3, #3
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	6811      	ldr	r1, [r2, #0]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	440a      	add	r2, r1
 8001102:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	0e12      	lsrs	r2, r2, #24
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	701a      	strb	r2, [r3, #0]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3304      	adds	r3, #4
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	6811      	ldr	r1, [r2, #0]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	440a      	add	r2, r1
 800111c:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3305      	adds	r3, #5
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	6811      	ldr	r1, [r2, #0]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	440a      	add	r2, r1
 8001134:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8001138:	6812      	ldr	r2, [r2, #0]
 800113a:	0a12      	lsrs	r2, r2, #8
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	701a      	strb	r2, [r3, #0]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3306      	adds	r3, #6
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	6811      	ldr	r1, [r2, #0]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	440a      	add	r2, r1
 800114e:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8001152:	6812      	ldr	r2, [r2, #0]
 8001154:	0c12      	lsrs	r2, r2, #16
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	701a      	strb	r2, [r3, #0]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	3307      	adds	r3, #7
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	6811      	ldr	r1, [r2, #0]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	440a      	add	r2, r1
 8001168:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	0e12      	lsrs	r2, r2, #24
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d108      	bne.n	800118c <HAL_CAN_GetRxMessage+0x202>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	68d2      	ldr	r2, [r2, #12]
 8001184:	f042 0220 	orr.w	r2, r2, #32
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	e00a      	b.n	80011a2 <HAL_CAN_GetRxMessage+0x218>
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d107      	bne.n	80011a2 <HAL_CAN_GetRxMessage+0x218>
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	6912      	ldr	r2, [r2, #16]
 800119c:	f042 0220 	orr.w	r2, r2, #32
 80011a0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e006      	b.n	80011b4 <HAL_CAN_GetRxMessage+0x22a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
  }
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d005      	beq.n	80011e6 <HAL_CAN_GetRxFifoFillLevel+0x26>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e0:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d10f      	bne.n	8001206 <HAL_CAN_GetRxFifoFillLevel+0x46>
  {
    if (RxFifo == CAN_RX_FIFO0)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d106      	bne.n	80011fa <HAL_CAN_GetRxFifoFillLevel+0x3a>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	e005      	b.n	8001206 <HAL_CAN_GetRxFifoFillLevel+0x46>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d005      	beq.n	8001236 <HAL_CAN_ActivateNotification+0x22>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001230:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001232:	2b02      	cmp	r3, #2
 8001234:	d109      	bne.n	800124a <HAL_CAN_ActivateNotification+0x36>
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	6951      	ldr	r1, [r2, #20]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e006      	b.n	8001258 <HAL_CAN_ActivateNotification+0x44>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
  }
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d005      	beq.n	8001286 <HAL_CAN_DeactivateNotification+0x22>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001280:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001282:	2b02      	cmp	r3, #2
 8001284:	d10a      	bne.n	800129c <HAL_CAN_DeactivateNotification+0x38>
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	6951      	ldr	r1, [r2, #20]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	43d2      	mvns	r2, r2
 8001294:	400a      	ands	r2, r1
 8001296:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	e006      	b.n	80012aa <HAL_CAN_DeactivateNotification+0x46>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
  }
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b08a      	sub	sp, #40	; 0x28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d07c      	beq.n	80013f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != RESET)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d023      	beq.n	800134e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2201      	movs	r2, #1
 800130c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f97d 	bl	8001618 <HAL_CAN_TxMailbox0CompleteCallback>
 800131e:	e016      	b.n	800134e <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != RESET)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
 8001332:	e00c      	b.n	800134e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != RESET)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d004      	beq.n	8001348 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
 8001346:	e002      	b.n	800134e <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f983 	bl	8001654 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != RESET)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001354:	2b00      	cmp	r3, #0
 8001356:	d024      	beq.n	80013a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001360:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f95d 	bl	800162c <HAL_CAN_TxMailbox1CompleteCallback>
 8001372:	e016      	b.n	80013a2 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != RESET)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
 8001386:	e00c      	b.n	80013a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != RESET)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800138e:	2b00      	cmp	r3, #0
 8001390:	d004      	beq.n	800139c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
 800139a:	e002      	b.n	80013a2 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f963 	bl	8001668 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != RESET)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d024      	beq.n	80013f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f93d 	bl	8001640 <HAL_CAN_TxMailbox2CompleteCallback>
 80013c6:	e016      	b.n	80013f6 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != RESET)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d004      	beq.n	80013dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
 80013da:	e00c      	b.n	80013f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != RESET)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d004      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	e002      	b.n	80013f6 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f943 	bl	800167c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00c      	beq.n	800141a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001410:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2210      	movs	r2, #16
 8001418:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00b      	beq.n	800143c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2208      	movs	r2, #8
 8001434:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f934 	bl	80016a4 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f91b 	bl	8001690 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00c      	beq.n	800147e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001474:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2210      	movs	r2, #16
 800147c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	f003 0320 	and.w	r3, r3, #32
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00b      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2208      	movs	r2, #8
 8001498:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f916 	bl	80016cc <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d009      	beq.n	80014be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f8fd 	bl	80016b8 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00b      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != RESET)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d006      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2210      	movs	r2, #16
 80014d8:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f900 	bl	80016e0 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != RESET)
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != RESET)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2208      	movs	r2, #8
 80014fa:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f8f9 	bl	80016f4 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != RESET)
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d075      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != RESET)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	2b00      	cmp	r3, #0
 8001514:	d06c      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != RESET))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != RESET))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != RESET))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001570:	2b00      	cmp	r3, #0
 8001572:	d03d      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != RESET))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 800157a:	2b00      	cmp	r3, #0
 800157c:	d038      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001584:	2b30      	cmp	r3, #48	; 0x30
 8001586:	d017      	beq.n	80015b8 <HAL_CAN_IRQHandler+0x302>
 8001588:	2b30      	cmp	r3, #48	; 0x30
 800158a:	d804      	bhi.n	8001596 <HAL_CAN_IRQHandler+0x2e0>
 800158c:	2b10      	cmp	r3, #16
 800158e:	d009      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x2ee>
 8001590:	2b20      	cmp	r3, #32
 8001592:	d00c      	beq.n	80015ae <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001594:	e024      	b.n	80015e0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001596:	2b50      	cmp	r3, #80	; 0x50
 8001598:	d018      	beq.n	80015cc <HAL_CAN_IRQHandler+0x316>
 800159a:	2b60      	cmp	r3, #96	; 0x60
 800159c:	d01b      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x320>
 800159e:	2b40      	cmp	r3, #64	; 0x40
 80015a0:	d00f      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x30c>
            break;
 80015a2:	e01d      	b.n	80015e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ac:	e018      	b.n	80015e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015b6:	e013      	b.n	80015e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	f043 0320 	orr.w	r3, r3, #32
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015c0:	e00e      	b.n	80015e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ca:	e009      	b.n	80015e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015d4:	e004      	b.n	80015e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	6992      	ldr	r2, [r2, #24]
 80015ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2204      	movs	r2, #4
 80015f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f87c 	bl	8001708 <HAL_CAN_ErrorCallback>
  }
}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172a:	73fb      	strb	r3, [r7, #15]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d005      	beq.n	8001744 <HAL_CAN_GetState+0x28>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173e:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001740:	2b02      	cmp	r3, #2
 8001742:	d112      	bne.n	800176a <HAL_CAN_GetState+0x4e>
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_CAN_GetState+0x3c>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8001752:	2304      	movs	r3, #4
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	e008      	b.n	800176a <HAL_CAN_GetState+0x4e>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_CAN_GetState+0x4e>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8001766:	2303      	movs	r3, #3
 8001768:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Return CAN state */
  return state;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d005      	beq.n	80017b4 <HAL_CAN_ResetError+0x24>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ae:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d103      	bne.n	80017bc <HAL_CAN_ResetError+0x2c>
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
 80017ba:	e007      	b.n	80017cc <HAL_CAN_ResetError+0x3c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop

080017dc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	; (8001820 <NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800184a:	4909      	ldr	r1, [pc, #36]	; (8001870 <NVIC_EnableIRQ+0x30>)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	095b      	lsrs	r3, r3, #5
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	f002 021f 	and.w	r2, r2, #31
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800187e:	4909      	ldr	r1, [pc, #36]	; (80018a4 <NVIC_DisableIRQ+0x30>)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	095b      	lsrs	r3, r3, #5
 8001886:	79fa      	ldrb	r2, [r7, #7]
 8001888:	f002 021f 	and.w	r2, r2, #31
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	3320      	adds	r3, #32
 8001894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <NVIC_GetPendingIRQ>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <NVIC_GetPendingIRQ+0x34>)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	095b      	lsrs	r3, r3, #5
 80018ba:	3340      	adds	r3, #64	; 0x40
 80018bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	f003 0301 	and.w	r3, r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80018ea:	4909      	ldr	r1, [pc, #36]	; (8001910 <NVIC_SetPendingIRQ+0x30>)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	095b      	lsrs	r3, r3, #5
 80018f2:	79fa      	ldrb	r2, [r7, #7]
 80018f4:	f002 021f 	and.w	r2, r2, #31
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	3340      	adds	r3, #64	; 0x40
 8001900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100

08001914 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800191e:	4909      	ldr	r1, [pc, #36]	; (8001944 <NVIC_ClearPendingIRQ+0x30>)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	095b      	lsrs	r3, r3, #5
 8001926:	79fa      	ldrb	r2, [r7, #7]
 8001928:	f002 021f 	and.w	r2, r2, #31
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	3360      	adds	r3, #96	; 0x60
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100

08001948 <NVIC_GetActive>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
 */
__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <NVIC_GetActive+0x34>)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	095b      	lsrs	r3, r3, #5
 800195a:	3380      	adds	r3, #128	; 0x80
 800195c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	fa22 f303 	lsr.w	r3, r2, r3
 800196a:	f003 0301 	and.w	r3, r3, #1
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	da0b      	bge.n	80019ac <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	490d      	ldr	r1, [pc, #52]	; (80019cc <NVIC_SetPriority+0x4c>)
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	3b04      	subs	r3, #4
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019aa:	e009      	b.n	80019c0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	4908      	ldr	r1, [pc, #32]	; (80019d0 <NVIC_SetPriority+0x50>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) < 0)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da0a      	bge.n	80019fc <NVIC_GetPriority+0x28>
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 80019e6:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <NVIC_GetPriority+0x48>)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	3b04      	subs	r3, #4
 80019f0:	4413      	add	r3, r2
 80019f2:	7e1b      	ldrb	r3, [r3, #24]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	e008      	b.n	8001a0e <NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 80019fc:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <NVIC_GetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	4413      	add	r3, r2
 8001a04:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	b2db      	uxtb	r3, r3
  }
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f1c3 0307 	rsb	r3, r3, #7
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf28      	it	cs
 8001a42:	2304      	movcs	r3, #4
 8001a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d902      	bls.n	8001a54 <NVIC_EncodePriority+0x30>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b03      	subs	r3, #3
 8001a52:	e000      	b.n	8001a56 <NVIC_EncodePriority+0x32>
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	1e5a      	subs	r2, r3, #1
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	401a      	ands	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	1e59      	subs	r1, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b089      	sub	sp, #36	; 0x24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f1c3 0307 	rsb	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	bf28      	it	cs
 8001aa6:	2304      	movcs	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3304      	adds	r3, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d902      	bls.n	8001ab8 <NVIC_DecodePriority+0x32>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3b03      	subs	r3, #3
 8001ab6:	e000      	b.n	8001aba <NVIC_DecodePriority+0x34>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	40da      	lsrs	r2, r3
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	401a      	ands	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	1e5a      	subs	r2, r3, #1
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	401a      	ands	r2, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	601a      	str	r2, [r3, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	3724      	adds	r7, #36	; 0x24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001af4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001af8:	4905      	ldr	r1, [pc, #20]	; (8001b10 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <NVIC_SystemReset+0x20>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <NVIC_SystemReset+0x24>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
 8001b08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8001b0c:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b0e:	e7fd      	b.n	8001b0c <NVIC_SystemReset+0x1c>
 8001b10:	e000ed00 	.word	0xe000ed00
 8001b14:	05fa0004 	.word	0x05fa0004

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff20 	bl	8001980 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fe39 	bl	80017dc <NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff fe4e 	bl	8001824 <NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff48 	bl	8001a24 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff feef 	bl	8001980 <NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe41 	bl	8001840 <NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fe4d 	bl	8001874 <NVIC_DisableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001be6:	f7ff ff83 	bl	8001af0 <NVIC_SystemReset>
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ff8e 	bl	8001b18 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001c0a:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c0e:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_MPU_Disable+0x26>)
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_MPU_Disable+0x26>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c18:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_MPU_Disable+0x2a>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00
 8001c30:	e000ed90 	.word	0xe000ed90

08001c34 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_MPU_Enable+0x34>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_MPU_Enable+0x38>)
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_MPU_Enable+0x38>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c56:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed90 	.word	0xe000ed90
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c78:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <HAL_MPU_ConfigRegion+0x84>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	785b      	ldrb	r3, [r3, #1]
 8001c7e:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d028      	beq.n	8001cda <HAL_MPU_ConfigRegion+0x6a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001c88:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <HAL_MPU_ConfigRegion+0x84>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c90:	4918      	ldr	r1, [pc, #96]	; (8001cf4 <HAL_MPU_ConfigRegion+0x84>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7b1b      	ldrb	r3, [r3, #12]
 8001c96:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7adb      	ldrb	r3, [r3, #11]
 8001c9c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c9e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7a9b      	ldrb	r3, [r3, #10]
 8001ca4:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ca6:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7b5b      	ldrb	r3, [r3, #13]
 8001cac:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cae:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7b9b      	ldrb	r3, [r3, #14]
 8001cb4:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cb6:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7bdb      	ldrb	r3, [r3, #15]
 8001cbc:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cbe:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7a5b      	ldrb	r3, [r3, #9]
 8001cc4:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cc6:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7a1b      	ldrb	r3, [r3, #8]
 8001ccc:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cce:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cd4:	4313      	orrs	r3, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cd6:	610b      	str	r3, [r1, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 8001cd8:	e005      	b.n	8001ce6 <HAL_MPU_ConfigRegion+0x76>
    MPU->RBAR = 0x00U;
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_MPU_ConfigRegion+0x84>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_MPU_ConfigRegion+0x84>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed90 	.word	0xe000ed90

08001cf8 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8001cfc:	f7ff fd92 	bl	8001824 <NVIC_GetPriorityGrouping>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4603      	mov	r3, r0
 8001d14:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fe5a 	bl	80019d4 <NVIC_GetPriority>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	f7ff feae 	bl	8001a86 <NVIC_DecodePriority>
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fdcd 	bl	80018e0 <NVIC_SetPendingIRQ>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fda3 	bl	80018a8 <NVIC_GetPendingIRQ>
 8001d62:	4603      	mov	r3, r0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fdca 	bl	8001914 <NVIC_ClearPendingIRQ>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fdd6 	bl	8001948 <NVIC_GetActive>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d106      	bne.n	8001dc2 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001db4:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001dc0:	e005      	b.n	8001dce <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001dc2:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6013      	str	r3, [r2, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001de4:	f000 f802 	bl	8001dec <HAL_SYSTICK_Callback>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop

08001dfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7fe fa90 	bl	800032c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e099      	b.n	8001f4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e38:	e00f      	b.n	8001e5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e3a:	f7fe fa77 	bl	800032c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d908      	bls.n	8001e5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2203      	movs	r2, #3
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e078      	b.n	8001f4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e8      	bne.n	8001e3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <HAL_DMA_Init+0x158>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d107      	bne.n	8001ec4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f023 0307 	bic.w	r3, r3, #7
 8001eda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d117      	bne.n	8001f1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00e      	beq.n	8001f1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fd45 	bl	8002990 <DMA_CheckFifoParam>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2240      	movs	r2, #64	; 0x40
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e016      	b.n	8001f4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fcfc 	bl	8002924 <DMA_CalcBaseAndBitshift>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	223f      	movs	r2, #63	; 0x3f
 8001f36:	409a      	lsls	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	f010803f 	.word	0xf010803f

08001f58 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e03e      	b.n	8001fe8 <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d101      	bne.n	8001f7a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001f76:	2302      	movs	r3, #2
 8001f78:	e036      	b.n	8001fe8 <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2200      	movs	r2, #0
 8001f98:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2221      	movs	r2, #33	; 0x21
 8001fb8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fcb2 	bl	8002924 <DMA_CalcBaseAndBitshift>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	223f      	movs	r2, #63	; 0x3f
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_DMA_Start+0x20>
 800200c:	2302      	movs	r3, #2
 800200e:	e026      	b.n	800205e <HAL_DMA_Start+0x6e>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d115      	bne.n	8002050 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fc45 	bl	80028c8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e005      	b.n	800205c <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002058:	2302      	movs	r3, #2
 800205a:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 800205c:	7dfb      	ldrb	r3, [r7, #23]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_DMA_Start_IT+0x26>
 8002088:	2302      	movs	r3, #2
 800208a:	e048      	b.n	800211e <HAL_DMA_Start_IT+0xb8>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d137      	bne.n	8002110 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fc07 	bl	80028c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	223f      	movs	r2, #63	; 0x3f
 80020c0:	409a      	lsls	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	f042 0216 	orr.w	r2, r2, #22
 80020d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	6952      	ldr	r2, [r2, #20]
 80020e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020e4:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	f042 0208 	orr.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e005      	b.n	800211c <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002118:	2302      	movs	r3, #2
 800211a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800211c:	7dfb      	ldrb	r3, [r7, #23]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7fe f8fa 	bl	800032c <HAL_GetTick>
 8002138:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d008      	beq.n	8002158 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e052      	b.n	80021fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	f022 0216 	bic.w	r2, r2, #22
 8002166:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	6952      	ldr	r2, [r2, #20]
 8002172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002176:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d103      	bne.n	8002188 <HAL_DMA_Abort+0x62>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	f022 0208 	bic.w	r2, r2, #8
 8002196:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a8:	e013      	b.n	80021d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021aa:	f7fe f8bf 	bl	800032c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d90c      	bls.n	80021d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2220      	movs	r2, #32
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2203      	movs	r2, #3
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e015      	b.n	80021fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1e4      	bne.n	80021aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	223f      	movs	r2, #63	; 0x3f
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d004      	beq.n	8002224 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e00c      	b.n	800223e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2205      	movs	r2, #5
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b08a      	sub	sp, #40	; 0x28
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	460b      	mov	r3, r1
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8002258:	2300      	movs	r3, #0
 800225a:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 800225c:	f7fe f866 	bl	800032c <HAL_GetTick>
 8002260:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d008      	beq.n	8002280 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0bf      	b.n	8002400 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0b2      	b.n	8002400 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d106      	bne.n	80022ae <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	2220      	movs	r2, #32
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
 80022ac:	e005      	b.n	80022ba <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b2:	2210      	movs	r2, #16
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80022c6:	e05a      	b.n	800237e <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ce:	d017      	beq.n	8002300 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <HAL_DMA_PollForTransfer+0x9c>
 80022d6:	f7fe f829 	bl	800032c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d90c      	bls.n	8002300 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2220      	movs	r2, #32
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e07f      	b.n	8002400 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	2208      	movs	r2, #8
 800230c:	409a      	lsls	r2, r3
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2208      	movs	r2, #8
 8002328:	409a      	lsls	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	2201      	movs	r2, #1
 8002334:	409a      	lsls	r2, r3
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f043 0202 	orr.w	r2, r3, #2
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	2201      	movs	r2, #1
 8002350:	409a      	lsls	r2, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	2204      	movs	r2, #4
 800235c:	409a      	lsls	r2, r3
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	f043 0204 	orr.w	r2, r3, #4
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	2204      	movs	r2, #4
 8002378:	409a      	lsls	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800237e:	6a3a      	ldr	r2, [r7, #32]
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <HAL_DMA_PollForTransfer+0x14a>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d099      	beq.n	80022c8 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002398:	2b00      	cmp	r3, #0
 800239a:	d018      	beq.n	80023ce <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d012      	beq.n	80023ce <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff febc 	bl	8002126 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b2:	2230      	movs	r2, #48	; 0x30
 80023b4:	409a      	lsls	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e018      	b.n	8002400 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10e      	bne.n	80023f2 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	2230      	movs	r2, #48	; 0x30
 80023da:	409a      	lsls	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80023f0:	e005      	b.n	80023fe <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	2210      	movs	r2, #16
 80023f8:	409a      	lsls	r2, r3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 80023fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3728      	adds	r7, #40	; 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002414:	4b92      	ldr	r3, [pc, #584]	; (8002660 <HAL_DMA_IRQHandler+0x258>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a92      	ldr	r2, [pc, #584]	; (8002664 <HAL_DMA_IRQHandler+0x25c>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	2208      	movs	r2, #8
 8002434:	409a      	lsls	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01a      	beq.n	8002474 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d013      	beq.n	8002474 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	f022 0204 	bic.w	r2, r2, #4
 800245a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002460:	2208      	movs	r2, #8
 8002462:	409a      	lsls	r2, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	2201      	movs	r2, #1
 800247a:	409a      	lsls	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d012      	beq.n	80024aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	2201      	movs	r2, #1
 8002498:	409a      	lsls	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	f043 0202 	orr.w	r2, r3, #2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	2204      	movs	r2, #4
 80024b0:	409a      	lsls	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d012      	beq.n	80024e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00b      	beq.n	80024e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	2204      	movs	r2, #4
 80024ce:	409a      	lsls	r2, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	f043 0204 	orr.w	r2, r3, #4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	2210      	movs	r2, #16
 80024e6:	409a      	lsls	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d043      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d03c      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002502:	2210      	movs	r2, #16
 8002504:	409a      	lsls	r2, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d018      	beq.n	800254a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d108      	bne.n	8002538 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d024      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
 8002536:	e01f      	b.n	8002578 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01b      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
 8002548:	e016      	b.n	8002578 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d107      	bne.n	8002568 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	f022 0208 	bic.w	r2, r2, #8
 8002566:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	2220      	movs	r2, #32
 800257e:	409a      	lsls	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 808e 	beq.w	80026a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8086 	beq.w	80026a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	2220      	movs	r2, #32
 80025a0:	409a      	lsls	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d136      	bne.n	8002620 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	f022 0216 	bic.w	r2, r2, #22
 80025c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	6952      	ldr	r2, [r2, #20]
 80025cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <HAL_DMA_IRQHandler+0x1da>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	f022 0208 	bic.w	r2, r2, #8
 80025f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	223f      	movs	r2, #63	; 0x3f
 80025f8:	409a      	lsls	r2, r3
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002612:	2b00      	cmp	r3, #0
 8002614:	d07d      	beq.n	8002712 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	4798      	blx	r3
        }
        return;
 800261e:	e078      	b.n	8002712 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01c      	beq.n	8002668 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d108      	bne.n	800264e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	2b00      	cmp	r3, #0
 8002642:	d030      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4798      	blx	r3
 800264c:	e02b      	b.n	80026a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d027      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
 800265e:	e022      	b.n	80026a6 <HAL_DMA_IRQHandler+0x29e>
 8002660:	20000008 	.word	0x20000008
 8002664:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	f022 0210 	bic.w	r2, r2, #16
 8002684:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d032      	beq.n	8002714 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d022      	beq.n	8002700 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2205      	movs	r2, #5
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3301      	adds	r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4293      	cmp	r3, r2
 80026dc:	d807      	bhi.n	80026ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f2      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x2ca>
 80026ec:	e000      	b.n	80026f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
 8002710:	e000      	b.n	8002714 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002712:	bf00      	nop
    }
  }
}
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800271a:	b480      	push	{r7}
 800271c:	b087      	sub	sp, #28
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	460b      	mov	r3, r1
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_DMA_RegisterCallback+0x20>
 8002736:	2302      	movs	r3, #2
 8002738:	e03d      	b.n	80027b6 <HAL_DMA_RegisterCallback+0x9c>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d12a      	bne.n	80027a4 <HAL_DMA_RegisterCallback+0x8a>
  {
    switch (CallbackID)
 800274e:	7afb      	ldrb	r3, [r7, #11]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d82a      	bhi.n	80027aa <HAL_DMA_RegisterCallback+0x90>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <HAL_DMA_RegisterCallback+0x42>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	08002775 	.word	0x08002775
 8002760:	0800277d 	.word	0x0800277d
 8002764:	08002785 	.word	0x08002785
 8002768:	0800278d 	.word	0x0800278d
 800276c:	08002795 	.word	0x08002795
 8002770:	0800279d 	.word	0x0800279d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800277a:	e017      	b.n	80027ac <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002782:	e013      	b.n	80027ac <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800278a:	e00f      	b.n	80027ac <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002792:	e00b      	b.n	80027ac <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800279a:	e007      	b.n	80027ac <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80027a2:	e003      	b.n	80027ac <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	75fb      	strb	r3, [r7, #23]
 80027a8:	e000      	b.n	80027ac <HAL_DMA_RegisterCallback+0x92>
      break;
 80027aa:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_DMA_UnRegisterCallback+0x1e>
 80027dc:	2302      	movs	r3, #2
 80027de:	e053      	b.n	8002888 <HAL_DMA_UnRegisterCallback+0xc6>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d142      	bne.n	800287a <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d83b      	bhi.n	8002872 <HAL_DMA_UnRegisterCallback+0xb0>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <HAL_DMA_UnRegisterCallback+0x3e>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	0800281d 	.word	0x0800281d
 8002804:	08002825 	.word	0x08002825
 8002808:	0800282d 	.word	0x0800282d
 800280c:	08002835 	.word	0x08002835
 8002810:	0800283d 	.word	0x0800283d
 8002814:	08002845 	.word	0x08002845
 8002818:	0800284d 	.word	0x0800284d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002822:	e02c      	b.n	800287e <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800282a:	e028      	b.n	800287e <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002832:	e024      	b.n	800287e <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800283a:	e020      	b.n	800287e <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002842:	e01c      	b.n	800287e <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 800284a:	e018      	b.n	800287e <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8002870:	e005      	b.n	800287e <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
      break;
 8002876:	bf00      	nop
 8002878:	e001      	b.n	800287e <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a2:	b2db      	uxtb	r3, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b40      	cmp	r3, #64	; 0x40
 80028f4:	d108      	bne.n	8002908 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002906:	e007      	b.n	8002918 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	3b10      	subs	r3, #16
 8002934:	4a14      	ldr	r2, [pc, #80]	; (8002988 <DMA_CalcBaseAndBitshift+0x64>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800293e:	4a13      	ldr	r2, [pc, #76]	; (800298c <DMA_CalcBaseAndBitshift+0x68>)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d909      	bls.n	8002966 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	1d1a      	adds	r2, r3, #4
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	659a      	str	r2, [r3, #88]	; 0x58
 8002964:	e007      	b.n	8002976 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	aaaaaaab 	.word	0xaaaaaaab
 800298c:	0800e1d8 	.word	0x0800e1d8

08002990 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11f      	bne.n	80029ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d855      	bhi.n	8002a5c <DMA_CheckFifoParam+0xcc>
 80029b0:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <DMA_CheckFifoParam+0x28>)
 80029b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b6:	bf00      	nop
 80029b8:	080029c9 	.word	0x080029c9
 80029bc:	080029db 	.word	0x080029db
 80029c0:	080029c9 	.word	0x080029c9
 80029c4:	08002a5d 	.word	0x08002a5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d045      	beq.n	8002a60 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d8:	e042      	b.n	8002a60 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029e2:	d13f      	bne.n	8002a64 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e03c      	b.n	8002a64 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f2:	d121      	bne.n	8002a38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d836      	bhi.n	8002a68 <DMA_CheckFifoParam+0xd8>
 80029fa:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <DMA_CheckFifoParam+0x70>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a17 	.word	0x08002a17
 8002a08:	08002a11 	.word	0x08002a11
 8002a0c:	08002a29 	.word	0x08002a29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e02f      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d024      	beq.n	8002a6c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a26:	e021      	b.n	8002a6c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a30:	d11e      	bne.n	8002a70 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a36:	e01b      	b.n	8002a70 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d902      	bls.n	8002a44 <DMA_CheckFifoParam+0xb4>
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d003      	beq.n	8002a4a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a42:	e018      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      break;
 8002a48:	e015      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00e      	beq.n	8002a74 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5a:	e00b      	b.n	8002a74 <DMA_CheckFifoParam+0xe4>
      break;
 8002a5c:	bf00      	nop
 8002a5e:	e00a      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a60:	bf00      	nop
 8002a62:	e008      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a64:	bf00      	nop
 8002a66:	e006      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a68:	bf00      	nop
 8002a6a:	e004      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a6c:	bf00      	nop
 8002a6e:	e002      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;   
 8002a70:	bf00      	nop
 8002a72:	e000      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a74:	bf00      	nop
    }
  } 
  
  return status; 
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e177      	b.n	8002d90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	f040 8166 	bne.w	8002d8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x4a>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b12      	cmp	r3, #18
 8002acc:	d123      	bne.n	8002b16 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	08da      	lsrs	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3208      	adds	r2, #8
 8002ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	08da      	lsrs	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3208      	adds	r2, #8
 8002b10:	69b9      	ldr	r1, [r7, #24]
 8002b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	2203      	movs	r2, #3
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0203 	and.w	r2, r3, #3
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d00b      	beq.n	8002b6a <HAL_GPIO_Init+0xe6>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d007      	beq.n	8002b6a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b5e:	2b11      	cmp	r3, #17
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b12      	cmp	r3, #18
 8002b68:	d130      	bne.n	8002bcc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 0201 	and.w	r2, r3, #1
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80c0 	beq.w	8002d8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4a65      	ldr	r2, [pc, #404]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002c10:	4b64      	ldr	r3, [pc, #400]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b62      	ldr	r3, [pc, #392]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c26:	4a60      	ldr	r2, [pc, #384]	; (8002da8 <HAL_GPIO_Init+0x324>)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a57      	ldr	r2, [pc, #348]	; (8002dac <HAL_GPIO_Init+0x328>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d037      	beq.n	8002cc2 <HAL_GPIO_Init+0x23e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a56      	ldr	r2, [pc, #344]	; (8002db0 <HAL_GPIO_Init+0x32c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d031      	beq.n	8002cbe <HAL_GPIO_Init+0x23a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a55      	ldr	r2, [pc, #340]	; (8002db4 <HAL_GPIO_Init+0x330>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02b      	beq.n	8002cba <HAL_GPIO_Init+0x236>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a54      	ldr	r2, [pc, #336]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d025      	beq.n	8002cb6 <HAL_GPIO_Init+0x232>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a53      	ldr	r2, [pc, #332]	; (8002dbc <HAL_GPIO_Init+0x338>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01f      	beq.n	8002cb2 <HAL_GPIO_Init+0x22e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a52      	ldr	r2, [pc, #328]	; (8002dc0 <HAL_GPIO_Init+0x33c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d019      	beq.n	8002cae <HAL_GPIO_Init+0x22a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a51      	ldr	r2, [pc, #324]	; (8002dc4 <HAL_GPIO_Init+0x340>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <HAL_GPIO_Init+0x226>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <HAL_GPIO_Init+0x344>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00d      	beq.n	8002ca6 <HAL_GPIO_Init+0x222>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4f      	ldr	r2, [pc, #316]	; (8002dcc <HAL_GPIO_Init+0x348>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <HAL_GPIO_Init+0x21e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4e      	ldr	r2, [pc, #312]	; (8002dd0 <HAL_GPIO_Init+0x34c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_GPIO_Init+0x21a>
 8002c9a:	2309      	movs	r3, #9
 8002c9c:	e012      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002c9e:	230a      	movs	r3, #10
 8002ca0:	e010      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	e00e      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002ca6:	2307      	movs	r3, #7
 8002ca8:	e00c      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002caa:	2306      	movs	r3, #6
 8002cac:	e00a      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cae:	2305      	movs	r3, #5
 8002cb0:	e008      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd4:	4934      	ldr	r1, [pc, #208]	; (8002da8 <HAL_GPIO_Init+0x324>)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce2:	4b3c      	ldr	r3, [pc, #240]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d06:	4a33      	ldr	r2, [pc, #204]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d0c:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d30:	4a28      	ldr	r2, [pc, #160]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	f67f ae84 	bls.w	8002aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3724      	adds	r7, #36	; 0x24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40013800 	.word	0x40013800
 8002dac:	40020000 	.word	0x40020000
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40020800 	.word	0x40020800
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40021400 	.word	0x40021400
 8002dc4:	40021800 	.word	0x40021800
 8002dc8:	40021c00 	.word	0x40021c00
 8002dcc:	40022000 	.word	0x40022000
 8002dd0:	40022400 	.word	0x40022400
 8002dd4:	40013c00 	.word	0x40013c00

08002dd8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	e0da      	b.n	8002faa <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df4:	2201      	movs	r2, #1
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	f040 80ca 	bne.w	8002fa4 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	2103      	movs	r1, #3
 8002e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	401a      	ands	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	08da      	lsrs	r2, r3, #3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	08d9      	lsrs	r1, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3108      	adds	r1, #8
 8002e32:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	200f      	movs	r0, #15
 8002e40:	fa00 f303 	lsl.w	r3, r0, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	4019      	ands	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	2103      	movs	r1, #3
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	401a      	ands	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	401a      	ands	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2103      	movs	r1, #3
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e90:	4a4b      	ldr	r2, [pc, #300]	; (8002fc0 <HAL_GPIO_DeInit+0x1e8>)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	220f      	movs	r2, #15
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a43      	ldr	r2, [pc, #268]	; (8002fc4 <HAL_GPIO_DeInit+0x1ec>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d037      	beq.n	8002f2a <HAL_GPIO_DeInit+0x152>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a42      	ldr	r2, [pc, #264]	; (8002fc8 <HAL_GPIO_DeInit+0x1f0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d031      	beq.n	8002f26 <HAL_GPIO_DeInit+0x14e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a41      	ldr	r2, [pc, #260]	; (8002fcc <HAL_GPIO_DeInit+0x1f4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d02b      	beq.n	8002f22 <HAL_GPIO_DeInit+0x14a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a40      	ldr	r2, [pc, #256]	; (8002fd0 <HAL_GPIO_DeInit+0x1f8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d025      	beq.n	8002f1e <HAL_GPIO_DeInit+0x146>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a3f      	ldr	r2, [pc, #252]	; (8002fd4 <HAL_GPIO_DeInit+0x1fc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01f      	beq.n	8002f1a <HAL_GPIO_DeInit+0x142>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a3e      	ldr	r2, [pc, #248]	; (8002fd8 <HAL_GPIO_DeInit+0x200>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d019      	beq.n	8002f16 <HAL_GPIO_DeInit+0x13e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a3d      	ldr	r2, [pc, #244]	; (8002fdc <HAL_GPIO_DeInit+0x204>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_GPIO_DeInit+0x13a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a3c      	ldr	r2, [pc, #240]	; (8002fe0 <HAL_GPIO_DeInit+0x208>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00d      	beq.n	8002f0e <HAL_GPIO_DeInit+0x136>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a3b      	ldr	r2, [pc, #236]	; (8002fe4 <HAL_GPIO_DeInit+0x20c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <HAL_GPIO_DeInit+0x132>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a3a      	ldr	r2, [pc, #232]	; (8002fe8 <HAL_GPIO_DeInit+0x210>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_GPIO_DeInit+0x12e>
 8002f02:	2309      	movs	r3, #9
 8002f04:	e012      	b.n	8002f2c <HAL_GPIO_DeInit+0x154>
 8002f06:	230a      	movs	r3, #10
 8002f08:	e010      	b.n	8002f2c <HAL_GPIO_DeInit+0x154>
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	e00e      	b.n	8002f2c <HAL_GPIO_DeInit+0x154>
 8002f0e:	2307      	movs	r3, #7
 8002f10:	e00c      	b.n	8002f2c <HAL_GPIO_DeInit+0x154>
 8002f12:	2306      	movs	r3, #6
 8002f14:	e00a      	b.n	8002f2c <HAL_GPIO_DeInit+0x154>
 8002f16:	2305      	movs	r3, #5
 8002f18:	e008      	b.n	8002f2c <HAL_GPIO_DeInit+0x154>
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	e006      	b.n	8002f2c <HAL_GPIO_DeInit+0x154>
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e004      	b.n	8002f2c <HAL_GPIO_DeInit+0x154>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e002      	b.n	8002f2c <HAL_GPIO_DeInit+0x154>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_GPIO_DeInit+0x154>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	f002 0203 	and.w	r2, r2, #3
 8002f32:	0092      	lsls	r2, r2, #2
 8002f34:	fa03 f202 	lsl.w	r2, r3, r2
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d132      	bne.n	8002fa4 <HAL_GPIO_DeInit+0x1cc>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	220f      	movs	r2, #15
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002f4e:	481c      	ldr	r0, [pc, #112]	; (8002fc0 <HAL_GPIO_DeInit+0x1e8>)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	491a      	ldr	r1, [pc, #104]	; (8002fc0 <HAL_GPIO_DeInit+0x1e8>)
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	0892      	lsrs	r2, r2, #2
 8002f5a:	3202      	adds	r2, #2
 8002f5c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	43d2      	mvns	r2, r2
 8002f64:	400a      	ands	r2, r1
 8002f66:	3302      	adds	r3, #2
 8002f68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002f6c:	491f      	ldr	r1, [pc, #124]	; (8002fec <HAL_GPIO_DeInit+0x214>)
 8002f6e:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <HAL_GPIO_DeInit+0x214>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	4013      	ands	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002f7a:	491c      	ldr	r1, [pc, #112]	; (8002fec <HAL_GPIO_DeInit+0x214>)
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_GPIO_DeInit+0x214>)
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	4013      	ands	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002f88:	4918      	ldr	r1, [pc, #96]	; (8002fec <HAL_GPIO_DeInit+0x214>)
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <HAL_GPIO_DeInit+0x214>)
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	4013      	ands	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002f96:	4915      	ldr	r1, [pc, #84]	; (8002fec <HAL_GPIO_DeInit+0x214>)
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <HAL_GPIO_DeInit+0x214>)
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	f67f af21 	bls.w	8002df4 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	40020000 	.word	0x40020000
 8002fc8:	40020400 	.word	0x40020400
 8002fcc:	40020800 	.word	0x40020800
 8002fd0:	40020c00 	.word	0x40020c00
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40021400 	.word	0x40021400
 8002fdc:	40021800 	.word	0x40021800
 8002fe0:	40021c00 	.word	0x40021c00
 8002fe4:	40022000 	.word	0x40022000
 8002fe8:	40022400 	.word	0x40022400
 8002fec:	40013c00 	.word	0x40013c00

08002ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	887b      	ldrh	r3, [r7, #2]
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
 800300c:	e001      	b.n	8003012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003012:	7bfb      	ldrb	r3, [r7, #15]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
 800302c:	4613      	mov	r3, r2
 800302e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003030:	787b      	ldrb	r3, [r7, #1]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003036:	887a      	ldrh	r2, [r7, #2]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800303c:	e003      	b.n	8003046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	041a      	lsls	r2, r3, #16
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	619a      	str	r2, [r3, #24]
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	405a      	eors	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	615a      	str	r2, [r3, #20]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003076:	b480      	push	{r7}
 8003078:	b085      	sub	sp, #20
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8003082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003086:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8003088:	887a      	ldrh	r2, [r7, #2]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	60fb      	str	r3, [r7, #12]

 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e000      	b.n	80030ba <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d006      	beq.n	80030ea <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030dc:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f807 	bl	80030f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40013c00 	.word	0x40013c00

080030f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop

08003110 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0c8      	b.n	80032bc <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f00a faa0 	bl	800d684 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2224      	movs	r2, #36	; 0x24
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800315c:	f005 fd38 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 8003160:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4a57      	ldr	r2, [pc, #348]	; (80032c4 <HAL_I2C_Init+0x1b4>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0c9b      	lsrs	r3, r3, #18
 800316c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4952      	ldr	r1, [pc, #328]	; (80032c8 <HAL_I2C_Init+0x1b8>)
 8003180:	428b      	cmp	r3, r1
 8003182:	d802      	bhi.n	800318a <HAL_I2C_Init+0x7a>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3301      	adds	r3, #1
 8003188:	e009      	b.n	800319e <HAL_I2C_Init+0x8e>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	494d      	ldr	r1, [pc, #308]	; (80032cc <HAL_I2C_Init+0x1bc>)
 8003196:	fba1 1303 	umull	r1, r3, r1, r3
 800319a:	099b      	lsrs	r3, r3, #6
 800319c:	3301      	adds	r3, #1
 800319e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4a47      	ldr	r2, [pc, #284]	; (80032c8 <HAL_I2C_Init+0x1b8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d812      	bhi.n	80031d4 <HAL_I2C_Init+0xc4>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d906      	bls.n	80031d0 <HAL_I2C_Init+0xc0>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ce:	e045      	b.n	800325c <HAL_I2C_Init+0x14c>
 80031d0:	2304      	movs	r3, #4
 80031d2:	e043      	b.n	800325c <HAL_I2C_Init+0x14c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10f      	bne.n	80031fc <HAL_I2C_Init+0xec>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e010      	b.n	800321e <HAL_I2C_Init+0x10e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	009a      	lsls	r2, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Init+0x116>
 8003222:	2301      	movs	r3, #1
 8003224:	e01a      	b.n	800325c <HAL_I2C_Init+0x14c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <HAL_I2C_Init+0x134>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4413      	add	r3, r2
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003242:	e00b      	b.n	800325c <HAL_I2C_Init+0x14c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009a      	lsls	r2, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800325c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	69d1      	ldr	r1, [r2, #28]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6a12      	ldr	r2, [r2, #32]
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6911      	ldr	r1, [r2, #16]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68d2      	ldr	r2, [r2, #12]
 800327a:	430a      	orrs	r2, r1
 800327c:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6951      	ldr	r1, [r2, #20]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6992      	ldr	r2, [r2, #24]
 800328a:	430a      	orrs	r2, r1
 800328c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	f042 0201 	orr.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	431bde83 	.word	0x431bde83
 80032c8:	000186a0 	.word	0x000186a0
 80032cc:	10624dd3 	.word	0x10624dd3

080032d0 <HAL_I2C_DeInit>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e021      	b.n	8003326 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2224      	movs	r2, #36	; 0x24
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f00a fa1a 	bl	800d734 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b088      	sub	sp, #32
 800335a:	af02      	add	r7, sp, #8
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	461a      	mov	r2, r3
 8003362:	460b      	mov	r3, r1
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	4613      	mov	r3, r2
 8003368:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800336e:	f7fc ffdd 	bl	800032c <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b20      	cmp	r3, #32
 800337e:	f040 80ee 	bne.w	800355e <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	2319      	movs	r3, #25
 8003388:	2201      	movs	r2, #1
 800338a:	4977      	ldr	r1, [pc, #476]	; (8003568 <HAL_I2C_Master_Transmit+0x212>)
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f004 fbee 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
 800339a:	e0e1      	b.n	8003560 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_I2C_Master_Transmit+0x54>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e0da      	b.n	8003560 <HAL_I2C_Master_Transmit+0x20a>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d007      	beq.n	80033d0 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2221      	movs	r2, #33	; 0x21
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2210      	movs	r2, #16
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	893a      	ldrh	r2, [r7, #8]
 8003400:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4a59      	ldr	r2, [pc, #356]	; (800356c <HAL_I2C_Master_Transmit+0x216>)
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003412:	8979      	ldrh	r1, [r7, #10]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	6a3a      	ldr	r2, [r7, #32]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f003 fff9 	bl	8007410 <I2C_MasterRequestWrite>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00f      	beq.n	8003444 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	2b04      	cmp	r3, #4
 800342a:	d105      	bne.n	8003438 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e093      	b.n	8003560 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e08d      	b.n	8003560 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 800345a:	e066      	b.n	800352a <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	6a39      	ldr	r1, [r7, #32]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f004 fc43 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00f      	beq.n	800348c <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	2b04      	cmp	r3, #4
 8003472:	d109      	bne.n	8003488 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003482:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e06b      	b.n	8003560 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e069      	b.n	8003560 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	1c58      	adds	r0, r3, #1
 8003496:	68f9      	ldr	r1, [r7, #12]
 8003498:	6248      	str	r0, [r1, #36]	; 0x24
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d119      	bne.n	80034fa <HAL_I2C_Master_Transmit+0x1a4>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d015      	beq.n	80034fa <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c58      	adds	r0, r3, #1
 80034d8:	68f9      	ldr	r1, [r7, #12]
 80034da:	6248      	str	r0, [r1, #36]	; 0x24
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	6a39      	ldr	r1, [r7, #32]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f004 fc31 	bl	8007d66 <I2C_WaitOnBTFFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00f      	beq.n	800352a <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2b04      	cmp	r3, #4
 8003510:	d109      	bne.n	8003526 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003520:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e01c      	b.n	8003560 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e01a      	b.n	8003560 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	2b00      	cmp	r3, #0
 8003530:	d194      	bne.n	800345c <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003540:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
  }
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	00100002 	.word	0x00100002
 800356c:	ffff0000 	.word	0xffff0000

08003570 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08c      	sub	sp, #48	; 0x30
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	461a      	mov	r2, r3
 800357c:	460b      	mov	r3, r1
 800357e:	817b      	strh	r3, [r7, #10]
 8003580:	4613      	mov	r3, r2
 8003582:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8003584:	2300      	movs	r3, #0
 8003586:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003588:	f7fc fed0 	bl	800032c <HAL_GetTick>
 800358c:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b20      	cmp	r3, #32
 8003598:	f040 8215 	bne.w	80039c6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2319      	movs	r3, #25
 80035a2:	2201      	movs	r2, #1
 80035a4:	4985      	ldr	r1, [pc, #532]	; (80037bc <HAL_I2C_Master_Receive+0x24c>)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f004 fae1 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
 80035b4:	e208      	b.n	80039c8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_I2C_Master_Receive+0x54>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e201      	b.n	80039c8 <HAL_I2C_Master_Receive+0x458>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d007      	beq.n	80035ea <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2222      	movs	r2, #34	; 0x22
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2210      	movs	r2, #16
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	893a      	ldrh	r2, [r7, #8]
 800361a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a68      	ldr	r2, [pc, #416]	; (80037c0 <HAL_I2C_Master_Receive+0x250>)
 8003620:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800362c:	8979      	ldrh	r1, [r7, #10]
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f003 ff6e 	bl	8007514 <I2C_MasterRequestRead>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00f      	beq.n	800365e <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b04      	cmp	r3, #4
 8003644:	d105      	bne.n	8003652 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e1ba      	b.n	80039c8 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e1b4      	b.n	80039c8 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003662:	2b00      	cmp	r3, #0
 8003664:	d113      	bne.n	800368e <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003666:	2300      	movs	r3, #0
 8003668:	623b      	str	r3, [r7, #32]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e188      	b.n	80039a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	2b01      	cmp	r3, #1
 8003694:	d11b      	bne.n	80036ce <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	e168      	b.n	80039a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d11b      	bne.n	800370e <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	e148      	b.n	80039a0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800371c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8003734:	e134      	b.n	80039a0 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	2b03      	cmp	r3, #3
 800373c:	f200 80eb 	bhi.w	8003916 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	2b01      	cmp	r3, #1
 8003746:	d127      	bne.n	8003798 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8003748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f004 fb80 	bl	8007e52 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d007      	beq.n	8003768 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	2b20      	cmp	r3, #32
 800375e:	d101      	bne.n	8003764 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e131      	b.n	80039c8 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e12f      	b.n	80039c8 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	1c59      	adds	r1, r3, #1
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	6251      	str	r1, [r2, #36]	; 0x24
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	6912      	ldr	r2, [r2, #16]
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003796:	e103      	b.n	80039a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	2b02      	cmp	r3, #2
 800379e:	d14a      	bne.n	8003836 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	2200      	movs	r2, #0
 80037a8:	4906      	ldr	r1, [pc, #24]	; (80037c4 <HAL_I2C_Master_Receive+0x254>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f004 f9df 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e106      	b.n	80039c8 <HAL_I2C_Master_Receive+0x458>
 80037ba:	bf00      	nop
 80037bc:	00100002 	.word	0x00100002
 80037c0:	ffff0000 	.word	0xffff0000
 80037c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c59      	adds	r1, r3, #1
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	6251      	str	r1, [r2, #36]	; 0x24
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	6912      	ldr	r2, [r2, #16]
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	1c59      	adds	r1, r3, #1
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	6251      	str	r1, [r2, #36]	; 0x24
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	6912      	ldr	r2, [r2, #16]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003834:	e0b4      	b.n	80039a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	2200      	movs	r2, #0
 800383e:	4964      	ldr	r1, [pc, #400]	; (80039d0 <HAL_I2C_Master_Receive+0x460>)
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f004 f994 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e0bb      	b.n	80039c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	1c59      	adds	r1, r3, #1
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6251      	str	r1, [r2, #36]	; 0x24
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	6912      	ldr	r2, [r2, #16]
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	2200      	movs	r2, #0
 8003896:	494e      	ldr	r1, [pc, #312]	; (80039d0 <HAL_I2C_Master_Receive+0x460>)
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f004 f968 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e08f      	b.n	80039c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	1c59      	adds	r1, r3, #1
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	6251      	str	r1, [r2, #36]	; 0x24
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	6912      	ldr	r2, [r2, #16]
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c59      	adds	r1, r3, #1
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	6251      	str	r1, [r2, #36]	; 0x24
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	6912      	ldr	r2, [r2, #16]
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003914:	e044      	b.n	80039a0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f004 fa99 	bl	8007e52 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2b20      	cmp	r3, #32
 800392c:	d101      	bne.n	8003932 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e04a      	b.n	80039c8 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e048      	b.n	80039c8 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	1c59      	adds	r1, r3, #1
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	6251      	str	r1, [r2, #36]	; 0x24
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	6912      	ldr	r2, [r2, #16]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b04      	cmp	r3, #4
 8003970:	d116      	bne.n	80039a0 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	1c59      	adds	r1, r3, #1
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	6251      	str	r1, [r2, #36]	; 0x24
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	6912      	ldr	r2, [r2, #16]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f47f aec6 	bne.w	8003736 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3728      	adds	r7, #40	; 0x28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	00010004 	.word	0x00010004

080039d4 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
  
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039e8:	f7fc fca0 	bl	800032c <HAL_GetTick>
 80039ec:	61f8      	str	r0, [r7, #28]
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	f040 80fd 	bne.w	8003bf6 <HAL_I2C_Slave_Transmit+0x222>
  {
    if((pData == NULL) || (Size == 0U))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_I2C_Slave_Transmit+0x34>
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_I2C_Slave_Transmit+0x38>
    {
      return  HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0f5      	b.n	8003bf8 <HAL_I2C_Slave_Transmit+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_I2C_Slave_Transmit+0x46>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e0ee      	b.n	8003bf8 <HAL_I2C_Slave_Transmit+0x224>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d007      	beq.n	8003a40 <HAL_I2C_Slave_Transmit+0x6c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4e:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2221      	movs	r2, #33	; 0x21
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a62      	ldr	r2, [pc, #392]	; (8003c00 <HAL_I2C_Slave_Transmit+0x22c>)
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a90:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	495a      	ldr	r1, [pc, #360]	; (8003c04 <HAL_I2C_Slave_Transmit+0x230>)
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f004 f866 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_I2C_Slave_Transmit+0xd8>
    {
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e0a5      	b.n	8003bf8 <HAL_I2C_Slave_Transmit+0x224>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aac:	2300      	movs	r3, #0
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003aca:	d167      	bne.n	8003b9c <HAL_I2C_Slave_Transmit+0x1c8>
    {
      /* Wait until ADDR flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	494b      	ldr	r1, [pc, #300]	; (8003c04 <HAL_I2C_Slave_Transmit+0x230>)
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f004 f849 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Slave_Transmit+0x112>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e088      	b.n	8003bf8 <HAL_I2C_Slave_Transmit+0x224>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8003afc:	e04e      	b.n	8003b9c <HAL_I2C_Slave_Transmit+0x1c8>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	6839      	ldr	r1, [r7, #0]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f004 f8f2 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00f      	beq.n	8003b2e <HAL_I2C_Slave_Transmit+0x15a>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1c:	601a      	str	r2, [r3, #0]

        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d101      	bne.n	8003b2a <HAL_I2C_Slave_Transmit+0x156>
        {
          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e066      	b.n	8003bf8 <HAL_I2C_Slave_Transmit+0x224>
        }
        else
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e064      	b.n	8003bf8 <HAL_I2C_Slave_Transmit+0x224>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	1c58      	adds	r0, r3, #1
 8003b38:	68f9      	ldr	r1, [r7, #12]
 8003b3a:	6248      	str	r0, [r1, #36]	; 0x24
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d119      	bne.n	8003b9c <HAL_I2C_Slave_Transmit+0x1c8>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_I2C_Slave_Transmit+0x1c8>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	1c58      	adds	r0, r3, #1
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	6248      	str	r0, [r1, #36]	; 0x24
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	851a      	strh	r2, [r3, #40]	; 0x28
    while(hi2c->XferSize > 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ac      	bne.n	8003afe <HAL_I2C_Slave_Transmit+0x12a>
      }
    }

    /* Wait until AF flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f003 ffdc 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_I2C_Slave_Transmit+0x1ec>
    {
      return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e01b      	b.n	8003bf8 <HAL_I2C_Slave_Transmit+0x224>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bc8:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e000      	b.n	8003bf8 <HAL_I2C_Slave_Transmit+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
  }
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	ffff0000 	.word	0xffff0000
 8003c04:	00010002 	.word	0x00010002

08003c08 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	; 0x28
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c1c:	f7fc fb86 	bl	800032c <HAL_GetTick>
 8003c20:	61f8      	str	r0, [r7, #28]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	f040 80f5 	bne.w	8003e1a <HAL_I2C_Slave_Receive+0x212>
  {
    if((pData == NULL) || (Size == 0))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_I2C_Slave_Receive+0x34>
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_I2C_Slave_Receive+0x38>
    {
      return  HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0ed      	b.n	8003e1c <HAL_I2C_Slave_Receive+0x214>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_I2C_Slave_Receive+0x46>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e0e6      	b.n	8003e1c <HAL_I2C_Slave_Receive+0x214>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d007      	beq.n	8003c74 <HAL_I2C_Slave_Receive+0x6c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	6812      	ldr	r2, [r2, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c82:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2222      	movs	r2, #34	; 0x22
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	88fa      	ldrh	r2, [r7, #6]
 8003ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4a5e      	ldr	r2, [pc, #376]	; (8003e24 <HAL_I2C_Slave_Receive+0x21c>)
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc4:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	4956      	ldr	r1, [pc, #344]	; (8003e28 <HAL_I2C_Slave_Receive+0x220>)
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f003 ff4c 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_I2C_Slave_Receive+0xd8>
    {
      return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e09d      	b.n	8003e1c <HAL_I2C_Slave_Receive+0x214>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	69bb      	ldr	r3, [r7, #24]

    while(hi2c->XferSize > 0U)
 8003cf6:	e04f      	b.n	8003d98 <HAL_I2C_Slave_Receive+0x190>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	6839      	ldr	r1, [r7, #0]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f004 f8a8 	bl	8007e52 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00f      	beq.n	8003d28 <HAL_I2C_Slave_Receive+0x120>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d16:	601a      	str	r2, [r3, #0]

        if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d101      	bne.n	8003d24 <HAL_I2C_Slave_Receive+0x11c>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e07b      	b.n	8003e1c <HAL_I2C_Slave_Receive+0x214>
        }
        else
        {
          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e079      	b.n	8003e1c <HAL_I2C_Slave_Receive+0x214>
        }
      }

      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	1c59      	adds	r1, r3, #1
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	6251      	str	r1, [r2, #36]	; 0x24
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	6912      	ldr	r2, [r2, #16]
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d119      	bne.n	8003d98 <HAL_I2C_Slave_Receive+0x190>
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_I2C_Slave_Receive+0x190>
      {
        /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	1c59      	adds	r1, r3, #1
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	6251      	str	r1, [r2, #36]	; 0x24
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	6912      	ldr	r2, [r2, #16]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1ab      	bne.n	8003cf8 <HAL_I2C_Slave_Receive+0xf0>
      }
    }

    /* Wait until STOP flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f004 f81b 	bl	8007de0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00f      	beq.n	8003dd0 <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dbe:	601a      	str	r2, [r3, #0]

      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d101      	bne.n	8003dcc <HAL_I2C_Slave_Receive+0x1c4>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e027      	b.n	8003e1c <HAL_I2C_Slave_Receive+0x214>
      }
      else
      {
        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e025      	b.n	8003e1c <HAL_I2C_Slave_Receive+0x214>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e000      	b.n	8003e1c <HAL_I2C_Slave_Receive+0x214>
  }
  else
  {
    return HAL_BUSY;
 8003e1a:	2302      	movs	r3, #2
  }
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	ffff0000 	.word	0xffff0000
 8003e28:	00010002 	.word	0x00010002

08003e2c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	461a      	mov	r2, r3
 8003e38:	460b      	mov	r3, r1
 8003e3a:	817b      	strh	r3, [r7, #10]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d179      	bne.n	8003f44 <HAL_I2C_Master_Transmit_IT+0x118>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8003e50:	4b40      	ldr	r3, [pc, #256]	; (8003f54 <HAL_I2C_Master_Transmit_IT+0x128>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	08db      	lsrs	r3, r3, #3
 8003e56:	4a40      	ldr	r2, [pc, #256]	; (8003f58 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	0a1a      	lsrs	r2, r3, #8
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	009a      	lsls	r2, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	617a      	str	r2, [r7, #20]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10c      	bne.n	8003e8e <HAL_I2C_Master_Transmit_IT+0x62>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e05b      	b.n	8003f46 <HAL_I2C_Master_Transmit_IT+0x11a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d0e6      	beq.n	8003e6a <HAL_I2C_Master_Transmit_IT+0x3e>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2C_Master_Transmit_IT+0x7e>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e04d      	b.n	8003f46 <HAL_I2C_Master_Transmit_IT+0x11a>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d007      	beq.n	8003ed0 <HAL_I2C_Master_Transmit_IT+0xa4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ede:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2221      	movs	r2, #33	; 0x21
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2210      	movs	r2, #16
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	893a      	ldrh	r2, [r7, #8]
 8003f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <HAL_I2C_Master_Transmit_IT+0x130>)
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8003f12:	897a      	ldrh	r2, [r7, #10]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f26:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	6852      	ldr	r2, [r2, #4]
 8003f3a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003f3e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <HAL_I2C_Master_Transmit_IT+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
  }
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000008 	.word	0x20000008
 8003f58:	14f8b589 	.word	0x14f8b589
 8003f5c:	ffff0000 	.word	0xffff0000

08003f60 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	817b      	strh	r3, [r7, #10]
 8003f70:	4613      	mov	r3, r2
 8003f72:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	f040 8082 	bne.w	800408a <HAL_I2C_Master_Receive_IT+0x12a>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8003f86:	4b44      	ldr	r3, [pc, #272]	; (8004098 <HAL_I2C_Master_Receive_IT+0x138>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	08db      	lsrs	r3, r3, #3
 8003f8c:	4a43      	ldr	r2, [pc, #268]	; (800409c <HAL_I2C_Master_Receive_IT+0x13c>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	0a1a      	lsrs	r2, r3, #8
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009a      	lsls	r2, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	1e5a      	subs	r2, r3, #1
 8003fa4:	617a      	str	r2, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_I2C_Master_Receive_IT+0x64>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e063      	b.n	800408c <HAL_I2C_Master_Receive_IT+0x12c>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d0e6      	beq.n	8003fa0 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_I2C_Master_Receive_IT+0x80>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e055      	b.n	800408c <HAL_I2C_Master_Receive_IT+0x12c>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d007      	beq.n	8004006 <HAL_I2C_Master_Receive_IT+0xa6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004014:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2222      	movs	r2, #34	; 0x22
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2210      	movs	r2, #16
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	893a      	ldrh	r2, [r7, #8]
 8004036:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <HAL_I2C_Master_Receive_IT+0x140>)
 800403c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8004048:	897a      	ldrh	r2, [r7, #10]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800405c:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800406c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	6852      	ldr	r2, [r2, #4]
 8004080:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004084:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	e000      	b.n	800408c <HAL_I2C_Master_Receive_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800408a:	2302      	movs	r3, #2
  }
}
 800408c:	4618      	mov	r0, r3
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	20000008 	.word	0x20000008
 800409c:	14f8b589 	.word	0x14f8b589
 80040a0:	ffff0000 	.word	0xffff0000

080040a4 <HAL_I2C_Master_Sequential_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	607a      	str	r2, [r7, #4]
 80040ae:	461a      	mov	r2, r3
 80040b0:	460b      	mov	r3, r1
 80040b2:	817b      	strh	r3, [r7, #10]
 80040b4:	4613      	mov	r3, r2
 80040b6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	f040 8098 	bne.w	80041fe <HAL_I2C_Master_Sequential_Transmit_IT+0x15a>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d002      	beq.n	80040da <HAL_I2C_Master_Sequential_Transmit_IT+0x36>
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d125      	bne.n	8004126 <HAL_I2C_Master_Sequential_Transmit_IT+0x82>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80040da:	4b4c      	ldr	r3, [pc, #304]	; (800420c <HAL_I2C_Master_Sequential_Transmit_IT+0x168>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	08db      	lsrs	r3, r3, #3
 80040e0:	4a4b      	ldr	r2, [pc, #300]	; (8004210 <HAL_I2C_Master_Sequential_Transmit_IT+0x16c>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	0a1a      	lsrs	r2, r3, #8
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	009a      	lsls	r2, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
      do
      {
        if(count-- == 0U)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1e5a      	subs	r2, r3, #1
 80040f8:	613a      	str	r2, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10c      	bne.n	8004118 <HAL_I2C_Master_Sequential_Transmit_IT+0x74>
        {
          hi2c->PreviousState = I2C_STATE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State= HAL_I2C_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT; 
 8004114:	2303      	movs	r3, #3
 8004116:	e073      	b.n	8004200 <HAL_I2C_Master_Sequential_Transmit_IT+0x15c>
        }
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d0e6      	beq.n	80040f4 <HAL_I2C_Master_Sequential_Transmit_IT+0x50>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_I2C_Master_Sequential_Transmit_IT+0x90>
 8004130:	2302      	movs	r3, #2
 8004132:	e065      	b.n	8004200 <HAL_I2C_Master_Sequential_Transmit_IT+0x15c>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b01      	cmp	r3, #1
 8004148:	d007      	beq.n	800415a <HAL_I2C_Master_Sequential_Transmit_IT+0xb6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	f042 0201 	orr.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004168:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2221      	movs	r2, #33	; 0x21
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2210      	movs	r2, #16
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	893a      	ldrh	r2, [r7, #8]
 800418a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a3a      	ldr	r2, [r7, #32]
 8004190:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 800419c:	897a      	ldrh	r2, [r7, #10]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	617b      	str	r3, [r7, #20]
    
    /* Generate Start */    
    if((Prev_State == I2C_STATE_MASTER_BUSY_RX) || (Prev_State == I2C_STATE_NONE))
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b12      	cmp	r3, #18
 80041ac:	d002      	beq.n	80041b4 <HAL_I2C_Master_Sequential_Transmit_IT+0x110>
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d116      	bne.n	80041e2 <HAL_I2C_Master_Sequential_Transmit_IT+0x13e>
    {
      /* Generate Start condition if first transfer */
      if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d002      	beq.n	80041c0 <HAL_I2C_Master_Sequential_Transmit_IT+0x11c>
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d108      	bne.n	80041d2 <HAL_I2C_Master_Sequential_Transmit_IT+0x12e>
      {
        /* Generate Start */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e007      	b.n	80041e2 <HAL_I2C_Master_Sequential_Transmit_IT+0x13e>
      }
      else
      {
        /* Generate ReStart */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e0:	601a      	str	r2, [r3, #0]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	6852      	ldr	r2, [r2, #4]
 80041f4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80041f8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <HAL_I2C_Master_Sequential_Transmit_IT+0x15c>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	4618      	mov	r0, r3
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	20000008 	.word	0x20000008
 8004210:	14f8b589 	.word	0x14f8b589

08004214 <HAL_I2C_Master_Sequential_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	461a      	mov	r2, r3
 8004220:	460b      	mov	r3, r1
 8004222:	817b      	strh	r3, [r7, #10]
 8004224:	4613      	mov	r3, r2
 8004226:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
    
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b20      	cmp	r3, #32
 8004236:	f040 80af 	bne.w	8004398 <HAL_I2C_Master_Sequential_Receive_IT+0x184>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	2b04      	cmp	r3, #4
 800423e:	d002      	beq.n	8004246 <HAL_I2C_Master_Sequential_Receive_IT+0x32>
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d125      	bne.n	8004292 <HAL_I2C_Master_Sequential_Receive_IT+0x7e>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004246:	4b58      	ldr	r3, [pc, #352]	; (80043a8 <HAL_I2C_Master_Sequential_Receive_IT+0x194>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	08db      	lsrs	r3, r3, #3
 800424c:	4a57      	ldr	r2, [pc, #348]	; (80043ac <HAL_I2C_Master_Sequential_Receive_IT+0x198>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	0a1a      	lsrs	r2, r3, #8
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009a      	lsls	r2, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
      do
      {
        if(count-- == 0U)
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	1e5a      	subs	r2, r3, #1
 8004264:	617a      	str	r2, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10c      	bne.n	8004284 <HAL_I2C_Master_Sequential_Receive_IT+0x70>
        {
          hi2c->PreviousState = I2C_STATE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State= HAL_I2C_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT; 
 8004280:	2303      	movs	r3, #3
 8004282:	e08a      	b.n	800439a <HAL_I2C_Master_Sequential_Receive_IT+0x186>
        }
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b02      	cmp	r3, #2
 8004290:	d0e6      	beq.n	8004260 <HAL_I2C_Master_Sequential_Receive_IT+0x4c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_I2C_Master_Sequential_Receive_IT+0x8c>
 800429c:	2302      	movs	r3, #2
 800429e:	e07c      	b.n	800439a <HAL_I2C_Master_Sequential_Receive_IT+0x186>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d007      	beq.n	80042c6 <HAL_I2C_Master_Sequential_Receive_IT+0xb2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	f042 0201 	orr.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2222      	movs	r2, #34	; 0x22
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2210      	movs	r2, #16
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	893a      	ldrh	r2, [r7, #8]
 80042f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress = DevAddress;
 8004308:	897a      	ldrh	r2, [r7, #10]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	645a      	str	r2, [r3, #68]	; 0x44
    
    if((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) || (hi2c->PreviousState == I2C_STATE_NONE))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	2b11      	cmp	r3, #17
 8004314:	d003      	beq.n	800431e <HAL_I2C_Master_Sequential_Receive_IT+0x10a>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	2b00      	cmp	r3, #0
 800431c:	d12e      	bne.n	800437c <HAL_I2C_Master_Sequential_Receive_IT+0x168>
    {
      /* Generate Start condition if first transfer */
      if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME)  || (XferOptions == I2C_NO_OPTION_FRAME))
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	2b04      	cmp	r3, #4
 8004322:	d006      	beq.n	8004332 <HAL_I2C_Master_Sequential_Receive_IT+0x11e>
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d003      	beq.n	8004332 <HAL_I2C_Master_Sequential_Receive_IT+0x11e>
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004330:	d110      	bne.n	8004354 <HAL_I2C_Master_Sequential_Receive_IT+0x140>
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004340:	601a      	str	r2, [r3, #0]
        
        /* Generate Start */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e013      	b.n	800437c <HAL_I2C_Master_Sequential_Receive_IT+0x168>
      }
      else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	2b11      	cmp	r3, #17
 800435a:	d10f      	bne.n	800437c <HAL_I2C_Master_Sequential_Receive_IT+0x168>
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800436a:	601a      	str	r2, [r3, #0]
        
        /* Generate ReStart */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	6852      	ldr	r2, [r2, #4]
 800438e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004392:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	e000      	b.n	800439a <HAL_I2C_Master_Sequential_Receive_IT+0x186>
  }
  else
  {
    return HAL_BUSY;
 8004398:	2302      	movs	r3, #2
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000008 	.word	0x20000008
 80043ac:	14f8b589 	.word	0x14f8b589

080043b0 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	4613      	mov	r3, r2
 80043bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d17e      	bne.n	80044cc <HAL_I2C_Slave_Transmit_IT+0x11c>
  {
    if((pData == NULL) || (Size == 0U))
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_I2C_Slave_Transmit_IT+0x2a>
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_I2C_Slave_Transmit_IT+0x2e>
    {
      return  HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e077      	b.n	80044ce <HAL_I2C_Slave_Transmit_IT+0x11e>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80043de:	4b3f      	ldr	r3, [pc, #252]	; (80044dc <HAL_I2C_Slave_Transmit_IT+0x12c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	08db      	lsrs	r3, r3, #3
 80043e4:	4a3e      	ldr	r2, [pc, #248]	; (80044e0 <HAL_I2C_Slave_Transmit_IT+0x130>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	0a1a      	lsrs	r2, r3, #8
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009a      	lsls	r2, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	1e5a      	subs	r2, r3, #1
 80043fc:	617a      	str	r2, [r7, #20]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10c      	bne.n	800441c <HAL_I2C_Slave_Transmit_IT+0x6c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004418:	2303      	movs	r3, #3
 800441a:	e058      	b.n	80044ce <HAL_I2C_Slave_Transmit_IT+0x11e>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d0e6      	beq.n	80043f8 <HAL_I2C_Slave_Transmit_IT+0x48>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_I2C_Slave_Transmit_IT+0x88>
 8004434:	2302      	movs	r3, #2
 8004436:	e04a      	b.n	80044ce <HAL_I2C_Slave_Transmit_IT+0x11e>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d007      	beq.n	800445e <HAL_I2C_Slave_Transmit_IT+0xae>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2221      	movs	r2, #33	; 0x21
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	88fa      	ldrh	r2, [r7, #6]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <HAL_I2C_Slave_Transmit_IT+0x134>)
 8004494:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044ae:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	6852      	ldr	r2, [r2, #4]
 80044c2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80044c6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <HAL_I2C_Slave_Transmit_IT+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
  }
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20000008 	.word	0x20000008
 80044e0:	14f8b589 	.word	0x14f8b589
 80044e4:	ffff0000 	.word	0xffff0000

080044e8 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b20      	cmp	r3, #32
 8004504:	d17c      	bne.n	8004600 <HAL_I2C_Slave_Receive_IT+0x118>
  {
    if((pData == NULL) || (Size == 0U))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_I2C_Slave_Receive_IT+0x2a>
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_I2C_Slave_Receive_IT+0x2e>
    {
      return  HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e075      	b.n	8004602 <HAL_I2C_Slave_Receive_IT+0x11a>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004516:	4b3e      	ldr	r3, [pc, #248]	; (8004610 <HAL_I2C_Slave_Receive_IT+0x128>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	08db      	lsrs	r3, r3, #3
 800451c:	4a3d      	ldr	r2, [pc, #244]	; (8004614 <HAL_I2C_Slave_Receive_IT+0x12c>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	0a1a      	lsrs	r2, r3, #8
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009a      	lsls	r2, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	1e5a      	subs	r2, r3, #1
 8004534:	617a      	str	r2, [r7, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <HAL_I2C_Slave_Receive_IT+0x6c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004550:	2303      	movs	r3, #3
 8004552:	e056      	b.n	8004602 <HAL_I2C_Slave_Receive_IT+0x11a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b02      	cmp	r3, #2
 8004560:	d0e6      	beq.n	8004530 <HAL_I2C_Slave_Receive_IT+0x48>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_I2C_Slave_Receive_IT+0x88>
 800456c:	2302      	movs	r3, #2
 800456e:	e048      	b.n	8004602 <HAL_I2C_Slave_Receive_IT+0x11a>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b01      	cmp	r3, #1
 8004584:	d007      	beq.n	8004596 <HAL_I2C_Slave_Receive_IT+0xae>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	f042 0201 	orr.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2222      	movs	r2, #34	; 0x22
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferSize = Size;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	88fa      	ldrh	r2, [r7, #6]
 80045c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	88fa      	ldrh	r2, [r7, #6]
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a11      	ldr	r2, [pc, #68]	; (8004618 <HAL_I2C_Slave_Receive_IT+0x130>)
 80045d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045e2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	6852      	ldr	r2, [r2, #4]
 80045f6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80045fa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <HAL_I2C_Slave_Receive_IT+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
  }
}
 8004602:	4618      	mov	r0, r3
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000008 	.word	0x20000008
 8004614:	14f8b589 	.word	0x14f8b589
 8004618:	ffff0000 	.word	0xffff0000

0800461c <HAL_I2C_Slave_Sequential_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	4613      	mov	r3, r2
 800462a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b28      	cmp	r3, #40	; 0x28
 8004636:	d15b      	bne.n	80046f0 <HAL_I2C_Slave_Sequential_Transmit_IT+0xd4>
  {
    if((pData == NULL) || (Size == 0U))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_I2C_Slave_Sequential_Transmit_IT+0x28>
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_I2C_Slave_Sequential_Transmit_IT+0x2c>
    {
      return  HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e054      	b.n	80046f2 <HAL_I2C_Slave_Sequential_Transmit_IT+0xd6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_I2C_Slave_Sequential_Transmit_IT+0x3a>
 8004652:	2302      	movs	r3, #2
 8004654:	e04d      	b.n	80046f2 <HAL_I2C_Slave_Sequential_Transmit_IT+0xd6>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d007      	beq.n	800467c <HAL_I2C_Slave_Sequential_Transmit_IT+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800468a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2229      	movs	r2, #41	; 0x29
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	88fa      	ldrh	r2, [r7, #6]
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	6852      	ldr	r2, [r2, #4]
 80046e6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80046ea:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <HAL_I2C_Slave_Sequential_Transmit_IT+0xd6>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_I2C_Slave_Sequential_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80046fe:	b480      	push	{r7}
 8004700:	b087      	sub	sp, #28
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	4613      	mov	r3, r2
 800470c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b28      	cmp	r3, #40	; 0x28
 8004718:	d15b      	bne.n	80047d2 <HAL_I2C_Slave_Sequential_Receive_IT+0xd4>
  {
    if((pData == NULL) || (Size == 0U))
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <HAL_I2C_Slave_Sequential_Receive_IT+0x28>
 8004720:	88fb      	ldrh	r3, [r7, #6]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_I2C_Slave_Sequential_Receive_IT+0x2c>
    {
      return  HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e054      	b.n	80047d4 <HAL_I2C_Slave_Sequential_Receive_IT+0xd6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_I2C_Slave_Sequential_Receive_IT+0x3a>
 8004734:	2302      	movs	r3, #2
 8004736:	e04d      	b.n	80047d4 <HAL_I2C_Slave_Sequential_Receive_IT+0xd6>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d007      	beq.n	800475e <HAL_I2C_Slave_Sequential_Receive_IT+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	222a      	movs	r2, #42	; 0x2a
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr   = pData;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	6852      	ldr	r2, [r2, #4]
 80047c8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80047cc:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <HAL_I2C_Slave_Sequential_Receive_IT+0xd6>
  }
  else
  {
    return HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
  }
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  if(hi2c->State == HAL_I2C_STATE_READY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d124      	bne.n	800483e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2228      	movs	r2, #40	; 0x28
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d007      	beq.n	800481a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004828:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	6852      	ldr	r2, [r2, #4]
 8004834:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004838:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b28      	cmp	r3, #40	; 0x28
 800485e:	d129      	bne.n	80048b4 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004874:	b2db      	uxtb	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489e:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	6852      	ldr	r2, [r2, #4]
 80048aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048ae:	605a      	str	r2, [r3, #4]
  
    return HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	e000      	b.n	80048b6 <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 80048b4:	2302      	movs	r3, #2
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	461a      	mov	r2, r3
 80048ce:	460b      	mov	r3, r1
 80048d0:	817b      	strh	r3, [r7, #10]
 80048d2:	4613      	mov	r3, r2
 80048d4:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	f040 80d0 	bne.w	8004a88 <HAL_I2C_Master_Transmit_DMA+0x1c6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80048e8:	4b6a      	ldr	r3, [pc, #424]	; (8004a94 <HAL_I2C_Master_Transmit_DMA+0x1d2>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	08db      	lsrs	r3, r3, #3
 80048ee:	4a6a      	ldr	r2, [pc, #424]	; (8004a98 <HAL_I2C_Master_Transmit_DMA+0x1d6>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	0a1a      	lsrs	r2, r3, #8
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	1e5a      	subs	r2, r3, #1
 8004906:	617a      	str	r2, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10c      	bne.n	8004926 <HAL_I2C_Master_Transmit_DMA+0x64>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004922:	2303      	movs	r3, #3
 8004924:	e0b1      	b.n	8004a8a <HAL_I2C_Master_Transmit_DMA+0x1c8>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b02      	cmp	r3, #2
 8004932:	d0e6      	beq.n	8004902 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_I2C_Master_Transmit_DMA+0x80>
 800493e:	2302      	movs	r3, #2
 8004940:	e0a3      	b.n	8004a8a <HAL_I2C_Master_Transmit_DMA+0x1c8>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b01      	cmp	r3, #1
 8004956:	d007      	beq.n	8004968 <HAL_I2C_Master_Transmit_DMA+0xa6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004976:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2221      	movs	r2, #33	; 0x21
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2210      	movs	r2, #16
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	893a      	ldrh	r2, [r7, #8]
 8004998:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a3f      	ldr	r2, [pc, #252]	; (8004a9c <HAL_I2C_Master_Transmit_DMA+0x1da>)
 800499e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 80049aa:	897a      	ldrh	r2, [r7, #10]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44

    if(hi2c->XferSize > 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d049      	beq.n	8004a4c <HAL_I2C_Master_Transmit_DMA+0x18a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	4a38      	ldr	r2, [pc, #224]	; (8004aa0 <HAL_I2C_Master_Transmit_DMA+0x1de>)
 80049be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */      
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c4:	4a37      	ldr	r2, [pc, #220]	; (8004aa4 <HAL_I2C_Master_Transmit_DMA+0x1e2>)
 80049c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049cc:	2200      	movs	r2, #0
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d4:	2200      	movs	r2, #0
 80049d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049dc:	2200      	movs	r2, #0
 80049de:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	2200      	movs	r2, #0
 80049e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	4619      	mov	r1, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3310      	adds	r3, #16
 80049f8:	461a      	mov	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fe:	f7fd fb32 	bl	8002066 <HAL_DMA_Start_IT>

      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a10:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a20:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	6852      	ldr	r2, [r2, #4]
 8004a34:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004a38:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	6852      	ldr	r2, [r2, #4]
 8004a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	e01b      	b.n	8004a84 <HAL_I2C_Master_Transmit_DMA+0x1c2>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a5a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a6a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

     /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	6852      	ldr	r2, [r2, #4]
 8004a7e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004a82:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e000      	b.n	8004a8a <HAL_I2C_Master_Transmit_DMA+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000008 	.word	0x20000008
 8004a98:	14f8b589 	.word	0x14f8b589
 8004a9c:	ffff0000 	.word	0xffff0000
 8004aa0:	0800798d 	.word	0x0800798d
 8004aa4:	08007a79 	.word	0x08007a79

08004aa8 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	817b      	strh	r3, [r7, #10]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	f040 80d0 	bne.w	8004c6e <HAL_I2C_Master_Receive_DMA+0x1c6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004ace:	4b6a      	ldr	r3, [pc, #424]	; (8004c78 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	08db      	lsrs	r3, r3, #3
 8004ad4:	4a69      	ldr	r2, [pc, #420]	; (8004c7c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8004ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ada:	0a1a      	lsrs	r2, r3, #8
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009a      	lsls	r2, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	1e5a      	subs	r2, r3, #1
 8004aec:	617a      	str	r2, [r7, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <HAL_I2C_Master_Receive_DMA+0x64>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e0b1      	b.n	8004c70 <HAL_I2C_Master_Receive_DMA+0x1c8>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d0e6      	beq.n	8004ae8 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_I2C_Master_Receive_DMA+0x80>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e0a3      	b.n	8004c70 <HAL_I2C_Master_Receive_DMA+0x1c8>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d007      	beq.n	8004b4e <HAL_I2C_Master_Receive_DMA+0xa6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5c:	601a      	str	r2, [r3, #0]
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2222      	movs	r2, #34	; 0x22
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	893a      	ldrh	r2, [r7, #8]
 8004b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a3f      	ldr	r2, [pc, #252]	; (8004c80 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004b84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8004b90:	897a      	ldrh	r2, [r7, #10]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
    
    if(hi2c->XferSize > 0U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d049      	beq.n	8004c32 <HAL_I2C_Master_Receive_DMA+0x18a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	4a38      	ldr	r2, [pc, #224]	; (8004c84 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8004ba4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	4a37      	ldr	r2, [pc, #220]	; (8004c88 <HAL_I2C_Master_Receive_DMA+0x1e0>)
 8004bac:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	2200      	movs	r2, #0
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	2200      	movs	r2, #0
 8004bcc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3310      	adds	r3, #16
 8004bd8:	4619      	mov	r1, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be4:	f7fd fa3f 	bl	8002066 <HAL_DMA_Start_IT>

      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bf6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	6812      	ldr	r2, [r2, #0]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c06:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	6812      	ldr	r2, [r2, #0]
 8004c18:	6852      	ldr	r2, [r2, #4]
 8004c1a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004c1e:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	6852      	ldr	r2, [r2, #4]
 8004c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	e01b      	b.n	8004c6a <HAL_I2C_Master_Receive_DMA+0x1c2>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c40:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c50:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	6852      	ldr	r2, [r2, #4]
 8004c64:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004c68:	605a      	str	r2, [r3, #4]
    }
    
    return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e000      	b.n	8004c70 <HAL_I2C_Master_Receive_DMA+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8004c6e:	2302      	movs	r3, #2
  }
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000008 	.word	0x20000008
 8004c7c:	14f8b589 	.word	0x14f8b589
 8004c80:	ffff0000 	.word	0xffff0000
 8004c84:	0800798d 	.word	0x0800798d
 8004c88:	08007a79 	.word	0x08007a79

08004c8c <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b10      	cmp	r3, #16
 8004ca2:	d135      	bne.n	8004d10 <HAL_I2C_Master_Abort_IT+0x84>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_I2C_Master_Abort_IT+0x26>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e02f      	b.n	8004d12 <HAL_I2C_Master_Abort_IT+0x86>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2260      	movs	r2, #96	; 0x60
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd6:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	6852      	ldr	r2, [r2, #4]
 8004cf8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cfc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f002 fa7e 	bl	8007208 <I2C_ITError>

    return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	e000      	b.n	8004d12 <HAL_I2C_Master_Abort_IT+0x86>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
  }
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b086      	sub	sp, #24
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	4613      	mov	r3, r2
 8004d26:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	f040 80ac 	bne.w	8004e92 <HAL_I2C_Slave_Transmit_DMA+0x178>
  {
    if((pData == NULL) || (Size == 0U))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <HAL_I2C_Slave_Transmit_DMA+0x2c>
 8004d40:	88fb      	ldrh	r3, [r7, #6]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_I2C_Slave_Transmit_DMA+0x30>
    {
      return  HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0a4      	b.n	8004e94 <HAL_I2C_Slave_Transmit_DMA+0x17a>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004d4a:	4b54      	ldr	r3, [pc, #336]	; (8004e9c <HAL_I2C_Slave_Transmit_DMA+0x182>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	08db      	lsrs	r3, r3, #3
 8004d50:	4a53      	ldr	r2, [pc, #332]	; (8004ea0 <HAL_I2C_Slave_Transmit_DMA+0x186>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	0a1a      	lsrs	r2, r3, #8
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009a      	lsls	r2, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	1e5a      	subs	r2, r3, #1
 8004d68:	617a      	str	r2, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10c      	bne.n	8004d88 <HAL_I2C_Slave_Transmit_DMA+0x6e>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004d84:	2303      	movs	r3, #3
 8004d86:	e085      	b.n	8004e94 <HAL_I2C_Slave_Transmit_DMA+0x17a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d0e6      	beq.n	8004d64 <HAL_I2C_Slave_Transmit_DMA+0x4a>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_I2C_Slave_Transmit_DMA+0x8a>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e077      	b.n	8004e94 <HAL_I2C_Slave_Transmit_DMA+0x17a>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d007      	beq.n	8004dca <HAL_I2C_Slave_Transmit_DMA+0xb0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2221      	movs	r2, #33	; 0x21
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	88fa      	ldrh	r2, [r7, #6]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4a29      	ldr	r2, [pc, #164]	; (8004ea4 <HAL_I2C_Slave_Transmit_DMA+0x18a>)
 8004e00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e10:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <HAL_I2C_Slave_Transmit_DMA+0x18e>)
 8004e12:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e18:	4a24      	ldr	r2, [pc, #144]	; (8004eac <HAL_I2C_Slave_Transmit_DMA+0x192>)
 8004e1a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e20:	2200      	movs	r2, #0
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e28:	2200      	movs	r2, #0
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	2200      	movs	r2, #0
 8004e32:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	2200      	movs	r2, #0
 8004e3a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	4619      	mov	r1, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3310      	adds	r3, #16
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e52:	f7fd f908 	bl	8002066 <HAL_DMA_Start_IT>

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e64:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	6852      	ldr	r2, [r2, #4]
 8004e78:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004e7c:	605a      	str	r2, [r3, #4]

    /* Enable DMA Request */
    hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	6852      	ldr	r2, [r2, #4]
 8004e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e000      	b.n	8004e94 <HAL_I2C_Slave_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
  }
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20000008 	.word	0x20000008
 8004ea0:	14f8b589 	.word	0x14f8b589
 8004ea4:	ffff0000 	.word	0xffff0000
 8004ea8:	0800798d 	.word	0x0800798d
 8004eac:	08007a79 	.word	0x08007a79

08004eb0 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	f040 80ac 	bne.w	8005028 <HAL_I2C_Slave_Receive_DMA+0x178>
  {
    if((pData == NULL) || (Size == 0U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <HAL_I2C_Slave_Receive_DMA+0x2c>
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_I2C_Slave_Receive_DMA+0x30>
    {
      return  HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0a4      	b.n	800502a <HAL_I2C_Slave_Receive_DMA+0x17a>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004ee0:	4b54      	ldr	r3, [pc, #336]	; (8005034 <HAL_I2C_Slave_Receive_DMA+0x184>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	08db      	lsrs	r3, r3, #3
 8004ee6:	4a54      	ldr	r2, [pc, #336]	; (8005038 <HAL_I2C_Slave_Receive_DMA+0x188>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	0a1a      	lsrs	r2, r3, #8
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009a      	lsls	r2, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	1e5a      	subs	r2, r3, #1
 8004efe:	617a      	str	r2, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10c      	bne.n	8004f1e <HAL_I2C_Slave_Receive_DMA+0x6e>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e085      	b.n	800502a <HAL_I2C_Slave_Receive_DMA+0x17a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d0e6      	beq.n	8004efa <HAL_I2C_Slave_Receive_DMA+0x4a>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_I2C_Slave_Receive_DMA+0x8a>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e077      	b.n	800502a <HAL_I2C_Slave_Receive_DMA+0x17a>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d007      	beq.n	8004f60 <HAL_I2C_Slave_Receive_DMA+0xb0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2222      	movs	r2, #34	; 0x22
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	88fa      	ldrh	r2, [r7, #6]
 8004f90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4a29      	ldr	r2, [pc, #164]	; (800503c <HAL_I2C_Slave_Receive_DMA+0x18c>)
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	4a26      	ldr	r2, [pc, #152]	; (8005040 <HAL_I2C_Slave_Receive_DMA+0x190>)
 8004fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	4a25      	ldr	r2, [pc, #148]	; (8005044 <HAL_I2C_Slave_Receive_DMA+0x194>)
 8004fb0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	2200      	movs	r2, #0
 8004fd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3310      	adds	r3, #16
 8004fdc:	4619      	mov	r1, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe8:	f7fd f83d 	bl	8002066 <HAL_DMA_Start_IT>

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ffa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	6852      	ldr	r2, [r2, #4]
 800500e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005012:	605a      	str	r2, [r3, #4]

    /* Enable DMA Request */
    hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	6852      	ldr	r2, [r2, #4]
 800501e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005022:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	e000      	b.n	800502a <HAL_I2C_Slave_Receive_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 8005028:	2302      	movs	r3, #2
  }
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20000008 	.word	0x20000008
 8005038:	14f8b589 	.word	0x14f8b589
 800503c:	ffff0000 	.word	0xffff0000
 8005040:	0800798d 	.word	0x0800798d
 8005044:	08007a79 	.word	0x08007a79

08005048 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	4608      	mov	r0, r1
 8005052:	4611      	mov	r1, r2
 8005054:	461a      	mov	r2, r3
 8005056:	4603      	mov	r3, r0
 8005058:	817b      	strh	r3, [r7, #10]
 800505a:	460b      	mov	r3, r1
 800505c:	813b      	strh	r3, [r7, #8]
 800505e:	4613      	mov	r3, r2
 8005060:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005066:	f7fb f961 	bl	800032c <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b20      	cmp	r3, #32
 8005076:	f040 80e7 	bne.w	8005248 <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	2319      	movs	r3, #25
 8005080:	2201      	movs	r2, #1
 8005082:	4974      	ldr	r1, [pc, #464]	; (8005254 <HAL_I2C_Mem_Write+0x20c>)
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f002 fd72 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
 8005092:	e0da      	b.n	800524a <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_I2C_Mem_Write+0x5a>
 800509e:	2302      	movs	r3, #2
 80050a0:	e0d3      	b.n	800524a <HAL_I2C_Mem_Write+0x202>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d007      	beq.n	80050c8 <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2221      	movs	r2, #33	; 0x21
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2240      	movs	r2, #64	; 0x40
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a3a      	ldr	r2, [r7, #32]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4a56      	ldr	r2, [pc, #344]	; (8005258 <HAL_I2C_Mem_Write+0x210>)
 80050fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800510a:	88f8      	ldrh	r0, [r7, #6]
 800510c:	893a      	ldrh	r2, [r7, #8]
 800510e:	8979      	ldrh	r1, [r7, #10]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	4603      	mov	r3, r0
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f002 fac2 	bl	80076a4 <I2C_RequestMemoryWrite>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d05e      	beq.n	80051e4 <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	2b04      	cmp	r3, #4
 800512c:	d105      	bne.n	800513a <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e087      	b.n	800524a <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e081      	b.n	800524a <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f002 fdce 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00f      	beq.n	8005176 <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	2b04      	cmp	r3, #4
 800515c:	d109      	bne.n	8005172 <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e06b      	b.n	800524a <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e069      	b.n	800524a <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	1c58      	adds	r0, r3, #1
 8005180:	68f9      	ldr	r1, [r7, #12]
 8005182:	6248      	str	r0, [r1, #36]	; 0x24
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	6113      	str	r3, [r2, #16]
      hi2c->XferSize--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d119      	bne.n	80051e4 <HAL_I2C_Mem_Write+0x19c>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d015      	beq.n	80051e4 <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	1c58      	adds	r0, r3, #1
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	6248      	str	r0, [r1, #36]	; 0x24
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	6113      	str	r3, [r2, #16]
        hi2c->XferSize--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1ac      	bne.n	8005146 <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f002 fdb8 	bl	8007d66 <I2C_WaitOnBTFFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00f      	beq.n	800521c <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2b04      	cmp	r3, #4
 8005202:	d109      	bne.n	8005218 <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005212:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e018      	b.n	800524a <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e016      	b.n	800524a <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	00100002 	.word	0x00100002
 8005258:	ffff0000 	.word	0xffff0000

0800525c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08c      	sub	sp, #48	; 0x30
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	4603      	mov	r3, r0
 800526c:	817b      	strh	r3, [r7, #10]
 800526e:	460b      	mov	r3, r1
 8005270:	813b      	strh	r3, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8005276:	2300      	movs	r3, #0
 8005278:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800527a:	f7fb f857 	bl	800032c <HAL_GetTick>
 800527e:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b20      	cmp	r3, #32
 800528a:	f040 8212 	bne.w	80056b2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	2319      	movs	r3, #25
 8005294:	2201      	movs	r2, #1
 8005296:	4984      	ldr	r1, [pc, #528]	; (80054a8 <HAL_I2C_Mem_Read+0x24c>)
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f002 fc68 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80052a4:	2302      	movs	r3, #2
 80052a6:	e205      	b.n	80056b4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_I2C_Mem_Read+0x5a>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e1fe      	b.n	80056b4 <HAL_I2C_Mem_Read+0x458>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d007      	beq.n	80052dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	6812      	ldr	r2, [r2, #0]
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2222      	movs	r2, #34	; 0x22
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2240      	movs	r2, #64	; 0x40
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800530c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a66      	ldr	r2, [pc, #408]	; (80054ac <HAL_I2C_Mem_Read+0x250>)
 8005312:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800531e:	88f8      	ldrh	r0, [r7, #6]
 8005320:	893a      	ldrh	r2, [r7, #8]
 8005322:	8979      	ldrh	r1, [r7, #10]
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	4603      	mov	r3, r0
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f002 fa4a 	bl	80077c8 <I2C_RequestMemoryRead>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00f      	beq.n	800535a <HAL_I2C_Mem_Read+0xfe>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b04      	cmp	r3, #4
 8005340:	d105      	bne.n	800534e <HAL_I2C_Mem_Read+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e1b2      	b.n	80056b4 <HAL_I2C_Mem_Read+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e1ac      	b.n	80056b4 <HAL_I2C_Mem_Read+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535e:	2b00      	cmp	r3, #0
 8005360:	d113      	bne.n	800538a <HAL_I2C_Mem_Read+0x12e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005362:	2300      	movs	r3, #0
 8005364:	623b      	str	r3, [r7, #32]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	623b      	str	r3, [r7, #32]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	623b      	str	r3, [r7, #32]
 8005376:	6a3b      	ldr	r3, [r7, #32]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	e180      	b.n	800568c <HAL_I2C_Mem_Read+0x430>
    }
    else if(hi2c->XferSize == 1U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	2b01      	cmp	r3, #1
 8005390:	d11b      	bne.n	80053ca <HAL_I2C_Mem_Read+0x16e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	61fb      	str	r3, [r7, #28]
 80053b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	6812      	ldr	r2, [r2, #0]
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e160      	b.n	800568c <HAL_I2C_Mem_Read+0x430>
    }
    else if(hi2c->XferSize == 2U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d11b      	bne.n	800540a <HAL_I2C_Mem_Read+0x1ae>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f2:	2300      	movs	r3, #0
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	e140      	b.n	800568c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8005420:	e134      	b.n	800568c <HAL_I2C_Mem_Read+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	2b03      	cmp	r3, #3
 8005428:	f200 80eb 	bhi.w	8005602 <HAL_I2C_Mem_Read+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005430:	2b01      	cmp	r3, #1
 8005432:	d127      	bne.n	8005484 <HAL_I2C_Mem_Read+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8005434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f002 fd0a 	bl	8007e52 <I2C_WaitOnRXNEFlagUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <HAL_I2C_Mem_Read+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	2b20      	cmp	r3, #32
 800544a:	d101      	bne.n	8005450 <HAL_I2C_Mem_Read+0x1f4>
            {
              return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e131      	b.n	80056b4 <HAL_I2C_Mem_Read+0x458>
            }
            else
            {
              return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e12f      	b.n	80056b4 <HAL_I2C_Mem_Read+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	1c59      	adds	r1, r3, #1
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	6251      	str	r1, [r2, #36]	; 0x24
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	6912      	ldr	r2, [r2, #16]
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005482:	e103      	b.n	800568c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005488:	2b02      	cmp	r3, #2
 800548a:	d14a      	bne.n	8005522 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	2200      	movs	r2, #0
 8005494:	4906      	ldr	r1, [pc, #24]	; (80054b0 <HAL_I2C_Mem_Read+0x254>)
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f002 fb69 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d008      	beq.n	80054b4 <HAL_I2C_Mem_Read+0x258>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e106      	b.n	80056b4 <HAL_I2C_Mem_Read+0x458>
 80054a6:	bf00      	nop
 80054a8:	00100002 	.word	0x00100002
 80054ac:	ffff0000 	.word	0xffff0000
 80054b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	1c59      	adds	r1, r3, #1
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	6251      	str	r1, [r2, #36]	; 0x24
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	6912      	ldr	r2, [r2, #16]
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	1c59      	adds	r1, r3, #1
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	6251      	str	r1, [r2, #36]	; 0x24
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	6912      	ldr	r2, [r2, #16]
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005520:	e0b4      	b.n	800568c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	2200      	movs	r2, #0
 800552a:	4964      	ldr	r1, [pc, #400]	; (80056bc <HAL_I2C_Mem_Read+0x460>)
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f002 fb1e 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e0bb      	b.n	80056b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	1c59      	adds	r1, r3, #1
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	6251      	str	r1, [r2, #36]	; 0x24
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	6912      	ldr	r2, [r2, #16]
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2200      	movs	r2, #0
 8005582:	494e      	ldr	r1, [pc, #312]	; (80056bc <HAL_I2C_Mem_Read+0x460>)
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f002 faf2 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_I2C_Mem_Read+0x338>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e08f      	b.n	80056b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	6812      	ldr	r2, [r2, #0]
 800559e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	1c59      	adds	r1, r3, #1
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	6251      	str	r1, [r2, #36]	; 0x24
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	6912      	ldr	r2, [r2, #16]
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	1c59      	adds	r1, r3, #1
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	6251      	str	r1, [r2, #36]	; 0x24
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	6912      	ldr	r2, [r2, #16]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005600:	e044      	b.n	800568c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005604:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f002 fc23 	bl	8007e52 <I2C_WaitOnRXNEFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <HAL_I2C_Mem_Read+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	2b20      	cmp	r3, #32
 8005618:	d101      	bne.n	800561e <HAL_I2C_Mem_Read+0x3c2>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e04a      	b.n	80056b4 <HAL_I2C_Mem_Read+0x458>
          }
          else
          {
            return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e048      	b.n	80056b4 <HAL_I2C_Mem_Read+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	6251      	str	r1, [r2, #36]	; 0x24
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	6912      	ldr	r2, [r2, #16]
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b04      	cmp	r3, #4
 800565c:	d116      	bne.n	800568c <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	1c59      	adds	r1, r3, #1
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	6251      	str	r1, [r2, #36]	; 0x24
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	6912      	ldr	r2, [r2, #16]
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005690:	2b00      	cmp	r3, #0
 8005692:	f47f aec6 	bne.w	8005422 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e000      	b.n	80056b4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
  }
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3728      	adds	r7, #40	; 0x28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	00010004 	.word	0x00010004

080056c0 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	4608      	mov	r0, r1
 80056ca:	4611      	mov	r1, r2
 80056cc:	461a      	mov	r2, r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	817b      	strh	r3, [r7, #10]
 80056d2:	460b      	mov	r3, r1
 80056d4:	813b      	strh	r3, [r7, #8]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	f040 8081 	bne.w	80057ee <HAL_I2C_Mem_Write_IT+0x12e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80056ec:	4b43      	ldr	r3, [pc, #268]	; (80057fc <HAL_I2C_Mem_Write_IT+0x13c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	08db      	lsrs	r3, r3, #3
 80056f2:	4a43      	ldr	r2, [pc, #268]	; (8005800 <HAL_I2C_Mem_Write_IT+0x140>)
 80056f4:	fba2 2303 	umull	r2, r3, r2, r3
 80056f8:	0a1a      	lsrs	r2, r3, #8
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009a      	lsls	r2, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	1e5a      	subs	r2, r3, #1
 800570a:	617a      	str	r2, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10c      	bne.n	800572a <HAL_I2C_Mem_Write_IT+0x6a>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8005726:	2303      	movs	r3, #3
 8005728:	e062      	b.n	80057f0 <HAL_I2C_Mem_Write_IT+0x130>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b02      	cmp	r3, #2
 8005736:	d0e6      	beq.n	8005706 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_I2C_Mem_Write_IT+0x86>
 8005742:	2302      	movs	r3, #2
 8005744:	e054      	b.n	80057f0 <HAL_I2C_Mem_Write_IT+0x130>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b01      	cmp	r3, #1
 800575a:	d007      	beq.n	800576c <HAL_I2C_Mem_Write_IT+0xac>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	6812      	ldr	r2, [r2, #0]
 8005776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800577a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2221      	movs	r2, #33	; 0x21
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2240      	movs	r2, #64	; 0x40
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a3a      	ldr	r2, [r7, #32]
 8005796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferSize = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800579c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a17      	ldr	r2, [pc, #92]	; (8005804 <HAL_I2C_Mem_Write_IT+0x144>)
 80057a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress = DevAddress;
 80057aa:	897a      	ldrh	r2, [r7, #10]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress = MemAddress;
 80057b0:	893a      	ldrh	r2, [r7, #8]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize = MemAddSize;
 80057b6:	88fa      	ldrh	r2, [r7, #6]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount = 0U;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	6812      	ldr	r2, [r2, #0]
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	6852      	ldr	r2, [r2, #4]
 80057e4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80057e8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e000      	b.n	80057f0 <HAL_I2C_Mem_Write_IT+0x130>
  }
  else
  {
    return HAL_BUSY;
 80057ee:	2302      	movs	r3, #2
  }
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	20000008 	.word	0x20000008
 8005800:	14f8b589 	.word	0x14f8b589
 8005804:	ffff0000 	.word	0xffff0000

08005808 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	4608      	mov	r0, r1
 8005812:	4611      	mov	r1, r2
 8005814:	461a      	mov	r2, r3
 8005816:	4603      	mov	r3, r0
 8005818:	817b      	strh	r3, [r7, #10]
 800581a:	460b      	mov	r3, r1
 800581c:	813b      	strh	r3, [r7, #8]
 800581e:	4613      	mov	r3, r2
 8005820:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b20      	cmp	r3, #32
 8005830:	f040 808d 	bne.w	800594e <HAL_I2C_Mem_Read_IT+0x146>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8005834:	4b49      	ldr	r3, [pc, #292]	; (800595c <HAL_I2C_Mem_Read_IT+0x154>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	08db      	lsrs	r3, r3, #3
 800583a:	4a49      	ldr	r2, [pc, #292]	; (8005960 <HAL_I2C_Mem_Read_IT+0x158>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	0a1a      	lsrs	r2, r3, #8
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	009a      	lsls	r2, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	1e5a      	subs	r2, r3, #1
 8005852:	617a      	str	r2, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10c      	bne.n	8005872 <HAL_I2C_Mem_Read_IT+0x6a>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 800586e:	2303      	movs	r3, #3
 8005870:	e06e      	b.n	8005950 <HAL_I2C_Mem_Read_IT+0x148>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d0e6      	beq.n	800584e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <HAL_I2C_Mem_Read_IT+0x86>
 800588a:	2302      	movs	r3, #2
 800588c:	e060      	b.n	8005950 <HAL_I2C_Mem_Read_IT+0x148>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d007      	beq.n	80058b4 <HAL_I2C_Mem_Read_IT+0xac>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2222      	movs	r2, #34	; 0x22
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_MEM;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2240      	movs	r2, #64	; 0x40
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferSize = Size;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4a1d      	ldr	r2, [pc, #116]	; (8005964 <HAL_I2C_Mem_Read_IT+0x15c>)
 80058f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress = DevAddress;
 80058f2:	897a      	ldrh	r2, [r7, #10]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress = MemAddress;
 80058f8:	893a      	ldrh	r2, [r7, #8]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize = MemAddSize;
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount = 0U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005918:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	6812      	ldr	r2, [r2, #0]
 8005924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005928:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if(hi2c->XferSize > 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_I2C_Mem_Read_IT+0x142>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      
      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	6852      	ldr	r2, [r2, #4]
 8005944:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005948:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	e000      	b.n	8005950 <HAL_I2C_Mem_Read_IT+0x148>
  }
  else
  {
    return HAL_BUSY;
 800594e:	2302      	movs	r3, #2
  }
}
 8005950:	4618      	mov	r0, r3
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	20000008 	.word	0x20000008
 8005960:	14f8b589 	.word	0x14f8b589
 8005964:	ffff0000 	.word	0xffff0000

08005968 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	; 0x28
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	4608      	mov	r0, r1
 8005972:	4611      	mov	r1, r2
 8005974:	461a      	mov	r2, r3
 8005976:	4603      	mov	r3, r0
 8005978:	817b      	strh	r3, [r7, #10]
 800597a:	460b      	mov	r3, r1
 800597c:	813b      	strh	r3, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	61bb      	str	r3, [r7, #24]

  uint32_t tickstart = 0x00U;
 8005986:	2300      	movs	r3, #0
 8005988:	61fb      	str	r3, [r7, #28]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800598a:	f7fa fccf 	bl	800032c <HAL_GetTick>
 800598e:	61f8      	str	r0, [r7, #28]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b20      	cmp	r3, #32
 800599a:	f040 80c7 	bne.w	8005b2c <HAL_I2C_Mem_Write_DMA+0x1c4>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 800599e:	4b66      	ldr	r3, [pc, #408]	; (8005b38 <HAL_I2C_Mem_Write_DMA+0x1d0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	08db      	lsrs	r3, r3, #3
 80059a4:	4a65      	ldr	r2, [pc, #404]	; (8005b3c <HAL_I2C_Mem_Write_DMA+0x1d4>)
 80059a6:	fba2 2303 	umull	r2, r3, r2, r3
 80059aa:	0a1a      	lsrs	r2, r3, #8
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009a      	lsls	r2, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
    do
    {
      if(count-- == 0U)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	1e5a      	subs	r2, r3, #1
 80059bc:	61ba      	str	r2, [r7, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10c      	bne.n	80059dc <HAL_I2C_Mem_Write_DMA+0x74>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 80059d8:	2303      	movs	r3, #3
 80059da:	e0a8      	b.n	8005b2e <HAL_I2C_Mem_Write_DMA+0x1c6>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d0e6      	beq.n	80059b8 <HAL_I2C_Mem_Write_DMA+0x50>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_I2C_Mem_Write_DMA+0x90>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e09a      	b.n	8005b2e <HAL_I2C_Mem_Write_DMA+0x1c6>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d007      	beq.n	8005a1e <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	6812      	ldr	r2, [r2, #0]
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	6812      	ldr	r2, [r2, #0]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a2c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2221      	movs	r2, #33	; 0x21
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2240      	movs	r2, #64	; 0x40
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferSize = Size;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005a4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4a39      	ldr	r2, [pc, #228]	; (8005b40 <HAL_I2C_Mem_Write_DMA+0x1d8>)
 8005a5a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hi2c->XferSize > 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d061      	beq.n	8005b28 <HAL_I2C_Mem_Write_DMA+0x1c0>
    {    
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a68:	4a36      	ldr	r2, [pc, #216]	; (8005b44 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8005a6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a70:	4a35      	ldr	r2, [pc, #212]	; (8005b48 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8005a72:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a78:	2200      	movs	r2, #0
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a80:	2200      	movs	r2, #0
 8005a82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a88:	2200      	movs	r2, #0
 8005a8a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a90:	2200      	movs	r2, #0
 8005a92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3310      	adds	r3, #16
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aaa:	f7fc fadc 	bl	8002066 <HAL_DMA_Start_IT>

      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005aae:	88f8      	ldrh	r0, [r7, #6]
 8005ab0:	893a      	ldrh	r2, [r7, #8]
 8005ab2:	8979      	ldrh	r1, [r7, #10]
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	2323      	movs	r3, #35	; 0x23
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	4603      	mov	r3, r0
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f001 fdf0 	bl	80076a4 <I2C_RequestMemoryWrite>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00f      	beq.n	8005aea <HAL_I2C_Mem_Write_DMA+0x182>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d105      	bne.n	8005ade <HAL_I2C_Mem_Write_DMA+0x176>
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e027      	b.n	8005b2e <HAL_I2C_Mem_Write_DMA+0x1c6>
        }
        else
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e021      	b.n	8005b2e <HAL_I2C_Mem_Write_DMA+0x1c6>
        }
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	697b      	ldr	r3, [r7, #20]
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	6852      	ldr	r2, [r2, #4]
 8005b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b16:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	6852      	ldr	r2, [r2, #4]
 8005b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b26:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e000      	b.n	8005b2e <HAL_I2C_Mem_Write_DMA+0x1c6>
  }
  else
  {
    return HAL_BUSY;
 8005b2c:	2302      	movs	r3, #2
  }
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3720      	adds	r7, #32
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000008 	.word	0x20000008
 8005b3c:	14f8b589 	.word	0x14f8b589
 8005b40:	ffff0000 	.word	0xffff0000
 8005b44:	0800798d 	.word	0x0800798d
 8005b48:	08007a79 	.word	0x08007a79

08005b4c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	; 0x28
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	4608      	mov	r0, r1
 8005b56:	4611      	mov	r1, r2
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	817b      	strh	r3, [r7, #10]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	813b      	strh	r3, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
  __IO uint32_t count = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61bb      	str	r3, [r7, #24]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b6e:	f7fa fbdd 	bl	800032c <HAL_GetTick>
 8005b72:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	f040 8117 	bne.w	8005db0 <HAL_I2C_Mem_Read_DMA+0x264>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8005b82:	4b8e      	ldr	r3, [pc, #568]	; (8005dbc <HAL_I2C_Mem_Read_DMA+0x270>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	08db      	lsrs	r3, r3, #3
 8005b88:	4a8d      	ldr	r2, [pc, #564]	; (8005dc0 <HAL_I2C_Mem_Read_DMA+0x274>)
 8005b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8e:	0a1a      	lsrs	r2, r3, #8
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009a      	lsls	r2, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
    do
    {
      if(count-- == 0U)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	1e5a      	subs	r2, r3, #1
 8005ba0:	61ba      	str	r2, [r7, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_I2C_Mem_Read_DMA+0x74>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e0f8      	b.n	8005db2 <HAL_I2C_Mem_Read_DMA+0x266>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d0e6      	beq.n	8005b9c <HAL_I2C_Mem_Read_DMA+0x50>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_I2C_Mem_Read_DMA+0x90>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e0ea      	b.n	8005db2 <HAL_I2C_Mem_Read_DMA+0x266>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d007      	beq.n	8005c02 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	6812      	ldr	r2, [r2, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c10:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2222      	movs	r2, #34	; 0x22
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2240      	movs	r2, #64	; 0x40
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4a63      	ldr	r2, [pc, #396]	; (8005dc4 <HAL_I2C_Mem_Read_DMA+0x278>)
 8005c38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	851a      	strh	r2, [r3, #40]	; 0x28

    if(hi2c->XferSize > 0U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d076      	beq.n	8005d3a <HAL_I2C_Mem_Read_DMA+0x1ee>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	4a5d      	ldr	r2, [pc, #372]	; (8005dc8 <HAL_I2C_Mem_Read_DMA+0x27c>)
 8005c52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	4a5c      	ldr	r2, [pc, #368]	; (8005dcc <HAL_I2C_Mem_Read_DMA+0x280>)
 8005c5a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	2200      	movs	r2, #0
 8005c62:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	2200      	movs	r2, #0
 8005c6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	2200      	movs	r2, #0
 8005c72:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	2200      	movs	r2, #0
 8005c7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3310      	adds	r3, #16
 8005c86:	4619      	mov	r1, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c92:	f7fc f9e8 	bl	8002066 <HAL_DMA_Start_IT>

      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005c96:	88f8      	ldrh	r0, [r7, #6]
 8005c98:	893a      	ldrh	r2, [r7, #8]
 8005c9a:	8979      	ldrh	r1, [r7, #10]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	9301      	str	r3, [sp, #4]
 8005ca0:	2323      	movs	r3, #35	; 0x23
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f001 fd8e 	bl	80077c8 <I2C_RequestMemoryRead>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00f      	beq.n	8005cd2 <HAL_I2C_Mem_Read_DMA+0x186>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d105      	bne.n	8005cc6 <HAL_I2C_Mem_Read_DMA+0x17a>
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e075      	b.n	8005db2 <HAL_I2C_Mem_Read_DMA+0x266>
        }
        else
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e06f      	b.n	8005db2 <HAL_I2C_Mem_Read_DMA+0x266>
        }
      }

      if(Size == 1U)
 8005cd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d108      	bne.n	8005cea <HAL_I2C_Mem_Read_DMA+0x19e>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	6812      	ldr	r2, [r2, #0]
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	e007      	b.n	8005cfa <HAL_I2C_Mem_Read_DMA+0x1ae>
      }
      else
      {
        /* Enable Last DMA bit */
        hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	6852      	ldr	r2, [r2, #4]
 8005cf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cf8:	605a      	str	r2, [r3, #4]
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	697b      	ldr	r3, [r7, #20]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	6852      	ldr	r2, [r2, #4]
 8005d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d26:	605a      	str	r2, [r3, #4]
      
     /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	6812      	ldr	r2, [r2, #0]
 8005d30:	6852      	ldr	r2, [r2, #4]
 8005d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d36:	605a      	str	r2, [r3, #4]
 8005d38:	e038      	b.n	8005dac <HAL_I2C_Mem_Read_DMA+0x260>
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005d3a:	88f8      	ldrh	r0, [r7, #6]
 8005d3c:	893a      	ldrh	r2, [r7, #8]
 8005d3e:	8979      	ldrh	r1, [r7, #10]
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	2323      	movs	r3, #35	; 0x23
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	4603      	mov	r3, r0
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f001 fd3c 	bl	80077c8 <I2C_RequestMemoryRead>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00f      	beq.n	8005d76 <HAL_I2C_Mem_Read_DMA+0x22a>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d105      	bne.n	8005d6a <HAL_I2C_Mem_Read_DMA+0x21e>
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e023      	b.n	8005db2 <HAL_I2C_Mem_Read_DMA+0x266>
        }
        else
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e01d      	b.n	8005db2 <HAL_I2C_Mem_Read_DMA+0x266>
        }
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d76:	2300      	movs	r3, #0
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	693b      	ldr	r3, [r7, #16]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d9a:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e000      	b.n	8005db2 <HAL_I2C_Mem_Read_DMA+0x266>
  }
  else
  {
    return HAL_BUSY;
 8005db0:	2302      	movs	r3, #2
  }
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000008 	.word	0x20000008
 8005dc0:	14f8b589 	.word	0x14f8b589
 8005dc4:	ffff0000 	.word	0xffff0000
 8005dc8:	0800798d 	.word	0x0800798d
 8005dcc:	08007a79 	.word	0x08007a79

08005dd0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08c      	sub	sp, #48	; 0x30
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
 8005de4:	2300      	movs	r3, #0
 8005de6:	623b      	str	r3, [r7, #32]
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	2301      	movs	r3, #1
 8005df2:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005df4:	f7fa fa9a 	bl	800032c <HAL_GetTick>
 8005df8:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	f040 810a 	bne.w	800601c <HAL_I2C_IsDeviceReady+0x24c>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	2319      	movs	r3, #25
 8005e0e:	2201      	movs	r2, #1
 8005e10:	4985      	ldr	r1, [pc, #532]	; (8006028 <HAL_I2C_IsDeviceReady+0x258>)
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f001 feab 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_I2C_IsDeviceReady+0x52>
    {
      return HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e0fd      	b.n	800601e <HAL_I2C_IsDeviceReady+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_I2C_IsDeviceReady+0x60>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e0f6      	b.n	800601e <HAL_I2C_IsDeviceReady+0x24e>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d007      	beq.n	8005e56 <HAL_I2C_IsDeviceReady+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	6812      	ldr	r2, [r2, #0]
 8005e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2224      	movs	r2, #36	; 0x24
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4a6d      	ldr	r2, [pc, #436]	; (800602c <HAL_I2C_IsDeviceReady+0x25c>)
 8005e78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	6812      	ldr	r2, [r2, #0]
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f001 fe69 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_I2C_IsDeviceReady+0xd6>
      {
        return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e0bb      	b.n	800601e <HAL_I2C_IsDeviceReady+0x24e>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	897a      	ldrh	r2, [r7, #10]
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005eb2:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005eb4:	f7fa fa3a 	bl	800032c <HAL_GetTick>
 8005eb8:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	bf0c      	ite	eq
 8005ec8:	2301      	moveq	r3, #1
 8005eca:	2300      	movne	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8005ef2:	e02a      	b.n	8005f4a <HAL_I2C_IsDeviceReady+0x17a>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d007      	beq.n	8005f0a <HAL_I2C_IsDeviceReady+0x13a>
 8005efa:	f7fa fa17 	bl	800032c <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	1ad2      	subs	r2, r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d903      	bls.n	8005f12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	22a0      	movs	r2, #160	; 0xa0
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	bf0c      	ite	eq
 8005f20:	2301      	moveq	r3, #1
 8005f22:	2300      	movne	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f36:	bf0c      	ite	eq
 8005f38:	2301      	moveq	r3, #1
 8005f3a:	2300      	movne	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d105      	bne.n	8005f5c <HAL_I2C_IsDeviceReady+0x18c>
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <HAL_I2C_IsDeviceReady+0x18c>
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2ba0      	cmp	r3, #160	; 0xa0
 8005f5a:	d1cb      	bne.n	8005ef4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d129      	bne.n	8005fc6 <HAL_I2C_IsDeviceReady+0x1f6>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	6812      	ldr	r2, [r2, #0]
 8005f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	613b      	str	r3, [r7, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	2319      	movs	r3, #25
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4921      	ldr	r1, [pc, #132]	; (8006028 <HAL_I2C_IsDeviceReady+0x258>)
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f001 fde3 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_I2C_IsDeviceReady+0x1e2>
        {
          return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e035      	b.n	800601e <HAL_I2C_IsDeviceReady+0x24e>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e02b      	b.n	800601e <HAL_I2C_IsDeviceReady+0x24e>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	6812      	ldr	r2, [r2, #0]
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fde:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	2319      	movs	r3, #25
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	490f      	ldr	r1, [pc, #60]	; (8006028 <HAL_I2C_IsDeviceReady+0x258>)
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f001 fdbf 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_I2C_IsDeviceReady+0x22a>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e011      	b.n	800601e <HAL_I2C_IsDeviceReady+0x24e>
        }
      }
    }while(I2C_Trials++ < Trials);
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	617a      	str	r2, [r7, #20]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	4293      	cmp	r3, r2
 8006004:	f4ff af39 	bcc.w	8005e7a <HAL_I2C_IsDeviceReady+0xaa>

    hi2c->State = HAL_I2C_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <HAL_I2C_IsDeviceReady+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3728      	adds	r7, #40	; 0x28
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	00100002 	.word	0x00100002
 800602c:	ffff0000 	.word	0xffff0000

08006030 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	617b      	str	r3, [r7, #20]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	613b      	str	r3, [r7, #16]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	60fb      	str	r3, [r7, #12]

  uint32_t CurrentMode  = hi2c->Mode;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006056:	b2db      	uxtb	r3, r3
 8006058:	60bb      	str	r3, [r7, #8]

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b10      	cmp	r3, #16
 800605e:	d002      	beq.n	8006066 <HAL_I2C_EV_IRQHandler+0x36>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d172      	bne.n	800614c <HAL_I2C_EV_IRQHandler+0x11c>
  {
    /* SB Set ----------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <HAL_I2C_EV_IRQHandler+0x52>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_I2C_EV_IRQHandler+0x52>
    {
      I2C_Master_SB(hi2c);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fcc8 	bl	8006a10 <I2C_Master_SB>
 8006080:	e01a      	b.n	80060b8 <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4b65      	ldr	r3, [pc, #404]	; (800621c <HAL_I2C_EV_IRQHandler+0x1ec>)
 8006086:	4013      	ands	r3, r2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <HAL_I2C_EV_IRQHandler+0x6e>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_I2C_EV_IRQHandler+0x6e>
    {
      I2C_Master_ADD10(hi2c);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fd25 	bl	8006ae6 <I2C_Master_ADD10>
 800609c:	e00c      	b.n	80060b8 <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4b5f      	ldr	r3, [pc, #380]	; (8006220 <HAL_I2C_EV_IRQHandler+0x1f0>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d007      	beq.n	80060b8 <HAL_I2C_EV_IRQHandler+0x88>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_I2C_EV_IRQHandler+0x88>
    {
      I2C_Master_ADDR(hi2c);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fd28 	bl	8006b08 <I2C_Master_ADDR>
    }

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4b5a      	ldr	r3, [pc, #360]	; (8006224 <HAL_I2C_EV_IRQHandler+0x1f4>)
 80060bc:	4013      	ands	r3, r2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d022      	beq.n	8006108 <HAL_I2C_EV_IRQHandler+0xd8>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4b58      	ldr	r3, [pc, #352]	; (8006228 <HAL_I2C_EV_IRQHandler+0x1f8>)
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00d      	beq.n	80060e8 <HAL_I2C_EV_IRQHandler+0xb8>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d008      	beq.n	80060e8 <HAL_I2C_EV_IRQHandler+0xb8>
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4b54      	ldr	r3, [pc, #336]	; (800622c <HAL_I2C_EV_IRQHandler+0x1fc>)
 80060da:	4013      	ands	r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d103      	bne.n	80060e8 <HAL_I2C_EV_IRQHandler+0xb8>
      {
        I2C_MasterTransmit_TXE(hi2c);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f9e3 	bl	80064ac <I2C_MasterTransmit_TXE>
 80060e6:	e030      	b.n	800614a <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4b50      	ldr	r3, [pc, #320]	; (800622c <HAL_I2C_EV_IRQHandler+0x1fc>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 808f 	beq.w	8006212 <HAL_I2C_EV_IRQHandler+0x1e2>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 8089 	beq.w	8006212 <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterTransmit_BTF(hi2c);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fac8 	bl	8006696 <I2C_MasterTransmit_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8006106:	e084      	b.n	8006212 <HAL_I2C_EV_IRQHandler+0x1e2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4b49      	ldr	r3, [pc, #292]	; (8006230 <HAL_I2C_EV_IRQHandler+0x200>)
 800610c:	4013      	ands	r3, r2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00d      	beq.n	800612e <HAL_I2C_EV_IRQHandler+0xfe>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006118:	2b00      	cmp	r3, #0
 800611a:	d008      	beq.n	800612e <HAL_I2C_EV_IRQHandler+0xfe>
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4b43      	ldr	r3, [pc, #268]	; (800622c <HAL_I2C_EV_IRQHandler+0x1fc>)
 8006120:	4013      	ands	r3, r2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d103      	bne.n	800612e <HAL_I2C_EV_IRQHandler+0xfe>
      {
        I2C_MasterReceive_RXNE(hi2c);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fb2a 	bl	8006780 <I2C_MasterReceive_RXNE>
 800612c:	e00d      	b.n	800614a <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4b3e      	ldr	r3, [pc, #248]	; (800622c <HAL_I2C_EV_IRQHandler+0x1fc>)
 8006132:	4013      	ands	r3, r2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d06c      	beq.n	8006212 <HAL_I2C_EV_IRQHandler+0x1e2>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800613e:	2b00      	cmp	r3, #0
 8006140:	d067      	beq.n	8006212 <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterReceive_BTF(hi2c);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fb96 	bl	8006874 <I2C_MasterReceive_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8006148:	e063      	b.n	8006212 <HAL_I2C_EV_IRQHandler+0x1e2>
 800614a:	e062      	b.n	8006212 <HAL_I2C_EV_IRQHandler+0x1e2>
  }
  /* Slave mode selected */
  else
  {
    /* ADDR set --------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4b34      	ldr	r3, [pc, #208]	; (8006220 <HAL_I2C_EV_IRQHandler+0x1f0>)
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d008      	beq.n	8006168 <HAL_I2C_EV_IRQHandler+0x138>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_I2C_EV_IRQHandler+0x138>
    {
      I2C_Slave_ADDR(hi2c);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fef0 	bl	8006f46 <I2C_Slave_ADDR>
 8006166:	e055      	b.n	8006214 <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4b32      	ldr	r3, [pc, #200]	; (8006234 <HAL_I2C_EV_IRQHandler+0x204>)
 800616c:	4013      	ands	r3, r2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d008      	beq.n	8006184 <HAL_I2C_EV_IRQHandler+0x154>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <HAL_I2C_EV_IRQHandler+0x154>
    {
      I2C_Slave_STOPF(hi2c);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 ff0c 	bl	8006f9a <I2C_Slave_STOPF>
 8006182:	e047      	b.n	8006214 <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4b27      	ldr	r3, [pc, #156]	; (8006224 <HAL_I2C_EV_IRQHandler+0x1f4>)
 8006188:	4013      	ands	r3, r2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d020      	beq.n	80061d0 <HAL_I2C_EV_IRQHandler+0x1a0>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4b25      	ldr	r3, [pc, #148]	; (8006228 <HAL_I2C_EV_IRQHandler+0x1f8>)
 8006192:	4013      	ands	r3, r2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00d      	beq.n	80061b4 <HAL_I2C_EV_IRQHandler+0x184>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d008      	beq.n	80061b4 <HAL_I2C_EV_IRQHandler+0x184>
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4b21      	ldr	r3, [pc, #132]	; (800622c <HAL_I2C_EV_IRQHandler+0x1fc>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d103      	bne.n	80061b4 <HAL_I2C_EV_IRQHandler+0x184>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fe0e 	bl	8006dce <I2C_SlaveTransmit_TXE>
 80061b2:	e02f      	b.n	8006214 <HAL_I2C_EV_IRQHandler+0x1e4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4b1d      	ldr	r3, [pc, #116]	; (800622c <HAL_I2C_EV_IRQHandler+0x1fc>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d02a      	beq.n	8006214 <HAL_I2C_EV_IRQHandler+0x1e4>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d025      	beq.n	8006214 <HAL_I2C_EV_IRQHandler+0x1e4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fe3d 	bl	8006e48 <I2C_SlaveTransmit_BTF>
      {
        I2C_SlaveReceive_BTF(hi2c);
      }
    }
  }
}
 80061ce:	e021      	b.n	8006214 <HAL_I2C_EV_IRQHandler+0x1e4>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4b17      	ldr	r3, [pc, #92]	; (8006230 <HAL_I2C_EV_IRQHandler+0x200>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00d      	beq.n	80061f6 <HAL_I2C_EV_IRQHandler+0x1c6>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <HAL_I2C_EV_IRQHandler+0x1c6>
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4b11      	ldr	r3, [pc, #68]	; (800622c <HAL_I2C_EV_IRQHandler+0x1fc>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <HAL_I2C_EV_IRQHandler+0x1c6>
        I2C_SlaveReceive_RXNE(hi2c);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fe4a 	bl	8006e88 <I2C_SlaveReceive_RXNE>
 80061f4:	e00e      	b.n	8006214 <HAL_I2C_EV_IRQHandler+0x1e4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4b0c      	ldr	r3, [pc, #48]	; (800622c <HAL_I2C_EV_IRQHandler+0x1fc>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d009      	beq.n	8006214 <HAL_I2C_EV_IRQHandler+0x1e4>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006206:	2b00      	cmp	r3, #0
 8006208:	d004      	beq.n	8006214 <HAL_I2C_EV_IRQHandler+0x1e4>
        I2C_SlaveReceive_BTF(hi2c);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fe7a 	bl	8006f04 <I2C_SlaveReceive_BTF>
}
 8006210:	e000      	b.n	8006214 <HAL_I2C_EV_IRQHandler+0x1e4>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8006212:	bf00      	nop
}
 8006214:	bf00      	nop
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	00010008 	.word	0x00010008
 8006220:	00010002 	.word	0x00010002
 8006224:	00100004 	.word	0x00100004
 8006228:	00010080 	.word	0x00010080
 800622c:	00010004 	.word	0x00010004
 8006230:	00010040 	.word	0x00010040
 8006234:	00010010 	.word	0x00010010

08006238 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, tmp4 = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	2300      	movs	r3, #0
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	2300      	movs	r3, #0
 800624e:	613b      	str	r3, [r7, #16]
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	60fb      	str	r3, [r7, #12]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4b49      	ldr	r3, [pc, #292]	; (8006388 <HAL_I2C_ER_IRQHandler+0x150>)
 8006264:	4013      	ands	r3, r2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00f      	beq.n	800628a <HAL_I2C_ER_IRQHandler+0x52>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <HAL_I2C_ER_IRQHandler+0x52>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	f043 0201 	orr.w	r2, r3, #1
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006288:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f403 3381 	and.w	r3, r3, #66048	; 0x10200
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00f      	beq.n	80062b4 <HAL_I2C_ER_IRQHandler+0x7c>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <HAL_I2C_ER_IRQHandler+0x7c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f043 0202 	orr.w	r2, r3, #2
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80062b2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f403 3382 	and.w	r3, r3, #66560	; 0x10400
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d044      	beq.n	8006348 <HAL_I2C_ER_IRQHandler+0x110>
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d03f      	beq.n	8006348 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	61fb      	str	r3, [r7, #28]
    tmp2 = hi2c->XferCount;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	61bb      	str	r3, [r7, #24]
    tmp3 = hi2c->State;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	617b      	str	r3, [r7, #20]
    tmp4 = hi2c->PreviousState;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	613b      	str	r3, [r7, #16]
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d112      	bne.n	8006316 <HAL_I2C_ER_IRQHandler+0xde>
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10f      	bne.n	8006316 <HAL_I2C_ER_IRQHandler+0xde>
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b21      	cmp	r3, #33	; 0x21
 80062fa:	d008      	beq.n	800630e <HAL_I2C_ER_IRQHandler+0xd6>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2b29      	cmp	r3, #41	; 0x29
 8006300:	d005      	beq.n	800630e <HAL_I2C_ER_IRQHandler+0xd6>
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b28      	cmp	r3, #40	; 0x28
 8006306:	d106      	bne.n	8006316 <HAL_I2C_ER_IRQHandler+0xde>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b21      	cmp	r3, #33	; 0x21
 800630c:	d103      	bne.n	8006316 <HAL_I2C_ER_IRQHandler+0xde>
    {
      I2C_Slave_AF(hi2c);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 ff08 	bl	8007124 <I2C_Slave_AF>
 8006314:	e018      	b.n	8006348 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f043 0204 	orr.w	r2, r3, #4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	641a      	str	r2, [r3, #64]	; 0x40

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b10      	cmp	r3, #16
 800632c:	d107      	bne.n	800633e <HAL_I2C_ER_IRQHandler+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6812      	ldr	r2, [r2, #0]
 8006336:	6812      	ldr	r2, [r2, #0]
 8006338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800633c:	601a      	str	r2, [r3, #0]
      }

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006346:	615a      	str	r2, [r3, #20]
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f403 3384 	and.w	r3, r3, #67584	; 0x10800
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00f      	beq.n	8006372 <HAL_I2C_ER_IRQHandler+0x13a>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00a      	beq.n	8006372 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	f043 0208 	orr.w	r2, r3, #8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	641a      	str	r2, [r3, #64]	; 0x40
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006370:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_I2C_ER_IRQHandler+0x148>
  {
    I2C_ITError(hi2c);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 ff44 	bl	8007208 <I2C_ITError>
  }
}
 8006380:	bf00      	nop
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	00010100 	.word	0x00010100

0800638c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback can be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback can be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback can be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback can be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	70fb      	strb	r3, [r7, #3]
 80063e8:	4613      	mov	r3, r2
 80063ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback can be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

    /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback can be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback can be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback can be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback can be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646a:	b2db      	uxtb	r3, r3
}
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006486:	b2db      	uxtb	r3, r3
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	617b      	str	r3, [r7, #20]
  uint32_t CurrentMode        = hi2c->Mode;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	613b      	str	r3, [r7, #16]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	60fb      	str	r3, [r7, #12]

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d150      	bne.n	8006578 <I2C_MasterTransmit_TXE+0xcc>
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b21      	cmp	r3, #33	; 0x21
 80064da:	d14d      	bne.n	8006578 <I2C_MasterTransmit_TXE+0xcc>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d01d      	beq.n	800651e <I2C_MasterTransmit_TXE+0x72>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d01a      	beq.n	800651e <I2C_MasterTransmit_TXE+0x72>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064ee:	d016      	beq.n	800651e <I2C_MasterTransmit_TXE+0x72>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6812      	ldr	r2, [r2, #0]
 80064f8:	6852      	ldr	r2, [r2, #4]
 80064fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064fe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2211      	movs	r2, #17
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff ff38 	bl	800638c <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800651c:	e0b6      	b.n	800668c <I2C_MasterTransmit_TXE+0x1e0>
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	6852      	ldr	r2, [r2, #4]
 8006528:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800652c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800653c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d107      	bne.n	8006568 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff ff53 	bl	800640c <HAL_I2C_MemTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006566:	e091      	b.n	800668c <I2C_MasterTransmit_TXE+0x1e0>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff ff0b 	bl	800638c <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006576:	e089      	b.n	800668c <I2C_MasterTransmit_TXE+0x1e0>
      }
    }
  }
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2b21      	cmp	r3, #33	; 0x21
 800657c:	d006      	beq.n	800658c <I2C_MasterTransmit_TXE+0xe0>
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	f040 8083 	bne.w	800668c <I2C_MasterTransmit_TXE+0x1e0>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b22      	cmp	r3, #34	; 0x22
 800658a:	d17f      	bne.n	800668c <I2C_MasterTransmit_TXE+0x1e0>
  {
    if(hi2c->XferCount == 0U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d108      	bne.n	80065a8 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	6852      	ldr	r2, [r2, #4]
 80065a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a4:	605a      	str	r2, [r3, #4]
 80065a6:	e071      	b.n	800668c <I2C_MasterTransmit_TXE+0x1e0>
    }
    else
    {
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b40      	cmp	r3, #64	; 0x40
 80065b2:	d15b      	bne.n	800666c <I2C_MasterTransmit_TXE+0x1c0>
      {
        if(hi2c->EventCount == 0)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d11d      	bne.n	80065f8 <I2C_MasterTransmit_TXE+0x14c>
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10b      	bne.n	80065dc <I2C_MasterTransmit_TXE+0x130>
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount += 2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d4:	1c9a      	adds	r2, r3, #2
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	651a      	str	r2, [r3, #80]	; 0x50
 80065da:	e057      	b.n	800668c <I2C_MasterTransmit_TXE+0x1e0>
          }
          /* If Memory address size is 16Bit */
          else
          {
            /* Send MSB of Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065e4:	b292      	uxth	r2, r2
 80065e6:	1212      	asrs	r2, r2, #8
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount++;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	651a      	str	r2, [r3, #80]	; 0x50
 80065f6:	e049      	b.n	800668c <I2C_MasterTransmit_TXE+0x1e0>
          }
        }
        else if(hi2c->EventCount == 1)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d10b      	bne.n	8006618 <I2C_MasterTransmit_TXE+0x16c>
        {
          /* Send LSB of Memory Address */
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	611a      	str	r2, [r3, #16]
          
          hi2c->EventCount++;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	651a      	str	r2, [r3, #80]	; 0x50
 8006616:	e039      	b.n	800668c <I2C_MasterTransmit_TXE+0x1e0>
        }
        else if(hi2c->EventCount == 2)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	2b02      	cmp	r3, #2
 800661e:	d135      	bne.n	800668c <I2C_MasterTransmit_TXE+0x1e0>
        {
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b22      	cmp	r3, #34	; 0x22
 800662a:	d108      	bne.n	800663e <I2C_MasterTransmit_TXE+0x192>
          {
            /* Generate Restart */
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6812      	ldr	r2, [r2, #0]
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e026      	b.n	800668c <I2C_MasterTransmit_TXE+0x1e0>
          }
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b21      	cmp	r3, #33	; 0x21
 8006648:	d120      	bne.n	800668c <I2C_MasterTransmit_TXE+0x1e0>
          {
            /* Write data to DR */
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	1c58      	adds	r0, r3, #1
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	6248      	str	r0, [r1, #36]	; 0x24
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	6113      	str	r3, [r2, #16]
            hi2c->XferCount--;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	855a      	strh	r2, [r3, #42]	; 0x2a
 800666a:	e00f      	b.n	800668c <I2C_MasterTransmit_TXE+0x1e0>
        }
      }
      else
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	1c58      	adds	r0, r3, #1
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	6248      	str	r0, [r1, #36]	; 0x24
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006682:	b29b      	uxth	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	855a      	strh	r2, [r3, #42]	; 0x2a
      }
    }
  }
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	60fb      	str	r3, [r7, #12]

  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b21      	cmp	r3, #33	; 0x21
 80066ae:	d162      	bne.n	8006776 <I2C_MasterTransmit_BTF+0xe0>
  {    
    if(hi2c->XferCount != 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d010      	beq.n	80066dc <I2C_MasterTransmit_BTF+0x46>
    {
      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	1c58      	adds	r0, r3, #1
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	6248      	str	r0, [r1, #36]	; 0x24
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066da:	e04c      	b.n	8006776 <I2C_MasterTransmit_BTF+0xe0>
    }
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d01d      	beq.n	800671e <I2C_MasterTransmit_BTF+0x88>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d01a      	beq.n	800671e <I2C_MasterTransmit_BTF+0x88>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066ee:	d016      	beq.n	800671e <I2C_MasterTransmit_BTF+0x88>
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	6852      	ldr	r2, [r2, #4]
 80066fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066fe:	605a      	str	r2, [r3, #4]
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2211      	movs	r2, #17
 8006704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff fe38 	bl	800638c <HAL_I2C_MasterTxCpltCallback>
 800671c:	e02b      	b.n	8006776 <I2C_MasterTransmit_BTF+0xe0>
      }
      else /* Generate Stop condition then Call TxCpltCallback() */
      {
        /* Disable EVT, BUF and ERR interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6812      	ldr	r2, [r2, #0]
 8006726:	6852      	ldr	r2, [r2, #4]
 8006728:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800672c:	605a      	str	r2, [r3, #4]
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	6812      	ldr	r2, [r2, #0]
 8006738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800673c:	601a      	str	r2, [r3, #0]
        
        hi2c->PreviousState = I2C_STATE_NONE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	d107      	bne.n	8006768 <I2C_MasterTransmit_BTF+0xd2>
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff fe53 	bl	800640c <HAL_I2C_MemTxCpltCallback>
 8006766:	e006      	b.n	8006776 <I2C_MasterTransmit_BTF+0xe0>
        }
        else
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff fe0b 	bl	800638c <HAL_I2C_MasterTxCpltCallback>
        }
      }
    }
  }
  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b22      	cmp	r3, #34	; 0x22
 8006792:	d16a      	bne.n	800686a <I2C_MasterReceive_RXNE+0xea>
  {
    uint32_t tmp = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]
    
    tmp = hi2c->XferCount;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679c:	b29b      	uxth	r3, r3
 800679e:	60fb      	str	r3, [r7, #12]
    if(tmp > 3U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d91e      	bls.n	80067e4 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6251      	str	r1, [r2, #36]	; 0x24
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6812      	ldr	r2, [r2, #0]
 80067b4:	6912      	ldr	r2, [r2, #16]
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      
      if(hi2c->XferCount == 3)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d14b      	bne.n	800686a <I2C_MasterReceive_RXNE+0xea>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6812      	ldr	r2, [r2, #0]
 80067da:	6852      	ldr	r2, [r2, #4]
 80067dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	e042      	b.n	800686a <I2C_MasterReceive_RXNE+0xea>
      }
    }
    else if((tmp == 1U) || (tmp == 0U))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d002      	beq.n	80067f0 <I2C_MasterReceive_RXNE+0x70>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d13c      	bne.n	800686a <I2C_MasterReceive_RXNE+0xea>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	6812      	ldr	r2, [r2, #0]
 80067fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067fe:	601a      	str	r2, [r3, #0]

      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	6852      	ldr	r2, [r2, #4]
 800680a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800680e:	605a      	str	r2, [r3, #4]
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	1c59      	adds	r1, r3, #1
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6251      	str	r1, [r2, #36]	; 0x24
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6812      	ldr	r2, [r2, #0]
 800681e:	6912      	ldr	r2, [r2, #16]
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006828:	b29b      	uxth	r3, r3
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	855a      	strh	r2, [r3, #42]	; 0x2a

      hi2c->State = HAL_I2C_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	; 0x30

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b40      	cmp	r3, #64	; 0x40
 800684a:	d107      	bne.n	800685c <I2C_MasterReceive_RXNE+0xdc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff fde3 	bl	8006420 <HAL_I2C_MemRxCpltCallback>
 800685a:	e006      	b.n	800686a <I2C_MasterReceive_RXNE+0xea>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff fd9b 	bl	80063a0 <HAL_I2C_MasterRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount == 4U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006886:	b29b      	uxth	r3, r3
 8006888:	2b04      	cmp	r3, #4
 800688a:	d119      	bne.n	80068c0 <I2C_MasterReceive_BTF+0x4c>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6812      	ldr	r2, [r2, #0]
 8006894:	6852      	ldr	r2, [r2, #4]
 8006896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	1c59      	adds	r1, r3, #1
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6251      	str	r1, [r2, #36]	; 0x24
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	6912      	ldr	r2, [r2, #16]
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068be:	e0a2      	b.n	8006a06 <I2C_MasterReceive_BTF+0x192>
  }
  else if(hi2c->XferCount == 3U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d121      	bne.n	800690e <I2C_MasterReceive_BTF+0x9a>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6812      	ldr	r2, [r2, #0]
 80068d2:	6852      	ldr	r2, [r2, #4]
 80068d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d8:	605a      	str	r2, [r3, #4]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e8:	601a      	str	r2, [r3, #0]

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	1c59      	adds	r1, r3, #1
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6251      	str	r1, [r2, #36]	; 0x24
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6812      	ldr	r2, [r2, #0]
 80068f8:	6912      	ldr	r2, [r2, #16]
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800690c:	e07b      	b.n	8006a06 <I2C_MasterReceive_BTF+0x192>
  }
  else if(hi2c->XferCount == 2U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d165      	bne.n	80069e4 <I2C_MasterReceive_BTF+0x170>
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d002      	beq.n	8006924 <I2C_MasterReceive_BTF+0xb0>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d110      	bne.n	8006946 <I2C_MasterReceive_BTF+0xd2>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006932:	601a      	str	r2, [r3, #0]

      /* Generate ReStart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	6812      	ldr	r2, [r2, #0]
 800693e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	e007      	b.n	8006956 <I2C_MasterReceive_BTF+0xe2>
    }
    else
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006954:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	1c59      	adds	r1, r3, #1
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6251      	str	r1, [r2, #36]	; 0x24
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	6912      	ldr	r2, [r2, #16]
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	1c59      	adds	r1, r3, #1
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6251      	str	r1, [r2, #36]	; 0x24
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	6912      	ldr	r2, [r2, #16]
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006990:	b29b      	uxth	r3, r3
 8006992:	3b01      	subs	r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6812      	ldr	r2, [r2, #0]
 80069a2:	6852      	ldr	r2, [r2, #4]
 80069a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80069a8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	631a      	str	r2, [r3, #48]	; 0x30

    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b40      	cmp	r3, #64	; 0x40
 80069c2:	d107      	bne.n	80069d4 <I2C_MasterReceive_BTF+0x160>
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MemRxCpltCallback(hi2c);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff fd27 	bl	8006420 <HAL_I2C_MemRxCpltCallback>
 80069d2:	e018      	b.n	8006a06 <I2C_MasterReceive_BTF+0x192>
    }
    else
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MasterRxCpltCallback(hi2c);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff fcdf 	bl	80063a0 <HAL_I2C_MasterRxCpltCallback>
 80069e2:	e010      	b.n	8006a06 <I2C_MasterReceive_BTF+0x192>
    }
  }
  else
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	1c59      	adds	r1, r3, #1
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6251      	str	r1, [r2, #36]	; 0x24
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	6912      	ldr	r2, [r2, #16]
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b40      	cmp	r3, #64	; 0x40
 8006a22:	d116      	bne.n	8006a52 <I2C_Master_SB+0x42>
  {
    if(hi2c->EventCount == 0U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d108      	bne.n	8006a3e <I2C_Master_SB+0x2e>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a3a:	611a      	str	r2, [r3, #16]
 8006a3c:	e04c      	b.n	8006ad8 <I2C_Master_SB+0xc8>
    }
    else
    {
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	f042 0201 	orr.w	r2, r2, #1
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	611a      	str	r2, [r3, #16]
 8006a50:	e042      	b.n	8006ad8 <I2C_Master_SB+0xc8>
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a5a:	d118      	bne.n	8006a8e <I2C_Master_SB+0x7e>
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b21      	cmp	r3, #33	; 0x21
 8006a66:	d108      	bne.n	8006a7a <I2C_Master_SB+0x6a>
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a76:	611a      	str	r2, [r3, #16]
 8006a78:	e02e      	b.n	8006ad8 <I2C_Master_SB+0xc8>
      }
      else
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	f042 0201 	orr.w	r2, r2, #1
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	611a      	str	r2, [r3, #16]
 8006a8c:	e024      	b.n	8006ad8 <I2C_Master_SB+0xc8>
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10e      	bne.n	8006ab4 <I2C_Master_SB+0xa4>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	11d2      	asrs	r2, r2, #7
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	f002 0206 	and.w	r2, r2, #6
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	f062 020f 	orn	r2, r2, #15
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	611a      	str	r2, [r3, #16]
 8006ab2:	e011      	b.n	8006ad8 <I2C_Master_SB+0xc8>
      }
      else if(hi2c->EventCount == 1U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d10d      	bne.n	8006ad8 <I2C_Master_SB+0xc8>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006ac4:	b292      	uxth	r2, r2
 8006ac6:	11d2      	asrs	r2, r2, #7
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	f002 0206 	and.w	r2, r2, #6
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	f062 020e 	orn	r2, r2, #14
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b091      	sub	sp, #68	; 0x44
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State         = hi2c->PreviousState;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	637b      	str	r3, [r7, #52]	; 0x34

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b22      	cmp	r3, #34	; 0x22
 8006b30:	f040 813b 	bne.w	8006daa <I2C_Master_ADDR+0x2a2>
  {
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10e      	bne.n	8006b5a <I2C_Master_ADDR+0x52>
 8006b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b3e:	2b40      	cmp	r3, #64	; 0x40
 8006b40:	d10b      	bne.n	8006b5a <I2C_Master_ADDR+0x52>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b42:	2300      	movs	r3, #0
 8006b44:	633b      	str	r3, [r7, #48]	; 0x30
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	633b      	str	r3, [r7, #48]	; 0x30
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	e132      	b.n	8006dc0 <I2C_Master_ADDR+0x2b8>
    }
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d11d      	bne.n	8006b9e <I2C_Master_ADDR+0x96>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b6a:	d118      	bne.n	8006b9e <I2C_Master_ADDR+0x96>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b90:	601a      	str	r2, [r3, #0]
      
      hi2c->EventCount++;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	651a      	str	r2, [r3, #80]	; 0x50
 8006b9c:	e110      	b.n	8006dc0 <I2C_Master_ADDR+0x2b8>
    }
    else
    {
      if(hi2c->XferCount == 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d113      	bne.n	8006bd0 <I2C_Master_ADDR+0xc8>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba8:	2300      	movs	r3, #0
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	6812      	ldr	r2, [r2, #0]
 8006bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e0e8      	b.n	8006da2 <I2C_Master_ADDR+0x29a>
      }
      else if(hi2c->XferCount == 1U)   
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	f040 8082 	bne.w	8006ce0 <I2C_Master_ADDR+0x1d8>
      {
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006be2:	d137      	bne.n	8006c54 <I2C_Master_ADDR+0x14c>
        {
          /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf2:	601a      	str	r2, [r3, #0]

          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c02:	d113      	bne.n	8006c2c <I2C_Master_ADDR+0x124>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6812      	ldr	r2, [r2, #0]
 8006c0c:	6812      	ldr	r2, [r2, #0]
 8006c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c12:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c14:	2300      	movs	r3, #0
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	e0ba      	b.n	8006da2 <I2C_Master_ADDR+0x29a>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	623b      	str	r3, [r7, #32]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	623b      	str	r3, [r7, #32]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	623b      	str	r3, [r7, #32]
 8006c40:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6812      	ldr	r2, [r2, #0]
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	e0a6      	b.n	8006da2 <I2C_Master_ADDR+0x29a>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d026      	beq.n	8006ca8 <I2C_Master_ADDR+0x1a0>
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d023      	beq.n	8006ca8 <I2C_Master_ADDR+0x1a0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	2b12      	cmp	r3, #18
 8006c64:	d020      	beq.n	8006ca8 <I2C_Master_ADDR+0x1a0>
        {
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d008      	beq.n	8006c80 <I2C_Master_ADDR+0x178>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	6812      	ldr	r2, [r2, #0]
 8006c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e007      	b.n	8006c90 <I2C_Master_ADDR+0x188>
          }
          else
          {
            /* Enable Acknowledge */
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c8e:	601a      	str	r2, [r3, #0]
          }
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c90:	2300      	movs	r3, #0
 8006c92:	61fb      	str	r3, [r7, #28]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	61fb      	str	r3, [r7, #28]
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	e07c      	b.n	8006da2 <I2C_Master_ADDR+0x29a>
        }
        else
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb6:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	69bb      	ldr	r3, [r7, #24]
          
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6812      	ldr	r2, [r2, #0]
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e060      	b.n	8006da2 <I2C_Master_ADDR+0x29a>
        }
      }
      else if(hi2c->XferCount == 2U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d138      	bne.n	8006d5c <I2C_Master_ADDR+0x254>
      {
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d010      	beq.n	8006d14 <I2C_Master_ADDR+0x20c>
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	6812      	ldr	r2, [r2, #0]
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d00:	601a      	str	r2, [r3, #0]
          
          /* Enable Pos */
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6812      	ldr	r2, [r2, #0]
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	e007      	b.n	8006d24 <I2C_Master_ADDR+0x21c>
        }
        else
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6812      	ldr	r2, [r2, #0]
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d22:	601a      	str	r2, [r3, #0]
        }

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d32:	d107      	bne.n	8006d44 <I2C_Master_ADDR+0x23c>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6812      	ldr	r2, [r2, #0]
 8006d3c:	6852      	ldr	r2, [r2, #4]
 8006d3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d42:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	e022      	b.n	8006da2 <I2C_Master_ADDR+0x29a>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	6812      	ldr	r2, [r2, #0]
 8006d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d6a:	601a      	str	r2, [r3, #0]

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d7a:	d107      	bne.n	8006d8c <I2C_Master_ADDR+0x284>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	6812      	ldr	r2, [r2, #0]
 8006d84:	6852      	ldr	r2, [r2, #4]
 8006d86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d8a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	613b      	str	r3, [r7, #16]
 8006da0:	693b      	ldr	r3, [r7, #16]
      }
      
      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	651a      	str	r2, [r3, #80]	; 0x50
 8006da8:	e00a      	b.n	8006dc0 <I2C_Master_ADDR+0x2b8>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
  }

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3744      	adds	r7, #68	; 0x44
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d029      	beq.n	8006e3e <I2C_SlaveTransmit_TXE+0x70>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	1c58      	adds	r0, r3, #1
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	6248      	str	r0, [r1, #36]	; 0x24
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d114      	bne.n	8006e3e <I2C_SlaveTransmit_TXE+0x70>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b29      	cmp	r3, #41	; 0x29
 8006e18:	d111      	bne.n	8006e3e <I2C_SlaveTransmit_TXE+0x70>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	6852      	ldr	r2, [r2, #4]
 8006e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e28:	605a      	str	r2, [r3, #4]
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2221      	movs	r2, #33	; 0x21
 8006e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2228      	movs	r2, #40	; 0x28
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      
      /* Call the Tx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff fabb 	bl	80063b4 <HAL_I2C_SlaveTxCpltCallback>
    }
  }
  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00f      	beq.n	8006e7a <I2C_SlaveTransmit_BTF+0x32>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	1c58      	adds	r0, r3, #1
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	6248      	str	r0, [r1, #36]	; 0x24
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d02a      	beq.n	8006efa <I2C_SlaveReceive_RXNE+0x72>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	1c59      	adds	r1, r3, #1
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6251      	str	r1, [r2, #36]	; 0x24
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	6812      	ldr	r2, [r2, #0]
 8006eb2:	6912      	ldr	r2, [r2, #16]
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d114      	bne.n	8006efa <I2C_SlaveReceive_RXNE+0x72>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed4:	d111      	bne.n	8006efa <I2C_SlaveReceive_RXNE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	6852      	ldr	r2, [r2, #4]
 8006ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2222      	movs	r2, #34	; 0x22
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2228      	movs	r2, #40	; 0x28
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the Rx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff fa67 	bl	80063c8 <HAL_I2C_SlaveRxCpltCallback>
    }
  }
  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d010      	beq.n	8006f38 <I2C_SlaveReceive_BTF+0x34>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	1c59      	adds	r1, r3, #1
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6251      	str	r1, [r2, #36]	; 0x24
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	6912      	ldr	r2, [r2, #16]
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	81bb      	strh	r3, [r7, #12]

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d001      	beq.n	8006f68 <I2C_Slave_ADDR+0x22>
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006f64:	2301      	movs	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f72:	2b80      	cmp	r3, #128	; 0x80
 8006f74:	d003      	beq.n	8006f7e <I2C_Slave_ADDR+0x38>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	81bb      	strh	r3, [r7, #12]
 8006f7c:	e002      	b.n	8006f84 <I2C_Slave_ADDR+0x3e>
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	81bb      	strh	r3, [r7, #12]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006f84:	89ba      	ldrh	r2, [r7, #12]
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff fa26 	bl	80063dc <HAL_I2C_AddrCallback>

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	60fb      	str	r3, [r7, #12]
  
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6812      	ldr	r2, [r2, #0]
 8006fb4:	6852      	ldr	r2, [r2, #4]
 8006fb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60bb      	str	r3, [r7, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	60bb      	str	r3, [r7, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6812      	ldr	r2, [r2, #0]
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	f042 0201 	orr.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6812      	ldr	r2, [r2, #0]
 8006fe2:	6812      	ldr	r2, [r2, #0]
 8006fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fe8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff8:	d11a      	bne.n	8007030 <I2C_Slave_STOPF+0x96>
  {
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b22      	cmp	r3, #34	; 0x22
 8007004:	d005      	beq.n	8007012 <I2C_Slave_STOPF+0x78>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b2a      	cmp	r3, #42	; 0x2a
 8007010:	d107      	bne.n	8007022 <I2C_Slave_STOPF+0x88>
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	b29a      	uxth	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007020:	e006      	b.n	8007030 <I2C_Slave_STOPF+0x96>
    }
    else
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	b29a      	uxth	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if(hi2c->XferCount != 0U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d035      	beq.n	80070a6 <I2C_Slave_STOPF+0x10c>
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b04      	cmp	r3, #4
 8007046:	d110      	bne.n	800706a <I2C_Slave_STOPF+0xd0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	1c59      	adds	r1, r3, #1
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6251      	str	r1, [r2, #36]	; 0x24
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6812      	ldr	r2, [r2, #0]
 8007056:	6912      	ldr	r2, [r2, #16]
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007074:	2b40      	cmp	r3, #64	; 0x40
 8007076:	d110      	bne.n	800709a <I2C_Slave_STOPF+0x100>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	1c59      	adds	r1, r3, #1
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6251      	str	r1, [r2, #36]	; 0x24
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6812      	ldr	r2, [r2, #0]
 8007086:	6912      	ldr	r2, [r2, #16]
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	f043 0204 	orr.w	r2, r3, #4
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <I2C_Slave_STOPF+0x11c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f8aa 	bl	8007208 <I2C_ITError>
 80070b4:	e02f      	b.n	8007116 <I2C_Slave_STOPF+0x17c>
  }
  else
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b28      	cmp	r3, #40	; 0x28
 80070ba:	d005      	beq.n	80070c8 <I2C_Slave_STOPF+0x12e>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b2a      	cmp	r3, #42	; 0x2a
 80070c0:	d002      	beq.n	80070c8 <I2C_Slave_STOPF+0x12e>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b29      	cmp	r3, #41	; 0x29
 80070c6:	d111      	bne.n	80070ec <I2C_Slave_STOPF+0x152>
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a15      	ldr	r2, [pc, #84]	; (8007120 <I2C_Slave_STOPF+0x186>)
 80070cc:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff f987 	bl	80063f8 <HAL_I2C_ListenCpltCallback>
 80070ea:	e014      	b.n	8007116 <I2C_Slave_STOPF+0x17c>
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	2b22      	cmp	r3, #34	; 0x22
 80070f2:	d002      	beq.n	80070fa <I2C_Slave_STOPF+0x160>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b22      	cmp	r3, #34	; 0x22
 80070f8:	d10d      	bne.n	8007116 <I2C_Slave_STOPF+0x17c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2220      	movs	r2, #32
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff f959 	bl	80063c8 <HAL_I2C_SlaveRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	ffff0000 	.word	0xffff0000

08007124 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007132:	b2db      	uxtb	r3, r3
 8007134:	60fb      	str	r3, [r7, #12]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	60bb      	str	r3, [r7, #8]

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b04      	cmp	r3, #4
 8007140:	d002      	beq.n	8007148 <I2C_Slave_AF+0x24>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b08      	cmp	r3, #8
 8007146:	d129      	bne.n	800719c <I2C_Slave_AF+0x78>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b28      	cmp	r3, #40	; 0x28
 800714c:	d126      	bne.n	800719c <I2C_Slave_AF+0x78>
          (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2c      	ldr	r2, [pc, #176]	; (8007204 <I2C_Slave_AF+0xe0>)
 8007152:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	6852      	ldr	r2, [r2, #4]
 800715e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007162:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800716c:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	6812      	ldr	r2, [r2, #0]
 8007178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800717c:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff f92f 	bl	80063f8 <HAL_I2C_ListenCpltCallback>
 800719a:	e02e      	b.n	80071fa <I2C_Slave_AF+0xd6>
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b21      	cmp	r3, #33	; 0x21
 80071a0:	d126      	bne.n	80071f0 <I2C_Slave_AF+0xcc>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a17      	ldr	r2, [pc, #92]	; (8007204 <I2C_Slave_AF+0xe0>)
 80071a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2221      	movs	r2, #33	; 0x21
 80071ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6812      	ldr	r2, [r2, #0]
 80071c6:	6852      	ldr	r2, [r2, #4]
 80071c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071cc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071d6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6812      	ldr	r2, [r2, #0]
 80071e0:	6812      	ldr	r2, [r2, #0]
 80071e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e6:	601a      	str	r2, [r3, #0]

    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff f8e3 	bl	80063b4 <HAL_I2C_SlaveTxCpltCallback>
 80071ee:	e004      	b.n	80071fa <I2C_Slave_AF+0xd6>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071f8:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	ffff0000 	.word	0xffff0000

08007208 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007216:	b2db      	uxtb	r3, r3
 8007218:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b29      	cmp	r3, #41	; 0x29
 800721e:	d002      	beq.n	8007226 <I2C_ITError+0x1e>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b2a      	cmp	r3, #42	; 0x2a
 8007224:	d107      	bne.n	8007236 <I2C_ITError+0x2e>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2228      	movs	r2, #40	; 0x28
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007234:	e018      	b.n	8007268 <I2C_ITError+0x60>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b60      	cmp	r3, #96	; 0x60
 8007240:	d00b      	beq.n	800725a <I2C_ITError+0x52>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800724c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007250:	d003      	beq.n	800725a <I2C_ITError+0x52>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2220      	movs	r2, #32
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6812      	ldr	r2, [r2, #0]
 8007270:	6812      	ldr	r2, [r2, #0]
 8007272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007276:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007286:	d160      	bne.n	800734a <I2C_ITError+0x142>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6812      	ldr	r2, [r2, #0]
 8007290:	6852      	ldr	r2, [r2, #4]
 8007292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007296:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d020      	beq.n	80072e8 <I2C_ITError+0xe0>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072aa:	4a57      	ldr	r2, [pc, #348]	; (8007408 <I2C_ITError+0x200>)
 80072ac:	651a      	str	r2, [r3, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fa ffa7 	bl	8002206 <HAL_DMA_Abort_IT>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 8083 	beq.w	80073c6 <I2C_ITError+0x1be>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	f022 0201 	bic.w	r2, r2, #1
 80072ce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80072e2:	4610      	mov	r0, r2
 80072e4:	4798      	blx	r3
 80072e6:	e06e      	b.n	80073c6 <I2C_ITError+0x1be>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	4a46      	ldr	r2, [pc, #280]	; (8007408 <I2C_ITError+0x200>)
 80072ee:	651a      	str	r2, [r3, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fa ff86 	bl	8002206 <HAL_DMA_Abort_IT>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d062      	beq.n	80073c6 <I2C_ITError+0x1be>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730a:	2b40      	cmp	r3, #64	; 0x40
 800730c:	d109      	bne.n	8007322 <I2C_ITError+0x11a>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	1c59      	adds	r1, r3, #1
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6251      	str	r1, [r2, #36]	; 0x24
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6812      	ldr	r2, [r2, #0]
 800731c:	6912      	ldr	r2, [r2, #16]
 800731e:	b2d2      	uxtb	r2, r2
 8007320:	701a      	strb	r2, [r3, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	6812      	ldr	r2, [r2, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007344:	4610      	mov	r0, r2
 8007346:	4798      	blx	r3
 8007348:	e03d      	b.n	80073c6 <I2C_ITError+0x1be>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b60      	cmp	r3, #96	; 0x60
 8007354:	d123      	bne.n	800739e <I2C_ITError+0x196>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d109      	bne.n	8007386 <I2C_ITError+0x17e>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	1c59      	adds	r1, r3, #1
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6251      	str	r1, [r2, #36]	; 0x24
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6812      	ldr	r2, [r2, #0]
 8007380:	6912      	ldr	r2, [r2, #16]
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	6812      	ldr	r2, [r2, #0]
 8007390:	f022 0201 	bic.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff f856 	bl	8006448 <HAL_I2C_AbortCpltCallback>
 800739c:	e013      	b.n	80073c6 <I2C_ITError+0x1be>
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a8:	2b40      	cmp	r3, #64	; 0x40
 80073aa:	d109      	bne.n	80073c0 <I2C_ITError+0x1b8>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	1c59      	adds	r1, r3, #1
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6251      	str	r1, [r2, #36]	; 0x24
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6812      	ldr	r2, [r2, #0]
 80073ba:	6912      	ldr	r2, [r2, #16]
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	701a      	strb	r2, [r3, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff f837 	bl	8006434 <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b28      	cmp	r3, #40	; 0x28
 80073d0:	d116      	bne.n	8007400 <I2C_ITError+0x1f8>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d110      	bne.n	8007400 <I2C_ITError+0x1f8>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a0a      	ldr	r2, [pc, #40]	; (800740c <I2C_ITError+0x204>)
 80073e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2220      	movs	r2, #32
 80073ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fe fffc 	bl	80063f8 <HAL_I2C_ListenCpltCallback>
  }
}
 8007400:	bf00      	nop
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	08007ad3 	.word	0x08007ad3
 800740c:	ffff0000 	.word	0xffff0000

08007410 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af02      	add	r7, sp, #8
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	607a      	str	r2, [r7, #4]
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	460b      	mov	r3, r1
 800741e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b04      	cmp	r3, #4
 800742a:	d006      	beq.n	800743a <I2C_MasterRequestWrite+0x2a>
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d003      	beq.n	800743a <I2C_MasterRequestWrite+0x2a>
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007438:	d108      	bne.n	800744c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	6812      	ldr	r2, [r2, #0]
 8007442:	6812      	ldr	r2, [r2, #0]
 8007444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	e00b      	b.n	8007464 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007450:	2b12      	cmp	r3, #18
 8007452:	d107      	bne.n	8007464 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	6812      	ldr	r2, [r2, #0]
 800745c:	6812      	ldr	r2, [r2, #0]
 800745e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007462:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 fb7c 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e040      	b.n	8007502 <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007488:	d107      	bne.n	800749a <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	897a      	ldrh	r2, [r7, #10]
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007496:	611a      	str	r2, [r3, #16]
 8007498:	e021      	b.n	80074de <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	897a      	ldrh	r2, [r7, #10]
 80074a0:	11d2      	asrs	r2, r2, #7
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	f002 0206 	and.w	r2, r2, #6
 80074a8:	b2d2      	uxtb	r2, r2
 80074aa:	f062 020f 	orn	r2, r2, #15
 80074ae:	b2d2      	uxtb	r2, r2
 80074b0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	4915      	ldr	r1, [pc, #84]	; (800750c <I2C_MasterRequestWrite+0xfc>)
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 fba9 	bl	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d007      	beq.n	80074d4 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	d101      	bne.n	80074d0 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e018      	b.n	8007502 <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e016      	b.n	8007502 <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	897a      	ldrh	r2, [r7, #10]
 80074da:	b2d2      	uxtb	r2, r2
 80074dc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	490b      	ldr	r1, [pc, #44]	; (8007510 <I2C_MasterRequestWrite+0x100>)
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 fb93 	bl	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d007      	beq.n	8007500 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d101      	bne.n	80074fc <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e002      	b.n	8007502 <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e000      	b.n	8007502 <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	00010008 	.word	0x00010008
 8007510:	00010002 	.word	0x00010002

08007514 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af02      	add	r7, sp, #8
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	460b      	mov	r3, r1
 8007522:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	6812      	ldr	r2, [r2, #0]
 8007534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007538:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b04      	cmp	r3, #4
 800753e:	d006      	beq.n	800754e <I2C_MasterRequestRead+0x3a>
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d003      	beq.n	800754e <I2C_MasterRequestRead+0x3a>
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800754c:	d108      	bne.n	8007560 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	6812      	ldr	r2, [r2, #0]
 8007558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	e00b      	b.n	8007578 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	2b11      	cmp	r3, #17
 8007566:	d107      	bne.n	8007578 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	6812      	ldr	r2, [r2, #0]
 8007570:	6812      	ldr	r2, [r2, #0]
 8007572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007576:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 faf2 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e07f      	b.n	8007694 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800759c:	d108      	bne.n	80075b0 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	897a      	ldrh	r2, [r7, #10]
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	611a      	str	r2, [r3, #16]
 80075ae:	e05f      	b.n	8007670 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	897a      	ldrh	r2, [r7, #10]
 80075b6:	11d2      	asrs	r2, r2, #7
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	f002 0206 	and.w	r2, r2, #6
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	f062 020f 	orn	r2, r2, #15
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	4933      	ldr	r1, [pc, #204]	; (800769c <I2C_MasterRequestRead+0x188>)
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fb1e 	bl	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d007      	beq.n	80075ea <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d101      	bne.n	80075e6 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e056      	b.n	8007694 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e054      	b.n	8007694 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	897a      	ldrh	r2, [r7, #10]
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	4929      	ldr	r1, [pc, #164]	; (80076a0 <I2C_MasterRequestRead+0x18c>)
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 fb08 	bl	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d007      	beq.n	8007616 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	2b04      	cmp	r3, #4
 800760c:	d101      	bne.n	8007612 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e040      	b.n	8007694 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e03e      	b.n	8007694 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	613b      	str	r3, [r7, #16]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	613b      	str	r3, [r7, #16]
 800762a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	6812      	ldr	r2, [r2, #0]
 8007634:	6812      	ldr	r2, [r2, #0]
 8007636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800763a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 fa90 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e01d      	b.n	8007694 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	897a      	ldrh	r2, [r7, #10]
 800765e:	11d2      	asrs	r2, r2, #7
 8007660:	b2d2      	uxtb	r2, r2
 8007662:	f002 0206 	and.w	r2, r2, #6
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	f062 020e 	orn	r2, r2, #14
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	490a      	ldr	r1, [pc, #40]	; (80076a0 <I2C_MasterRequestRead+0x18c>)
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 faca 	bl	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d007      	beq.n	8007692 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	2b04      	cmp	r3, #4
 8007688:	d101      	bne.n	800768e <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e002      	b.n	8007694 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e000      	b.n	8007694 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	00010008 	.word	0x00010008
 80076a0:	00010002 	.word	0x00010002

080076a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af02      	add	r7, sp, #8
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	4608      	mov	r0, r1
 80076ae:	4611      	mov	r1, r2
 80076b0:	461a      	mov	r2, r3
 80076b2:	4603      	mov	r3, r0
 80076b4:	817b      	strh	r3, [r7, #10]
 80076b6:	460b      	mov	r3, r1
 80076b8:	813b      	strh	r3, [r7, #8]
 80076ba:	4613      	mov	r3, r2
 80076bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	6812      	ldr	r2, [r2, #0]
 80076c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fa47 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e068      	b.n	80077bc <I2C_RequestMemoryWrite+0x118>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	897a      	ldrh	r2, [r7, #10]
 80076f0:	b2d2      	uxtb	r2, r2
 80076f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	6a3a      	ldr	r2, [r7, #32]
 80076fc:	4931      	ldr	r1, [pc, #196]	; (80077c4 <I2C_RequestMemoryWrite+0x120>)
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 fa86 	bl	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d007      	beq.n	800771a <I2C_RequestMemoryWrite+0x76>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	2b04      	cmp	r3, #4
 8007710:	d101      	bne.n	8007716 <I2C_RequestMemoryWrite+0x72>
    {
      return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e052      	b.n	80077bc <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e050      	b.n	80077bc <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	617b      	str	r3, [r7, #20]
 800772e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	6a39      	ldr	r1, [r7, #32]
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fad9 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00f      	beq.n	8007760 <I2C_RequestMemoryWrite+0xbc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007744:	2b04      	cmp	r3, #4
 8007746:	d109      	bne.n	800775c <I2C_RequestMemoryWrite+0xb8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	6812      	ldr	r2, [r2, #0]
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007756:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e02f      	b.n	80077bc <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e02d      	b.n	80077bc <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007760:	88fb      	ldrh	r3, [r7, #6]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d105      	bne.n	8007772 <I2C_RequestMemoryWrite+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	893a      	ldrh	r2, [r7, #8]
 800776c:	b2d2      	uxtb	r2, r2
 800776e:	611a      	str	r2, [r3, #16]
 8007770:	e023      	b.n	80077ba <I2C_RequestMemoryWrite+0x116>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	893a      	ldrh	r2, [r7, #8]
 8007778:	0a12      	lsrs	r2, r2, #8
 800777a:	b292      	uxth	r2, r2
 800777c:	b2d2      	uxtb	r2, r2
 800777e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007782:	6a39      	ldr	r1, [r7, #32]
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 fab1 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00f      	beq.n	80077b0 <I2C_RequestMemoryWrite+0x10c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	2b04      	cmp	r3, #4
 8007796:	d109      	bne.n	80077ac <I2C_RequestMemoryWrite+0x108>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	6812      	ldr	r2, [r2, #0]
 80077a0:	6812      	ldr	r2, [r2, #0]
 80077a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077a6:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e007      	b.n	80077bc <I2C_RequestMemoryWrite+0x118>
      }
      else
      {
        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e005      	b.n	80077bc <I2C_RequestMemoryWrite+0x118>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	893a      	ldrh	r2, [r7, #8]
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	00010002 	.word	0x00010002

080077c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	4608      	mov	r0, r1
 80077d2:	4611      	mov	r1, r2
 80077d4:	461a      	mov	r2, r3
 80077d6:	4603      	mov	r3, r0
 80077d8:	817b      	strh	r3, [r7, #10]
 80077da:	460b      	mov	r3, r1
 80077dc:	813b      	strh	r3, [r7, #8]
 80077de:	4613      	mov	r3, r2
 80077e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	6812      	ldr	r2, [r2, #0]
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	6812      	ldr	r2, [r2, #0]
 80077fa:	6812      	ldr	r2, [r2, #0]
 80077fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007800:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	2200      	movs	r2, #0
 800780a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 f9ad 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e0af      	b.n	800797e <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	897a      	ldrh	r2, [r7, #10]
 8007824:	b2d2      	uxtb	r2, r2
 8007826:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800782a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	6a3a      	ldr	r2, [r7, #32]
 8007830:	4955      	ldr	r1, [pc, #340]	; (8007988 <I2C_RequestMemoryRead+0x1c0>)
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 f9ec 	bl	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <I2C_RequestMemoryRead+0x86>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	2b04      	cmp	r3, #4
 8007844:	d101      	bne.n	800784a <I2C_RequestMemoryRead+0x82>
    {
      return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e099      	b.n	800797e <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e097      	b.n	800797e <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007866:	6a39      	ldr	r1, [r7, #32]
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 fa3f 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00f      	beq.n	8007894 <I2C_RequestMemoryRead+0xcc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007878:	2b04      	cmp	r3, #4
 800787a:	d109      	bne.n	8007890 <I2C_RequestMemoryRead+0xc8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	6812      	ldr	r2, [r2, #0]
 8007884:	6812      	ldr	r2, [r2, #0]
 8007886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800788a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e076      	b.n	800797e <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e074      	b.n	800797e <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007894:	88fb      	ldrh	r3, [r7, #6]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d105      	bne.n	80078a6 <I2C_RequestMemoryRead+0xde>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	893a      	ldrh	r2, [r7, #8]
 80078a0:	b2d2      	uxtb	r2, r2
 80078a2:	611a      	str	r2, [r3, #16]
 80078a4:	e023      	b.n	80078ee <I2C_RequestMemoryRead+0x126>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	893a      	ldrh	r2, [r7, #8]
 80078ac:	0a12      	lsrs	r2, r2, #8
 80078ae:	b292      	uxth	r2, r2
 80078b0:	b2d2      	uxtb	r2, r2
 80078b2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b6:	6a39      	ldr	r1, [r7, #32]
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 fa17 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00f      	beq.n	80078e4 <I2C_RequestMemoryRead+0x11c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d109      	bne.n	80078e0 <I2C_RequestMemoryRead+0x118>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	6812      	ldr	r2, [r2, #0]
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078da:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e04e      	b.n	800797e <I2C_RequestMemoryRead+0x1b6>
      }
      else
      {
        return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e04c      	b.n	800797e <I2C_RequestMemoryRead+0x1b6>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	893a      	ldrh	r2, [r7, #8]
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f0:	6a39      	ldr	r1, [r7, #32]
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 f9fa 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00f      	beq.n	800791e <I2C_RequestMemoryRead+0x156>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	2b04      	cmp	r3, #4
 8007904:	d109      	bne.n	800791a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	6812      	ldr	r2, [r2, #0]
 800790e:	6812      	ldr	r2, [r2, #0]
 8007910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007914:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e031      	b.n	800797e <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e02f      	b.n	800797e <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	6812      	ldr	r2, [r2, #0]
 8007926:	6812      	ldr	r2, [r2, #0]
 8007928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800792c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	2200      	movs	r2, #0
 8007936:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 f917 	bl	8007b6e <I2C_WaitOnFlagUntilTimeout>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <I2C_RequestMemoryRead+0x182>
  {
    return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e019      	b.n	800797e <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	897a      	ldrh	r2, [r7, #10]
 8007950:	b2d2      	uxtb	r2, r2
 8007952:	f042 0201 	orr.w	r2, r2, #1
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	6a3a      	ldr	r2, [r7, #32]
 800795e:	490a      	ldr	r1, [pc, #40]	; (8007988 <I2C_RequestMemoryRead+0x1c0>)
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f955 	bl	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <I2C_RequestMemoryRead+0x1b4>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	2b04      	cmp	r3, #4
 8007972:	d101      	bne.n	8007978 <I2C_RequestMemoryRead+0x1b0>
    {
      return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e002      	b.n	800797e <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e000      	b.n	800797e <I2C_RequestMemoryRead+0x1b6>
    }
  }

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	00010002 	.word	0x00010002

0800798c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	617b      	str	r3, [r7, #20]
  
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	613b      	str	r3, [r7, #16]
  uint32_t CurrentMode  = hi2c->Mode;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b21      	cmp	r3, #33	; 0x21
 80079b2:	d005      	beq.n	80079c0 <I2C_DMAXferCplt+0x34>
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	2b22      	cmp	r3, #34	; 0x22
 80079b8:	d116      	bne.n	80079e8 <I2C_DMAXferCplt+0x5c>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d113      	bne.n	80079e8 <I2C_DMAXferCplt+0x5c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	6812      	ldr	r2, [r2, #0]
 80079c8:	6852      	ldr	r2, [r2, #4]
 80079ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079ce:	605a      	str	r2, [r3, #4]
    
    hi2c->XferCount = 0U;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2200      	movs	r2, #0
 80079d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	6852      	ldr	r2, [r2, #4]
 80079e0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80079e4:	605a      	str	r2, [r3, #4]

        HAL_I2C_MasterRxCpltCallback(hi2c);
      }
    }
  }
}
 80079e6:	e043      	b.n	8007a70 <I2C_DMAXferCplt+0xe4>
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f6:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	6812      	ldr	r2, [r2, #0]
 8007a00:	6812      	ldr	r2, [r2, #0]
 8007a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a06:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR2 &= ~I2C_CR2_LAST;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	6852      	ldr	r2, [r2, #4]
 8007a12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a16:	605a      	str	r2, [r3, #4]
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	6812      	ldr	r2, [r2, #0]
 8007a20:	6852      	ldr	r2, [r2, #4]
 8007a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a26:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <I2C_DMAXferCplt+0xb2>
      HAL_I2C_ErrorCallback(hi2c);
 8007a36:	6978      	ldr	r0, [r7, #20]
 8007a38:	f7fe fcfc 	bl	8006434 <HAL_I2C_ErrorCallback>
}
 8007a3c:	e018      	b.n	8007a70 <I2C_DMAXferCplt+0xe4>
      hi2c->State = HAL_I2C_STATE_READY;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b40      	cmp	r3, #64	; 0x40
 8007a50:	d107      	bne.n	8007a62 <I2C_DMAXferCplt+0xd6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007a5a:	6978      	ldr	r0, [r7, #20]
 8007a5c:	f7fe fce0 	bl	8006420 <HAL_I2C_MemRxCpltCallback>
}
 8007a60:	e006      	b.n	8007a70 <I2C_DMAXferCplt+0xe4>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007a6a:	6978      	ldr	r0, [r7, #20]
 8007a6c:	f7fe fc98 	bl	80063a0 <HAL_I2C_MasterRxCpltCallback>
}
 8007a70:	bf00      	nop
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a84:	60fb      	str	r3, [r7, #12]
  
  /* Ignore DMA FIFO error */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fa ff12 	bl	80028b0 <HAL_DMA_GetError>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d01b      	beq.n	8007aca <I2C_DMAError+0x52>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	6812      	ldr	r2, [r2, #0]
 8007a9a:	6812      	ldr	r2, [r2, #0]
 8007a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa0:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	f043 0210 	orr.w	r2, r3, #16
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_I2C_ErrorCallback(hi2c);
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7fe fcb5 	bl	8006434 <HAL_I2C_ErrorCallback>
  }
}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	60fb      	str	r3, [r7, #12]
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	6812      	ldr	r2, [r2, #0]
 8007ae8:	6812      	ldr	r2, [r2, #0]
 8007aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aee:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afa:	2200      	movs	r2, #0
 8007afc:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b02:	2200      	movs	r2, #0
 8007b04:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b60      	cmp	r3, #96	; 0x60
 8007b10:	d116      	bne.n	8007b40 <I2C_DMAAbort+0x6e>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	6812      	ldr	r2, [r2, #0]
 8007b30:	6812      	ldr	r2, [r2, #0]
 8007b32:	f022 0201 	bic.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f7fe fc85 	bl	8006448 <HAL_I2C_AbortCpltCallback>
    __HAL_I2C_DISABLE(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 8007b3e:	e012      	b.n	8007b66 <I2C_DMAAbort+0x94>
    hi2c->State = HAL_I2C_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE(hi2c);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	6812      	ldr	r2, [r2, #0]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	f022 0201 	bic.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f7fe fc67 	bl	8006434 <HAL_I2C_ErrorCallback>
}
 8007b66:	bf00      	nop
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	603b      	str	r3, [r7, #0]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8007b7e:	e01f      	b.n	8007bc0 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b86:	d01b      	beq.n	8007bc0 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d007      	beq.n	8007b9e <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b8e:	f7f8 fbcd 	bl	800032c <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	1ad2      	subs	r2, r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d910      	bls.n	8007bc0 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e023      	b.n	8007c08 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	0c1b      	lsrs	r3, r3, #16
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d10d      	bne.n	8007be6 <I2C_WaitOnFlagUntilTimeout+0x78>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	43da      	mvns	r2, r3
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bf0c      	ite	eq
 8007bdc:	2301      	moveq	r3, #1
 8007bde:	2300      	movne	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	461a      	mov	r2, r3
 8007be4:	e00c      	b.n	8007c00 <I2C_WaitOnFlagUntilTimeout+0x92>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	43da      	mvns	r2, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	bf0c      	ite	eq
 8007bf8:	2301      	moveq	r3, #1
 8007bfa:	2300      	movne	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	461a      	mov	r2, r3
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d0bc      	beq.n	8007b80 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c1e:	e040      	b.n	8007ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c2e:	d11c      	bne.n	8007c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	6812      	ldr	r2, [r2, #0]
 8007c38:	6812      	ldr	r2, [r2, #0]
 8007c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c48:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e03c      	b.n	8007ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c70:	d017      	beq.n	8007ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d007      	beq.n	8007c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8007c78:	f7f8 fb58 	bl	800032c <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	1ad2      	subs	r2, r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d90c      	bls.n	8007ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2220      	movs	r2, #32
 8007c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e020      	b.n	8007ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	0c1b      	lsrs	r3, r3, #16
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d10c      	bne.n	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	43da      	mvns	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bf14      	ite	ne
 8007cbe:	2301      	movne	r3, #1
 8007cc0:	2300      	moveq	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	e00b      	b.n	8007cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	43da      	mvns	r2, r3
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bf14      	ite	ne
 8007cd8:	2301      	movne	r3, #1
 8007cda:	2300      	moveq	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d19e      	bne.n	8007c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cf8:	e029      	b.n	8007d4e <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f8f3 	bl	8007ee6 <I2C_IsAcknowledgeFailed>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e029      	b.n	8007d5e <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d10:	d01d      	beq.n	8007d4e <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d007      	beq.n	8007d28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d18:	f7f8 fb08 	bl	800032c <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	1ad2      	subs	r2, r2, r3
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d912      	bls.n	8007d4e <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2c:	f043 0220 	orr.w	r2, r3, #32
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e007      	b.n	8007d5e <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d58:	2b80      	cmp	r3, #128	; 0x80
 8007d5a:	d1ce      	bne.n	8007cfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d72:	e029      	b.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f8b6 	bl	8007ee6 <I2C_IsAcknowledgeFailed>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e029      	b.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d01d      	beq.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d007      	beq.n	8007da2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d92:	f7f8 facb 	bl	800032c <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	1ad2      	subs	r2, r2, r3
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d912      	bls.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	f043 0220 	orr.w	r2, r3, #32
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e007      	b.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d1ce      	bne.n	8007d74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007dec:	e025      	b.n	8007e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 f879 	bl	8007ee6 <I2C_IsAcknowledgeFailed>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e025      	b.n	8007e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d007      	beq.n	8007e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8007e04:	f7f8 fa92 	bl	800032c <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	1ad2      	subs	r2, r2, r3
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d912      	bls.n	8007e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	f043 0220 	orr.w	r2, r3, #32
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e007      	b.n	8007e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	f003 0310 	and.w	r3, r3, #16
 8007e44:	2b10      	cmp	r3, #16
 8007e46:	d1d2      	bne.n	8007dee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e5e:	e036      	b.n	8007ece <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	f003 0310 	and.w	r3, r3, #16
 8007e6a:	2b10      	cmp	r3, #16
 8007e6c:	d114      	bne.n	8007e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f06f 0210 	mvn.w	r2, #16
 8007e76:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2220      	movs	r2, #32
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e022      	b.n	8007ede <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d007      	beq.n	8007eae <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8007e9e:	f7f8 fa45 	bl	800032c <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	1ad2      	subs	r2, r2, r3
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d90f      	bls.n	8007ece <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	f043 0220 	orr.w	r2, r3, #32
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e007      	b.n	8007ede <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed8:	2b40      	cmp	r3, #64	; 0x40
 8007eda:	d1c1      	bne.n	8007e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007efc:	d114      	bne.n	8007f28 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f06:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e000      	b.n	8007f2a <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop

08007f38 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8007f42:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <HAL_PWREx_EnableBkUpReg+0x44>)
 8007f44:	2201      	movs	r2, #1
 8007f46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f48:	f7f8 f9f0 	bl	800032c <HAL_GetTick>
 8007f4c:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8007f4e:	e009      	b.n	8007f64 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8007f50:	f7f8 f9ec 	bl	800032c <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f5e:	d901      	bls.n	8007f64 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e006      	b.n	8007f72 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8007f64:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <HAL_PWREx_EnableBkUpReg+0x48>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f003 0308 	and.w	r3, r3, #8
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d1ef      	bne.n	8007f50 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	420e00a4 	.word	0x420e00a4
 8007f80:	40007000 	.word	0x40007000

08007f84 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 8007f8e:	4b0e      	ldr	r3, [pc, #56]	; (8007fc8 <HAL_PWREx_DisableBkUpReg+0x44>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f94:	f7f8 f9ca 	bl	800032c <HAL_GetTick>
 8007f98:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8007f9a:	e009      	b.n	8007fb0 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8007f9c:	f7f8 f9c6 	bl	800032c <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007faa:	d901      	bls.n	8007fb0 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e006      	b.n	8007fbe <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8007fb0:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <HAL_PWREx_DisableBkUpReg+0x48>)
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d0ef      	beq.n	8007f9c <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	420e00a4 	.word	0x420e00a4
 8007fcc:	40007000 	.word	0x40007000

08007fd0 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8007fd4:	4b03      	ldr	r3, [pc, #12]	; (8007fe4 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]
}
 8007fda:	bf00      	nop
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	420e0024 	.word	0x420e0024

08007fe8 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8007fec:	4b03      	ldr	r3, [pc, #12]	; (8007ffc <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
}
 8007ff2:	bf00      	nop
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	420e0024 	.word	0x420e0024

08008000 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008000:	b480      	push	{r7}
 8008002:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 8008004:	4b04      	ldr	r3, [pc, #16]	; (8008018 <HAL_PWREx_GetVoltageRange+0x18>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800800c:	4618      	mov	r0, r3
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	40007000 	.word	0x40007000

0800801c <HAL_PWREx_ControlVoltageScaling>:
  * @note This API forces the PLL state ON to allow the possibility to configure the voltage scale 1 or 2.
  * @note The new voltage scale is active only when the PLL is ON.  
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008028:	2300      	movs	r3, #0
 800802a:	613b      	str	r3, [r7, #16]
 800802c:	4a35      	ldr	r2, [pc, #212]	; (8008104 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 800802e:	4b35      	ldr	r3, [pc, #212]	; (8008104 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008036:	6413      	str	r3, [r2, #64]	; 0x40
 8008038:	4b32      	ldr	r3, [pc, #200]	; (8008104 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 800803a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008040:	613b      	str	r3, [r7, #16]
 8008042:	693b      	ldr	r3, [r7, #16]
  
  /* Check if the PLL is used as system clock or not */
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008044:	4b2f      	ldr	r3, [pc, #188]	; (8008104 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f003 030c 	and.w	r3, r3, #12
 800804c:	2b08      	cmp	r3, #8
 800804e:	d051      	beq.n	80080f4 <HAL_PWREx_ControlVoltageScaling+0xd8>
  {
    /* Disable the main PLL */
    __HAL_RCC_PLL_DISABLE();
 8008050:	4b2d      	ldr	r3, [pc, #180]	; (8008108 <HAL_PWREx_ControlVoltageScaling+0xec>)
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
 8008056:	f7f8 f969 	bl	800032c <HAL_GetTick>
 800805a:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800805c:	e008      	b.n	8008070 <HAL_PWREx_ControlVoltageScaling+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800805e:	f7f8 f965 	bl	800032c <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d901      	bls.n	8008070 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e044      	b.n	80080fa <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008070:	4b24      	ldr	r3, [pc, #144]	; (8008104 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1f0      	bne.n	800805e <HAL_PWREx_ControlVoltageScaling+0x42>
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	4922      	ldr	r1, [pc, #136]	; (800810c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008082:	4b22      	ldr	r3, [pc, #136]	; (800810c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4313      	orrs	r3, r2
 800808e:	600b      	str	r3, [r1, #0]
 8008090:	4b1e      	ldr	r3, [pc, #120]	; (800810c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable the main PLL */
    __HAL_RCC_PLL_ENABLE();
 800809c:	4b1a      	ldr	r3, [pc, #104]	; (8008108 <HAL_PWREx_ControlVoltageScaling+0xec>)
 800809e:	2201      	movs	r2, #1
 80080a0:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080a2:	f7f8 f943 	bl	800032c <HAL_GetTick>
 80080a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080a8:	e008      	b.n	80080bc <HAL_PWREx_ControlVoltageScaling+0xa0>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080aa:	f7f8 f93f 	bl	800032c <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_PWREx_ControlVoltageScaling+0xa0>
      {
        return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e01e      	b.n	80080fa <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080bc:	4b11      	ldr	r3, [pc, #68]	; (8008104 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0f0      	beq.n	80080aa <HAL_PWREx_ControlVoltageScaling+0x8e>
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080c8:	f7f8 f930 	bl	800032c <HAL_GetTick>
 80080cc:	6178      	str	r0, [r7, #20]
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80080ce:	e009      	b.n	80080e4 <HAL_PWREx_ControlVoltageScaling+0xc8>
    {
      if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 80080d0:	f7f8 f92c 	bl	800032c <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080de:	d901      	bls.n	80080e4 <HAL_PWREx_ControlVoltageScaling+0xc8>
      {
        return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e00a      	b.n	80080fa <HAL_PWREx_ControlVoltageScaling+0xde>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80080e4:	4b09      	ldr	r3, [pc, #36]	; (800810c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080f0:	d1ee      	bne.n	80080d0 <HAL_PWREx_ControlVoltageScaling+0xb4>
 80080f2:	e001      	b.n	80080f8 <HAL_PWREx_ControlVoltageScaling+0xdc>
      } 
    }
  }
  else
  {
    return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e000      	b.n	80080fa <HAL_PWREx_ControlVoltageScaling+0xde>
  }

  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	40023800 	.word	0x40023800
 8008108:	42470060 	.word	0x42470060
 800810c:	40007000 	.word	0x40007000

08008110 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800811a:	2300      	movs	r3, #0
 800811c:	603b      	str	r3, [r7, #0]
 800811e:	4a20      	ldr	r2, [pc, #128]	; (80081a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8008120:	4b1f      	ldr	r3, [pc, #124]	; (80081a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008128:	6413      	str	r3, [r2, #64]	; 0x40
 800812a:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800812c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008136:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8008138:	2201      	movs	r2, #1
 800813a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800813c:	f7f8 f8f6 	bl	800032c <HAL_GetTick>
 8008140:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008142:	e009      	b.n	8008158 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008144:	f7f8 f8f2 	bl	800032c <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008152:	d901      	bls.n	8008158 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e01f      	b.n	8008198 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008158:	4b13      	ldr	r3, [pc, #76]	; (80081a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008164:	d1ee      	bne.n	8008144 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008166:	4b11      	ldr	r3, [pc, #68]	; (80081ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8008168:	2201      	movs	r2, #1
 800816a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800816c:	f7f8 f8de 	bl	800032c <HAL_GetTick>
 8008170:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008172:	e009      	b.n	8008188 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008174:	f7f8 f8da 	bl	800032c <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008182:	d901      	bls.n	8008188 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e007      	b.n	8008198 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008188:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008194:	d1ee      	bne.n	8008174 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	40023800 	.word	0x40023800
 80081a4:	420e0040 	.word	0x420e0040
 80081a8:	40007000 	.word	0x40007000
 80081ac:	420e0044 	.word	0x420e0044

080081b0 <HAL_PWREx_DisableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableOverDrive(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	607b      	str	r3, [r7, #4]
  
  __HAL_RCC_PWR_CLK_ENABLE();
 80081ba:	2300      	movs	r3, #0
 80081bc:	603b      	str	r3, [r7, #0]
 80081be:	4a20      	ldr	r2, [pc, #128]	; (8008240 <HAL_PWREx_DisableOverDrive+0x90>)
 80081c0:	4b1f      	ldr	r3, [pc, #124]	; (8008240 <HAL_PWREx_DisableOverDrive+0x90>)
 80081c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081c8:	6413      	str	r3, [r2, #64]	; 0x40
 80081ca:	4b1d      	ldr	r3, [pc, #116]	; (8008240 <HAL_PWREx_DisableOverDrive+0x90>)
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	683b      	ldr	r3, [r7, #0]
    
  /* Disable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
 80081d6:	4b1b      	ldr	r3, [pc, #108]	; (8008244 <HAL_PWREx_DisableOverDrive+0x94>)
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80081dc:	f7f8 f8a6 	bl	800032c <HAL_GetTick>
 80081e0:	6078      	str	r0, [r7, #4]
 
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80081e2:	e009      	b.n	80081f8 <HAL_PWREx_DisableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80081e4:	f7f8 f8a2 	bl	800032c <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081f2:	d901      	bls.n	80081f8 <HAL_PWREx_DisableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e01f      	b.n	8008238 <HAL_PWREx_DisableOverDrive+0x88>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80081f8:	4b13      	ldr	r3, [pc, #76]	; (8008248 <HAL_PWREx_DisableOverDrive+0x98>)
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008204:	d0ee      	beq.n	80081e4 <HAL_PWREx_DisableOverDrive+0x34>
    }
  } 
  
  /* Disable the Over-drive */
  __HAL_PWR_OVERDRIVE_DISABLE();
 8008206:	4b11      	ldr	r3, [pc, #68]	; (800824c <HAL_PWREx_DisableOverDrive+0x9c>)
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800820c:	f7f8 f88e 	bl	800032c <HAL_GetTick>
 8008210:	6078      	str	r0, [r7, #4]

  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008212:	e009      	b.n	8008228 <HAL_PWREx_DisableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008214:	f7f8 f88a 	bl	800032c <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008222:	d901      	bls.n	8008228 <HAL_PWREx_DisableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e007      	b.n	8008238 <HAL_PWREx_DisableOverDrive+0x88>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008228:	4b07      	ldr	r3, [pc, #28]	; (8008248 <HAL_PWREx_DisableOverDrive+0x98>)
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008234:	d0ee      	beq.n	8008214 <HAL_PWREx_DisableOverDrive+0x64>
    }
  }
  
  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	40023800 	.word	0x40023800
 8008244:	420e0044 	.word	0x420e0044
 8008248:	40007000 	.word	0x40007000
 800824c:	420e0040 	.word	0x420e0040

08008250 <HAL_PWREx_EnterUnderDriveSTOPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
HAL_StatusTypeDef HAL_PWREx_EnterUnderDriveSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008260:	2300      	movs	r3, #0
 8008262:	60bb      	str	r3, [r7, #8]
 8008264:	4a20      	ldr	r2, [pc, #128]	; (80082e8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
 8008266:	4b20      	ldr	r3, [pc, #128]	; (80082e8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800826e:	6413      	str	r3, [r2, #64]	; 0x40
 8008270:	4b1d      	ldr	r3, [pc, #116]	; (80082e8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008278:	60bb      	str	r3, [r7, #8]
 800827a:	68bb      	ldr	r3, [r7, #8]
  /* Enable the Under-drive Mode ---------------------------------------------*/
  /* Clear Under-drive flag */
  __HAL_PWR_CLEAR_ODRUDR_FLAG();
 800827c:	4a1b      	ldr	r2, [pc, #108]	; (80082ec <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
 800827e:	4b1b      	ldr	r3, [pc, #108]	; (80082ec <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8008286:	6053      	str	r3, [r2, #4]
  
  /* Enable the Under-drive */ 
  __HAL_PWR_UNDERDRIVE_ENABLE();
 8008288:	4a18      	ldr	r2, [pc, #96]	; (80082ec <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
 800828a:	4b18      	ldr	r3, [pc, #96]	; (80082ec <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8008292:	6013      	str	r3, [r2, #0]

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg1 = PWR->CR;
 8008294:	4b15      	ldr	r3, [pc, #84]	; (80082ec <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS, LPDS, MRLUDS and LPLUDS bits */
  tmpreg1 &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS | PWR_CR_LPUDS | PWR_CR_MRUDS);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80082a0:	f023 0303 	bic.w	r3, r3, #3
 80082a4:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
  tmpreg1 |= Regulator;
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg1;
 80082ae:	4a0f      	ldr	r2, [pc, #60]	; (80082ec <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80082b4:	4a0e      	ldr	r2, [pc, #56]	; (80082f0 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
 80082b6:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f043 0304 	orr.w	r3, r3, #4
 80082be:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_SLEEPENTRY_WFI)
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d101      	bne.n	80082ca <HAL_PWREx_EnterUnderDriveSTOPMode+0x7a>
  __ASM volatile ("wfi");
 80082c6:	bf30      	wfi
 80082c8:	e000      	b.n	80082cc <HAL_PWREx_EnterUnderDriveSTOPMode+0x7c>
  __ASM volatile ("wfe");
 80082ca:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 80082cc:	4a08      	ldr	r2, [pc, #32]	; (80082f0 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
 80082ce:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f023 0304 	bic.w	r3, r3, #4
 80082d6:	6113      	str	r3, [r2, #16]

  return HAL_OK;  
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	40023800 	.word	0x40023800
 80082ec:	40007000 	.word	0x40007000
 80082f0:	e000ed00 	.word	0xe000ed00
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e22d      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d075      	beq.n	800840e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008322:	4ba3      	ldr	r3, [pc, #652]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 030c 	and.w	r3, r3, #12
 800832a:	2b04      	cmp	r3, #4
 800832c:	d00c      	beq.n	8008348 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800832e:	4ba0      	ldr	r3, [pc, #640]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008336:	2b08      	cmp	r3, #8
 8008338:	d112      	bne.n	8008360 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800833a:	4b9d      	ldr	r3, [pc, #628]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008346:	d10b      	bne.n	8008360 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008348:	4b99      	ldr	r3, [pc, #612]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d05b      	beq.n	800840c <HAL_RCC_OscConfig+0x108>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d157      	bne.n	800840c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e208      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008368:	d106      	bne.n	8008378 <HAL_RCC_OscConfig+0x74>
 800836a:	4a91      	ldr	r2, [pc, #580]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 800836c:	4b90      	ldr	r3, [pc, #576]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008374:	6013      	str	r3, [r2, #0]
 8008376:	e01d      	b.n	80083b4 <HAL_RCC_OscConfig+0xb0>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008380:	d10c      	bne.n	800839c <HAL_RCC_OscConfig+0x98>
 8008382:	4a8b      	ldr	r2, [pc, #556]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008384:	4b8a      	ldr	r3, [pc, #552]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	4a88      	ldr	r2, [pc, #544]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008390:	4b87      	ldr	r3, [pc, #540]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	e00b      	b.n	80083b4 <HAL_RCC_OscConfig+0xb0>
 800839c:	4a84      	ldr	r2, [pc, #528]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 800839e:	4b84      	ldr	r3, [pc, #528]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	4a81      	ldr	r2, [pc, #516]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 80083aa:	4b81      	ldr	r3, [pc, #516]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d013      	beq.n	80083e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083bc:	f7f7 ffb6 	bl	800032c <HAL_GetTick>
 80083c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083c2:	e008      	b.n	80083d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083c4:	f7f7 ffb2 	bl	800032c <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	2b64      	cmp	r3, #100	; 0x64
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e1cd      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083d6:	4b76      	ldr	r3, [pc, #472]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0f0      	beq.n	80083c4 <HAL_RCC_OscConfig+0xc0>
 80083e2:	e014      	b.n	800840e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e4:	f7f7 ffa2 	bl	800032c <HAL_GetTick>
 80083e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083ea:	e008      	b.n	80083fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083ec:	f7f7 ff9e 	bl	800032c <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b64      	cmp	r3, #100	; 0x64
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e1b9      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083fe:	4b6c      	ldr	r3, [pc, #432]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1f0      	bne.n	80083ec <HAL_RCC_OscConfig+0xe8>
 800840a:	e000      	b.n	800840e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800840c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d063      	beq.n	80084e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800841a:	4b65      	ldr	r3, [pc, #404]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f003 030c 	and.w	r3, r3, #12
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008426:	4b62      	ldr	r3, [pc, #392]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800842e:	2b08      	cmp	r3, #8
 8008430:	d11c      	bne.n	800846c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008432:	4b5f      	ldr	r3, [pc, #380]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d116      	bne.n	800846c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800843e:	4b5c      	ldr	r3, [pc, #368]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d005      	beq.n	8008456 <HAL_RCC_OscConfig+0x152>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d001      	beq.n	8008456 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e18d      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008456:	4956      	ldr	r1, [pc, #344]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008458:	4b55      	ldr	r3, [pc, #340]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	4313      	orrs	r3, r2
 8008468:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800846a:	e03a      	b.n	80084e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d020      	beq.n	80084b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008474:	4b4f      	ldr	r3, [pc, #316]	; (80085b4 <HAL_RCC_OscConfig+0x2b0>)
 8008476:	2201      	movs	r2, #1
 8008478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847a:	f7f7 ff57 	bl	800032c <HAL_GetTick>
 800847e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008480:	e008      	b.n	8008494 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008482:	f7f7 ff53 	bl	800032c <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b02      	cmp	r3, #2
 800848e:	d901      	bls.n	8008494 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	e16e      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008494:	4b46      	ldr	r3, [pc, #280]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0302 	and.w	r3, r3, #2
 800849c:	2b00      	cmp	r3, #0
 800849e:	d0f0      	beq.n	8008482 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084a0:	4943      	ldr	r1, [pc, #268]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 80084a2:	4b43      	ldr	r3, [pc, #268]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	4313      	orrs	r3, r2
 80084b2:	600b      	str	r3, [r1, #0]
 80084b4:	e015      	b.n	80084e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084b6:	4b3f      	ldr	r3, [pc, #252]	; (80085b4 <HAL_RCC_OscConfig+0x2b0>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084bc:	f7f7 ff36 	bl	800032c <HAL_GetTick>
 80084c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084c2:	e008      	b.n	80084d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084c4:	f7f7 ff32 	bl	800032c <HAL_GetTick>
 80084c8:	4602      	mov	r2, r0
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d901      	bls.n	80084d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e14d      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084d6:	4b36      	ldr	r3, [pc, #216]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1f0      	bne.n	80084c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0308 	and.w	r3, r3, #8
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d030      	beq.n	8008550 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d016      	beq.n	8008524 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084f6:	4b30      	ldr	r3, [pc, #192]	; (80085b8 <HAL_RCC_OscConfig+0x2b4>)
 80084f8:	2201      	movs	r2, #1
 80084fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084fc:	f7f7 ff16 	bl	800032c <HAL_GetTick>
 8008500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008504:	f7f7 ff12 	bl	800032c <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d901      	bls.n	8008516 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e12d      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008516:	4b26      	ldr	r3, [pc, #152]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0f0      	beq.n	8008504 <HAL_RCC_OscConfig+0x200>
 8008522:	e015      	b.n	8008550 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008524:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <HAL_RCC_OscConfig+0x2b4>)
 8008526:	2200      	movs	r2, #0
 8008528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800852a:	f7f7 feff 	bl	800032c <HAL_GetTick>
 800852e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008530:	e008      	b.n	8008544 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008532:	f7f7 fefb 	bl	800032c <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	2b02      	cmp	r3, #2
 800853e:	d901      	bls.n	8008544 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e116      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008544:	4b1a      	ldr	r3, [pc, #104]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008548:	f003 0302 	and.w	r3, r3, #2
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1f0      	bne.n	8008532 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 80a0 	beq.w	800869e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800855e:	2300      	movs	r3, #0
 8008560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008562:	4b13      	ldr	r3, [pc, #76]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10f      	bne.n	800858e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	4a0f      	ldr	r2, [pc, #60]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008574:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800857c:	6413      	str	r3, [r2, #64]	; 0x40
 800857e:	4b0c      	ldr	r3, [pc, #48]	; (80085b0 <HAL_RCC_OscConfig+0x2ac>)
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800858a:	2301      	movs	r3, #1
 800858c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800858e:	4b0b      	ldr	r3, [pc, #44]	; (80085bc <HAL_RCC_OscConfig+0x2b8>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008596:	2b00      	cmp	r3, #0
 8008598:	d121      	bne.n	80085de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800859a:	4a08      	ldr	r2, [pc, #32]	; (80085bc <HAL_RCC_OscConfig+0x2b8>)
 800859c:	4b07      	ldr	r3, [pc, #28]	; (80085bc <HAL_RCC_OscConfig+0x2b8>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085a6:	f7f7 fec1 	bl	800032c <HAL_GetTick>
 80085aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085ac:	e011      	b.n	80085d2 <HAL_RCC_OscConfig+0x2ce>
 80085ae:	bf00      	nop
 80085b0:	40023800 	.word	0x40023800
 80085b4:	42470000 	.word	0x42470000
 80085b8:	42470e80 	.word	0x42470e80
 80085bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085c0:	f7f7 feb4 	bl	800032c <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d901      	bls.n	80085d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e0cf      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085d2:	4b6a      	ldr	r3, [pc, #424]	; (800877c <HAL_RCC_OscConfig+0x478>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0f0      	beq.n	80085c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d106      	bne.n	80085f4 <HAL_RCC_OscConfig+0x2f0>
 80085e6:	4a66      	ldr	r2, [pc, #408]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 80085e8:	4b65      	ldr	r3, [pc, #404]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 80085ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ec:	f043 0301 	orr.w	r3, r3, #1
 80085f0:	6713      	str	r3, [r2, #112]	; 0x70
 80085f2:	e01c      	b.n	800862e <HAL_RCC_OscConfig+0x32a>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	2b05      	cmp	r3, #5
 80085fa:	d10c      	bne.n	8008616 <HAL_RCC_OscConfig+0x312>
 80085fc:	4a60      	ldr	r2, [pc, #384]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 80085fe:	4b60      	ldr	r3, [pc, #384]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 8008600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008602:	f043 0304 	orr.w	r3, r3, #4
 8008606:	6713      	str	r3, [r2, #112]	; 0x70
 8008608:	4a5d      	ldr	r2, [pc, #372]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 800860a:	4b5d      	ldr	r3, [pc, #372]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 800860c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860e:	f043 0301 	orr.w	r3, r3, #1
 8008612:	6713      	str	r3, [r2, #112]	; 0x70
 8008614:	e00b      	b.n	800862e <HAL_RCC_OscConfig+0x32a>
 8008616:	4a5a      	ldr	r2, [pc, #360]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 8008618:	4b59      	ldr	r3, [pc, #356]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 800861a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861c:	f023 0301 	bic.w	r3, r3, #1
 8008620:	6713      	str	r3, [r2, #112]	; 0x70
 8008622:	4a57      	ldr	r2, [pc, #348]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 8008624:	4b56      	ldr	r3, [pc, #344]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 8008626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008628:	f023 0304 	bic.w	r3, r3, #4
 800862c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d015      	beq.n	8008662 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008636:	f7f7 fe79 	bl	800032c <HAL_GetTick>
 800863a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800863c:	e00a      	b.n	8008654 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800863e:	f7f7 fe75 	bl	800032c <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	f241 3288 	movw	r2, #5000	; 0x1388
 800864c:	4293      	cmp	r3, r2
 800864e:	d901      	bls.n	8008654 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e08e      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008654:	4b4a      	ldr	r3, [pc, #296]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 8008656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d0ee      	beq.n	800863e <HAL_RCC_OscConfig+0x33a>
 8008660:	e014      	b.n	800868c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008662:	f7f7 fe63 	bl	800032c <HAL_GetTick>
 8008666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008668:	e00a      	b.n	8008680 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800866a:	f7f7 fe5f 	bl	800032c <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	f241 3288 	movw	r2, #5000	; 0x1388
 8008678:	4293      	cmp	r3, r2
 800867a:	d901      	bls.n	8008680 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e078      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008680:	4b3f      	ldr	r3, [pc, #252]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 8008682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008684:	f003 0302 	and.w	r3, r3, #2
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1ee      	bne.n	800866a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d105      	bne.n	800869e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008692:	4a3b      	ldr	r2, [pc, #236]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 8008694:	4b3a      	ldr	r3, [pc, #232]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 8008696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800869c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d064      	beq.n	8008770 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80086a6:	4b36      	ldr	r3, [pc, #216]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 030c 	and.w	r3, r3, #12
 80086ae:	2b08      	cmp	r3, #8
 80086b0:	d05c      	beq.n	800876c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d141      	bne.n	800873e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086ba:	4b32      	ldr	r3, [pc, #200]	; (8008784 <HAL_RCC_OscConfig+0x480>)
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c0:	f7f7 fe34 	bl	800032c <HAL_GetTick>
 80086c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086c6:	e008      	b.n	80086da <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086c8:	f7f7 fe30 	bl	800032c <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e04b      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086da:	4b29      	ldr	r3, [pc, #164]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1f0      	bne.n	80086c8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086e6:	4926      	ldr	r1, [pc, #152]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	69da      	ldr	r2, [r3, #28]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	431a      	orrs	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	019b      	lsls	r3, r3, #6
 80086f8:	431a      	orrs	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fe:	085b      	lsrs	r3, r3, #1
 8008700:	3b01      	subs	r3, #1
 8008702:	041b      	lsls	r3, r3, #16
 8008704:	431a      	orrs	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	061b      	lsls	r3, r3, #24
 800870c:	4313      	orrs	r3, r2
 800870e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008710:	4b1c      	ldr	r3, [pc, #112]	; (8008784 <HAL_RCC_OscConfig+0x480>)
 8008712:	2201      	movs	r2, #1
 8008714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008716:	f7f7 fe09 	bl	800032c <HAL_GetTick>
 800871a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800871c:	e008      	b.n	8008730 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800871e:	f7f7 fe05 	bl	800032c <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	2b02      	cmp	r3, #2
 800872a:	d901      	bls.n	8008730 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e020      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008730:	4b13      	ldr	r3, [pc, #76]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0f0      	beq.n	800871e <HAL_RCC_OscConfig+0x41a>
 800873c:	e018      	b.n	8008770 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800873e:	4b11      	ldr	r3, [pc, #68]	; (8008784 <HAL_RCC_OscConfig+0x480>)
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008744:	f7f7 fdf2 	bl	800032c <HAL_GetTick>
 8008748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800874c:	f7f7 fdee 	bl	800032c <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e009      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <HAL_RCC_OscConfig+0x47c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f0      	bne.n	800874c <HAL_RCC_OscConfig+0x448>
 800876a:	e001      	b.n	8008770 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e000      	b.n	8008772 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	40007000 	.word	0x40007000
 8008780:	40023800 	.word	0x40023800
 8008784:	42470060 	.word	0x42470060

08008788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e0ca      	b.n	8008932 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800879c:	4b67      	ldr	r3, [pc, #412]	; (800893c <HAL_RCC_ClockConfig+0x1b4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 020f 	and.w	r2, r3, #15
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d20c      	bcs.n	80087c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087aa:	4b64      	ldr	r3, [pc, #400]	; (800893c <HAL_RCC_ClockConfig+0x1b4>)
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	b2d2      	uxtb	r2, r2
 80087b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087b2:	4b62      	ldr	r3, [pc, #392]	; (800893c <HAL_RCC_ClockConfig+0x1b4>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 020f 	and.w	r2, r3, #15
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d001      	beq.n	80087c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e0b6      	b.n	8008932 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 0302 	and.w	r3, r3, #2
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d020      	beq.n	8008812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087dc:	4a58      	ldr	r2, [pc, #352]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 80087de:	4b58      	ldr	r3, [pc, #352]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80087e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0308 	and.w	r3, r3, #8
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80087f4:	4a52      	ldr	r2, [pc, #328]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 80087f6:	4b52      	ldr	r3, [pc, #328]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80087fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008800:	494f      	ldr	r1, [pc, #316]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 8008802:	4b4f      	ldr	r3, [pc, #316]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	4313      	orrs	r3, r2
 8008810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	2b00      	cmp	r3, #0
 800881c:	d044      	beq.n	80088a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d107      	bne.n	8008836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008826:	4b46      	ldr	r3, [pc, #280]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d119      	bne.n	8008866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e07d      	b.n	8008932 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2b02      	cmp	r3, #2
 800883c:	d003      	beq.n	8008846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008842:	2b03      	cmp	r3, #3
 8008844:	d107      	bne.n	8008856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008846:	4b3e      	ldr	r3, [pc, #248]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d109      	bne.n	8008866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e06d      	b.n	8008932 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008856:	4b3a      	ldr	r3, [pc, #232]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e065      	b.n	8008932 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008866:	4936      	ldr	r1, [pc, #216]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 8008868:	4b35      	ldr	r3, [pc, #212]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f023 0203 	bic.w	r2, r3, #3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	4313      	orrs	r3, r2
 8008876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008878:	f7f7 fd58 	bl	800032c <HAL_GetTick>
 800887c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800887e:	e00a      	b.n	8008896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008880:	f7f7 fd54 	bl	800032c <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	f241 3288 	movw	r2, #5000	; 0x1388
 800888e:	4293      	cmp	r3, r2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e04d      	b.n	8008932 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008896:	4b2a      	ldr	r3, [pc, #168]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 020c 	and.w	r2, r3, #12
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d1eb      	bne.n	8008880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088a8:	4b24      	ldr	r3, [pc, #144]	; (800893c <HAL_RCC_ClockConfig+0x1b4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 020f 	and.w	r2, r3, #15
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d90c      	bls.n	80088d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088b6:	4b21      	ldr	r3, [pc, #132]	; (800893c <HAL_RCC_ClockConfig+0x1b4>)
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	b2d2      	uxtb	r2, r2
 80088bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088be:	4b1f      	ldr	r3, [pc, #124]	; (800893c <HAL_RCC_ClockConfig+0x1b4>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 020f 	and.w	r2, r3, #15
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d001      	beq.n	80088d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e030      	b.n	8008932 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0304 	and.w	r3, r3, #4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d008      	beq.n	80088ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088dc:	4918      	ldr	r1, [pc, #96]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 80088de:	4b18      	ldr	r3, [pc, #96]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0308 	and.w	r3, r3, #8
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d009      	beq.n	800890e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088fa:	4911      	ldr	r1, [pc, #68]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 80088fc:	4b10      	ldr	r3, [pc, #64]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	00db      	lsls	r3, r3, #3
 800890a:	4313      	orrs	r3, r2
 800890c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800890e:	f000 f89d 	bl	8008a4c <HAL_RCC_GetSysClockFreq>
 8008912:	4601      	mov	r1, r0
 8008914:	4b0a      	ldr	r3, [pc, #40]	; (8008940 <HAL_RCC_ClockConfig+0x1b8>)
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	091b      	lsrs	r3, r3, #4
 800891a:	f003 030f 	and.w	r3, r3, #15
 800891e:	4a09      	ldr	r2, [pc, #36]	; (8008944 <HAL_RCC_ClockConfig+0x1bc>)
 8008920:	5cd3      	ldrb	r3, [r2, r3]
 8008922:	fa21 f303 	lsr.w	r3, r1, r3
 8008926:	4a08      	ldr	r2, [pc, #32]	; (8008948 <HAL_RCC_ClockConfig+0x1c0>)
 8008928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800892a:	2000      	movs	r0, #0
 800892c:	f7f7 fcba 	bl	80002a4 <HAL_InitTick>

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	40023c00 	.word	0x40023c00
 8008940:	40023800 	.word	0x40023800
 8008944:	0800e210 	.word	0x0800e210
 8008948:	20000008 	.word	0x20000008

0800894c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08c      	sub	sp, #48	; 0x30
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d129      	bne.n	80089b2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800895e:	2300      	movs	r3, #0
 8008960:	61bb      	str	r3, [r7, #24]
 8008962:	4a2b      	ldr	r2, [pc, #172]	; (8008a10 <HAL_RCC_MCOConfig+0xc4>)
 8008964:	4b2a      	ldr	r3, [pc, #168]	; (8008a10 <HAL_RCC_MCOConfig+0xc4>)
 8008966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008968:	f043 0301 	orr.w	r3, r3, #1
 800896c:	6313      	str	r3, [r2, #48]	; 0x30
 800896e:	4b28      	ldr	r3, [pc, #160]	; (8008a10 <HAL_RCC_MCOConfig+0xc4>)
 8008970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	61bb      	str	r3, [r7, #24]
 8008978:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800897a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800897e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008980:	2302      	movs	r3, #2
 8008982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008984:	2303      	movs	r3, #3
 8008986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008988:	2300      	movs	r3, #0
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800898c:	2300      	movs	r3, #0
 800898e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008990:	f107 031c 	add.w	r3, r7, #28
 8008994:	4619      	mov	r1, r3
 8008996:	481f      	ldr	r0, [pc, #124]	; (8008a14 <HAL_RCC_MCOConfig+0xc8>)
 8008998:	f7fa f874 	bl	8002a84 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800899c:	481c      	ldr	r0, [pc, #112]	; (8008a10 <HAL_RCC_MCOConfig+0xc4>)
 800899e:	4b1c      	ldr	r3, [pc, #112]	; (8008a10 <HAL_RCC_MCOConfig+0xc4>)
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80089a6:	68b9      	ldr	r1, [r7, #8]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	430b      	orrs	r3, r1
 80089ac:	4313      	orrs	r3, r2
 80089ae:	6083      	str	r3, [r0, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80089b0:	e029      	b.n	8008a06 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80089b2:	2300      	movs	r3, #0
 80089b4:	617b      	str	r3, [r7, #20]
 80089b6:	4a16      	ldr	r2, [pc, #88]	; (8008a10 <HAL_RCC_MCOConfig+0xc4>)
 80089b8:	4b15      	ldr	r3, [pc, #84]	; (8008a10 <HAL_RCC_MCOConfig+0xc4>)
 80089ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089bc:	f043 0304 	orr.w	r3, r3, #4
 80089c0:	6313      	str	r3, [r2, #48]	; 0x30
 80089c2:	4b13      	ldr	r3, [pc, #76]	; (8008a10 <HAL_RCC_MCOConfig+0xc4>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c6:	f003 0304 	and.w	r3, r3, #4
 80089ca:	617b      	str	r3, [r7, #20]
 80089cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80089ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089d4:	2302      	movs	r3, #2
 80089d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089d8:	2303      	movs	r3, #3
 80089da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80089e0:	2300      	movs	r3, #0
 80089e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80089e4:	f107 031c 	add.w	r3, r7, #28
 80089e8:	4619      	mov	r1, r3
 80089ea:	480b      	ldr	r0, [pc, #44]	; (8008a18 <HAL_RCC_MCOConfig+0xcc>)
 80089ec:	f7fa f84a 	bl	8002a84 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80089f0:	4807      	ldr	r0, [pc, #28]	; (8008a10 <HAL_RCC_MCOConfig+0xc4>)
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <HAL_RCC_MCOConfig+0xc4>)
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	00d9      	lsls	r1, r3, #3
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	430b      	orrs	r3, r1
 8008a02:	4313      	orrs	r3, r2
 8008a04:	6083      	str	r3, [r0, #8]
}
 8008a06:	bf00      	nop
 8008a08:	3730      	adds	r7, #48	; 0x30
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	40023800 	.word	0x40023800
 8008a14:	40020000 	.word	0x40020000
 8008a18:	40020800 	.word	0x40020800

08008a1c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008a20:	4b03      	ldr	r3, [pc, #12]	; (8008a30 <HAL_RCC_EnableCSS+0x14>)
 8008a22:	2201      	movs	r2, #1
 8008a24:	601a      	str	r2, [r3, #0]
}
 8008a26:	bf00      	nop
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	4247004c 	.word	0x4247004c

08008a34 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8008a34:	b480      	push	{r7}
 8008a36:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8008a38:	4b03      	ldr	r3, [pc, #12]	; (8008a48 <HAL_RCC_DisableCSS+0x14>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]
}
 8008a3e:	bf00      	nop
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	4247004c 	.word	0x4247004c

08008a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a50:	b087      	sub	sp, #28
 8008a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a54:	2200      	movs	r2, #0
 8008a56:	60fa      	str	r2, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	617a      	str	r2, [r7, #20]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8008a60:	2200      	movs	r2, #0
 8008a62:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a64:	4a51      	ldr	r2, [pc, #324]	; (8008bac <HAL_RCC_GetSysClockFreq+0x160>)
 8008a66:	6892      	ldr	r2, [r2, #8]
 8008a68:	f002 020c 	and.w	r2, r2, #12
 8008a6c:	2a04      	cmp	r2, #4
 8008a6e:	d007      	beq.n	8008a80 <HAL_RCC_GetSysClockFreq+0x34>
 8008a70:	2a08      	cmp	r2, #8
 8008a72:	d008      	beq.n	8008a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8008a74:	2a00      	cmp	r2, #0
 8008a76:	f040 8090 	bne.w	8008b9a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a7a:	4b4d      	ldr	r3, [pc, #308]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8008a7c:	613b      	str	r3, [r7, #16]
       break;
 8008a7e:	e08f      	b.n	8008ba0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a80:	4b4c      	ldr	r3, [pc, #304]	; (8008bb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8008a82:	613b      	str	r3, [r7, #16]
      break;
 8008a84:	e08c      	b.n	8008ba0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a86:	4a49      	ldr	r2, [pc, #292]	; (8008bac <HAL_RCC_GetSysClockFreq+0x160>)
 8008a88:	6852      	ldr	r2, [r2, #4]
 8008a8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008a8e:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a90:	4a46      	ldr	r2, [pc, #280]	; (8008bac <HAL_RCC_GetSysClockFreq+0x160>)
 8008a92:	6852      	ldr	r2, [r2, #4]
 8008a94:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8008a98:	2a00      	cmp	r2, #0
 8008a9a:	d023      	beq.n	8008ae4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a9c:	4b43      	ldr	r3, [pc, #268]	; (8008bac <HAL_RCC_GetSysClockFreq+0x160>)
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	099b      	lsrs	r3, r3, #6
 8008aa2:	f04f 0400 	mov.w	r4, #0
 8008aa6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008aaa:	f04f 0200 	mov.w	r2, #0
 8008aae:	ea03 0301 	and.w	r3, r3, r1
 8008ab2:	ea04 0402 	and.w	r4, r4, r2
 8008ab6:	4a3f      	ldr	r2, [pc, #252]	; (8008bb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8008ab8:	fb02 f104 	mul.w	r1, r2, r4
 8008abc:	2200      	movs	r2, #0
 8008abe:	fb02 f203 	mul.w	r2, r2, r3
 8008ac2:	440a      	add	r2, r1
 8008ac4:	493b      	ldr	r1, [pc, #236]	; (8008bb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8008ac6:	fba3 0101 	umull	r0, r1, r3, r1
 8008aca:	1853      	adds	r3, r2, r1
 8008acc:	4619      	mov	r1, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f04f 0400 	mov.w	r4, #0
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4623      	mov	r3, r4
 8008ad8:	f005 f99c 	bl	800de14 <__aeabi_uldivmod>
 8008adc:	4603      	mov	r3, r0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	617b      	str	r3, [r7, #20]
 8008ae2:	e04c      	b.n	8008b7e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ae4:	4a31      	ldr	r2, [pc, #196]	; (8008bac <HAL_RCC_GetSysClockFreq+0x160>)
 8008ae6:	6852      	ldr	r2, [r2, #4]
 8008ae8:	0992      	lsrs	r2, r2, #6
 8008aea:	4611      	mov	r1, r2
 8008aec:	f04f 0200 	mov.w	r2, #0
 8008af0:	f240 15ff 	movw	r5, #511	; 0x1ff
 8008af4:	f04f 0600 	mov.w	r6, #0
 8008af8:	ea05 0501 	and.w	r5, r5, r1
 8008afc:	ea06 0602 	and.w	r6, r6, r2
 8008b00:	4629      	mov	r1, r5
 8008b02:	4632      	mov	r2, r6
 8008b04:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8008b08:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8008b0c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8008b10:	4651      	mov	r1, sl
 8008b12:	465a      	mov	r2, fp
 8008b14:	46aa      	mov	sl, r5
 8008b16:	46b3      	mov	fp, r6
 8008b18:	4655      	mov	r5, sl
 8008b1a:	465e      	mov	r6, fp
 8008b1c:	1b4d      	subs	r5, r1, r5
 8008b1e:	eb62 0606 	sbc.w	r6, r2, r6
 8008b22:	4629      	mov	r1, r5
 8008b24:	4632      	mov	r2, r6
 8008b26:	0194      	lsls	r4, r2, #6
 8008b28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008b2c:	018b      	lsls	r3, r1, #6
 8008b2e:	1a5b      	subs	r3, r3, r1
 8008b30:	eb64 0402 	sbc.w	r4, r4, r2
 8008b34:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8008b38:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8008b3c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8008b40:	4643      	mov	r3, r8
 8008b42:	464c      	mov	r4, r9
 8008b44:	4655      	mov	r5, sl
 8008b46:	465e      	mov	r6, fp
 8008b48:	18ed      	adds	r5, r5, r3
 8008b4a:	eb46 0604 	adc.w	r6, r6, r4
 8008b4e:	462b      	mov	r3, r5
 8008b50:	4634      	mov	r4, r6
 8008b52:	02a2      	lsls	r2, r4, #10
 8008b54:	607a      	str	r2, [r7, #4]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008b5c:	607a      	str	r2, [r7, #4]
 8008b5e:	029b      	lsls	r3, r3, #10
 8008b60:	603b      	str	r3, [r7, #0]
 8008b62:	e897 0018 	ldmia.w	r7, {r3, r4}
 8008b66:	4618      	mov	r0, r3
 8008b68:	4621      	mov	r1, r4
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f04f 0400 	mov.w	r4, #0
 8008b70:	461a      	mov	r2, r3
 8008b72:	4623      	mov	r3, r4
 8008b74:	f005 f94e 	bl	800de14 <__aeabi_uldivmod>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b7e:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <HAL_RCC_GetSysClockFreq+0x160>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	0c1b      	lsrs	r3, r3, #16
 8008b84:	f003 0303 	and.w	r3, r3, #3
 8008b88:	3301      	adds	r3, #1
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b96:	613b      	str	r3, [r7, #16]
      break;
 8008b98:	e002      	b.n	8008ba0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b9a:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8008b9c:	613b      	str	r3, [r7, #16]
      break;
 8008b9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ba0:	693b      	ldr	r3, [r7, #16]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bac:	40023800 	.word	0x40023800
 8008bb0:	00f42400 	.word	0x00f42400
 8008bb4:	017d7840 	.word	0x017d7840

08008bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bbc:	4b03      	ldr	r3, [pc, #12]	; (8008bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	20000008 	.word	0x20000008

08008bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008bd4:	f7ff fff0 	bl	8008bb8 <HAL_RCC_GetHCLKFreq>
 8008bd8:	4601      	mov	r1, r0
 8008bda:	4b05      	ldr	r3, [pc, #20]	; (8008bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	0a9b      	lsrs	r3, r3, #10
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	4a03      	ldr	r2, [pc, #12]	; (8008bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008be6:	5cd3      	ldrb	r3, [r2, r3]
 8008be8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	40023800 	.word	0x40023800
 8008bf4:	0800e220 	.word	0x0800e220

08008bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008bfc:	f7ff ffdc 	bl	8008bb8 <HAL_RCC_GetHCLKFreq>
 8008c00:	4601      	mov	r1, r0
 8008c02:	4b05      	ldr	r3, [pc, #20]	; (8008c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	0b5b      	lsrs	r3, r3, #13
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	4a03      	ldr	r2, [pc, #12]	; (8008c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c0e:	5cd3      	ldrb	r3, [r2, r3]
 8008c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	40023800 	.word	0x40023800
 8008c1c:	0800e220 	.word	0x0800e220

08008c20 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	220f      	movs	r2, #15
 8008c2c:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8008c2e:	4b45      	ldr	r3, [pc, #276]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c3a:	d104      	bne.n	8008c46 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8008c42:	605a      	str	r2, [r3, #4]
 8008c44:	e00e      	b.n	8008c64 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8008c46:	4b3f      	ldr	r3, [pc, #252]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c52:	d104      	bne.n	8008c5e <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008c5a:	605a      	str	r2, [r3, #4]
 8008c5c:	e002      	b.n	8008c64 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8008c64:	4b37      	ldr	r3, [pc, #220]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d103      	bne.n	8008c78 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	60da      	str	r2, [r3, #12]
 8008c76:	e002      	b.n	8008c7e <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8008c7e:	4b31      	ldr	r3, [pc, #196]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	08db      	lsrs	r3, r3, #3
 8008c84:	f003 021f 	and.w	r2, r3, #31
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8008c8c:	4b2d      	ldr	r3, [pc, #180]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d103      	bne.n	8008ca0 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2205      	movs	r2, #5
 8008c9c:	609a      	str	r2, [r3, #8]
 8008c9e:	e00c      	b.n	8008cba <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8008ca0:	4b28      	ldr	r3, [pc, #160]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d103      	bne.n	8008cb4 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	609a      	str	r2, [r3, #8]
 8008cb2:	e002      	b.n	8008cba <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8008cba:	4b22      	ldr	r3, [pc, #136]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d103      	bne.n	8008cce <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	615a      	str	r2, [r3, #20]
 8008ccc:	e002      	b.n	8008cd4 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8008cd4:	4b1b      	ldr	r3, [pc, #108]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ce0:	d103      	bne.n	8008cea <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	619a      	str	r2, [r3, #24]
 8008ce8:	e002      	b.n	8008cf0 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008cf0:	4b14      	ldr	r3, [pc, #80]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8008cfc:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d08:	4b0e      	ldr	r3, [pc, #56]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	099b      	lsrs	r3, r3, #6
 8008d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8008d16:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d1e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	0c1a      	lsrs	r2, r3, #16
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8008d2a:	4b06      	ldr	r3, [pc, #24]	; (8008d44 <HAL_RCC_GetOscConfig+0x124>)
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	0e1b      	lsrs	r3, r3, #24
 8008d30:	f003 020f 	and.w	r2, r3, #15
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	40023800 	.word	0x40023800

08008d48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	220f      	movs	r2, #15
 8008d56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d58:	4b12      	ldr	r3, [pc, #72]	; (8008da4 <HAL_RCC_GetClockConfig+0x5c>)
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f003 0203 	and.w	r2, r3, #3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008d64:	4b0f      	ldr	r3, [pc, #60]	; (8008da4 <HAL_RCC_GetClockConfig+0x5c>)
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008d70:	4b0c      	ldr	r3, [pc, #48]	; (8008da4 <HAL_RCC_GetClockConfig+0x5c>)
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008d7c:	4b09      	ldr	r3, [pc, #36]	; (8008da4 <HAL_RCC_GetClockConfig+0x5c>)
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	08db      	lsrs	r3, r3, #3
 8008d82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008d8a:	4b07      	ldr	r3, [pc, #28]	; (8008da8 <HAL_RCC_GetClockConfig+0x60>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 020f 	and.w	r2, r3, #15
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	601a      	str	r2, [r3, #0]
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	40023800 	.word	0x40023800
 8008da8:	40023c00 	.word	0x40023c00

08008dac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008db0:	4b06      	ldr	r3, [pc, #24]	; (8008dcc <HAL_RCC_NMI_IRQHandler+0x20>)
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db8:	2b80      	cmp	r3, #128	; 0x80
 8008dba:	d104      	bne.n	8008dc6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008dbc:	f000 f80a 	bl	8008dd4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008dc0:	4b03      	ldr	r3, [pc, #12]	; (8008dd0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008dc2:	2280      	movs	r2, #128	; 0x80
 8008dc4:	701a      	strb	r2, [r3, #0]
  }
}
 8008dc6:	bf00      	nop
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	40023800 	.word	0x40023800
 8008dd0:	4002380e 	.word	0x4002380e

08008dd4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop

08008de4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e055      	b.n	8008ea2 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d106      	bne.n	8008e16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f004 fcbf 	bl	800d794 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	6812      	ldr	r2, [r2, #0]
 8008e26:	6812      	ldr	r2, [r2, #0]
 8008e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e2c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6851      	ldr	r1, [r2, #4]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	6892      	ldr	r2, [r2, #8]
 8008e3a:	4311      	orrs	r1, r2
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	68d2      	ldr	r2, [r2, #12]
 8008e40:	4311      	orrs	r1, r2
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	6912      	ldr	r2, [r2, #16]
 8008e46:	4311      	orrs	r1, r2
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	6952      	ldr	r2, [r2, #20]
 8008e4c:	4311      	orrs	r1, r2
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6992      	ldr	r2, [r2, #24]
 8008e52:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8008e56:	4311      	orrs	r1, r2
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	69d2      	ldr	r2, [r2, #28]
 8008e5c:	4311      	orrs	r1, r2
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	6a12      	ldr	r2, [r2, #32]
 8008e62:	4311      	orrs	r1, r2
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	6992      	ldr	r2, [r2, #24]
 8008e74:	0c12      	lsrs	r2, r2, #16
 8008e76:	f002 0104 	and.w	r1, r2, #4
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	6812      	ldr	r2, [r2, #0]
 8008e8a:	69d2      	ldr	r2, [r2, #28]
 8008e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e90:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e01a      	b.n	8008ef2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	6812      	ldr	r2, [r2, #0]
 8008ecc:	6812      	ldr	r2, [r2, #0]
 8008ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ed2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f004 fcf3 	bl	800d8c0 <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b083      	sub	sp, #12
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
  */
}
 8008f02:	bf00      	nop
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b083      	sub	sp, #12
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
  */
}
 8008f16:	bf00      	nop
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b08a      	sub	sp, #40	; 0x28
 8008f26:	af02      	add	r7, sp, #8
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	603b      	str	r3, [r7, #0]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_SPI_Transmit+0x26>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e123      	b.n	8009190 <HAL_SPI_Transmit+0x26e>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f50:	f7f7 f9ec 	bl	800032c <HAL_GetTick>
 8008f54:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d002      	beq.n	8008f68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008f62:	2302      	movs	r3, #2
 8008f64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f66:	e10a      	b.n	800917e <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <HAL_SPI_Transmit+0x52>
 8008f6e:	88fb      	ldrh	r3, [r7, #6]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f78:	e101      	b.n	800917e <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2203      	movs	r2, #3
 8008f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	88fa      	ldrh	r2, [r7, #6]
 8008f92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	88fa      	ldrh	r2, [r7, #6]
 8008f98:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fc0:	d107      	bne.n	8008fd2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	6812      	ldr	r2, [r2, #0]
 8008fca:	6812      	ldr	r2, [r2, #0]
 8008fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fdc:	2b40      	cmp	r3, #64	; 0x40
 8008fde:	d007      	beq.n	8008ff0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	6812      	ldr	r2, [r2, #0]
 8008fe8:	6812      	ldr	r2, [r2, #0]
 8008fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ff8:	d147      	bne.n	800908a <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d004      	beq.n	800900c <HAL_SPI_Transmit+0xea>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009006:	b29b      	uxth	r3, r3
 8009008:	2b01      	cmp	r3, #1
 800900a:	d138      	bne.n	800907e <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	8812      	ldrh	r2, [r2, #0]
 8009014:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	3302      	adds	r3, #2
 800901a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009020:	b29b      	uxth	r3, r3
 8009022:	3b01      	subs	r3, #1
 8009024:	b29a      	uxth	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800902a:	e028      	b.n	800907e <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	2b02      	cmp	r3, #2
 8009038:	d10f      	bne.n	800905a <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	8812      	ldrh	r2, [r2, #0]
 8009042:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	3302      	adds	r3, #2
 8009048:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800904e:	b29b      	uxth	r3, r3
 8009050:	3b01      	subs	r3, #1
 8009052:	b29a      	uxth	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	86da      	strh	r2, [r3, #54]	; 0x36
 8009058:	e011      	b.n	800907e <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00b      	beq.n	8009078 <HAL_SPI_Transmit+0x156>
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009066:	d00a      	beq.n	800907e <HAL_SPI_Transmit+0x15c>
 8009068:	f7f7 f960 	bl	800032c <HAL_GetTick>
 800906c:	4602      	mov	r2, r0
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	1ad2      	subs	r2, r2, r3
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	429a      	cmp	r2, r3
 8009076:	d302      	bcc.n	800907e <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800907c:	e07f      	b.n	800917e <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009082:	b29b      	uxth	r3, r3
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1d1      	bne.n	800902c <HAL_SPI_Transmit+0x10a>
 8009088:	e048      	b.n	800911c <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d004      	beq.n	800909c <HAL_SPI_Transmit+0x17a>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009096:	b29b      	uxth	r3, r3
 8009098:	2b01      	cmp	r3, #1
 800909a:	d13a      	bne.n	8009112 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	330c      	adds	r3, #12
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	7812      	ldrb	r2, [r2, #0]
 80090a6:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	3301      	adds	r3, #1
 80090ac:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	3b01      	subs	r3, #1
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80090bc:	e029      	b.n	8009112 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d110      	bne.n	80090ee <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	330c      	adds	r3, #12
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	7812      	ldrb	r2, [r2, #0]
 80090d6:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	3301      	adds	r3, #1
 80090dc:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	3b01      	subs	r3, #1
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80090ec:	e011      	b.n	8009112 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00b      	beq.n	800910c <HAL_SPI_Transmit+0x1ea>
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fa:	d00a      	beq.n	8009112 <HAL_SPI_Transmit+0x1f0>
 80090fc:	f7f7 f916 	bl	800032c <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	1ad2      	subs	r2, r2, r3
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	429a      	cmp	r2, r3
 800910a:	d302      	bcc.n	8009112 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009110:	e035      	b.n	800917e <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009116:	b29b      	uxth	r3, r3
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1d0      	bne.n	80090be <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2201      	movs	r2, #1
 8009124:	2102      	movs	r1, #2
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f001 fd27 	bl	800ab7a <SPI_WaitFlagStateUntilTimeout>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009136:	e022      	b.n	800917e <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8009138:	69ba      	ldr	r2, [r7, #24]
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f001 fd85 	bl	800ac4c <SPI_CheckFlag_BSY>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2220      	movs	r2, #32
 8009150:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009152:	e014      	b.n	800917e <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800915c:	2300      	movs	r3, #0
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	617b      	str	r3, [r7, #20]
 8009170:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800918e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3720      	adds	r7, #32
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af02      	add	r7, sp, #8
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	4613      	mov	r3, r2
 80091a6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091b8:	d112      	bne.n	80091e0 <HAL_SPI_Receive+0x48>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10e      	bne.n	80091e0 <HAL_SPI_Receive+0x48>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2204      	movs	r2, #4
 80091c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 80091ca:	88fa      	ldrh	r2, [r7, #6]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	4613      	mov	r3, r2
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	68b9      	ldr	r1, [r7, #8]
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f000 f8ec 	bl	80093b4 <HAL_SPI_TransmitReceive>
 80091dc:	4603      	mov	r3, r0
 80091de:	e0e5      	b.n	80093ac <HAL_SPI_Receive+0x214>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_SPI_Receive+0x56>
 80091ea:	2302      	movs	r3, #2
 80091ec:	e0de      	b.n	80093ac <HAL_SPI_Receive+0x214>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091f6:	f7f7 f899 	bl	800032c <HAL_GetTick>
 80091fa:	6138      	str	r0, [r7, #16]

  if(hspi->State != HAL_SPI_STATE_READY)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009202:	b2db      	uxtb	r3, r3
 8009204:	2b01      	cmp	r3, #1
 8009206:	d002      	beq.n	800920e <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8009208:	2302      	movs	r3, #2
 800920a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800920c:	e0c5      	b.n	800939a <HAL_SPI_Receive+0x202>
  }

  if((pData == NULL ) || (Size == 0))
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <HAL_SPI_Receive+0x82>
 8009214:	88fb      	ldrh	r3, [r7, #6]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d102      	bne.n	8009220 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800921e:	e0bc      	b.n	800939a <HAL_SPI_Receive+0x202>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2204      	movs	r2, #4
 8009224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	88fa      	ldrh	r2, [r7, #6]
 8009238:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	88fa      	ldrh	r2, [r7, #6]
 800923e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009266:	d107      	bne.n	8009278 <HAL_SPI_Receive+0xe0>
  {
    SPI_1LINE_RX(hspi);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	6812      	ldr	r2, [r2, #0]
 8009270:	6812      	ldr	r2, [r2, #0]
 8009272:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009276:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	d007      	beq.n	8009296 <HAL_SPI_Receive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	6812      	ldr	r2, [r2, #0]
 800928e:	6812      	ldr	r2, [r2, #0]
 8009290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009294:	601a      	str	r2, [r3, #0]
  }

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d15b      	bne.n	8009356 <HAL_SPI_Receive+0x1be>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 800929e:	e02a      	b.n	80092f6 <HAL_SPI_Receive+0x15e>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d111      	bne.n	80092d2 <HAL_SPI_Receive+0x13a>
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	330c      	adds	r3, #12
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	3301      	adds	r3, #1
 80092c0:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092d0:	e011      	b.n	80092f6 <HAL_SPI_Receive+0x15e>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00b      	beq.n	80092f0 <HAL_SPI_Receive+0x158>
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092de:	d00a      	beq.n	80092f6 <HAL_SPI_Receive+0x15e>
 80092e0:	f7f7 f824 	bl	800032c <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	1ad2      	subs	r2, r2, r3
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d302      	bcc.n	80092f6 <HAL_SPI_Receive+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80092f4:	e051      	b.n	800939a <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1cf      	bne.n	80092a0 <HAL_SPI_Receive+0x108>
 8009300:	e02e      	b.n	8009360 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b01      	cmp	r3, #1
 800930e:	d110      	bne.n	8009332 <HAL_SPI_Receive+0x19a>
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	b29a      	uxth	r2, r3
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	3302      	adds	r3, #2
 8009320:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009326:	b29b      	uxth	r3, r3
 8009328:	3b01      	subs	r3, #1
 800932a:	b29a      	uxth	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009330:	e011      	b.n	8009356 <HAL_SPI_Receive+0x1be>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00b      	beq.n	8009350 <HAL_SPI_Receive+0x1b8>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d00a      	beq.n	8009356 <HAL_SPI_Receive+0x1be>
 8009340:	f7f6 fff4 	bl	800032c <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	1ad2      	subs	r2, r2, r3
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	429a      	cmp	r2, r3
 800934e:	d302      	bcc.n	8009356 <HAL_SPI_Receive+0x1be>
        {
          errorcode = HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009354:	e021      	b.n	800939a <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800935a:	b29b      	uxth	r3, r3
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1d0      	bne.n	8009302 <HAL_SPI_Receive+0x16a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009368:	d111      	bne.n	800938e <HAL_SPI_Receive+0x1f6>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009372:	d004      	beq.n	800937e <HAL_SPI_Receive+0x1e6>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800937c:	d107      	bne.n	800938e <HAL_SPI_Receive+0x1f6>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	6812      	ldr	r2, [r2, #0]
 8009388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800938c:	601a      	str	r2, [r3, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <HAL_SPI_Receive+0x202>
  {
    errorcode = HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80093aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08c      	sub	sp, #48	; 0x30
 80093b8:	af02      	add	r7, sp, #8
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	61fb      	str	r3, [r7, #28]
 80093c6:	2300      	movs	r3, #0
 80093c8:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80093ce:	2301      	movs	r3, #1
 80093d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d101      	bne.n	80093e6 <HAL_SPI_TransmitReceive+0x32>
 80093e2:	2302      	movs	r3, #2
 80093e4:	e181      	b.n	80096ea <HAL_SPI_TransmitReceive+0x336>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093ee:	f7f6 ff9d 	bl	800032c <HAL_GetTick>
 80093f2:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d00e      	beq.n	8009428 <HAL_SPI_TransmitReceive+0x74>
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009410:	d106      	bne.n	8009420 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d102      	bne.n	8009420 <HAL_SPI_TransmitReceive+0x6c>
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	2b04      	cmp	r3, #4
 800941e:	d003      	beq.n	8009428 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8009420:	2302      	movs	r3, #2
 8009422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009426:	e156      	b.n	80096d6 <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d005      	beq.n	800943a <HAL_SPI_TransmitReceive+0x86>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <HAL_SPI_TransmitReceive+0x86>
 8009434:	887b      	ldrh	r3, [r7, #2]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d103      	bne.n	8009442 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009440:	e149      	b.n	80096d6 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b01      	cmp	r3, #1
 800944c:	d103      	bne.n	8009456 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2205      	movs	r2, #5
 8009452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	887a      	ldrh	r2, [r7, #2]
 8009466:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	887a      	ldrh	r2, [r7, #2]
 800946c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	887a      	ldrh	r2, [r7, #2]
 8009478:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	887a      	ldrh	r2, [r7, #2]
 800947e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009496:	2b40      	cmp	r3, #64	; 0x40
 8009498:	d007      	beq.n	80094aa <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	6812      	ldr	r2, [r2, #0]
 80094a2:	6812      	ldr	r2, [r2, #0]
 80094a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094b2:	d171      	bne.n	8009598 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d004      	beq.n	80094c6 <HAL_SPI_TransmitReceive+0x112>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d15d      	bne.n	8009582 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	8812      	ldrh	r2, [r2, #0]
 80094ce:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	3302      	adds	r3, #2
 80094d4:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094da:	b29b      	uxth	r3, r3
 80094dc:	3b01      	subs	r3, #1
 80094de:	b29a      	uxth	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094e4:	e04d      	b.n	8009582 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80094e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01c      	beq.n	8009526 <HAL_SPI_TransmitReceive+0x172>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d017      	beq.n	8009526 <HAL_SPI_TransmitReceive+0x172>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f003 0302 	and.w	r3, r3, #2
 8009500:	2b02      	cmp	r3, #2
 8009502:	d110      	bne.n	8009526 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	8812      	ldrh	r2, [r2, #0]
 800950c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	3302      	adds	r3, #2
 8009512:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009518:	b29b      	uxth	r3, r3
 800951a:	3b01      	subs	r3, #1
 800951c:	b29a      	uxth	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800952a:	b29b      	uxth	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	d018      	beq.n	8009562 <HAL_SPI_TransmitReceive+0x1ae>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	2b01      	cmp	r3, #1
 800953c:	d111      	bne.n	8009562 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	b29a      	uxth	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3302      	adds	r3, #2
 800954e:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009554:	b29b      	uxth	r3, r3
 8009556:	3b01      	subs	r3, #1
 8009558:	b29a      	uxth	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800955e:	2301      	movs	r3, #1
 8009560:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009568:	d00b      	beq.n	8009582 <HAL_SPI_TransmitReceive+0x1ce>
 800956a:	f7f6 fedf 	bl	800032c <HAL_GetTick>
 800956e:	4602      	mov	r2, r0
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	1ad2      	subs	r2, r2, r3
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	429a      	cmp	r2, r3
 8009578:	d303      	bcc.n	8009582 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009580:	e0a9      	b.n	80096d6 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009586:	b29b      	uxth	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1ac      	bne.n	80094e6 <HAL_SPI_TransmitReceive+0x132>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009590:	b29b      	uxth	r3, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1a7      	bne.n	80094e6 <HAL_SPI_TransmitReceive+0x132>
 8009596:	e071      	b.n	800967c <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <HAL_SPI_TransmitReceive+0x1f6>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d15e      	bne.n	8009668 <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	330c      	adds	r3, #12
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	7812      	ldrb	r2, [r2, #0]
 80095b4:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	3301      	adds	r3, #1
 80095ba:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	3b01      	subs	r3, #1
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095ca:	e04d      	b.n	8009668 <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d01d      	beq.n	800960e <HAL_SPI_TransmitReceive+0x25a>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d018      	beq.n	800960e <HAL_SPI_TransmitReceive+0x25a>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f003 0302 	and.w	r3, r3, #2
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d111      	bne.n	800960e <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f103 020c 	add.w	r2, r3, #12
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	1c59      	adds	r1, r3, #1
 80095f6:	60b9      	str	r1, [r7, #8]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009600:	b29b      	uxth	r3, r3
 8009602:	3b01      	subs	r3, #1
 8009604:	b29a      	uxth	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009612:	b29b      	uxth	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	d017      	beq.n	8009648 <HAL_SPI_TransmitReceive+0x294>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b01      	cmp	r3, #1
 8009624:	d110      	bne.n	8009648 <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	6812      	ldr	r2, [r2, #0]
 8009630:	68d2      	ldr	r2, [r2, #12]
 8009632:	b2d2      	uxtb	r2, r2
 8009634:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800963a:	b29b      	uxth	r3, r3
 800963c:	3b01      	subs	r3, #1
 800963e:	b29a      	uxth	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8009644:	2301      	movs	r3, #1
 8009646:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8009648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964e:	d00b      	beq.n	8009668 <HAL_SPI_TransmitReceive+0x2b4>
 8009650:	f7f6 fe6c 	bl	800032c <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	1ad2      	subs	r2, r2, r3
 800965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965c:	429a      	cmp	r2, r3
 800965e:	d303      	bcc.n	8009668 <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009666:	e036      	b.n	80096d6 <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800966c:	b29b      	uxth	r3, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1ac      	bne.n	80095cc <HAL_SPI_TransmitReceive+0x218>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009676:	b29b      	uxth	r3, r3
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1a7      	bne.n	80095cc <HAL_SPI_TransmitReceive+0x218>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009682:	2201      	movs	r2, #1
 8009684:	2102      	movs	r1, #2
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f001 fa77 	bl	800ab7a <SPI_WaitFlagStateUntilTimeout>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009698:	e01d      	b.n	80096d6 <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f001 fad4 	bl	800ac4c <SPI_CheckFlag_BSY>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d006      	beq.n	80096b8 <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2220      	movs	r2, #32
 80096b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80096b6:	e00e      	b.n	80096d6 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096c0:	2300      	movs	r3, #0
 80096c2:	613b      	str	r3, [r7, #16]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	613b      	str	r3, [r7, #16]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	613b      	str	r3, [r7, #16]
 80096d4:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3728      	adds	r7, #40	; 0x28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b087      	sub	sp, #28
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	4613      	mov	r3, r2
 80096fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <HAL_SPI_Transmit_IT+0x20>
 800970e:	2302      	movs	r3, #2
 8009710:	e072      	b.n	80097f8 <HAL_SPI_Transmit_IT+0x106>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if((pData == NULL) || (Size == 0))
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <HAL_SPI_Transmit_IT+0x34>
 8009720:	88fb      	ldrh	r3, [r7, #6]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d102      	bne.n	800972c <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	75fb      	strb	r3, [r7, #23]
    goto error;
 800972a:	e060      	b.n	80097ee <HAL_SPI_Transmit_IT+0xfc>
  }

  if(hspi->State != HAL_SPI_STATE_READY)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b01      	cmp	r3, #1
 8009736:	d002      	beq.n	800973e <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8009738:	2302      	movs	r3, #2
 800973a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800973c:	e057      	b.n	80097ee <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2203      	movs	r2, #3
 8009742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	88fa      	ldrh	r2, [r7, #6]
 8009756:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	88fa      	ldrh	r2, [r7, #6]
 800975c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d003      	beq.n	8009786 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4a20      	ldr	r2, [pc, #128]	; (8009804 <HAL_SPI_Transmit_IT+0x112>)
 8009782:	645a      	str	r2, [r3, #68]	; 0x44
 8009784:	e002      	b.n	800978c <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	4a1f      	ldr	r2, [pc, #124]	; (8009808 <HAL_SPI_Transmit_IT+0x116>)
 800978a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009794:	d107      	bne.n	80097a6 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	6812      	ldr	r2, [r2, #0]
 800979e:	6812      	ldr	r2, [r2, #0]
 80097a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097a4:	601a      	str	r2, [r3, #0]
  {
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d108      	bne.n	80097c0 <HAL_SPI_Transmit_IT+0xce>
  {
    /* Enable TXE interrupt */
    __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	6812      	ldr	r2, [r2, #0]
 80097b6:	6852      	ldr	r2, [r2, #4]
 80097b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097bc:	605a      	str	r2, [r3, #4]
 80097be:	e007      	b.n	80097d0 <HAL_SPI_Transmit_IT+0xde>
  }
  else
  {
    /* Enable TXE and ERR interrupt */
    __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	6812      	ldr	r2, [r2, #0]
 80097c8:	6852      	ldr	r2, [r2, #4]
 80097ca:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80097ce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097da:	2b40      	cmp	r3, #64	; 0x40
 80097dc:	d007      	beq.n	80097ee <HAL_SPI_Transmit_IT+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	6812      	ldr	r2, [r2, #0]
 80097e6:	6812      	ldr	r2, [r2, #0]
 80097e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097ec:	601a      	str	r2, [r3, #0]
  }

error :
  __HAL_UNLOCK(hspi);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	0800ab37 	.word	0x0800ab37
 8009808:	0800aaf3 	.word	0x0800aaf3

0800980c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d110      	bne.n	8009848 <HAL_SPI_Receive_IT+0x3c>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800982e:	d10b      	bne.n	8009848 <HAL_SPI_Receive_IT+0x3c>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2204      	movs	r2, #4
 8009834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8009838:	88fb      	ldrh	r3, [r7, #6]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	68b9      	ldr	r1, [r7, #8]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f878 	bl	8009934 <HAL_SPI_TransmitReceive_IT>
 8009844:	4603      	mov	r3, r0
 8009846:	e06c      	b.n	8009922 <HAL_SPI_Receive_IT+0x116>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <HAL_SPI_Receive_IT+0x4a>
 8009852:	2302      	movs	r3, #2
 8009854:	e065      	b.n	8009922 <HAL_SPI_Receive_IT+0x116>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b01      	cmp	r3, #1
 8009868:	d002      	beq.n	8009870 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800986a:	2302      	movs	r3, #2
 800986c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800986e:	e053      	b.n	8009918 <HAL_SPI_Receive_IT+0x10c>
  }

  if((pData == NULL) || (Size == 0))
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <HAL_SPI_Receive_IT+0x70>
 8009876:	88fb      	ldrh	r3, [r7, #6]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d102      	bne.n	8009882 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009880:	e04a      	b.n	8009918 <HAL_SPI_Receive_IT+0x10c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2204      	movs	r2, #4
 8009886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	88fa      	ldrh	r2, [r7, #6]
 800989a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	88fa      	ldrh	r2, [r7, #6]
 80098a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	4a19      	ldr	r2, [pc, #100]	; (800992c <HAL_SPI_Receive_IT+0x120>)
 80098c6:	641a      	str	r2, [r3, #64]	; 0x40
 80098c8:	e002      	b.n	80098d0 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4a18      	ldr	r2, [pc, #96]	; (8009930 <HAL_SPI_Receive_IT+0x124>)
 80098ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098d8:	d107      	bne.n	80098ea <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	6812      	ldr	r2, [r2, #0]
 80098e2:	6812      	ldr	r2, [r2, #0]
 80098e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80098e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	6812      	ldr	r2, [r2, #0]
 80098f2:	6852      	ldr	r2, [r2, #4]
 80098f4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80098f8:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009904:	2b40      	cmp	r3, #64	; 0x40
 8009906:	d007      	beq.n	8009918 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	6812      	ldr	r2, [r2, #0]
 8009910:	6812      	ldr	r2, [r2, #0]
 8009912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009916:	601a      	str	r2, [r3, #0]
  }

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009920:	7dfb      	ldrb	r3, [r7, #23]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3718      	adds	r7, #24
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	0800aaad 	.word	0x0800aaad
 8009930:	0800aa69 	.word	0x0800aa69

08009934 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009934:	b480      	push	{r7}
 8009936:	b089      	sub	sp, #36	; 0x24
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	61bb      	str	r3, [r7, #24]
 8009946:	2300      	movs	r3, #0
 8009948:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009954:	2b01      	cmp	r3, #1
 8009956:	d101      	bne.n	800995c <HAL_SPI_TransmitReceive_IT+0x28>
 8009958:	2302      	movs	r3, #2
 800995a:	e074      	b.n	8009a46 <HAL_SPI_TransmitReceive_IT+0x112>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmp  = hspi->State;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800996a:	b2db      	uxtb	r3, r3
 800996c:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	617b      	str	r3, [r7, #20]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d00d      	beq.n	8009996 <HAL_SPI_TransmitReceive_IT+0x62>
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009980:	d106      	bne.n	8009990 <HAL_SPI_TransmitReceive_IT+0x5c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d102      	bne.n	8009990 <HAL_SPI_TransmitReceive_IT+0x5c>
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2b04      	cmp	r3, #4
 800998e:	d002      	beq.n	8009996 <HAL_SPI_TransmitReceive_IT+0x62>
  {
    errorcode = HAL_BUSY;
 8009990:	2302      	movs	r3, #2
 8009992:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009994:	e052      	b.n	8009a3c <HAL_SPI_TransmitReceive_IT+0x108>
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d005      	beq.n	80099a8 <HAL_SPI_TransmitReceive_IT+0x74>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d002      	beq.n	80099a8 <HAL_SPI_TransmitReceive_IT+0x74>
 80099a2:	887b      	ldrh	r3, [r7, #2]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <HAL_SPI_TransmitReceive_IT+0x7a>
  {
    errorcode = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80099ac:	e046      	b.n	8009a3c <HAL_SPI_TransmitReceive_IT+0x108>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d103      	bne.n	80099c2 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2205      	movs	r2, #5
 80099be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	887a      	ldrh	r2, [r7, #2]
 80099d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	887a      	ldrh	r2, [r7, #2]
 80099d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	887a      	ldrh	r2, [r7, #2]
 80099e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	887a      	ldrh	r2, [r7, #2]
 80099ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d006      	beq.n	8009a02 <HAL_SPI_TransmitReceive_IT+0xce>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4a17      	ldr	r2, [pc, #92]	; (8009a54 <HAL_SPI_TransmitReceive_IT+0x120>)
 80099f8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4a16      	ldr	r2, [pc, #88]	; (8009a58 <HAL_SPI_TransmitReceive_IT+0x124>)
 80099fe:	645a      	str	r2, [r3, #68]	; 0x44
 8009a00:	e005      	b.n	8009a0e <HAL_SPI_TransmitReceive_IT+0xda>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4a15      	ldr	r2, [pc, #84]	; (8009a5c <HAL_SPI_TransmitReceive_IT+0x128>)
 8009a06:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4a15      	ldr	r2, [pc, #84]	; (8009a60 <HAL_SPI_TransmitReceive_IT+0x12c>)
 8009a0c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	6812      	ldr	r2, [r2, #0]
 8009a16:	6852      	ldr	r2, [r2, #4]
 8009a18:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009a1c:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a28:	2b40      	cmp	r3, #64	; 0x40
 8009a2a:	d007      	beq.n	8009a3c <HAL_SPI_TransmitReceive_IT+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	6812      	ldr	r2, [r2, #0]
 8009a34:	6812      	ldr	r2, [r2, #0]
 8009a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a3a:	601a      	str	r2, [r3, #0]
  }

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009a44:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3724      	adds	r7, #36	; 0x24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	0800a9ab 	.word	0x0800a9ab
 8009a58:	0800aa0b 	.word	0x0800aa0b
 8009a5c:	0800a8ef 	.word	0x0800a8ef
 8009a60:	0800a94d 	.word	0x0800a94d

08009a64 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d101      	bne.n	8009a84 <HAL_SPI_Transmit_DMA+0x20>
 8009a80:	2302      	movs	r3, #2
 8009a82:	e083      	b.n	8009b8c <HAL_SPI_Transmit_DMA+0x128>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d002      	beq.n	8009a9e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009a98:	2302      	movs	r3, #2
 8009a9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a9c:	e071      	b.n	8009b82 <HAL_SPI_Transmit_DMA+0x11e>
  }

  if((pData == NULL) || (Size == 0))
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <HAL_SPI_Transmit_DMA+0x46>
 8009aa4:	88fb      	ldrh	r3, [r7, #6]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d102      	bne.n	8009ab0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009aae:	e068      	b.n	8009b82 <HAL_SPI_Transmit_DMA+0x11e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2203      	movs	r2, #3
 8009ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	88fa      	ldrh	r2, [r7, #6]
 8009ac8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	88fa      	ldrh	r2, [r7, #6]
 8009ace:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009af6:	d107      	bne.n	8009b08 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	6812      	ldr	r2, [r2, #0]
 8009b00:	6812      	ldr	r2, [r2, #0]
 8009b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b0c:	4a21      	ldr	r2, [pc, #132]	; (8009b94 <HAL_SPI_Transmit_DMA+0x130>)
 8009b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b14:	4a20      	ldr	r2, [pc, #128]	; (8009b98 <HAL_SPI_Transmit_DMA+0x134>)
 8009b16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b1c:	4a1f      	ldr	r2, [pc, #124]	; (8009b9c <HAL_SPI_Transmit_DMA+0x138>)
 8009b1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b24:	2200      	movs	r2, #0
 8009b26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b30:	4619      	mov	r1, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	330c      	adds	r3, #12
 8009b38:	461a      	mov	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f7f8 fa91 	bl	8002066 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4e:	2b40      	cmp	r3, #64	; 0x40
 8009b50:	d007      	beq.n	8009b62 <HAL_SPI_Transmit_DMA+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	6812      	ldr	r2, [r2, #0]
 8009b5a:	6812      	ldr	r2, [r2, #0]
 8009b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b60:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	6812      	ldr	r2, [r2, #0]
 8009b6a:	6852      	ldr	r2, [r2, #4]
 8009b6c:	f042 0220 	orr.w	r2, r2, #32
 8009b70:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	6812      	ldr	r2, [r2, #0]
 8009b7a:	6852      	ldr	r2, [r2, #4]
 8009b7c:	f042 0202 	orr.w	r2, r2, #2
 8009b80:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	0800a6e9 	.word	0x0800a6e9
 8009b98:	0800a549 	.word	0x0800a549
 8009b9c:	0800a73d 	.word	0x0800a73d

08009ba0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	4613      	mov	r3, r2
 8009bac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d110      	bne.n	8009bdc <HAL_SPI_Receive_DMA+0x3c>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bc2:	d10b      	bne.n	8009bdc <HAL_SPI_Receive_DMA+0x3c>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2204      	movs	r2, #4
 8009bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8009bcc:	88fb      	ldrh	r3, [r7, #6]
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	68b9      	ldr	r1, [r7, #8]
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f000 f894 	bl	8009d00 <HAL_SPI_TransmitReceive_DMA>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	e087      	b.n	8009cec <HAL_SPI_Receive_DMA+0x14c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d101      	bne.n	8009bea <HAL_SPI_Receive_DMA+0x4a>
 8009be6:	2302      	movs	r3, #2
 8009be8:	e080      	b.n	8009cec <HAL_SPI_Receive_DMA+0x14c>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d002      	beq.n	8009c04 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8009bfe:	2302      	movs	r3, #2
 8009c00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c02:	e06e      	b.n	8009ce2 <HAL_SPI_Receive_DMA+0x142>
  }

  if((pData == NULL) || (Size == 0))
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d002      	beq.n	8009c10 <HAL_SPI_Receive_DMA+0x70>
 8009c0a:	88fb      	ldrh	r3, [r7, #6]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d102      	bne.n	8009c16 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c14:	e065      	b.n	8009ce2 <HAL_SPI_Receive_DMA+0x142>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2204      	movs	r2, #4
 8009c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	88fa      	ldrh	r2, [r7, #6]
 8009c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	88fa      	ldrh	r2, [r7, #6]
 8009c34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c56:	d107      	bne.n	8009c68 <HAL_SPI_Receive_DMA+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	6812      	ldr	r2, [r2, #0]
 8009c60:	6812      	ldr	r2, [r2, #0]
 8009c62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c6c:	4a21      	ldr	r2, [pc, #132]	; (8009cf4 <HAL_SPI_Receive_DMA+0x154>)
 8009c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c74:	4a20      	ldr	r2, [pc, #128]	; (8009cf8 <HAL_SPI_Receive_DMA+0x158>)
 8009c76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c7c:	4a1f      	ldr	r2, [pc, #124]	; (8009cfc <HAL_SPI_Receive_DMA+0x15c>)
 8009c7e:	64da      	str	r2, [r3, #76]	; 0x4c

 /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c84:	2200      	movs	r2, #0
 8009c86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	330c      	adds	r3, #12
 8009c92:	4619      	mov	r1, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c98:	461a      	mov	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	f7f8 f9e1 	bl	8002066 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cae:	2b40      	cmp	r3, #64	; 0x40
 8009cb0:	d007      	beq.n	8009cc2 <HAL_SPI_Receive_DMA+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	6812      	ldr	r2, [r2, #0]
 8009cba:	6812      	ldr	r2, [r2, #0]
 8009cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cc0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	6812      	ldr	r2, [r2, #0]
 8009cca:	6852      	ldr	r2, [r2, #4]
 8009ccc:	f042 0220 	orr.w	r2, r2, #32
 8009cd0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	6812      	ldr	r2, [r2, #0]
 8009cda:	6852      	ldr	r2, [r2, #4]
 8009cdc:	f042 0201 	orr.w	r2, r2, #1
 8009ce0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	0800a705 	.word	0x0800a705
 8009cf8:	0800a5e3 	.word	0x0800a5e3
 8009cfc:	0800a73d 	.word	0x0800a73d

08009d00 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	61bb      	str	r3, [r7, #24]
 8009d12:	2300      	movs	r3, #0
 8009d14:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d101      	bne.n	8009d28 <HAL_SPI_TransmitReceive_DMA+0x28>
 8009d24:	2302      	movs	r3, #2
 8009d26:	e0c4      	b.n	8009eb2 <HAL_SPI_TransmitReceive_DMA+0x1b2>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmp  = hspi->State;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	617b      	str	r3, [r7, #20]
  if(!((tmp == HAL_SPI_STATE_READY) ||
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d00d      	beq.n	8009d62 <HAL_SPI_TransmitReceive_DMA+0x62>
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d4c:	d106      	bne.n	8009d5c <HAL_SPI_TransmitReceive_DMA+0x5c>
      ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d102      	bne.n	8009d5c <HAL_SPI_TransmitReceive_DMA+0x5c>
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	2b04      	cmp	r3, #4
 8009d5a:	d002      	beq.n	8009d62 <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d60:	e0a2      	b.n	8009ea8 <HAL_SPI_TransmitReceive_DMA+0x1a8>
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d005      	beq.n	8009d74 <HAL_SPI_TransmitReceive_DMA+0x74>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <HAL_SPI_TransmitReceive_DMA+0x74>
 8009d6e:	887b      	ldrh	r3, [r7, #2]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <HAL_SPI_TransmitReceive_DMA+0x7a>
  {
    errorcode = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d78:	e096      	b.n	8009ea8 <HAL_SPI_TransmitReceive_DMA+0x1a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d103      	bne.n	8009d8e <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2205      	movs	r2, #5
 8009d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	887a      	ldrh	r2, [r7, #2]
 8009d9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	887a      	ldrh	r2, [r7, #2]
 8009da4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t*)pRxData;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	887a      	ldrh	r2, [r7, #2]
 8009db0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	887a      	ldrh	r2, [r7, #2]
 8009db6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	2b04      	cmp	r3, #4
 8009dce:	d108      	bne.n	8009de2 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dd4:	4a39      	ldr	r2, [pc, #228]	; (8009ebc <HAL_SPI_TransmitReceive_DMA+0x1bc>)
 8009dd6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ddc:	4a38      	ldr	r2, [pc, #224]	; (8009ec0 <HAL_SPI_TransmitReceive_DMA+0x1c0>)
 8009dde:	63da      	str	r2, [r3, #60]	; 0x3c
 8009de0:	e007      	b.n	8009df2 <HAL_SPI_TransmitReceive_DMA+0xf2>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009de6:	4a37      	ldr	r2, [pc, #220]	; (8009ec4 <HAL_SPI_TransmitReceive_DMA+0x1c4>)
 8009de8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dee:	4a36      	ldr	r2, [pc, #216]	; (8009ec8 <HAL_SPI_TransmitReceive_DMA+0x1c8>)
 8009df0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009df6:	4a35      	ldr	r2, [pc, #212]	; (8009ecc <HAL_SPI_TransmitReceive_DMA+0x1cc>)
 8009df8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dfe:	2200      	movs	r2, #0
 8009e00:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	330c      	adds	r3, #12
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e12:	461a      	mov	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	f7f8 f924 	bl	8002066 <HAL_DMA_Start_IT>

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	6812      	ldr	r2, [r2, #0]
 8009e26:	6852      	ldr	r2, [r2, #4]
 8009e28:	f042 0201 	orr.w	r2, r2, #1
 8009e2c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e32:	2200      	movs	r2, #0
 8009e34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e42:	2200      	movs	r2, #0
 8009e44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e56:	4619      	mov	r1, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	330c      	adds	r3, #12
 8009e5e:	461a      	mov	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	f7f8 f8fe 	bl	8002066 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e74:	2b40      	cmp	r3, #64	; 0x40
 8009e76:	d007      	beq.n	8009e88 <HAL_SPI_TransmitReceive_DMA+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	6812      	ldr	r2, [r2, #0]
 8009e80:	6812      	ldr	r2, [r2, #0]
 8009e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e86:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	6812      	ldr	r2, [r2, #0]
 8009e90:	6852      	ldr	r2, [r2, #4]
 8009e92:	f042 0220 	orr.w	r2, r2, #32
 8009e96:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	6812      	ldr	r2, [r2, #0]
 8009ea0:	6852      	ldr	r2, [r2, #4]
 8009ea2:	f042 0202 	orr.w	r2, r2, #2
 8009ea6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009eb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3720      	adds	r7, #32
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	0800a705 	.word	0x0800a705
 8009ec0:	0800a5e3 	.word	0x0800a5e3
 8009ec4:	0800a721 	.word	0x0800a721
 8009ec8:	0800a667 	.word	0x0800a667
 8009ecc:	0800a73d 	.word	0x0800a73d

08009ed0 <HAL_SPI_Abort>:
  * @note   Once transfer is aborted, the __HAL_SPI_CLEAR_OVRFLAG() macro must be called in user application 
  *         before starting new SPI receive process.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009ed8:	4b4e      	ldr	r3, [pc, #312]	; (800a014 <HAL_SPI_Abort+0x144>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a4e      	ldr	r2, [pc, #312]	; (800a018 <HAL_SPI_Abort+0x148>)
 8009ede:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee2:	0a5b      	lsrs	r3, r3, #9
 8009ee4:	2264      	movs	r2, #100	; 0x64
 8009ee6:	fb02 f303 	mul.w	r3, r2, r3
 8009eea:	617b      	str	r3, [r7, #20]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if(HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d002      	beq.n	8009f00 <HAL_SPI_Abort+0x30>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a47      	ldr	r2, [pc, #284]	; (800a01c <HAL_SPI_Abort+0x14c>)
 8009efe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if(HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <HAL_SPI_Abort+0x44>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a43      	ldr	r2, [pc, #268]	; (800a020 <HAL_SPI_Abort+0x150>)
 8009f12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Clear ERRIE interrupts in case of DMA Mode */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	6812      	ldr	r2, [r2, #0]
 8009f1c:	6852      	ldr	r2, [r2, #4]
 8009f1e:	f022 0220 	bic.w	r2, r2, #32
 8009f22:	605a      	str	r2, [r3, #4]

  /* Disable the SPI DMA Tx or SPI DMA Rx request if enabled */
  if ((HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN)))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d106      	bne.n	8009f40 <HAL_SPI_Abort+0x70>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d044      	beq.n	8009fca <HAL_SPI_Abort+0xfa>
  {
    /* Abort the SPI DMA Tx channel : use blocking DMA Abort API (no callback) */  
    if(hspi->hdmatx != NULL)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d023      	beq.n	8009f90 <HAL_SPI_Abort+0xc0>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      HAL_DMA_Abort(hspi->hdmatx);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7f8 f8e6 	bl	8002126 <HAL_DMA_Abort>

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	6812      	ldr	r2, [r2, #0]
 8009f62:	6852      	ldr	r2, [r2, #4]
 8009f64:	f022 0202 	bic.w	r2, r2, #2
 8009f68:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if(count-- == 0U)
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	1e5a      	subs	r2, r3, #1
 8009f6e:	617a      	str	r2, [r7, #20]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d106      	bne.n	8009f82 <HAL_SPI_Abort+0xb2>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f78:	f043 0220 	orr.w	r2, r3, #32
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8009f80:	e006      	b.n	8009f90 <HAL_SPI_Abort+0xc0>
        }
      }
      while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);       
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f003 0302 	and.w	r3, r3, #2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d0ec      	beq.n	8009f6a <HAL_SPI_Abort+0x9a>
    }
    /* Abort the SPI DMA Rx channel : use blocking DMA Abort API (no callback) */
    if(hspi->hdmarx != NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d018      	beq.n	8009fca <HAL_SPI_Abort+0xfa>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      HAL_DMA_Abort(hspi->hdmarx);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7f8 f8be 	bl	8002126 <HAL_DMA_Abort>

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi); 
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	6812      	ldr	r2, [r2, #0]
 8009fb2:	6812      	ldr	r2, [r2, #0]
 8009fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fb8:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	6812      	ldr	r2, [r2, #0]
 8009fc2:	6852      	ldr	r2, [r2, #4]
 8009fc4:	f022 0201 	bic.w	r2, r2, #1
 8009fc8:	605a      	str	r2, [r3, #4]
      
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Reset errorCode */
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fdc:	2300      	movs	r3, #0
 8009fde:	613b      	str	r3, [r7, #16]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	613b      	str	r3, [r7, #16]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	613b      	str	r3, [r7, #16]
 8009ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60fb      	str	r3, [r7, #12]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	60fb      	str	r3, [r7, #12]
 8009ffe:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3718      	adds	r7, #24
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	20000008 	.word	0x20000008
 800a018:	057619f1 	.word	0x057619f1
 800a01c:	0800af45 	.word	0x0800af45
 800a020:	0800aec1 	.word	0x0800aec1

0800a024 <HAL_SPI_Abort_IT>:
  * @note   Once transfer is aborted, the __HAL_SPI_CLEAR_OVRFLAG() macro must be called in user application 
  *         before starting new SPI receive process.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt;

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if(HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <HAL_SPI_Abort_IT+0x1c>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a68      	ldr	r2, [pc, #416]	; (800a1e0 <HAL_SPI_Abort_IT+0x1bc>)
 800a03e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if(HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <HAL_SPI_Abort_IT+0x30>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a64      	ldr	r2, [pc, #400]	; (800a1e4 <HAL_SPI_Abort_IT+0x1c0>)
 800a052:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Clear ERRIE interrupts in case of DMA Mode */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	6812      	ldr	r2, [r2, #0]
 800a05c:	6852      	ldr	r2, [r2, #4]
 800a05e:	f022 0220 	bic.w	r2, r2, #32
 800a062:	605a      	str	r2, [r3, #4]

  abortcplt = 1U;
 800a064:	2301      	movs	r3, #1
 800a066:	617b      	str	r3, [r7, #20]
  
  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */  
  /* DMA Tx Handle is valid */
  if(hspi->hdmatx != NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00f      	beq.n	800a090 <HAL_SPI_Abort_IT+0x6c>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if(HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	f003 0302 	and.w	r3, r3, #2
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d004      	beq.n	800a088 <HAL_SPI_Abort_IT+0x64>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a082:	4a59      	ldr	r2, [pc, #356]	; (800a1e8 <HAL_SPI_Abort_IT+0x1c4>)
 800a084:	651a      	str	r2, [r3, #80]	; 0x50
 800a086:	e003      	b.n	800a090 <HAL_SPI_Abort_IT+0x6c>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a08c:	2200      	movs	r2, #0
 800a08e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }  
  /* DMA Rx Handle is valid */
  if(hspi->hdmarx != NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00f      	beq.n	800a0b8 <HAL_SPI_Abort_IT+0x94>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if(HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d004      	beq.n	800a0b0 <HAL_SPI_Abort_IT+0x8c>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0aa:	4a50      	ldr	r2, [pc, #320]	; (800a1ec <HAL_SPI_Abort_IT+0x1c8>)
 800a0ac:	651a      	str	r2, [r3, #80]	; 0x50
 800a0ae:	e003      	b.n	800a0b8 <HAL_SPI_Abort_IT+0x94>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
  if((HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN)) && (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN)))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d02e      	beq.n	800a124 <HAL_SPI_Abort_IT+0x100>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	f003 0301 	and.w	r3, r3, #1
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d027      	beq.n	800a124 <HAL_SPI_Abort_IT+0x100>
  {
    /* Abort the SPI DMA Tx channel */
    if(hspi->hdmatx != NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00e      	beq.n	800a0fa <HAL_SPI_Abort_IT+0xd6>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if(HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7f8 f890 	bl	8002206 <HAL_DMA_Abort_IT>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d004      	beq.n	800a0f6 <HAL_SPI_Abort_IT+0xd2>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	651a      	str	r2, [r3, #80]	; 0x50
 800a0f4:	e001      	b.n	800a0fa <HAL_SPI_Abort_IT+0xd6>
      }
      else
      {
        abortcplt = 0U;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	617b      	str	r3, [r7, #20]
      }
    }
    /* Abort the SPI DMA Rx channel */
    if(hspi->hdmarx != NULL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d010      	beq.n	800a124 <HAL_SPI_Abort_IT+0x100>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if(HAL_DMA_Abort_IT(hspi->hdmarx)!=  HAL_OK)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a106:	4618      	mov	r0, r3
 800a108:	f7f8 f87d 	bl	8002206 <HAL_DMA_Abort_IT>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d006      	beq.n	800a120 <HAL_SPI_Abort_IT+0xfc>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a116:	2200      	movs	r2, #0
 800a118:	651a      	str	r2, [r3, #80]	; 0x50
        abortcplt = 1U;
 800a11a:	2301      	movs	r3, #1
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	e001      	b.n	800a124 <HAL_SPI_Abort_IT+0x100>
      }
      else
      {
        abortcplt = 0U;
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f003 0302 	and.w	r3, r3, #2
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d012      	beq.n	800a158 <HAL_SPI_Abort_IT+0x134>
  {
    /* Abort the SPI DMA Tx channel */
    if(hspi->hdmatx != NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00e      	beq.n	800a158 <HAL_SPI_Abort_IT+0x134>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if(HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a13e:	4618      	mov	r0, r3
 800a140:	f7f8 f861 	bl	8002206 <HAL_DMA_Abort_IT>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d004      	beq.n	800a154 <HAL_SPI_Abort_IT+0x130>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a14e:	2200      	movs	r2, #0
 800a150:	651a      	str	r2, [r3, #80]	; 0x50
 800a152:	e001      	b.n	800a158 <HAL_SPI_Abort_IT+0x134>
      }
      else
      {
        abortcplt = 0U;
 800a154:	2300      	movs	r3, #0
 800a156:	617b      	str	r3, [r7, #20]
      }
    }
  }
  /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f003 0301 	and.w	r3, r3, #1
 800a162:	2b00      	cmp	r3, #0
 800a164:	d012      	beq.n	800a18c <HAL_SPI_Abort_IT+0x168>
  {
    /* Abort the SPI DMA Rx channel */
    if(hspi->hdmarx != NULL)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00e      	beq.n	800a18c <HAL_SPI_Abort_IT+0x168>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if(HAL_DMA_Abort_IT(hspi->hdmarx)!=  HAL_OK)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a172:	4618      	mov	r0, r3
 800a174:	f7f8 f847 	bl	8002206 <HAL_DMA_Abort_IT>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d004      	beq.n	800a188 <HAL_SPI_Abort_IT+0x164>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a182:	2200      	movs	r2, #0
 800a184:	651a      	str	r2, [r3, #80]	; 0x50
 800a186:	e001      	b.n	800a18c <HAL_SPI_Abort_IT+0x168>
      }
      else
      {
        abortcplt = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  if(abortcplt == 1U)
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d121      	bne.n	800a1d6 <HAL_SPI_Abort_IT+0x1b2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	613b      	str	r3, [r7, #16]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	613b      	str	r3, [r7, #16]
 800a1b8:	693b      	ldr	r3, [r7, #16]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	60fb      	str	r3, [r7, #12]
 800a1c6:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_SPI_AbortCpltCallback(hspi);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f995 	bl	800a500 <HAL_SPI_AbortCpltCallback>
  }
  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3718      	adds	r7, #24
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	0800af45 	.word	0x0800af45
 800a1e4:	0800aec1 	.word	0x0800aec1
 800a1e8:	0800a7a5 	.word	0x0800a7a5
 800a1ec:	0800a859 	.word	0x0800a859

0800a1f0 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d101      	bne.n	800a206 <HAL_SPI_DMAPause+0x16>
 800a202:	2302      	movs	r3, #2
 800a204:	e010      	b.n	800a228 <HAL_SPI_DMAPause+0x38>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	6812      	ldr	r2, [r2, #0]
 800a216:	6852      	ldr	r2, [r2, #4]
 800a218:	f022 0203 	bic.w	r2, r2, #3
 800a21c:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <HAL_SPI_DMAResume+0x16>
 800a246:	2302      	movs	r3, #2
 800a248:	e010      	b.n	800a26c <HAL_SPI_DMAResume+0x38>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	6812      	ldr	r2, [r2, #0]
 800a25a:	6852      	ldr	r2, [r2, #4]
 800a25c:	f042 0203 	orr.w	r2, r2, #3
 800a260:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream */
  if(hspi->hdmatx != NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a284:	2b00      	cmp	r3, #0
 800a286:	d004      	beq.n	800a292 <HAL_SPI_DMAStop+0x1a>
  {
    HAL_DMA_Abort(hspi->hdmatx);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7f7 ff4a 	bl	8002126 <HAL_DMA_Abort>
  }
  /* Abort the SPI DMA rx Stream */
  if(hspi->hdmarx != NULL)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a296:	2b00      	cmp	r3, #0
 800a298:	d004      	beq.n	800a2a4 <HAL_SPI_DMAStop+0x2c>
  {
    HAL_DMA_Abort(hspi->hdmarx);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7f7 ff41 	bl	8002126 <HAL_DMA_Abort>
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	6812      	ldr	r2, [r2, #0]
 800a2ac:	6852      	ldr	r2, [r2, #4]
 800a2ae:	f022 0203 	bic.w	r2, r2, #3
 800a2b2:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b088      	sub	sp, #32
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10e      	bne.n	800a306 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	f003 0301 	and.w	r3, r3, #1
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d009      	beq.n	800a306 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d004      	beq.n	800a306 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	4798      	blx	r3
    return;
 800a304:	e0b1      	b.n	800a46a <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	f003 0302 	and.w	r3, r3, #2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d009      	beq.n	800a324 <HAL_SPI_IRQHandler+0x5e>
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a316:	2b00      	cmp	r3, #0
 800a318:	d004      	beq.n	800a324 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	4798      	blx	r3
    return;
 800a322:	e0a2      	b.n	800a46a <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	f403 73b0 	and.w	r3, r3, #352	; 0x160
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f000 809d 	beq.w	800a46a <HAL_SPI_IRQHandler+0x1a4>
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	f003 0320 	and.w	r3, r3, #32
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 8097 	beq.w	800a46a <HAL_SPI_IRQHandler+0x1a4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a342:	2b00      	cmp	r3, #0
 800a344:	d023      	beq.n	800a38e <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d011      	beq.n	800a376 <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a356:	f043 0204 	orr.w	r2, r3, #4
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a35e:	2300      	movs	r3, #0
 800a360:	617b      	str	r3, [r7, #20]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	617b      	str	r3, [r7, #20]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	617b      	str	r3, [r7, #20]
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	e00b      	b.n	800a38e <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a376:	2300      	movs	r3, #0
 800a378:	613b      	str	r3, [r7, #16]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	613b      	str	r3, [r7, #16]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	613b      	str	r3, [r7, #16]
 800a38a:	693b      	ldr	r3, [r7, #16]
        return;
 800a38c:	e06d      	b.n	800a46a <HAL_SPI_IRQHandler+0x1a4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	f003 0320 	and.w	r3, r3, #32
 800a394:	2b00      	cmp	r3, #0
 800a396:	d014      	beq.n	800a3c2 <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a39c:	f043 0201 	orr.w	r2, r3, #1
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	60fb      	str	r3, [r7, #12]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	60fb      	str	r3, [r7, #12]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	6812      	ldr	r2, [r2, #0]
 800a3b8:	6812      	ldr	r2, [r2, #0]
 800a3ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00c      	beq.n	800a3e6 <HAL_SPI_IRQHandler+0x120>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d0:	f043 0208 	orr.w	r2, r3, #8
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a3d8:	2300      	movs	r3, #0
 800a3da:	60bb      	str	r3, [r7, #8]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	60bb      	str	r3, [r7, #8]
 800a3e4:	68bb      	ldr	r3, [r7, #8]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d03c      	beq.n	800a468 <HAL_SPI_IRQHandler+0x1a2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	6812      	ldr	r2, [r2, #0]
 800a3f6:	6852      	ldr	r2, [r2, #4]
 800a3f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a3fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	f003 0302 	and.w	r3, r3, #2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d104      	bne.n	800a41a <HAL_SPI_IRQHandler+0x154>
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	f003 0301 	and.w	r3, r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	d022      	beq.n	800a460 <HAL_SPI_IRQHandler+0x19a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	6812      	ldr	r2, [r2, #0]
 800a422:	6852      	ldr	r2, [r2, #4]
 800a424:	f022 0203 	bic.w	r2, r2, #3
 800a428:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d008      	beq.n	800a444 <HAL_SPI_IRQHandler+0x17e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a436:	4a0e      	ldr	r2, [pc, #56]	; (800a470 <HAL_SPI_IRQHandler+0x1aa>)
 800a438:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a43e:	4618      	mov	r0, r3
 800a440:	f7f7 fee1 	bl	8002206 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00c      	beq.n	800a466 <HAL_SPI_IRQHandler+0x1a0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a450:	4a07      	ldr	r2, [pc, #28]	; (800a470 <HAL_SPI_IRQHandler+0x1aa>)
 800a452:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a458:	4618      	mov	r0, r3
 800a45a:	f7f7 fed4 	bl	8002206 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 800a45e:	e002      	b.n	800a466 <HAL_SPI_IRQHandler+0x1a0>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f843 	bl	800a4ec <HAL_SPI_ErrorCallback>
      }
    }
    return;
 800a466:	bf00      	nop
 800a468:	bf00      	nop
  }
}
 800a46a:	3720      	adds	r7, #32
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	0800a77d 	.word	0x0800a77d

0800a474 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
  */
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
  */
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
  */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
  */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
  */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
  */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a522:	b2db      	uxtb	r3, r3
}
 800a524:	4618      	mov	r0, r3
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a554:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800a556:	2300      	movs	r3, #0
 800a558:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a55a:	f7f5 fee7 	bl	800032c <HAL_GetTick>
 800a55e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d133      	bne.n	800a5d6 <SPI_DMATransmitCplt+0x8e>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	697a      	ldr	r2, [r7, #20]
 800a574:	6812      	ldr	r2, [r2, #0]
 800a576:	6852      	ldr	r2, [r2, #4]
 800a578:	f022 0202 	bic.w	r2, r2, #2
 800a57c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	2164      	movs	r1, #100	; 0x64
 800a582:	6978      	ldr	r0, [r7, #20]
 800a584:	f000 fb62 	bl	800ac4c <SPI_CheckFlag_BSY>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d005      	beq.n	800a59a <SPI_DMATransmitCplt+0x52>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a592:	f043 0220 	orr.w	r2, r3, #32
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10a      	bne.n	800a5b8 <SPI_DMATransmitCplt+0x70>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60fb      	str	r3, [r7, #12]
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	60fb      	str	r3, [r7, #12]
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <SPI_DMATransmitCplt+0x8e>
    {
      HAL_SPI_ErrorCallback(hspi);
 800a5ce:	6978      	ldr	r0, [r7, #20]
 800a5d0:	f7ff ff8c 	bl	800a4ec <HAL_SPI_ErrorCallback>
      return;
 800a5d4:	e002      	b.n	800a5dc <SPI_DMATransmitCplt+0x94>
    }
  }
  HAL_SPI_TxCpltCallback(hspi);
 800a5d6:	6978      	ldr	r0, [r7, #20]
 800a5d8:	f7ff ff4c 	bl	800a474 <HAL_SPI_TxCpltCallback>
}
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ee:	60fb      	str	r3, [r7, #12]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
#endif /* USE_SPI_CRC */
 
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d12d      	bne.n	800a65a <SPI_DMAReceiveCplt+0x78>
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	6812      	ldr	r2, [r2, #0]
 800a606:	6852      	ldr	r2, [r2, #4]
 800a608:	f022 0203 	bic.w	r2, r2, #3
 800a60c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a616:	d111      	bne.n	800a63c <SPI_DMAReceiveCplt+0x5a>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a620:	d004      	beq.n	800a62c <SPI_DMAReceiveCplt+0x4a>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a62a:	d107      	bne.n	800a63c <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	6812      	ldr	r2, [r2, #0]
 800a634:	6812      	ldr	r2, [r2, #0]
 800a636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a63a:	601a      	str	r2, [r3, #0]
    }

    hspi->RxXferCount = 0U;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <SPI_DMAReceiveCplt+0x78>
    {
      HAL_SPI_ErrorCallback(hspi);
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f7ff ff4a 	bl	800a4ec <HAL_SPI_ErrorCallback>
      return;
 800a658:	e002      	b.n	800a660 <SPI_DMAReceiveCplt+0x7e>
    }
  }
  HAL_SPI_RxCpltCallback(hspi);
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7ff ff14 	bl	800a488 <HAL_SPI_RxCpltCallback>
}
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b084      	sub	sp, #16
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a672:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 800a674:	2300      	movs	r3, #0
 800a676:	60bb      	str	r3, [r7, #8]
#if (USE_SPI_CRC != 0U)
  __IO int16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a678:	f7f5 fe58 	bl	800032c <HAL_GetTick>
 800a67c:	60b8      	str	r0, [r7, #8]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d127      	bne.n	800a6dc <SPI_DMATransmitReceiveCplt+0x76>
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */
    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	2164      	movs	r1, #100	; 0x64
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f000 fadb 	bl	800ac4c <SPI_CheckFlag_BSY>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d005      	beq.n	800a6a8 <SPI_DMATransmitReceiveCplt+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a0:	f043 0220 	orr.w	r2, r3, #32
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	6812      	ldr	r2, [r2, #0]
 800a6b0:	6852      	ldr	r2, [r2, #4]
 800a6b2:	f022 0203 	bic.w	r2, r2, #3
 800a6b6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d003      	beq.n	800a6dc <SPI_DMATransmitReceiveCplt+0x76>
    {
      HAL_SPI_ErrorCallback(hspi);
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7ff ff09 	bl	800a4ec <HAL_SPI_ErrorCallback>
      return;
 800a6da:	e002      	b.n	800a6e2 <SPI_DMATransmitReceiveCplt+0x7c>
    }
  }
  HAL_SPI_TxRxCpltCallback(hspi);
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f7ff fedd 	bl	800a49c <HAL_SPI_TxRxCpltCallback>
}
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f4:	60fb      	str	r3, [r7, #12]

  HAL_SPI_TxHalfCpltCallback(hspi);
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7ff feda 	bl	800a4b0 <HAL_SPI_TxHalfCpltCallback>
}
 800a6fc:	bf00      	nop
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a710:	60fb      	str	r3, [r7, #12]

  HAL_SPI_RxHalfCpltCallback(hspi);
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f7ff fed6 	bl	800a4c4 <HAL_SPI_RxHalfCpltCallback>
}
 800a718:	bf00      	nop
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a72c:	60fb      	str	r3, [r7, #12]

  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f7ff fed2 	bl	800a4d8 <HAL_SPI_TxRxHalfCpltCallback>
}
 800a734:	bf00      	nop
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a748:	60fb      	str	r3, [r7, #12]

/* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	6812      	ldr	r2, [r2, #0]
 800a752:	6852      	ldr	r2, [r2, #4]
 800a754:	f022 0203 	bic.w	r2, r2, #3
 800a758:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75e:	f043 0210 	orr.w	r2, r3, #16
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2201      	movs	r2, #1
 800a76a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f7ff febc 	bl	800a4ec <HAL_SPI_ErrorCallback>
}
 800a774:	bf00      	nop
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a788:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f7ff fea8 	bl	800a4ec <HAL_SPI_ErrorCallback>
}
 800a79c:	bf00      	nop
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a7ac:	4b28      	ldr	r3, [pc, #160]	; (800a850 <SPI_DMATxAbortCallback+0xac>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a28      	ldr	r2, [pc, #160]	; (800a854 <SPI_DMATxAbortCallback+0xb0>)
 800a7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b6:	0a5b      	lsrs	r3, r3, #9
 800a7b8:	2264      	movs	r2, #100	; 0x64
 800a7ba:	fb02 f303 	mul.w	r3, r2, r3
 800a7be:	613b      	str	r3, [r7, #16]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c4:	617b      	str	r3, [r7, #20]

  hspi->hdmatx->XferAbortCallback = NULL;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN );
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	6812      	ldr	r2, [r2, #0]
 800a7d6:	6852      	ldr	r2, [r2, #4]
 800a7d8:	f022 0202 	bic.w	r2, r2, #2
 800a7dc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0U)
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	1e5a      	subs	r2, r3, #1
 800a7e2:	613a      	str	r2, [r7, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <SPI_DMATxAbortCallback+0x52>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ec:	f043 0220 	orr.w	r2, r3, #32
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a7f4:	e006      	b.n	800a804 <SPI_DMATxAbortCallback+0x60>
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	f003 0302 	and.w	r3, r3, #2
 800a800:	2b00      	cmp	r3, #0
 800a802:	d0ec      	beq.n	800a7de <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if(hspi->hdmarx != NULL)
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d004      	beq.n	800a816 <SPI_DMATxAbortCallback+0x72>
  {
    if(hspi->hdmarx->XferAbortCallback != NULL)
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a812:	2b00      	cmp	r3, #0
 800a814:	d117      	bne.n	800a846 <SPI_DMATxAbortCallback+0xa2>
      return;
    }
  }
  
  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2200      	movs	r2, #0
 800a81a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2200      	movs	r2, #0
 800a820:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Reset errorCode */
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	2200      	movs	r2, #0
 800a826:	655a      	str	r2, [r3, #84]	; 0x54

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a828:	2300      	movs	r3, #0
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
  HAL_SPI_AbortCpltCallback(hspi);
 800a83e:	6978      	ldr	r0, [r7, #20]
 800a840:	f7ff fe5e 	bl	800a500 <HAL_SPI_AbortCpltCallback>
 800a844:	e000      	b.n	800a848 <SPI_DMATxAbortCallback+0xa4>
      return;
 800a846:	bf00      	nop
}
 800a848:	3718      	adds	r7, #24
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	20000008 	.word	0x20000008
 800a854:	057619f1 	.word	0x057619f1

0800a858 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a864:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	6812      	ldr	r2, [r2, #0]
 800a86e:	6812      	ldr	r2, [r2, #0]
 800a870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a874:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87a:	2200      	movs	r2, #0
 800a87c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	6812      	ldr	r2, [r2, #0]
 800a886:	6852      	ldr	r2, [r2, #4]
 800a888:	f022 0201 	bic.w	r2, r2, #1
 800a88c:	605a      	str	r2, [r3, #4]

  /* Check if an Abort process is still ongoing */
  if(hspi->hdmatx != NULL)
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a892:	2b00      	cmp	r3, #0
 800a894:	d004      	beq.n	800a8a0 <SPI_DMARxAbortCallback+0x48>
  {
    if(hspi->hdmatx->XferAbortCallback != NULL)
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d122      	bne.n	800a8e6 <SPI_DMARxAbortCallback+0x8e>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Reset errorCode */
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	613b      	str	r3, [r7, #16]
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	613b      	str	r3, [r7, #16]
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	613b      	str	r3, [r7, #16]
 800a8c6:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);  
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60fb      	str	r3, [r7, #12]
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
  HAL_SPI_AbortCpltCallback(hspi);
 800a8de:	6978      	ldr	r0, [r7, #20]
 800a8e0:	f7ff fe0e 	bl	800a500 <HAL_SPI_AbortCpltCallback>
 800a8e4:	e000      	b.n	800a8e8 <SPI_DMARxAbortCallback+0x90>
      return;
 800a8e6:	bf00      	nop
}
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b082      	sub	sp, #8
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fa:	1c59      	adds	r1, r3, #1
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	6391      	str	r1, [r2, #56]	; 0x38
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	6812      	ldr	r2, [r2, #0]
 800a904:	320c      	adds	r2, #12
 800a906:	7812      	ldrb	r2, [r2, #0]
 800a908:	b2d2      	uxtb	r2, r2
 800a90a:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a910:	b29b      	uxth	r3, r3
 800a912:	3b01      	subs	r3, #1
 800a914:	b29a      	uxth	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* check end of the reception */
  if(hspi->RxXferCount == 0U)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a91e:	b29b      	uxth	r3, r3
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10f      	bne.n	800a944 <SPI_2linesRxISR_8BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	6812      	ldr	r2, [r2, #0]
 800a92c:	6852      	ldr	r2, [r2, #4]
 800a92e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a932:	605a      	str	r2, [r3, #4]

    if(hspi->TxXferCount == 0U)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a938:	b29b      	uxth	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d102      	bne.n	800a944 <SPI_2linesRxISR_8BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f9a2 	bl	800ac88 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a944:	bf00      	nop
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f103 020c 	add.w	r2, r3, #12
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a960:	1c58      	adds	r0, r3, #1
 800a962:	6879      	ldr	r1, [r7, #4]
 800a964:	6308      	str	r0, [r1, #48]	; 0x30
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	7013      	strb	r3, [r2, #0]
  hspi->TxXferCount--;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a96e:	b29b      	uxth	r3, r3
 800a970:	3b01      	subs	r3, #1
 800a972:	b29a      	uxth	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	86da      	strh	r2, [r3, #54]	; 0x36

  /* check the end of the transmission */
  if(hspi->TxXferCount == 0U)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d10f      	bne.n	800a9a2 <SPI_2linesTxISR_8BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	6812      	ldr	r2, [r2, #0]
 800a98a:	6852      	ldr	r2, [r2, #4]
 800a98c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a990:	605a      	str	r2, [r3, #4]

    if(hspi->RxXferCount == 0U)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a996:	b29b      	uxth	r3, r3
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d102      	bne.n	800a9a2 <SPI_2linesTxISR_8BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f973 	bl	800ac88 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	6812      	ldr	r2, [r2, #0]
 800a9ba:	68d2      	ldr	r2, [r2, #12]
 800a9bc:	b292      	uxth	r2, r2
 800a9be:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c4:	1c9a      	adds	r2, r3, #2
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  if(hspi->RxXferCount == 0U)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10f      	bne.n	800aa02 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	6812      	ldr	r2, [r2, #0]
 800a9ea:	6852      	ldr	r2, [r2, #4]
 800a9ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9f0:	605a      	str	r2, [r3, #4]

    if(hspi->TxXferCount == 0U)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d102      	bne.n	800aa02 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f943 	bl	800ac88 <SPI_CloseRxTx_ISR>
    }
  }
}
 800aa02:	bf00      	nop
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aa1a:	8812      	ldrh	r2, [r2, #0]
 800aa1c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa22:	1c9a      	adds	r2, r3, #2
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if(hspi->TxXferCount == 0U)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10f      	bne.n	800aa60 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	6812      	ldr	r2, [r2, #0]
 800aa48:	6852      	ldr	r2, [r2, #4]
 800aa4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa4e:	605a      	str	r2, [r3, #4]

    if(hspi->RxXferCount == 0U)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d102      	bne.n	800aa60 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 f914 	bl	800ac88 <SPI_CloseRxTx_ISR>
    }
  }
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa74:	1c59      	adds	r1, r3, #1
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	6391      	str	r1, [r2, #56]	; 0x38
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	6812      	ldr	r2, [r2, #0]
 800aa7e:	320c      	adds	r2, #12
 800aa80:	7812      	ldrb	r2, [r2, #0]
 800aa82:	b2d2      	uxtb	r2, r2
 800aa84:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->RxXferCount == 0U)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d102      	bne.n	800aaa4 <SPI_RxISR_8BIT+0x3c>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f966 	bl	800ad70 <SPI_CloseRx_ISR>
  }
}
 800aaa4:	bf00      	nop
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	6812      	ldr	r2, [r2, #0]
 800aabc:	68d2      	ldr	r2, [r2, #12]
 800aabe:	b292      	uxth	r2, r2
 800aac0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac6:	1c9a      	adds	r2, r3, #2
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	3b01      	subs	r3, #1
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->RxXferCount == 0U)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aade:	b29b      	uxth	r3, r3
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f943 	bl	800ad70 <SPI_CloseRx_ISR>
  }
}
 800aaea:	bf00      	nop
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f103 020c 	add.w	r2, r3, #12
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab06:	1c58      	adds	r0, r3, #1
 800ab08:	6879      	ldr	r1, [r7, #4]
 800ab0a:	6308      	str	r0, [r1, #48]	; 0x30
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	7013      	strb	r3, [r2, #0]
  hspi->TxXferCount--;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	3b01      	subs	r3, #1
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	86da      	strh	r2, [r3, #54]	; 0x36

  if(hspi->TxXferCount == 0U)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d102      	bne.n	800ab2e <SPI_TxISR_8BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f966 	bl	800adfa <SPI_CloseTx_ISR>
  }
}
 800ab2e:	bf00      	nop
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b082      	sub	sp, #8
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ab46:	8812      	ldrh	r2, [r2, #0]
 800ab48:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4e:	1c9a      	adds	r2, r3, #2
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	86da      	strh	r2, [r3, #54]	; 0x36

  if(hspi->TxXferCount == 0U)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d102      	bne.n	800ab72 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f944 	bl	800adfa <SPI_CloseTx_ISR>
  }
}
 800ab72:	bf00      	nop
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b084      	sub	sp, #16
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	60b9      	str	r1, [r7, #8]
 800ab84:	607a      	str	r2, [r7, #4]
 800ab86:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800ab88:	e04d      	b.n	800ac26 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab90:	d049      	beq.n	800ac26 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d007      	beq.n	800aba8 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800ab98:	f7f5 fbc8 	bl	800032c <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	1ad2      	subs	r2, r2, r3
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d33e      	bcc.n	800ac26 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	6812      	ldr	r2, [r2, #0]
 800abb0:	6852      	ldr	r2, [r2, #4]
 800abb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800abb6:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abc0:	d111      	bne.n	800abe6 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abca:	d004      	beq.n	800abd6 <SPI_WaitFlagStateUntilTimeout+0x5c>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abd4:	d107      	bne.n	800abe6 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	6812      	ldr	r2, [r2, #0]
 800abde:	6812      	ldr	r2, [r2, #0]
 800abe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abe4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abee:	d110      	bne.n	800ac12 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	6819      	ldr	r1, [r3, #0]
 800abfa:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800abfe:	400b      	ands	r3, r1
 800ac00:	6013      	str	r3, [r2, #0]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	6812      	ldr	r2, [r2, #0]
 800ac0a:	6812      	ldr	r2, [r2, #0]
 800ac0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac10:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e00e      	b.n	800ac44 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	689a      	ldr	r2, [r3, #8]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	401a      	ands	r2, r3
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d101      	bne.n	800ac3a <SPI_WaitFlagStateUntilTimeout+0xc0>
 800ac36:	2201      	movs	r2, #1
 800ac38:	e000      	b.n	800ac3c <SPI_WaitFlagStateUntilTimeout+0xc2>
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d1a3      	bne.n	800ab8a <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af02      	add	r7, sp, #8
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2180      	movs	r1, #128	; 0x80
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f7ff ff89 	bl	800ab7a <SPI_WaitFlagStateUntilTimeout>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d007      	beq.n	800ac7e <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac72:	f043 0220 	orr.w	r2, r3, #32
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e000      	b.n	800ac80 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800ac94:	4b34      	ldr	r3, [pc, #208]	; (800ad68 <SPI_CloseRxTx_ISR+0xe0>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a34      	ldr	r2, [pc, #208]	; (800ad6c <SPI_CloseRxTx_ISR+0xe4>)
 800ac9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac9e:	0a5b      	lsrs	r3, r3, #9
 800aca0:	2264      	movs	r2, #100	; 0x64
 800aca2:	fb02 f303 	mul.w	r3, r2, r3
 800aca6:	613b      	str	r3, [r7, #16]
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aca8:	f7f5 fb40 	bl	800032c <HAL_GetTick>
 800acac:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	6812      	ldr	r2, [r2, #0]
 800acb6:	6852      	ldr	r2, [r2, #4]
 800acb8:	f022 0220 	bic.w	r2, r2, #32
 800acbc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0U)
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	1e5a      	subs	r2, r3, #1
 800acc2:	613a      	str	r2, [r7, #16]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d106      	bne.n	800acd6 <SPI_CloseRxTx_ISR+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800accc:	f043 0220 	orr.w	r2, r3, #32
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800acd4:	e006      	b.n	800ace4 <SPI_CloseRxTx_ISR+0x5c>
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	f003 0302 	and.w	r3, r3, #2
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d0ec      	beq.n	800acbe <SPI_CloseRxTx_ISR+0x36>
  
  /* Check the end of the transaction */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart)!=HAL_OK)
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	2164      	movs	r1, #100	; 0x64
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff ffaf 	bl	800ac4c <SPI_CheckFlag_BSY>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d005      	beq.n	800ad00 <SPI_CloseRxTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf8:	f043 0220 	orr.w	r2, r3, #32
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10a      	bne.n	800ad1e <SPI_CloseRxTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad08:	2300      	movs	r3, #0
 800ad0a:	60fb      	str	r3, [r7, #12]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	60fb      	str	r3, [r7, #12]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
    HAL_SPI_ErrorCallback(hspi);
  }
  else
  {
#endif /* USE_SPI_CRC */
    if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d115      	bne.n	800ad52 <SPI_CloseRxTx_ISR+0xca>
    {
      if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d107      	bne.n	800ad42 <SPI_CloseRxTx_ISR+0xba>
      {
      	hspi->State = HAL_SPI_STATE_READY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff fba4 	bl	800a488 <HAL_SPI_RxCpltCallback>
      HAL_SPI_ErrorCallback(hspi);
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800ad40:	e00e      	b.n	800ad60 <SPI_CloseRxTx_ISR+0xd8>
      	hspi->State = HAL_SPI_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7ff fba6 	bl	800a49c <HAL_SPI_TxRxCpltCallback>
}
 800ad50:	e006      	b.n	800ad60 <SPI_CloseRxTx_ISR+0xd8>
      hspi->State = HAL_SPI_STATE_READY;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff fbc6 	bl	800a4ec <HAL_SPI_ErrorCallback>
}
 800ad60:	bf00      	nop
 800ad62:	3718      	adds	r7, #24
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	20000008 	.word	0x20000008
 800ad6c:	057619f1 	.word	0x057619f1

0800ad70 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	6812      	ldr	r2, [r2, #0]
 800ad80:	6852      	ldr	r2, [r2, #4]
 800ad82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ad86:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad90:	d111      	bne.n	800adb6 <SPI_CloseRx_ISR+0x46>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad9a:	d004      	beq.n	800ada6 <SPI_CloseRx_ISR+0x36>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ada4:	d107      	bne.n	800adb6 <SPI_CloseRx_ISR+0x46>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	6812      	ldr	r2, [r2, #0]
 800adae:	6812      	ldr	r2, [r2, #0]
 800adb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adb4:	601a      	str	r2, [r3, #0]
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <SPI_CloseRx_ISR+0x64>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800adbe:	2300      	movs	r3, #0
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	60fb      	str	r3, [r7, #12]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	60fb      	str	r3, [r7, #12]
 800add2:	68fb      	ldr	r3, [r7, #12]
    }
    hspi->State = HAL_SPI_STATE_READY;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
    }
    else
    {
#endif /* USE_SPI_CRC */
      if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d103      	bne.n	800adec <SPI_CloseRx_ISR+0x7c>
      {
        HAL_SPI_RxCpltCallback(hspi);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff fb4f 	bl	800a488 <HAL_SPI_RxCpltCallback>
        HAL_SPI_ErrorCallback(hspi);
      }
#if (USE_SPI_CRC != 0U)
    }
#endif /* USE_SPI_CRC */
}
 800adea:	e002      	b.n	800adf2 <SPI_CloseRx_ISR+0x82>
        HAL_SPI_ErrorCallback(hspi);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7ff fb7d 	bl	800a4ec <HAL_SPI_ErrorCallback>
}
 800adf2:	bf00      	nop
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b086      	sub	sp, #24
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ae02:	2300      	movs	r3, #0
 800ae04:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800ae06:	4b2c      	ldr	r3, [pc, #176]	; (800aeb8 <SPI_CloseTx_ISR+0xbe>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a2c      	ldr	r2, [pc, #176]	; (800aebc <SPI_CloseTx_ISR+0xc2>)
 800ae0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae10:	0a5b      	lsrs	r3, r3, #9
 800ae12:	2264      	movs	r2, #100	; 0x64
 800ae14:	fb02 f303 	mul.w	r3, r2, r3
 800ae18:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae1a:	f7f5 fa87 	bl	800032c <HAL_GetTick>
 800ae1e:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0U)
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	1e5a      	subs	r2, r3, #1
 800ae24:	613a      	str	r2, [r7, #16]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d106      	bne.n	800ae38 <SPI_CloseTx_ISR+0x3e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2e:	f043 0220 	orr.w	r2, r3, #32
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae36:	e006      	b.n	800ae46 <SPI_CloseTx_ISR+0x4c>
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	f003 0302 	and.w	r3, r3, #2
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d0ec      	beq.n	800ae20 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	6812      	ldr	r2, [r2, #0]
 800ae4e:	6852      	ldr	r2, [r2, #4]
 800ae50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ae54:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	2164      	movs	r1, #100	; 0x64
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7ff fef6 	bl	800ac4c <SPI_CheckFlag_BSY>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d005      	beq.n	800ae72 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae6a:	f043 0220 	orr.w	r2, r3, #32
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10a      	bne.n	800ae90 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	60fb      	str	r3, [r7, #12]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	60fb      	str	r3, [r7, #12]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d003      	beq.n	800aea8 <SPI_CloseTx_ISR+0xae>
  {
    HAL_SPI_ErrorCallback(hspi);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff fb23 	bl	800a4ec <HAL_SPI_ErrorCallback>
  }
  else
  {
    HAL_SPI_TxCpltCallback(hspi);
  }
}
 800aea6:	e002      	b.n	800aeae <SPI_CloseTx_ISR+0xb4>
    HAL_SPI_TxCpltCallback(hspi);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7ff fae3 	bl	800a474 <HAL_SPI_TxCpltCallback>
}
 800aeae:	bf00      	nop
 800aeb0:	3718      	adds	r7, #24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20000008 	.word	0x20000008
 800aebc:	057619f1 	.word	0x057619f1

0800aec0 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 800aec8:	2300      	movs	r3, #0
 800aeca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800aecc:	4b1b      	ldr	r3, [pc, #108]	; (800af3c <SPI_AbortRx_ISR+0x7c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a1b      	ldr	r2, [pc, #108]	; (800af40 <SPI_AbortRx_ISR+0x80>)
 800aed2:	fba2 2303 	umull	r2, r3, r2, r3
 800aed6:	0a5b      	lsrs	r3, r3, #9
 800aed8:	2264      	movs	r2, #100	; 0x64
 800aeda:	fb02 f303 	mul.w	r3, r2, r3
 800aede:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0U)
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	1e5a      	subs	r2, r3, #1
 800aee4:	60ba      	str	r2, [r7, #8]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <SPI_AbortRx_ISR+0x38>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeee:	f043 0220 	orr.w	r2, r3, #32
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aef6:	e006      	b.n	800af06 <SPI_AbortRx_ISR+0x46>
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f003 0302 	and.w	r3, r3, #2
 800af02:	2b00      	cmp	r3, #0
 800af04:	d0ec      	beq.n	800aee0 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);    
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	6812      	ldr	r2, [r2, #0]
 800af0e:	6812      	ldr	r2, [r2, #0]
 800af10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af14:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	6812      	ldr	r2, [r2, #0]
 800af1e:	6852      	ldr	r2, [r2, #4]
 800af20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af24:	605a      	str	r2, [r3, #4]

  /* Flush DR Register */
  tmpreg = (*(__IO uint32_t *)&hspi->Instance->DR);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	60fb      	str	r3, [r7, #12]

  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800af2e:	68fb      	ldr	r3, [r7, #12]
}
 800af30:	bf00      	nop
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	20000008 	.word	0x20000008
 800af40:	057619f1 	.word	0x057619f1

0800af44 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	6812      	ldr	r2, [r2, #0]
 800af54:	6852      	ldr	r2, [r2, #4]
 800af56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af5a:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	6812      	ldr	r2, [r2, #0]
 800af64:	6812      	ldr	r2, [r2, #0]
 800af66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af6a:	601a      	str	r2, [r3, #0]
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e03f      	b.n	800b00a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f002 fcdc 	bl	800d95c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2224      	movs	r2, #36	; 0x24
 800afa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	6812      	ldr	r2, [r2, #0]
 800afb4:	68d2      	ldr	r2, [r2, #12]
 800afb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afba:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f001 fc90 	bl	800c8e2 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	6812      	ldr	r2, [r2, #0]
 800afca:	6912      	ldr	r2, [r2, #16]
 800afcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800afd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	6812      	ldr	r2, [r2, #0]
 800afda:	6952      	ldr	r2, [r2, #20]
 800afdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800afe0:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	6812      	ldr	r2, [r2, #0]
 800afea:	68d2      	ldr	r2, [r2, #12]
 800afec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aff0:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2220      	movs	r2, #32
 800affc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2220      	movs	r2, #32
 800b004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <HAL_HalfDuplex_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e047      	b.n	800b0b4 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */ 
  assert_param(IS_UART_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d106      	bne.n	800b03e <HAL_HalfDuplex_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f002 fc8f 	bl	800d95c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2224      	movs	r2, #36	; 0x24
 800b042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	6812      	ldr	r2, [r2, #0]
 800b04e:	68d2      	ldr	r2, [r2, #12]
 800b050:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b054:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 fc43 	bl	800c8e2 <UART_SetConfig>
  
  /* In half-duplex mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	6812      	ldr	r2, [r2, #0]
 800b064:	6912      	ldr	r2, [r2, #16]
 800b066:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b06a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	6812      	ldr	r2, [r2, #0]
 800b074:	6952      	ldr	r2, [r2, #20]
 800b076:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800b07a:	615a      	str	r2, [r3, #20]
  
  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	6812      	ldr	r2, [r2, #0]
 800b084:	6952      	ldr	r2, [r2, #20]
 800b086:	f042 0208 	orr.w	r2, r2, #8
 800b08a:	615a      	str	r2, [r3, #20]
 
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	6812      	ldr	r2, [r2, #0]
 800b094:	68d2      	ldr	r2, [r2, #12]
 800b096:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b09a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2220      	movs	r2, #32
 800b0a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2220      	movs	r2, #32
 800b0ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d101      	bne.n	800b0d0 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e057      	b.n	800b180 <HAL_LIN_Init+0xc4>
  assert_param(IS_UART_INSTANCE(huart->Instance));
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d106      	bne.n	800b0ea <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f002 fc39 	bl	800d95c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2224      	movs	r2, #36	; 0x24
 800b0ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	6812      	ldr	r2, [r2, #0]
 800b0fa:	68d2      	ldr	r2, [r2, #12]
 800b0fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b100:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f001 fbed 	bl	800c8e2 <UART_SetConfig>
  
  /* In LIN mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	6812      	ldr	r2, [r2, #0]
 800b110:	6912      	ldr	r2, [r2, #16]
 800b112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b116:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	6812      	ldr	r2, [r2, #0]
 800b120:	6952      	ldr	r2, [r2, #20]
 800b122:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b126:	615a      	str	r2, [r3, #20]
  
  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	6812      	ldr	r2, [r2, #0]
 800b130:	6912      	ldr	r2, [r2, #16]
 800b132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b136:	611a      	str	r2, [r3, #16]
  
  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	6812      	ldr	r2, [r2, #0]
 800b140:	6912      	ldr	r2, [r2, #16]
 800b142:	f022 0220 	bic.w	r2, r2, #32
 800b146:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	6812      	ldr	r2, [r2, #0]
 800b150:	6911      	ldr	r1, [r2, #16]
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	430a      	orrs	r2, r1
 800b156:	611a      	str	r2, [r3, #16]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	6812      	ldr	r2, [r2, #0]
 800b160:	68d2      	ldr	r2, [r2, #12]
 800b162:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b166:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2220      	movs	r2, #32
 800b172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2220      	movs	r2, #32
 800b17a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	460b      	mov	r3, r1
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e05f      	b.n	800b260 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d106      	bne.n	800b1ba <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f002 fbd1 	bl	800d95c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2224      	movs	r2, #36	; 0x24
 800b1be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	6812      	ldr	r2, [r2, #0]
 800b1ca:	68d2      	ldr	r2, [r2, #12]
 800b1cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b1d0:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f001 fb85 	bl	800c8e2 <UART_SetConfig>
  
  /* In Multi-Processor mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	6812      	ldr	r2, [r2, #0]
 800b1e0:	6912      	ldr	r2, [r2, #16]
 800b1e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	6812      	ldr	r2, [r2, #0]
 800b1f0:	6952      	ldr	r2, [r2, #20]
 800b1f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1f6:	615a      	str	r2, [r3, #20]
  
  /* Clear the USART address */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	6812      	ldr	r2, [r2, #0]
 800b200:	6912      	ldr	r2, [r2, #16]
 800b202:	f022 020f 	bic.w	r2, r2, #15
 800b206:	611a      	str	r2, [r3, #16]
  /* Set the USART address node */
  SET_BIT(huart->Instance->CR2, Address);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	6812      	ldr	r2, [r2, #0]
 800b210:	6911      	ldr	r1, [r2, #16]
 800b212:	7afa      	ldrb	r2, [r7, #11]
 800b214:	430a      	orrs	r2, r1
 800b216:	611a      	str	r2, [r3, #16]
  
  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	6812      	ldr	r2, [r2, #0]
 800b220:	68d2      	ldr	r2, [r2, #12]
 800b222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b226:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	6812      	ldr	r2, [r2, #0]
 800b230:	68d1      	ldr	r1, [r2, #12]
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	430a      	orrs	r2, r1
 800b236:	60da      	str	r2, [r3, #12]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	6812      	ldr	r2, [r2, #0]
 800b240:	68d2      	ldr	r2, [r2, #12]
 800b242:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b246:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2220      	movs	r2, #32
 800b252:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2220      	movs	r2, #32
 800b25a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <HAL_UART_DeInit>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d101      	bne.n	800b27a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e016      	b.n	800b2a8 <HAL_UART_DeInit+0x40>
  }
  
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2224      	movs	r2, #36	; 0x24
 800b27e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f002 fc64 	bl	800db50 <HAL_UART_MspDeInit>
  
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Lock */
  __HAL_UNLOCK(huart);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
   /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */ 
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */ 
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b088      	sub	sp, #32
 800b2dc:	af02      	add	r7, sp, #8
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	603b      	str	r3, [r7, #0]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	2b20      	cmp	r3, #32
 800b2f6:	f040 8082 	bne.w	800b3fe <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <HAL_UART_Transmit+0x2e>
 800b300:	88fb      	ldrh	r3, [r7, #6]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d101      	bne.n	800b30a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	e07a      	b.n	800b400 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b310:	2b01      	cmp	r3, #1
 800b312:	d101      	bne.n	800b318 <HAL_UART_Transmit+0x40>
 800b314:	2302      	movs	r3, #2
 800b316:	e073      	b.n	800b400 <HAL_UART_Transmit+0x128>
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2221      	movs	r2, #33	; 0x21
 800b32a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b32e:	f7f4 fffd 	bl	800032c <HAL_GetTick>
 800b332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	88fa      	ldrh	r2, [r7, #6]
 800b338:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	88fa      	ldrh	r2, [r7, #6]
 800b33e:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800b340:	e041      	b.n	800b3c6 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b346:	b29b      	uxth	r3, r3
 800b348:	3b01      	subs	r3, #1
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b358:	d121      	bne.n	800b39e <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2200      	movs	r2, #0
 800b362:	2180      	movs	r1, #128	; 0x80
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f001 f8c0 	bl	800c4ea <UART_WaitOnFlagUntilTimeout>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 800b370:	2303      	movs	r3, #3
 800b372:	e045      	b.n	800b400 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	8812      	ldrh	r2, [r2, #0]
 800b380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b384:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d103      	bne.n	800b396 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	3302      	adds	r3, #2
 800b392:	60bb      	str	r3, [r7, #8]
 800b394:	e017      	b.n	800b3c6 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	3301      	adds	r3, #1
 800b39a:	60bb      	str	r3, [r7, #8]
 800b39c:	e013      	b.n	800b3c6 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	2180      	movs	r1, #128	; 0x80
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f001 f89e 	bl	800c4ea <UART_WaitOnFlagUntilTimeout>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d001      	beq.n	800b3b8 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	e023      	b.n	800b400 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	1c59      	adds	r1, r3, #1
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1b8      	bne.n	800b342 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	2140      	movs	r1, #64	; 0x40
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f001 f885 	bl	800c4ea <UART_WaitOnFlagUntilTimeout>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d001      	beq.n	800b3ea <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	e00a      	b.n	800b400 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2220      	movs	r2, #32
 800b3ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	e000      	b.n	800b400 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 800b3fe:	2302      	movs	r3, #2
  }
}
 800b400:	4618      	mov	r0, r3
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{ 
 800b408:	b580      	push	{r7, lr}
 800b40a:	b088      	sub	sp, #32
 800b40c:	af02      	add	r7, sp, #8
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	603b      	str	r3, [r7, #0]
 800b414:	4613      	mov	r3, r2
 800b416:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800b418:	2300      	movs	r3, #0
 800b41a:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b20      	cmp	r3, #32
 800b426:	f040 8090 	bne.w	800b54a <HAL_UART_Receive+0x142>
  { 
    if((pData == NULL ) || (Size == 0)) 
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <HAL_UART_Receive+0x2e>
 800b430:	88fb      	ldrh	r3, [r7, #6]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d101      	bne.n	800b43a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e088      	b.n	800b54c <HAL_UART_Receive+0x144>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b440:	2b01      	cmp	r3, #1
 800b442:	d101      	bne.n	800b448 <HAL_UART_Receive+0x40>
 800b444:	2302      	movs	r3, #2
 800b446:	e081      	b.n	800b54c <HAL_UART_Receive+0x144>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2222      	movs	r2, #34	; 0x22
 800b45a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b45e:	f7f4 ff65 	bl	800032c <HAL_GetTick>
 800b462:	6178      	str	r0, [r7, #20]
        
    huart->RxXferSize = Size; 
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	88fa      	ldrh	r2, [r7, #6]
 800b468:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	88fa      	ldrh	r2, [r7, #6]
 800b46e:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 800b470:	e05c      	b.n	800b52c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b476:	b29b      	uxth	r3, r3
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b488:	d12b      	bne.n	800b4e2 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	2200      	movs	r2, #0
 800b492:	2120      	movs	r1, #32
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f001 f828 	bl	800c4ea <UART_WaitOnFlagUntilTimeout>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d001      	beq.n	800b4a4 <HAL_UART_Receive+0x9c>
        { 
          return HAL_TIMEOUT;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	e053      	b.n	800b54c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*) pData;
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10c      	bne.n	800b4ca <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4bc:	b29a      	uxth	r2, r3
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	3302      	adds	r3, #2
 800b4c6:	60bb      	str	r3, [r7, #8]
 800b4c8:	e030      	b.n	800b52c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	60bb      	str	r3, [r7, #8]
 800b4e0:	e024      	b.n	800b52c <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	9300      	str	r3, [sp, #0]
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2120      	movs	r1, #32
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f000 fffc 	bl	800c4ea <UART_WaitOnFlagUntilTimeout>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <HAL_UART_Receive+0xf4>
        { 
          return HAL_TIMEOUT;
 800b4f8:	2303      	movs	r3, #3
 800b4fa:	e027      	b.n	800b54c <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d108      	bne.n	800b516 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	60ba      	str	r2, [r7, #8]
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	6812      	ldr	r2, [r2, #0]
 800b50e:	6852      	ldr	r2, [r2, #4]
 800b510:	b2d2      	uxtb	r2, r2
 800b512:	701a      	strb	r2, [r3, #0]
 800b514:	e00a      	b.n	800b52c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	60ba      	str	r2, [r7, #8]
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	6812      	ldr	r2, [r2, #0]
 800b520:	6852      	ldr	r2, [r2, #4]
 800b522:	b2d2      	uxtb	r2, r2
 800b524:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b528:	b2d2      	uxtb	r2, r2
 800b52a:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b530:	b29b      	uxth	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d19d      	bne.n	800b472 <HAL_UART_Receive+0x6a>
        
      }
    }
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2220      	movs	r2, #32
 800b53a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2200      	movs	r2, #0
 800b542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	e000      	b.n	800b54c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;   
 800b54a:	2302      	movs	r3, #2
  }
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3718      	adds	r7, #24
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	4613      	mov	r3, r2
 800b560:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b20      	cmp	r3, #32
 800b56c:	d130      	bne.n	800b5d0 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL ) || (Size == 0)) 
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <HAL_UART_Transmit_IT+0x26>
 800b574:	88fb      	ldrh	r3, [r7, #6]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d101      	bne.n	800b57e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e029      	b.n	800b5d2 <HAL_UART_Transmit_IT+0x7e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b584:	2b01      	cmp	r3, #1
 800b586:	d101      	bne.n	800b58c <HAL_UART_Transmit_IT+0x38>
 800b588:	2302      	movs	r3, #2
 800b58a:	e022      	b.n	800b5d2 <HAL_UART_Transmit_IT+0x7e>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	88fa      	ldrh	r2, [r7, #6]
 800b59e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	88fa      	ldrh	r2, [r7, #6]
 800b5a4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2221      	movs	r2, #33	; 0x21
 800b5b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	6812      	ldr	r2, [r2, #0]
 800b5c4:	68d2      	ldr	r2, [r2, #12]
 800b5c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b5ca:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	e000      	b.n	800b5d2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;   
 800b5d0:	2302      	movs	r3, #2
  }
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b085      	sub	sp, #20
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	60b9      	str	r1, [r7, #8]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b20      	cmp	r3, #32
 800b5f6:	d138      	bne.n	800b66a <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d002      	beq.n	800b604 <HAL_UART_Receive_IT+0x26>
 800b5fe:	88fb      	ldrh	r3, [r7, #6]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	e031      	b.n	800b66c <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d101      	bne.n	800b616 <HAL_UART_Receive_IT+0x38>
 800b612:	2302      	movs	r3, #2
 800b614:	e02a      	b.n	800b66c <HAL_UART_Receive_IT+0x8e>
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	88fa      	ldrh	r2, [r7, #6]
 800b628:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	88fa      	ldrh	r2, [r7, #6]
 800b62e:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2222      	movs	r2, #34	; 0x22
 800b63a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	6812      	ldr	r2, [r2, #0]
 800b64e:	6952      	ldr	r2, [r2, #20]
 800b650:	f042 0201 	orr.w	r2, r2, #1
 800b654:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	6812      	ldr	r2, [r2, #0]
 800b65e:	68d2      	ldr	r2, [r2, #12]
 800b660:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800b664:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	e000      	b.n	800b66c <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 800b66a:	2302      	movs	r3, #2
  }
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	4613      	mov	r3, r2
 800b684:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2b20      	cmp	r3, #32
 800b690:	d153      	bne.n	800b73a <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <HAL_UART_Transmit_DMA+0x26>
 800b698:	88fb      	ldrh	r3, [r7, #6]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e04c      	b.n	800b73c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d101      	bne.n	800b6b0 <HAL_UART_Transmit_DMA+0x38>
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	e045      	b.n	800b73c <HAL_UART_Transmit_DMA+0xc4>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	88fa      	ldrh	r2, [r7, #6]
 800b6c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	88fa      	ldrh	r2, [r7, #6]
 800b6c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2221      	movs	r2, #33	; 0x21
 800b6d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6dc:	4a19      	ldr	r2, [pc, #100]	; (800b744 <HAL_UART_Transmit_DMA+0xcc>)
 800b6de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e4:	4a18      	ldr	r2, [pc, #96]	; (800b748 <HAL_UART_Transmit_DMA+0xd0>)
 800b6e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ec:	4a17      	ldr	r2, [pc, #92]	; (800b74c <HAL_UART_Transmit_DMA+0xd4>)
 800b6ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 800b6f8:	f107 0308 	add.w	r3, r7, #8
 800b6fc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	6819      	ldr	r1, [r3, #0]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3304      	adds	r3, #4
 800b70c:	461a      	mov	r2, r3
 800b70e:	88fb      	ldrh	r3, [r7, #6]
 800b710:	f7f6 fca9 	bl	8002066 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b71c:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	6812      	ldr	r2, [r2, #0]
 800b72e:	6952      	ldr	r2, [r2, #20]
 800b730:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b734:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 800b736:	2300      	movs	r3, #0
 800b738:	e000      	b.n	800b73c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800b73a:	2302      	movs	r3, #2
  }
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3718      	adds	r7, #24
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	0800c365 	.word	0x0800c365
 800b748:	0800c3b7 	.word	0x0800c3b7
 800b74c:	0800c457 	.word	0x0800c457

0800b750 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	4613      	mov	r3, r2
 800b75c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b764:	b2db      	uxtb	r3, r3
 800b766:	2b20      	cmp	r3, #32
 800b768:	d166      	bne.n	800b838 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d002      	beq.n	800b776 <HAL_UART_Receive_DMA+0x26>
 800b770:	88fb      	ldrh	r3, [r7, #6]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b776:	2301      	movs	r3, #1
 800b778:	e05f      	b.n	800b83a <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b780:	2b01      	cmp	r3, #1
 800b782:	d101      	bne.n	800b788 <HAL_UART_Receive_DMA+0x38>
 800b784:	2302      	movs	r3, #2
 800b786:	e058      	b.n	800b83a <HAL_UART_Receive_DMA+0xea>
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	88fa      	ldrh	r2, [r7, #6]
 800b79a:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2222      	movs	r2, #34	; 0x22
 800b7a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ae:	4a25      	ldr	r2, [pc, #148]	; (800b844 <HAL_UART_Receive_DMA+0xf4>)
 800b7b0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7b6:	4a24      	ldr	r2, [pc, #144]	; (800b848 <HAL_UART_Receive_DMA+0xf8>)
 800b7b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7be:	4a23      	ldr	r2, [pc, #140]	; (800b84c <HAL_UART_Receive_DMA+0xfc>)
 800b7c0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 800b7ca:	f107 0308 	add.w	r3, r7, #8
 800b7ce:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3304      	adds	r3, #4
 800b7da:	4619      	mov	r1, r3
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	88fb      	ldrh	r3, [r7, #6]
 800b7e2:	f7f6 fc40 	bl	8002066 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	613b      	str	r3, [r7, #16]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	613b      	str	r3, [r7, #16]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	613b      	str	r3, [r7, #16]
 800b7fa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	6812      	ldr	r2, [r2, #0]
 800b80c:	68d2      	ldr	r2, [r2, #12]
 800b80e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b812:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	6812      	ldr	r2, [r2, #0]
 800b81c:	6952      	ldr	r2, [r2, #20]
 800b81e:	f042 0201 	orr.w	r2, r2, #1
 800b822:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	6812      	ldr	r2, [r2, #0]
 800b82c:	6952      	ldr	r2, [r2, #20]
 800b82e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b832:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b834:	2300      	movs	r3, #0
 800b836:	e000      	b.n	800b83a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 800b838:	2302      	movs	r3, #2
  }
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	0800c3d3 	.word	0x0800c3d3
 800b848:	0800c43b 	.word	0x0800c43b
 800b84c:	0800c457 	.word	0x0800c457

0800b850 <HAL_UART_DMAPause>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
   uint32_t dmarequest = 0x00U;
 800b858:	2300      	movs	r3, #0
 800b85a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b862:	2b01      	cmp	r3, #1
 800b864:	d101      	bne.n	800b86a <HAL_UART_DMAPause+0x1a>
 800b866:	2302      	movs	r3, #2
 800b868:	e050      	b.n	800b90c <HAL_UART_DMAPause+0xbc>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	695b      	ldr	r3, [r3, #20]
 800b878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	bf14      	ite	ne
 800b880:	2301      	movne	r3, #1
 800b882:	2300      	moveq	r3, #0
 800b884:	b2db      	uxtb	r3, r3
 800b886:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	2b21      	cmp	r3, #33	; 0x21
 800b892:	d10a      	bne.n	800b8aa <HAL_UART_DMAPause+0x5a>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d007      	beq.n	800b8aa <HAL_UART_DMAPause+0x5a>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	6812      	ldr	r2, [r2, #0]
 800b8a2:	6952      	ldr	r2, [r2, #20]
 800b8a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8a8:	615a      	str	r2, [r3, #20]
  }
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	bf14      	ite	ne
 800b8b8:	2301      	movne	r3, #1
 800b8ba:	2300      	moveq	r3, #0
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	2b22      	cmp	r3, #34	; 0x22
 800b8ca:	d11a      	bne.n	800b902 <HAL_UART_DMAPause+0xb2>
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d017      	beq.n	800b902 <HAL_UART_DMAPause+0xb2>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	6812      	ldr	r2, [r2, #0]
 800b8da:	68d2      	ldr	r2, [r2, #12]
 800b8dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8e0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	6812      	ldr	r2, [r2, #0]
 800b8ea:	6952      	ldr	r2, [r2, #20]
 800b8ec:	f022 0201 	bic.w	r2, r2, #1
 800b8f0:	615a      	str	r2, [r3, #20]
    
    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	6812      	ldr	r2, [r2, #0]
 800b8fa:	6952      	ldr	r2, [r2, #20]
 800b8fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b900:	615a      	str	r2, [r3, #20]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <HAL_UART_DMAResume>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b926:	2b01      	cmp	r3, #1
 800b928:	d101      	bne.n	800b92e <HAL_UART_DMAResume+0x16>
 800b92a:	2302      	movs	r3, #2
 800b92c:	e03f      	b.n	800b9ae <HAL_UART_DMAResume+0x96>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	2b21      	cmp	r3, #33	; 0x21
 800b940:	d107      	bne.n	800b952 <HAL_UART_DMAResume+0x3a>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	6812      	ldr	r2, [r2, #0]
 800b94a:	6952      	ldr	r2, [r2, #20]
 800b94c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b950:	615a      	str	r2, [r3, #20]
  }
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	2b22      	cmp	r3, #34	; 0x22
 800b95c:	d122      	bne.n	800b9a4 <HAL_UART_DMAResume+0x8c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b95e:	2300      	movs	r3, #0
 800b960:	60fb      	str	r3, [r7, #12]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	60fb      	str	r3, [r7, #12]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	60fb      	str	r3, [r7, #12]
 800b972:	68fb      	ldr	r3, [r7, #12]
    
    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	6812      	ldr	r2, [r2, #0]
 800b97c:	68d2      	ldr	r2, [r2, #12]
 800b97e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b982:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	6812      	ldr	r2, [r2, #0]
 800b98c:	6952      	ldr	r2, [r2, #20]
 800b98e:	f042 0201 	orr.w	r2, r2, #1
 800b992:	615a      	str	r2, [r3, #20]
    
    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	6812      	ldr	r2, [r2, #0]
 800b99c:	6952      	ldr	r2, [r2, #20]
 800b99e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9a2:	615a      	str	r2, [r3, #20]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr

0800b9ba <HAL_UART_DMAStop>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b084      	sub	sp, #16
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */
  
  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	695b      	ldr	r3, [r3, #20]
 800b9cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	bf14      	ite	ne
 800b9d4:	2301      	movne	r3, #1
 800b9d6:	2300      	moveq	r3, #0
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	2b21      	cmp	r3, #33	; 0x21
 800b9e6:	d116      	bne.n	800ba16 <HAL_UART_DMAStop+0x5c>
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d013      	beq.n	800ba16 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	6812      	ldr	r2, [r2, #0]
 800b9f6:	6952      	ldr	r2, [r2, #20]
 800b9f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9fc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if(huart->hdmatx != NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d004      	beq.n	800ba10 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f6 fb8b 	bl	8002126 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fdb4 	bl	800c57e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bf14      	ite	ne
 800ba24:	2301      	movne	r3, #1
 800ba26:	2300      	moveq	r3, #0
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	2b22      	cmp	r3, #34	; 0x22
 800ba36:	d116      	bne.n	800ba66 <HAL_UART_DMAStop+0xac>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d013      	beq.n	800ba66 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	6812      	ldr	r2, [r2, #0]
 800ba46:	6952      	ldr	r2, [r2, #20]
 800ba48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba4c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if(huart->hdmarx != NULL)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d004      	beq.n	800ba60 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7f6 fb63 	bl	8002126 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fda2 	bl	800c5aa <UART_EndRxTransfer>
  }

  return HAL_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	6812      	ldr	r2, [r2, #0]
 800ba80:	68d2      	ldr	r2, [r2, #12]
 800ba82:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800ba86:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	6812      	ldr	r2, [r2, #0]
 800ba90:	6952      	ldr	r2, [r2, #20]
 800ba92:	f022 0201 	bic.w	r2, r2, #1
 800ba96:	615a      	str	r2, [r3, #20]
  
  /* Disable the UART DMA Tx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	695b      	ldr	r3, [r3, #20]
 800ba9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d014      	beq.n	800bad0 <HAL_UART_Abort+0x60>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	6812      	ldr	r2, [r2, #0]
 800baae:	6952      	ldr	r2, [r2, #20]
 800bab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bab4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if(huart->hdmatx != NULL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baba:	2b00      	cmp	r3, #0
 800babc:	d008      	beq.n	800bad0 <HAL_UART_Abort+0x60>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac2:	2200      	movs	r2, #0
 800bac4:	651a      	str	r2, [r3, #80]	; 0x50

      HAL_DMA_Abort(huart->hdmatx);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baca:	4618      	mov	r0, r3
 800bacc:	f7f6 fb2b 	bl	8002126 <HAL_DMA_Abort>
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	695b      	ldr	r3, [r3, #20]
 800bad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bada:	2b00      	cmp	r3, #0
 800badc:	d014      	beq.n	800bb08 <HAL_UART_Abort+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	6812      	ldr	r2, [r2, #0]
 800bae6:	6952      	ldr	r2, [r2, #20]
 800bae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800baec:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d008      	beq.n	800bb08 <HAL_UART_Abort+0x98>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafa:	2200      	movs	r2, #0
 800bafc:	651a      	str	r2, [r3, #80]	; 0x50

      HAL_DMA_Abort(huart->hdmarx);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7f6 fb0f 	bl	8002126 <HAL_DMA_Abort>
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2220      	movs	r2, #32
 800bb1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2220      	movs	r2, #32
 800bb26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	6812      	ldr	r2, [r2, #0]
 800bb44:	68d2      	ldr	r2, [r2, #12]
 800bb46:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bb4a:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d014      	beq.n	800bb84 <HAL_UART_AbortTransmit+0x50>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	6812      	ldr	r2, [r2, #0]
 800bb62:	6952      	ldr	r2, [r2, #20]
 800bb64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb68:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmatx != NULL)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d008      	beq.n	800bb84 <HAL_UART_AbortTransmit+0x50>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb76:	2200      	movs	r2, #0
 800bb78:	651a      	str	r2, [r3, #80]	; 0x50

      HAL_DMA_Abort(huart->hdmatx);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7f6 fad1 	bl	8002126 <HAL_DMA_Abort>
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2220      	movs	r2, #32
 800bb8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	6812      	ldr	r2, [r2, #0]
 800bbac:	68d2      	ldr	r2, [r2, #12]
 800bbae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bbb2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	6812      	ldr	r2, [r2, #0]
 800bbbc:	6952      	ldr	r2, [r2, #20]
 800bbbe:	f022 0201 	bic.w	r2, r2, #1
 800bbc2:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d014      	beq.n	800bbfc <HAL_UART_AbortReceive+0x60>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	6812      	ldr	r2, [r2, #0]
 800bbda:	6952      	ldr	r2, [r2, #20]
 800bbdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbe0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d008      	beq.n	800bbfc <HAL_UART_AbortReceive+0x60>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbee:	2200      	movs	r2, #0
 800bbf0:	651a      	str	r2, [r3, #80]	; 0x50

      HAL_DMA_Abort(huart->hdmarx);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7f6 fa95 	bl	8002126 <HAL_DMA_Abort>
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2220      	movs	r2, #32
 800bc06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	6812      	ldr	r2, [r2, #0]
 800bc28:	68d2      	ldr	r2, [r2, #12]
 800bc2a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800bc2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	6812      	ldr	r2, [r2, #0]
 800bc38:	6952      	ldr	r2, [r2, #20]
 800bc3a:	f022 0201 	bic.w	r2, r2, #1
 800bc3e:	615a      	str	r2, [r3, #20]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if(huart->hdmatx != NULL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00f      	beq.n	800bc68 <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	695b      	ldr	r3, [r3, #20]
 800bc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d004      	beq.n	800bc60 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc5a:	4a3e      	ldr	r2, [pc, #248]	; (800bd54 <HAL_UART_Abort_IT+0x140>)
 800bc5c:	651a      	str	r2, [r3, #80]	; 0x50
 800bc5e:	e003      	b.n	800bc68 <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc64:	2200      	movs	r2, #0
 800bc66:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if(huart->hdmarx != NULL)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00f      	beq.n	800bc90 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d004      	beq.n	800bc88 <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc82:	4a35      	ldr	r2, [pc, #212]	; (800bd58 <HAL_UART_Abort_IT+0x144>)
 800bc84:	651a      	str	r2, [r3, #80]	; 0x50
 800bc86:	e003      	b.n	800bc90 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d01a      	beq.n	800bcd4 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	6812      	ldr	r2, [r2, #0]
 800bca6:	6952      	ldr	r2, [r2, #20]
 800bca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcac:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if(huart->hdmatx != NULL)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00e      	beq.n	800bcd4 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7f6 faa3 	bl	8002206 <HAL_DMA_Abort_IT>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d004      	beq.n	800bcd0 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcca:	2200      	movs	r2, #0
 800bccc:	651a      	str	r2, [r3, #80]	; 0x50
 800bcce:	e001      	b.n	800bcd4 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        AbortCplt = 0x00U;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	695b      	ldr	r3, [r3, #20]
 800bcda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d01c      	beq.n	800bd1c <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	6812      	ldr	r2, [r2, #0]
 800bcea:	6952      	ldr	r2, [r2, #20]
 800bcec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcf0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if(huart->hdmarx != NULL)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d010      	beq.n	800bd1c <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7f6 fa81 	bl	8002206 <HAL_DMA_Abort_IT>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d006      	beq.n	800bd18 <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd0e:	2200      	movs	r2, #0
 800bd10:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 800bd12:	2301      	movs	r3, #1
 800bd14:	60fb      	str	r3, [r7, #12]
 800bd16:	e001      	b.n	800bd1c <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        AbortCplt = 0x00U;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if(AbortCplt == 0x01U)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d113      	bne.n	800bd4a <HAL_UART_Abort_IT+0x136>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U; 
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2220      	movs	r2, #32
 800bd38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 f9df 	bl	800c108 <HAL_UART_AbortCpltCallback>
  }

  return HAL_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	0800c60f 	.word	0x0800c60f
 800bd58:	0800c669 	.word	0x0800c669

0800bd5c <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	6812      	ldr	r2, [r2, #0]
 800bd6c:	68d2      	ldr	r2, [r2, #12]
 800bd6e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bd72:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d02a      	beq.n	800bdd8 <HAL_UART_AbortTransmit_IT+0x7c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	6812      	ldr	r2, [r2, #0]
 800bd8a:	6952      	ldr	r2, [r2, #20]
 800bd8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd90:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmatx != NULL)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d013      	beq.n	800bdc2 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd9e:	4a16      	ldr	r2, [pc, #88]	; (800bdf8 <HAL_UART_AbortTransmit_IT+0x9c>)
 800bda0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7f6 fa2d 	bl	8002206 <HAL_DMA_Abort_IT>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d01c      	beq.n	800bdec <HAL_UART_AbortTransmit_IT+0x90>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4798      	blx	r3
 800bdc0:	e014      	b.n	800bdec <HAL_UART_AbortTransmit_IT+0x90>
      }
    }
    else
    {      
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2220      	movs	r2, #32
 800bdcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* As no DMA to be aborted, call directly user Abort complete callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 f9a3 	bl	800c11c <HAL_UART_AbortTransmitCpltCallback>
 800bdd6:	e009      	b.n	800bdec <HAL_UART_AbortTransmit_IT+0x90>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2220      	movs	r2, #32
 800bde2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f998 	bl	800c11c <HAL_UART_AbortTransmitCpltCallback>
  }

  return HAL_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	0800c6c3 	.word	0x0800c6c3

0800bdfc <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	6812      	ldr	r2, [r2, #0]
 800be0c:	68d2      	ldr	r2, [r2, #12]
 800be0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800be12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	6812      	ldr	r2, [r2, #0]
 800be1c:	6952      	ldr	r2, [r2, #20]
 800be1e:	f022 0201 	bic.w	r2, r2, #1
 800be22:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d02a      	beq.n	800be88 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	6812      	ldr	r2, [r2, #0]
 800be3a:	6952      	ldr	r2, [r2, #20]
 800be3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be40:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be46:	2b00      	cmp	r3, #0
 800be48:	d013      	beq.n	800be72 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be4e:	4a16      	ldr	r2, [pc, #88]	; (800bea8 <HAL_UART_AbortReceive_IT+0xac>)
 800be50:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be56:	4618      	mov	r0, r3
 800be58:	f7f6 f9d5 	bl	8002206 <HAL_DMA_Abort_IT>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d01c      	beq.n	800be9c <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800be6c:	4610      	mov	r0, r2
 800be6e:	4798      	blx	r3
 800be70:	e014      	b.n	800be9c <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U; 
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2220      	movs	r2, #32
 800be7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      /* As no DMA to be aborted, call directly user Abort complete callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f955 	bl	800c130 <HAL_UART_AbortReceiveCpltCallback>
 800be86:	e009      	b.n	800be9c <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U; 
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2220      	movs	r2, #32
 800be92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f94a 	bl	800c130 <HAL_UART_AbortReceiveCpltCallback>
  }

  return HAL_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	0800c6ed 	.word	0x0800c6ed

0800beac <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b088      	sub	sp, #32
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	695b      	ldr	r3, [r3, #20]
 800beca:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800becc:	2300      	movs	r3, #0
 800bece:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800bed0:	2300      	movs	r3, #0
 800bed2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	f003 030f 	and.w	r3, r3, #15
 800beda:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10d      	bne.n	800befe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	f003 0320 	and.w	r3, r3, #32
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d008      	beq.n	800befe <HAL_UART_IRQHandler+0x52>
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	f003 0320 	and.w	r3, r3, #32
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fc7a 	bl	800c7f0 <UART_Receive_IT>
      return;
 800befc:	e0cc      	b.n	800c098 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 80ab 	beq.w	800c05c <HAL_UART_IRQHandler+0x1b0>
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	f003 0301 	and.w	r3, r3, #1
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d105      	bne.n	800bf1c <HAL_UART_IRQHandler+0x70>
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 80a0 	beq.w	800c05c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	f003 0301 	and.w	r3, r3, #1
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00a      	beq.n	800bf3c <HAL_UART_IRQHandler+0x90>
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d005      	beq.n	800bf3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf34:	f043 0201 	orr.w	r2, r3, #1
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	f003 0304 	and.w	r3, r3, #4
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00a      	beq.n	800bf5c <HAL_UART_IRQHandler+0xb0>
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	f003 0301 	and.w	r3, r3, #1
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d005      	beq.n	800bf5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf54:	f043 0202 	orr.w	r2, r3, #2
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	f003 0302 	and.w	r3, r3, #2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00a      	beq.n	800bf7c <HAL_UART_IRQHandler+0xd0>
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d005      	beq.n	800bf7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf74:	f043 0204 	orr.w	r2, r3, #4
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	f003 0308 	and.w	r3, r3, #8
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00a      	beq.n	800bf9c <HAL_UART_IRQHandler+0xf0>
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d005      	beq.n	800bf9c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf94:	f043 0208 	orr.w	r2, r3, #8
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d078      	beq.n	800c096 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	f003 0320 	and.w	r3, r3, #32
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d007      	beq.n	800bfbe <HAL_UART_IRQHandler+0x112>
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	f003 0320 	and.w	r3, r3, #32
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fc19 	bl	800c7f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	bf14      	ite	ne
 800bfcc:	2301      	movne	r3, #1
 800bfce:	2300      	moveq	r3, #0
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd8:	f003 0308 	and.w	r3, r3, #8
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d102      	bne.n	800bfe6 <HAL_UART_IRQHandler+0x13a>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d031      	beq.n	800c04a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fadf 	bl	800c5aa <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	695b      	ldr	r3, [r3, #20]
 800bff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d023      	beq.n	800c042 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	6812      	ldr	r2, [r2, #0]
 800c002:	6952      	ldr	r2, [r2, #20]
 800c004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c008:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d013      	beq.n	800c03a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c016:	4a22      	ldr	r2, [pc, #136]	; (800c0a0 <HAL_UART_IRQHandler+0x1f4>)
 800c018:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c01e:	4618      	mov	r0, r3
 800c020:	f7f6 f8f1 	bl	8002206 <HAL_DMA_Abort_IT>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d016      	beq.n	800c058 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c02e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c034:	4610      	mov	r0, r2
 800c036:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c038:	e00e      	b.n	800c058 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f85a 	bl	800c0f4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c040:	e00a      	b.n	800c058 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f856 	bl	800c0f4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c048:	e006      	b.n	800c058 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f852 	bl	800c0f4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800c056:	e01e      	b.n	800c096 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c058:	bf00      	nop
    return;
 800c05a:	e01c      	b.n	800c096 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c062:	2b00      	cmp	r3, #0
 800c064:	d008      	beq.n	800c078 <HAL_UART_IRQHandler+0x1cc>
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fb50 	bl	800c716 <UART_Transmit_IT>
    return;
 800c076:	e00f      	b.n	800c098 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00a      	beq.n	800c098 <HAL_UART_IRQHandler+0x1ec>
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d005      	beq.n	800c098 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 fb97 	bl	800c7c0 <UART_EndTransmit_IT>
    return;
 800c092:	bf00      	nop
 800c094:	e000      	b.n	800c098 <HAL_UART_IRQHandler+0x1ec>
    return;
 800c096:	bf00      	nop
  }
}
 800c098:	3720      	adds	r7, #32
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	0800c5e7 	.word	0x0800c5e7
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800c0ac:	bf00      	nop
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c0d4:	bf00      	nop
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800c0fc:	bf00      	nop
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback (UART_HandleTypeDef *huart)
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback (UART_HandleTypeDef *huart)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c138:	bf00      	nop
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <HAL_LIN_SendBreak>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c152:	2b01      	cmp	r3, #1
 800c154:	d101      	bne.n	800c15a <HAL_LIN_SendBreak+0x16>
 800c156:	2302      	movs	r3, #2
 800c158:	e018      	b.n	800c18c <HAL_LIN_SendBreak+0x48>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2224      	movs	r2, #36	; 0x24
 800c166:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Send break characters */
  SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	6812      	ldr	r2, [r2, #0]
 800c172:	68d2      	ldr	r2, [r2, #12]
 800c174:	f042 0201 	orr.w	r2, r2, #1
 800c178:	60da      	str	r2, [r3, #12]
 
  huart->gState = HAL_UART_STATE_READY;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2220      	movs	r2, #32
 800c17e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d101      	bne.n	800c1ae <HAL_MultiProcessor_EnterMuteMode+0x16>
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	e018      	b.n	800c1e0 <HAL_MultiProcessor_EnterMuteMode+0x48>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2224      	movs	r2, #36	; 0x24
 800c1ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	6812      	ldr	r2, [r2, #0]
 800c1c6:	68d2      	ldr	r2, [r2, #12]
 800c1c8:	f042 0202 	orr.w	r2, r2, #2
 800c1cc:	60da      	str	r2, [r3, #12]
  
  huart->gState = HAL_UART_STATE_READY;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2220      	movs	r2, #32
 800c1d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d101      	bne.n	800c202 <HAL_MultiProcessor_ExitMuteMode+0x16>
 800c1fe:	2302      	movs	r3, #2
 800c200:	e018      	b.n	800c234 <HAL_MultiProcessor_ExitMuteMode+0x48>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2224      	movs	r2, #36	; 0x24
 800c20e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	6812      	ldr	r2, [r2, #0]
 800c21a:	68d2      	ldr	r2, [r2, #12]
 800c21c:	f022 0202 	bic.w	r2, r2, #2
 800c220:	60da      	str	r2, [r3, #12]
  
  huart->gState = HAL_UART_STATE_READY;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2220      	movs	r2, #32
 800c226:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	370c      	adds	r7, #12
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr

0800c240 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800c240:	b480      	push	{r7}
 800c242:	b085      	sub	sp, #20
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800c248:	2300      	movs	r3, #0
 800c24a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c252:	2b01      	cmp	r3, #1
 800c254:	d101      	bne.n	800c25a <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800c256:	2302      	movs	r3, #2
 800c258:	e020      	b.n	800c29c <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2224      	movs	r2, #36	; 0x24
 800c266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	60fb      	str	r3, [r7, #12]
  
  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f023 030c 	bic.w	r3, r3, #12
 800c278:	60fb      	str	r3, [r7, #12]
  
  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f043 0308 	orr.w	r3, r3, #8
 800c280:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	60da      	str	r2, [r3, #12]
 
  huart->gState = HAL_UART_STATE_READY;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2220      	movs	r2, #32
 800c28e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3714      	adds	r7, #20
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d101      	bne.n	800c2c2 <HAL_HalfDuplex_EnableReceiver+0x1a>
 800c2be:	2302      	movs	r3, #2
 800c2c0:	e020      	b.n	800c304 <HAL_HalfDuplex_EnableReceiver+0x5c>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2224      	movs	r2, #36	; 0x24
 800c2ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	60fb      	str	r3, [r7, #12]
  
  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f023 030c 	bic.w	r3, r3, #12
 800c2e0:	60fb      	str	r3, [r7, #12]
  
  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f043 0304 	orr.w	r3, r3, #4
 800c2e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	68fa      	ldr	r2, [r7, #12]
 800c2f0:	60da      	str	r2, [r3, #12]
  
  huart->gState = HAL_UART_STATE_READY;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2220      	movs	r2, #32
 800c2f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <HAL_UART_GetState>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  uint32_t temp1= 0x00U, temp2 = 0x00U;
 800c318:	2300      	movs	r3, #0
 800c31a:	60fb      	str	r3, [r7, #12]
 800c31c:	2300      	movs	r3, #0
 800c31e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c326:	b2db      	uxtb	r3, r3
 800c328:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c330:	b2db      	uxtb	r3, r3
 800c332:	60bb      	str	r3, [r7, #8]
  
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	b2da      	uxtb	r2, r3
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	4313      	orrs	r3, r2
 800c33e:	b2db      	uxtb	r3, r3
}
 800c340:	4618      	mov	r0, r3
 800c342:	3714      	adds	r7, #20
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <HAL_UART_GetError>:
  * @param  huart  pointer to a UART_HandleTypeDef structure that contains
  *              the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800c358:	4618      	mov	r0, r3
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c370:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d113      	bne.n	800c3a8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	6812      	ldr	r2, [r2, #0]
 800c38e:	6952      	ldr	r2, [r2, #20]
 800c390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c394:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	6812      	ldr	r2, [r2, #0]
 800c39e:	68d2      	ldr	r2, [r2, #12]
 800c3a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3a4:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 800c3a6:	e002      	b.n	800c3ae <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f000 fcd3 	bl	800cd54 <HAL_UART_TxCpltCallback>
}
 800c3ae:	bf00      	nop
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <UART_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b084      	sub	sp, #16
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c2:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f7ff fe77 	bl	800c0b8 <HAL_UART_TxHalfCpltCallback>
}
 800c3ca:	bf00      	nop
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3de:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d11e      	bne.n	800c42c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	6812      	ldr	r2, [r2, #0]
 800c3fc:	68d2      	ldr	r2, [r2, #12]
 800c3fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c402:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	6812      	ldr	r2, [r2, #0]
 800c40c:	6952      	ldr	r2, [r2, #20]
 800c40e:	f022 0201 	bic.w	r2, r2, #1
 800c412:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	6812      	ldr	r2, [r2, #0]
 800c41c:	6952      	ldr	r2, [r2, #20]
 800c41e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c422:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2220      	movs	r2, #32
 800c428:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f000 fc75 	bl	800cd1c <HAL_UART_RxCpltCallback>
}
 800c432:	bf00      	nop
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b084      	sub	sp, #16
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c446:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f7ff fe49 	bl	800c0e0 <HAL_UART_RxHalfCpltCallback>
}
 800c44e:	bf00      	nop
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b084      	sub	sp, #16
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c45e:	2300      	movs	r3, #0
 800c460:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c466:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	695b      	ldr	r3, [r3, #20]
 800c46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c472:	2b00      	cmp	r3, #0
 800c474:	bf14      	ite	ne
 800c476:	2301      	movne	r3, #1
 800c478:	2300      	moveq	r3, #0
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c484:	b2db      	uxtb	r3, r3
 800c486:	2b21      	cmp	r3, #33	; 0x21
 800c488:	d108      	bne.n	800c49c <UART_DMAError+0x46>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d005      	beq.n	800c49c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	2200      	movs	r2, #0
 800c494:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c496:	68b8      	ldr	r0, [r7, #8]
 800c498:	f000 f871 	bl	800c57e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	695b      	ldr	r3, [r3, #20]
 800c4a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	bf14      	ite	ne
 800c4aa:	2301      	movne	r3, #1
 800c4ac:	2300      	moveq	r3, #0
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	2b22      	cmp	r3, #34	; 0x22
 800c4bc:	d108      	bne.n	800c4d0 <UART_DMAError+0x7a>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d005      	beq.n	800c4d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c4ca:	68b8      	ldr	r0, [r7, #8]
 800c4cc:	f000 f86d 	bl	800c5aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d4:	f043 0210 	orr.w	r2, r3, #16
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800c4dc:	68b8      	ldr	r0, [r7, #8]
 800c4de:	f7ff fe09 	bl	800c0f4 <HAL_UART_ErrorCallback>
}
 800c4e2:	bf00      	nop
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b084      	sub	sp, #16
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	60f8      	str	r0, [r7, #12]
 800c4f2:	60b9      	str	r1, [r7, #8]
 800c4f4:	603b      	str	r3, [r7, #0]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800c4fa:	e02c      	b.n	800c556 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c502:	d028      	beq.n	800c556 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d007      	beq.n	800c51a <UART_WaitOnFlagUntilTimeout+0x30>
 800c50a:	f7f3 ff0f 	bl	800032c <HAL_GetTick>
 800c50e:	4602      	mov	r2, r0
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	1ad2      	subs	r2, r2, r3
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	429a      	cmp	r2, r3
 800c518:	d91d      	bls.n	800c556 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	6812      	ldr	r2, [r2, #0]
 800c522:	68d2      	ldr	r2, [r2, #12]
 800c524:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c528:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	6812      	ldr	r2, [r2, #0]
 800c532:	6952      	ldr	r2, [r2, #20]
 800c534:	f022 0201 	bic.w	r2, r2, #1
 800c538:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2220      	movs	r2, #32
 800c53e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2220      	movs	r2, #32
 800c546:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2200      	movs	r2, #0
 800c54e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800c552:	2303      	movs	r3, #3
 800c554:	e00f      	b.n	800c576 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	401a      	ands	r2, r3
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	429a      	cmp	r2, r3
 800c564:	bf0c      	ite	eq
 800c566:	2301      	moveq	r3, #1
 800c568:	2300      	movne	r3, #0
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	461a      	mov	r2, r3
 800c56e:	79fb      	ldrb	r3, [r7, #7]
 800c570:	429a      	cmp	r2, r3
 800c572:	d0c3      	beq.n	800c4fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3710      	adds	r7, #16
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}

0800c57e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c57e:	b480      	push	{r7}
 800c580:	b083      	sub	sp, #12
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	6812      	ldr	r2, [r2, #0]
 800c58e:	68d2      	ldr	r2, [r2, #12]
 800c590:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c594:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2220      	movs	r2, #32
 800c59a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800c59e:	bf00      	nop
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b083      	sub	sp, #12
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	6812      	ldr	r2, [r2, #0]
 800c5ba:	68d2      	ldr	r2, [r2, #12]
 800c5bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c5c0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	6812      	ldr	r2, [r2, #0]
 800c5ca:	6952      	ldr	r2, [r2, #20]
 800c5cc:	f022 0201 	bic.w	r2, r2, #1
 800c5d0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2220      	movs	r2, #32
 800c5d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c5da:	bf00      	nop
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b084      	sub	sp, #16
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f7ff fd77 	bl	800c0f4 <HAL_UART_ErrorCallback>
}
 800c606:	bf00      	nop
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b084      	sub	sp, #16
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61a:	60fb      	str	r3, [r7, #12]
  
  huart->hdmatx->XferAbortCallback = NULL;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c620:	2200      	movs	r2, #0
 800c622:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if(huart->hdmarx != NULL)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d004      	beq.n	800c636 <UART_DMATxAbortCallback+0x28>
  {
    if(huart->hdmarx->XferAbortCallback != NULL)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c632:	2b00      	cmp	r3, #0
 800c634:	d114      	bne.n	800c660 <UART_DMATxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2200      	movs	r2, #0
 800c640:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2200      	movs	r2, #0
 800c646:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2220      	movs	r2, #32
 800c64c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2220      	movs	r2, #32
 800c654:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Call user Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f7ff fd55 	bl	800c108 <HAL_UART_AbortCpltCallback>
 800c65e:	e000      	b.n	800c662 <UART_DMATxAbortCallback+0x54>
      return;
 800c660:	bf00      	nop
}
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c674:	60fb      	str	r3, [r7, #12]
  
  huart->hdmarx->XferAbortCallback = NULL;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c67a:	2200      	movs	r2, #0
 800c67c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if(huart->hdmatx != NULL)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c682:	2b00      	cmp	r3, #0
 800c684:	d004      	beq.n	800c690 <UART_DMARxAbortCallback+0x28>
  {
    if(huart->hdmatx->XferAbortCallback != NULL)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c68a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d114      	bne.n	800c6ba <UART_DMARxAbortCallback+0x52>
      return;
    }
  }
  
  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2200      	movs	r2, #0
 800c694:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2220      	movs	r2, #32
 800c6a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2220      	movs	r2, #32
 800c6ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Call user Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f7ff fd28 	bl	800c108 <HAL_UART_AbortCpltCallback>
 800c6b8:	e000      	b.n	800c6bc <UART_DMARxAbortCallback+0x54>
      return;
 800c6ba:	bf00      	nop
}
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b084      	sub	sp, #16
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ce:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2220      	movs	r2, #32
 800c6da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Call user Abort complete callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800c6de:	68f8      	ldr	r0, [r7, #12]
 800c6e0:	f7ff fd1c 	bl	800c11c <HAL_UART_AbortTransmitCpltCallback>
}
 800c6e4:	bf00      	nop
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f8:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2220      	movs	r2, #32
 800c704:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Call user Abort complete callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f7ff fd11 	bl	800c130 <HAL_UART_AbortReceiveCpltCallback>
}
 800c70e:	bf00      	nop
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c716:	b480      	push	{r7}
 800c718:	b085      	sub	sp, #20
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b21      	cmp	r3, #33	; 0x21
 800c728:	d143      	bne.n	800c7b2 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c732:	d119      	bne.n	800c768 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a1b      	ldr	r3, [r3, #32]
 800c738:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	8812      	ldrh	r2, [r2, #0]
 800c742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c746:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	691b      	ldr	r3, [r3, #16]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d105      	bne.n	800c75c <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6a1b      	ldr	r3, [r3, #32]
 800c754:	1c9a      	adds	r2, r3, #2
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	621a      	str	r2, [r3, #32]
 800c75a:	e00e      	b.n	800c77a <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6a1b      	ldr	r3, [r3, #32]
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	621a      	str	r2, [r3, #32]
 800c766:	e008      	b.n	800c77a <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6a1b      	ldr	r3, [r3, #32]
 800c770:	1c58      	adds	r0, r3, #1
 800c772:	6879      	ldr	r1, [r7, #4]
 800c774:	6208      	str	r0, [r1, #32]
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c77e:	b29b      	uxth	r3, r3
 800c780:	3b01      	subs	r3, #1
 800c782:	b29b      	uxth	r3, r3
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	4619      	mov	r1, r3
 800c788:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10f      	bne.n	800c7ae <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	6812      	ldr	r2, [r2, #0]
 800c796:	68d2      	ldr	r2, [r2, #12]
 800c798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c79c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	6812      	ldr	r2, [r2, #0]
 800c7a6:	68d2      	ldr	r2, [r2, #12]
 800c7a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	e000      	b.n	800c7b4 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c7b2:	2302      	movs	r3, #2
  }
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3714      	adds	r7, #20
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	6812      	ldr	r2, [r2, #0]
 800c7d0:	68d2      	ldr	r2, [r2, #12]
 800c7d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7d6:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2220      	movs	r2, #32
 800c7dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 fab7 	bl	800cd54 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	2b22      	cmp	r3, #34	; 0x22
 800c802:	d169      	bne.n	800c8d8 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c80c:	d123      	bne.n	800c856 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c812:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	691b      	ldr	r3, [r3, #16]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10e      	bne.n	800c83a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	b29b      	uxth	r3, r3
 800c824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c828:	b29a      	uxth	r2, r3
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c832:	1c9a      	adds	r2, r3, #2
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	629a      	str	r2, [r3, #40]	; 0x28
 800c838:	e029      	b.n	800c88e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	b29b      	uxth	r3, r3
 800c842:	b2db      	uxtb	r3, r3
 800c844:	b29a      	uxth	r2, r3
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	629a      	str	r2, [r3, #40]	; 0x28
 800c854:	e01b      	b.n	800c88e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	691b      	ldr	r3, [r3, #16]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d10a      	bne.n	800c874 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c862:	1c59      	adds	r1, r3, #1
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	6291      	str	r1, [r2, #40]	; 0x28
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	6812      	ldr	r2, [r2, #0]
 800c86c:	6852      	ldr	r2, [r2, #4]
 800c86e:	b2d2      	uxtb	r2, r2
 800c870:	701a      	strb	r2, [r3, #0]
 800c872:	e00c      	b.n	800c88e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c878:	1c59      	adds	r1, r3, #1
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	6291      	str	r1, [r2, #40]	; 0x28
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	6812      	ldr	r2, [r2, #0]
 800c882:	6852      	ldr	r2, [r2, #4]
 800c884:	b2d2      	uxtb	r2, r2
 800c886:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c88a:	b2d2      	uxtb	r2, r2
 800c88c:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c892:	b29b      	uxth	r3, r3
 800c894:	3b01      	subs	r3, #1
 800c896:	b29b      	uxth	r3, r3
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	4619      	mov	r1, r3
 800c89c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d118      	bne.n	800c8d4 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	6812      	ldr	r2, [r2, #0]
 800c8aa:	68d2      	ldr	r2, [r2, #12]
 800c8ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c8b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	6812      	ldr	r2, [r2, #0]
 800c8ba:	6952      	ldr	r2, [r2, #20]
 800c8bc:	f022 0201 	bic.w	r2, r2, #1
 800c8c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2220      	movs	r2, #32
 800c8c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fa26 	bl	800cd1c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	e002      	b.n	800c8da <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	e000      	b.n	800c8da <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c8d8:	2302      	movs	r3, #2
  }
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8e4:	b085      	sub	sp, #20
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c8fc:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	68fa      	ldr	r2, [r7, #12]
 800c904:	4313      	orrs	r3, r2
 800c906:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c91e:	f023 030c 	bic.w	r3, r3, #12
 800c922:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	689a      	ldr	r2, [r3, #8]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	431a      	orrs	r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	695b      	ldr	r3, [r3, #20]
 800c932:	431a      	orrs	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	69db      	ldr	r3, [r3, #28]
 800c938:	4313      	orrs	r3, r2
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c956:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	4313      	orrs	r3, r2
 800c960:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	69db      	ldr	r3, [r3, #28]
 800c96e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c972:	f040 80e4 	bne.w	800cb3e <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4aac      	ldr	r2, [pc, #688]	; (800cc2c <UART_SetConfig+0x34a>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d004      	beq.n	800c98a <UART_SetConfig+0xa8>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4aaa      	ldr	r2, [pc, #680]	; (800cc30 <UART_SetConfig+0x34e>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d16c      	bne.n	800ca64 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681c      	ldr	r4, [r3, #0]
 800c98e:	f7fc f933 	bl	8008bf8 <HAL_RCC_GetPCLK2Freq>
 800c992:	4602      	mov	r2, r0
 800c994:	4613      	mov	r3, r2
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	4413      	add	r3, r2
 800c99a:	009a      	lsls	r2, r3, #2
 800c99c:	441a      	add	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	005b      	lsls	r3, r3, #1
 800c9a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a8:	4aa2      	ldr	r2, [pc, #648]	; (800cc34 <UART_SetConfig+0x352>)
 800c9aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ae:	095b      	lsrs	r3, r3, #5
 800c9b0:	011d      	lsls	r5, r3, #4
 800c9b2:	f7fc f921 	bl	8008bf8 <HAL_RCC_GetPCLK2Freq>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4413      	add	r3, r2
 800c9be:	009a      	lsls	r2, r3, #2
 800c9c0:	441a      	add	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	005b      	lsls	r3, r3, #1
 800c9c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9cc:	f7fc f914 	bl	8008bf8 <HAL_RCC_GetPCLK2Freq>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	4413      	add	r3, r2
 800c9d8:	009a      	lsls	r2, r3, #2
 800c9da:	441a      	add	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	005b      	lsls	r3, r3, #1
 800c9e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9e6:	4a93      	ldr	r2, [pc, #588]	; (800cc34 <UART_SetConfig+0x352>)
 800c9e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ec:	095b      	lsrs	r3, r3, #5
 800c9ee:	2264      	movs	r2, #100	; 0x64
 800c9f0:	fb02 f303 	mul.w	r3, r2, r3
 800c9f4:	1af3      	subs	r3, r6, r3
 800c9f6:	00db      	lsls	r3, r3, #3
 800c9f8:	3332      	adds	r3, #50	; 0x32
 800c9fa:	4a8e      	ldr	r2, [pc, #568]	; (800cc34 <UART_SetConfig+0x352>)
 800c9fc:	fba2 2303 	umull	r2, r3, r2, r3
 800ca00:	095b      	lsrs	r3, r3, #5
 800ca02:	005b      	lsls	r3, r3, #1
 800ca04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ca08:	441d      	add	r5, r3
 800ca0a:	f7fc f8f5 	bl	8008bf8 <HAL_RCC_GetPCLK2Freq>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	4613      	mov	r3, r2
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4413      	add	r3, r2
 800ca16:	009a      	lsls	r2, r3, #2
 800ca18:	441a      	add	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca24:	f7fc f8e8 	bl	8008bf8 <HAL_RCC_GetPCLK2Freq>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4413      	add	r3, r2
 800ca30:	009a      	lsls	r2, r3, #2
 800ca32:	441a      	add	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	005b      	lsls	r3, r3, #1
 800ca3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca3e:	4a7d      	ldr	r2, [pc, #500]	; (800cc34 <UART_SetConfig+0x352>)
 800ca40:	fba2 2303 	umull	r2, r3, r2, r3
 800ca44:	095b      	lsrs	r3, r3, #5
 800ca46:	2264      	movs	r2, #100	; 0x64
 800ca48:	fb02 f303 	mul.w	r3, r2, r3
 800ca4c:	1af3      	subs	r3, r6, r3
 800ca4e:	00db      	lsls	r3, r3, #3
 800ca50:	3332      	adds	r3, #50	; 0x32
 800ca52:	4a78      	ldr	r2, [pc, #480]	; (800cc34 <UART_SetConfig+0x352>)
 800ca54:	fba2 2303 	umull	r2, r3, r2, r3
 800ca58:	095b      	lsrs	r3, r3, #5
 800ca5a:	f003 0307 	and.w	r3, r3, #7
 800ca5e:	442b      	add	r3, r5
 800ca60:	60a3      	str	r3, [r4, #8]
 800ca62:	e155      	b.n	800cd10 <UART_SetConfig+0x42e>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681c      	ldr	r4, [r3, #0]
 800ca68:	f7fc f8b2 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	4613      	mov	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	009a      	lsls	r2, r3, #2
 800ca76:	441a      	add	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	005b      	lsls	r3, r3, #1
 800ca7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca82:	4a6c      	ldr	r2, [pc, #432]	; (800cc34 <UART_SetConfig+0x352>)
 800ca84:	fba2 2303 	umull	r2, r3, r2, r3
 800ca88:	095b      	lsrs	r3, r3, #5
 800ca8a:	011d      	lsls	r5, r3, #4
 800ca8c:	f7fc f8a0 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800ca90:	4602      	mov	r2, r0
 800ca92:	4613      	mov	r3, r2
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	4413      	add	r3, r2
 800ca98:	009a      	lsls	r2, r3, #2
 800ca9a:	441a      	add	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	005b      	lsls	r3, r3, #1
 800caa2:	fbb2 f6f3 	udiv	r6, r2, r3
 800caa6:	f7fc f893 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800caaa:	4602      	mov	r2, r0
 800caac:	4613      	mov	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4413      	add	r3, r2
 800cab2:	009a      	lsls	r2, r3, #2
 800cab4:	441a      	add	r2, r3
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	005b      	lsls	r3, r3, #1
 800cabc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cac0:	4a5c      	ldr	r2, [pc, #368]	; (800cc34 <UART_SetConfig+0x352>)
 800cac2:	fba2 2303 	umull	r2, r3, r2, r3
 800cac6:	095b      	lsrs	r3, r3, #5
 800cac8:	2264      	movs	r2, #100	; 0x64
 800caca:	fb02 f303 	mul.w	r3, r2, r3
 800cace:	1af3      	subs	r3, r6, r3
 800cad0:	00db      	lsls	r3, r3, #3
 800cad2:	3332      	adds	r3, #50	; 0x32
 800cad4:	4a57      	ldr	r2, [pc, #348]	; (800cc34 <UART_SetConfig+0x352>)
 800cad6:	fba2 2303 	umull	r2, r3, r2, r3
 800cada:	095b      	lsrs	r3, r3, #5
 800cadc:	005b      	lsls	r3, r3, #1
 800cade:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cae2:	441d      	add	r5, r3
 800cae4:	f7fc f874 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800cae8:	4602      	mov	r2, r0
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	009a      	lsls	r2, r3, #2
 800caf2:	441a      	add	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	005b      	lsls	r3, r3, #1
 800cafa:	fbb2 f6f3 	udiv	r6, r2, r3
 800cafe:	f7fc f867 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800cb02:	4602      	mov	r2, r0
 800cb04:	4613      	mov	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4413      	add	r3, r2
 800cb0a:	009a      	lsls	r2, r3, #2
 800cb0c:	441a      	add	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	005b      	lsls	r3, r3, #1
 800cb14:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb18:	4a46      	ldr	r2, [pc, #280]	; (800cc34 <UART_SetConfig+0x352>)
 800cb1a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb1e:	095b      	lsrs	r3, r3, #5
 800cb20:	2264      	movs	r2, #100	; 0x64
 800cb22:	fb02 f303 	mul.w	r3, r2, r3
 800cb26:	1af3      	subs	r3, r6, r3
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	3332      	adds	r3, #50	; 0x32
 800cb2c:	4a41      	ldr	r2, [pc, #260]	; (800cc34 <UART_SetConfig+0x352>)
 800cb2e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb32:	095b      	lsrs	r3, r3, #5
 800cb34:	f003 0307 	and.w	r3, r3, #7
 800cb38:	442b      	add	r3, r5
 800cb3a:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800cb3c:	e0e8      	b.n	800cd10 <UART_SetConfig+0x42e>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a3a      	ldr	r2, [pc, #232]	; (800cc2c <UART_SetConfig+0x34a>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d004      	beq.n	800cb52 <UART_SetConfig+0x270>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a38      	ldr	r2, [pc, #224]	; (800cc30 <UART_SetConfig+0x34e>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d172      	bne.n	800cc38 <UART_SetConfig+0x356>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681c      	ldr	r4, [r3, #0]
 800cb56:	f7fc f84f 	bl	8008bf8 <HAL_RCC_GetPCLK2Freq>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	4413      	add	r3, r2
 800cb62:	009a      	lsls	r2, r3, #2
 800cb64:	441a      	add	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb70:	4a30      	ldr	r2, [pc, #192]	; (800cc34 <UART_SetConfig+0x352>)
 800cb72:	fba2 2303 	umull	r2, r3, r2, r3
 800cb76:	095b      	lsrs	r3, r3, #5
 800cb78:	011d      	lsls	r5, r3, #4
 800cb7a:	f7fc f83d 	bl	8008bf8 <HAL_RCC_GetPCLK2Freq>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	4613      	mov	r3, r2
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	4413      	add	r3, r2
 800cb86:	009a      	lsls	r2, r3, #2
 800cb88:	441a      	add	r2, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb94:	f7fc f830 	bl	8008bf8 <HAL_RCC_GetPCLK2Freq>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	4413      	add	r3, r2
 800cba0:	009a      	lsls	r2, r3, #2
 800cba2:	441a      	add	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbae:	4a21      	ldr	r2, [pc, #132]	; (800cc34 <UART_SetConfig+0x352>)
 800cbb0:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb4:	095b      	lsrs	r3, r3, #5
 800cbb6:	2264      	movs	r2, #100	; 0x64
 800cbb8:	fb02 f303 	mul.w	r3, r2, r3
 800cbbc:	1af3      	subs	r3, r6, r3
 800cbbe:	011b      	lsls	r3, r3, #4
 800cbc0:	3332      	adds	r3, #50	; 0x32
 800cbc2:	4a1c      	ldr	r2, [pc, #112]	; (800cc34 <UART_SetConfig+0x352>)
 800cbc4:	fba2 2303 	umull	r2, r3, r2, r3
 800cbc8:	095b      	lsrs	r3, r3, #5
 800cbca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbce:	441d      	add	r5, r3
 800cbd0:	f7fc f812 	bl	8008bf8 <HAL_RCC_GetPCLK2Freq>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	4413      	add	r3, r2
 800cbdc:	009a      	lsls	r2, r3, #2
 800cbde:	441a      	add	r2, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	fbb2 f6f3 	udiv	r6, r2, r3
 800cbea:	f7fc f805 	bl	8008bf8 <HAL_RCC_GetPCLK2Freq>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4413      	add	r3, r2
 800cbf6:	009a      	lsls	r2, r3, #2
 800cbf8:	441a      	add	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc04:	4a0b      	ldr	r2, [pc, #44]	; (800cc34 <UART_SetConfig+0x352>)
 800cc06:	fba2 2303 	umull	r2, r3, r2, r3
 800cc0a:	095b      	lsrs	r3, r3, #5
 800cc0c:	2264      	movs	r2, #100	; 0x64
 800cc0e:	fb02 f303 	mul.w	r3, r2, r3
 800cc12:	1af3      	subs	r3, r6, r3
 800cc14:	011b      	lsls	r3, r3, #4
 800cc16:	3332      	adds	r3, #50	; 0x32
 800cc18:	4a06      	ldr	r2, [pc, #24]	; (800cc34 <UART_SetConfig+0x352>)
 800cc1a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc1e:	095b      	lsrs	r3, r3, #5
 800cc20:	f003 030f 	and.w	r3, r3, #15
 800cc24:	442b      	add	r3, r5
 800cc26:	60a3      	str	r3, [r4, #8]
 800cc28:	e072      	b.n	800cd10 <UART_SetConfig+0x42e>
 800cc2a:	bf00      	nop
 800cc2c:	40011000 	.word	0x40011000
 800cc30:	40011400 	.word	0x40011400
 800cc34:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681c      	ldr	r4, [r3, #0]
 800cc3c:	f7fb ffc8 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800cc40:	4602      	mov	r2, r0
 800cc42:	4613      	mov	r3, r2
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	4413      	add	r3, r2
 800cc48:	009a      	lsls	r2, r3, #2
 800cc4a:	441a      	add	r2, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc56:	4a30      	ldr	r2, [pc, #192]	; (800cd18 <UART_SetConfig+0x436>)
 800cc58:	fba2 2303 	umull	r2, r3, r2, r3
 800cc5c:	095b      	lsrs	r3, r3, #5
 800cc5e:	011d      	lsls	r5, r3, #4
 800cc60:	f7fb ffb6 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800cc64:	4602      	mov	r2, r0
 800cc66:	4613      	mov	r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	4413      	add	r3, r2
 800cc6c:	009a      	lsls	r2, r3, #2
 800cc6e:	441a      	add	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc7a:	f7fb ffa9 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	4613      	mov	r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4413      	add	r3, r2
 800cc86:	009a      	lsls	r2, r3, #2
 800cc88:	441a      	add	r2, r3
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc94:	4a20      	ldr	r2, [pc, #128]	; (800cd18 <UART_SetConfig+0x436>)
 800cc96:	fba2 2303 	umull	r2, r3, r2, r3
 800cc9a:	095b      	lsrs	r3, r3, #5
 800cc9c:	2264      	movs	r2, #100	; 0x64
 800cc9e:	fb02 f303 	mul.w	r3, r2, r3
 800cca2:	1af3      	subs	r3, r6, r3
 800cca4:	011b      	lsls	r3, r3, #4
 800cca6:	3332      	adds	r3, #50	; 0x32
 800cca8:	4a1b      	ldr	r2, [pc, #108]	; (800cd18 <UART_SetConfig+0x436>)
 800ccaa:	fba2 2303 	umull	r2, r3, r2, r3
 800ccae:	095b      	lsrs	r3, r3, #5
 800ccb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccb4:	441d      	add	r5, r3
 800ccb6:	f7fb ff8b 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	4413      	add	r3, r2
 800ccc2:	009a      	lsls	r2, r3, #2
 800ccc4:	441a      	add	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	fbb2 f6f3 	udiv	r6, r2, r3
 800ccd0:	f7fb ff7e 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	4413      	add	r3, r2
 800ccdc:	009a      	lsls	r2, r3, #2
 800ccde:	441a      	add	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccea:	4a0b      	ldr	r2, [pc, #44]	; (800cd18 <UART_SetConfig+0x436>)
 800ccec:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf0:	095b      	lsrs	r3, r3, #5
 800ccf2:	2264      	movs	r2, #100	; 0x64
 800ccf4:	fb02 f303 	mul.w	r3, r2, r3
 800ccf8:	1af3      	subs	r3, r6, r3
 800ccfa:	011b      	lsls	r3, r3, #4
 800ccfc:	3332      	adds	r3, #50	; 0x32
 800ccfe:	4a06      	ldr	r2, [pc, #24]	; (800cd18 <UART_SetConfig+0x436>)
 800cd00:	fba2 2303 	umull	r2, r3, r2, r3
 800cd04:	095b      	lsrs	r3, r3, #5
 800cd06:	f003 030f 	and.w	r3, r3, #15
 800cd0a:	442b      	add	r3, r5
 800cd0c:	60a3      	str	r3, [r4, #8]
}
 800cd0e:	e7ff      	b.n	800cd10 <UART_SetConfig+0x42e>
 800cd10:	bf00      	nop
 800cd12:	3714      	adds	r7, #20
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd18:	51eb851f 	.word	0x51eb851f

0800cd1c <HAL_UART_RxCpltCallback>:
static void MX_USART3_UART_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
	if (huart==&huart8){
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	4a09      	ldr	r2, [pc, #36]	; (800cd4c <HAL_UART_RxCpltCallback+0x30>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d10a      	bne.n	800cd42 <HAL_UART_RxCpltCallback+0x26>
		hcRxChar[1]='\0';
 800cd2c:	4b08      	ldr	r3, [pc, #32]	; (800cd50 <HAL_UART_RxCpltCallback+0x34>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	705a      	strb	r2, [r3, #1]
			vypis(hcRxChar);
 800cd32:	4807      	ldr	r0, [pc, #28]	; (800cd50 <HAL_UART_RxCpltCallback+0x34>)
 800cd34:	f000 f842 	bl	800cdbc <vypis>
			HAL_UART_Receive_IT(&huart8, hcRxChar, 1);
 800cd38:	2201      	movs	r2, #1
 800cd3a:	4905      	ldr	r1, [pc, #20]	; (800cd50 <HAL_UART_RxCpltCallback+0x34>)
 800cd3c:	4803      	ldr	r0, [pc, #12]	; (800cd4c <HAL_UART_RxCpltCallback+0x30>)
 800cd3e:	f7fe fc4e 	bl	800b5de <HAL_UART_Receive_IT>
			Sentence[Sentence_length++]=hcRxChar[0];
		}
		HAL_UART_Receive_IT(&huart8, hcRxChar, 50);
	}
	*/
}
 800cd42:	bf00      	nop
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	2000036c 	.word	0x2000036c
 800cd50:	20000214 	.word	0x20000214

0800cd54 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
	vypis("Odoslane: formula");
 800cd5c:	4803      	ldr	r0, [pc, #12]	; (800cd6c <HAL_UART_TxCpltCallback+0x18>)
 800cd5e:	f000 f82d 	bl	800cdbc <vypis>
}
 800cd62:	bf00      	nop
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	0800e1e0 	.word	0x0800e1e0

0800cd70 <blink>:
 void UART8_IRQHandler(){
 vypis("asdasdasd");
 HAL_UART_IRQHandler(&huart1);
 }*/

void blink(int x) {
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < x; i++) {
 800cd78:	2300      	movs	r3, #0
 800cd7a:	60fb      	str	r3, [r7, #12]
 800cd7c:	e014      	b.n	800cda8 <blink+0x38>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cd84:	480c      	ldr	r0, [pc, #48]	; (800cdb8 <blink+0x48>)
 800cd86:	f7f6 f94b 	bl	8003020 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800cd8a:	2032      	movs	r0, #50	; 0x32
 800cd8c:	f7f3 fb12 	bl	80003b4 <HAL_Delay>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800cd90:	2200      	movs	r2, #0
 800cd92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cd96:	4808      	ldr	r0, [pc, #32]	; (800cdb8 <blink+0x48>)
 800cd98:	f7f6 f942 	bl	8003020 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800cd9c:	2032      	movs	r0, #50	; 0x32
 800cd9e:	f7f3 fb09 	bl	80003b4 <HAL_Delay>
	for (int i = 0; i < x; i++) {
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	3301      	adds	r3, #1
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	dbe6      	blt.n	800cd7e <blink+0xe>
	}
}
 800cdb0:	bf00      	nop
 800cdb2:	3710      	adds	r7, #16
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	40020c00 	.word	0x40020c00

0800cdbc <vypis>:

void vypis(char str[]) {
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]


	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f001 f81d 	bl	800de04 <strlen>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	2364      	movs	r3, #100	; 0x64
 800cdd0:	6879      	ldr	r1, [r7, #4]
 800cdd2:	4803      	ldr	r0, [pc, #12]	; (800cde0 <vypis+0x24>)
 800cdd4:	f7fe fa80 	bl	800b2d8 <HAL_UART_Transmit>

}
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	200005d4 	.word	0x200005d4

0800cde4 <main>:
/**
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void) {
 800cde4:	b580      	push	{r7, lr}
 800cde6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800cde8:	f7f3 fa00 	bl	80001ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800cdec:	f000 f850 	bl	800ce90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800cdf0:	f000 fb10 	bl	800d414 <MX_GPIO_Init>
	//MX_CAN1_Init();
	MX_I2C1_Init();
 800cdf4:	f000 f908 	bl	800d008 <MX_I2C1_Init>
	MX_I2C2_Init();
 800cdf8:	f000 f93a 	bl	800d070 <MX_I2C2_Init>
	MX_SPI2_Init();
 800cdfc:	f000 f96c 	bl	800d0d8 <MX_SPI2_Init>
	MX_SPI3_Init();
 800ce00:	f000 f9a6 	bl	800d150 <MX_SPI3_Init>
	MX_SPI4_Init();
 800ce04:	f000 f9e0 	bl	800d1c8 <MX_SPI4_Init>
	MX_UART7_Init();
 800ce08:	f000 fa1a 	bl	800d240 <MX_UART7_Init>
	MX_UART8_Init();
 800ce0c:	f000 fa46 	bl	800d29c <MX_UART8_Init>
	MX_USART1_UART_Init();
 800ce10:	f000 fa72 	bl	800d2f8 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800ce14:	f000 fa9e 	bl	800d354 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800ce18:	f000 facc 	bl	800d3b4 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	if (HAL_UART_Receive_IT(&huart8, hcRxChar, 1) != HAL_OK) {
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	4917      	ldr	r1, [pc, #92]	; (800ce7c <main+0x98>)
 800ce20:	4817      	ldr	r0, [pc, #92]	; (800ce80 <main+0x9c>)
 800ce22:	f7fe fbdc 	bl	800b5de <HAL_UART_Receive_IT>
	 *
	 * SPI2 - MICROBUS CLICK2 - PB12, PB13, PB14, PB15
	 * USART3
	 */

	HAL_GPIO_WritePin(HC_SET_GPIO_Port, HC_SET_Pin, GPIO_PIN_SET); // send mode
 800ce26:	2201      	movs	r2, #1
 800ce28:	2108      	movs	r1, #8
 800ce2a:	4816      	ldr	r0, [pc, #88]	; (800ce84 <main+0xa0>)
 800ce2c:	f7f6 f8f8 	bl	8003020 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800ce30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ce34:	f7f3 fabe 	bl	80003b4 <HAL_Delay>
	HAL_GPIO_WritePin(HC_SET_GPIO_Port, HC_SET_Pin, GPIO_PIN_RESET); // config mode
 800ce38:	2200      	movs	r2, #0
 800ce3a:	2108      	movs	r1, #8
 800ce3c:	4811      	ldr	r0, [pc, #68]	; (800ce84 <main+0xa0>)
 800ce3e:	f7f6 f8ef 	bl	8003020 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800ce42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ce46:	f7f3 fab5 	bl	80003b4 <HAL_Delay>
	HAL_GPIO_WritePin(HC_SET_GPIO_Port, HC_SET_Pin, GPIO_PIN_SET); // send mode
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	2108      	movs	r1, #8
 800ce4e:	480d      	ldr	r0, [pc, #52]	; (800ce84 <main+0xa0>)
 800ce50:	f7f6 f8e6 	bl	8003020 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800ce54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ce58:	f7f3 faac 	bl	80003b4 <HAL_Delay>
	while (1) {

		//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
		//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800ce5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ce60:	4809      	ldr	r0, [pc, #36]	; (800ce88 <main+0xa4>)
 800ce62:	f7f6 f8f6 	bl	8003052 <HAL_GPIO_TogglePin>


		HAL_UART_Transmit_IT(&huart8, "zakladna\n", 9);
 800ce66:	2209      	movs	r2, #9
 800ce68:	4908      	ldr	r1, [pc, #32]	; (800ce8c <main+0xa8>)
 800ce6a:	4805      	ldr	r0, [pc, #20]	; (800ce80 <main+0x9c>)
 800ce6c:	f7fe fb72 	bl	800b554 <HAL_UART_Transmit_IT>



		//HAL_UART_Transmit(&huart8, (uint8_t *) txRFBuffer, sizeof(txRFBuffer),20);	// HC-12 send
		//HAL_UART_Transmit(&huart8, (uint8_t *) txRFBuffer, sizeof(txRFBuffer), 20);	// HC-12 send
		HAL_Delay(1000);
 800ce70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ce74:	f7f3 fa9e 	bl	80003b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800ce78:	e7f0      	b.n	800ce5c <main+0x78>
 800ce7a:	bf00      	nop
 800ce7c:	20000214 	.word	0x20000214
 800ce80:	2000036c 	.word	0x2000036c
 800ce84:	40020800 	.word	0x40020800
 800ce88:	40020c00 	.word	0x40020c00
 800ce8c:	0800e1f4 	.word	0x0800e1f4

0800ce90 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b094      	sub	sp, #80	; 0x50
 800ce94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 800ce96:	2300      	movs	r3, #0
 800ce98:	60bb      	str	r3, [r7, #8]
 800ce9a:	4a3a      	ldr	r2, [pc, #232]	; (800cf84 <SystemClock_Config+0xf4>)
 800ce9c:	4b39      	ldr	r3, [pc, #228]	; (800cf84 <SystemClock_Config+0xf4>)
 800ce9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cea4:	6413      	str	r3, [r2, #64]	; 0x40
 800cea6:	4b37      	ldr	r3, [pc, #220]	; (800cf84 <SystemClock_Config+0xf4>)
 800cea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ceae:	60bb      	str	r3, [r7, #8]
 800ceb0:	68bb      	ldr	r3, [r7, #8]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	607b      	str	r3, [r7, #4]
 800ceb6:	4a34      	ldr	r2, [pc, #208]	; (800cf88 <SystemClock_Config+0xf8>)
 800ceb8:	4b33      	ldr	r3, [pc, #204]	; (800cf88 <SystemClock_Config+0xf8>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cec0:	6013      	str	r3, [r2, #0]
 800cec2:	4b31      	ldr	r3, [pc, #196]	; (800cf88 <SystemClock_Config+0xf8>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ceca:	607b      	str	r3, [r7, #4]
 800cecc:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800cece:	2302      	movs	r3, #2
 800ced0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ced2:	2301      	movs	r3, #1
 800ced4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800ced6:	2310      	movs	r3, #16
 800ced8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ceda:	2302      	movs	r3, #2
 800cedc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800cede:	2300      	movs	r3, #0
 800cee0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800cee2:	2308      	movs	r3, #8
 800cee4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 800cee6:	23b4      	movs	r3, #180	; 0xb4
 800cee8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ceea:	2302      	movs	r3, #2
 800ceec:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800ceee:	2304      	movs	r3, #4
 800cef0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800cef2:	f107 0320 	add.w	r3, r7, #32
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fb fa04 	bl	8008304 <HAL_RCC_OscConfig>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d004      	beq.n	800cf0c <SystemClock_Config+0x7c>
		_Error_Handler(__FILE__, __LINE__);
 800cf02:	f44f 7193 	mov.w	r1, #294	; 0x126
 800cf06:	4821      	ldr	r0, [pc, #132]	; (800cf8c <SystemClock_Config+0xfc>)
 800cf08:	f000 fb36 	bl	800d578 <_Error_Handler>
	}

	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800cf0c:	f7fb f900 	bl	8008110 <HAL_PWREx_EnableOverDrive>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d004      	beq.n	800cf20 <SystemClock_Config+0x90>
		_Error_Handler(__FILE__, __LINE__);
 800cf16:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800cf1a:	481c      	ldr	r0, [pc, #112]	; (800cf8c <SystemClock_Config+0xfc>)
 800cf1c:	f000 fb2c 	bl	800d578 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800cf20:	230f      	movs	r3, #15
 800cf22:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cf24:	2302      	movs	r3, #2
 800cf26:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800cf2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800cf30:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800cf32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf36:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800cf38:	f107 030c 	add.w	r3, r7, #12
 800cf3c:	2105      	movs	r1, #5
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fb fc22 	bl	8008788 <HAL_RCC_ClockConfig>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d004      	beq.n	800cf54 <SystemClock_Config+0xc4>
		_Error_Handler(__FILE__, __LINE__);
 800cf4a:	f240 1139 	movw	r1, #313	; 0x139
 800cf4e:	480f      	ldr	r0, [pc, #60]	; (800cf8c <SystemClock_Config+0xfc>)
 800cf50:	f000 fb12 	bl	800d578 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800cf54:	f7fb fe30 	bl	8008bb8 <HAL_RCC_GetHCLKFreq>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	4b0d      	ldr	r3, [pc, #52]	; (800cf90 <SystemClock_Config+0x100>)
 800cf5c:	fba3 2302 	umull	r2, r3, r3, r2
 800cf60:	099b      	lsrs	r3, r3, #6
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7f4 fe43 	bl	8001bee <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800cf68:	2004      	movs	r0, #4
 800cf6a:	f7f4 ff1c 	bl	8001da6 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800cf6e:	2200      	movs	r2, #0
 800cf70:	2100      	movs	r1, #0
 800cf72:	f04f 30ff 	mov.w	r0, #4294967295
 800cf76:	f7f4 fdfc 	bl	8001b72 <HAL_NVIC_SetPriority>
}
 800cf7a:	bf00      	nop
 800cf7c:	3750      	adds	r7, #80	; 0x50
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	40023800 	.word	0x40023800
 800cf88:	40007000 	.word	0x40007000
 800cf8c:	0800e200 	.word	0x0800e200
 800cf90:	10624dd3 	.word	0x10624dd3

0800cf94 <MX_CAN1_Init>:

/* CAN1 init function */
static void MX_CAN1_Init(void) {
 800cf94:	b580      	push	{r7, lr}
 800cf96:	af00      	add	r7, sp, #0

	hcan1.Instance = CAN1;
 800cf98:	4b18      	ldr	r3, [pc, #96]	; (800cffc <MX_CAN1_Init+0x68>)
 800cf9a:	4a19      	ldr	r2, [pc, #100]	; (800d000 <MX_CAN1_Init+0x6c>)
 800cf9c:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 800cf9e:	4b17      	ldr	r3, [pc, #92]	; (800cffc <MX_CAN1_Init+0x68>)
 800cfa0:	2210      	movs	r2, #16
 800cfa2:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800cfa4:	4b15      	ldr	r3, [pc, #84]	; (800cffc <MX_CAN1_Init+0x68>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800cfaa:	4b14      	ldr	r3, [pc, #80]	; (800cffc <MX_CAN1_Init+0x68>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800cfb0:	4b12      	ldr	r3, [pc, #72]	; (800cffc <MX_CAN1_Init+0x68>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800cfb6:	4b11      	ldr	r3, [pc, #68]	; (800cffc <MX_CAN1_Init+0x68>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800cfbc:	4b0f      	ldr	r3, [pc, #60]	; (800cffc <MX_CAN1_Init+0x68>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800cfc2:	4b0e      	ldr	r3, [pc, #56]	; (800cffc <MX_CAN1_Init+0x68>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800cfc8:	4b0c      	ldr	r3, [pc, #48]	; (800cffc <MX_CAN1_Init+0x68>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800cfce:	4b0b      	ldr	r3, [pc, #44]	; (800cffc <MX_CAN1_Init+0x68>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800cfd4:	4b09      	ldr	r3, [pc, #36]	; (800cffc <MX_CAN1_Init+0x68>)
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800cfda:	4b08      	ldr	r3, [pc, #32]	; (800cffc <MX_CAN1_Init+0x68>)
 800cfdc:	2200      	movs	r2, #0
 800cfde:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800cfe0:	4806      	ldr	r0, [pc, #24]	; (800cffc <MX_CAN1_Init+0x68>)
 800cfe2:	f7f3 fafb 	bl	80005dc <HAL_CAN_Init>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d004      	beq.n	800cff6 <MX_CAN1_Init+0x62>
		_Error_Handler(__FILE__, __LINE__);
 800cfec:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cff0:	4804      	ldr	r0, [pc, #16]	; (800d004 <MX_CAN1_Init+0x70>)
 800cff2:	f000 fac1 	bl	800d578 <_Error_Handler>
	}

}
 800cff6:	bf00      	nop
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	20000614 	.word	0x20000614
 800d000:	40006400 	.word	0x40006400
 800d004:	0800e200 	.word	0x0800e200

0800d008 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void) {
 800d008:	b580      	push	{r7, lr}
 800d00a:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 800d00c:	4b14      	ldr	r3, [pc, #80]	; (800d060 <MX_I2C1_Init+0x58>)
 800d00e:	4a15      	ldr	r2, [pc, #84]	; (800d064 <MX_I2C1_Init+0x5c>)
 800d010:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800d012:	4b13      	ldr	r3, [pc, #76]	; (800d060 <MX_I2C1_Init+0x58>)
 800d014:	4a14      	ldr	r2, [pc, #80]	; (800d068 <MX_I2C1_Init+0x60>)
 800d016:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d018:	4b11      	ldr	r3, [pc, #68]	; (800d060 <MX_I2C1_Init+0x58>)
 800d01a:	2200      	movs	r2, #0
 800d01c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800d01e:	4b10      	ldr	r3, [pc, #64]	; (800d060 <MX_I2C1_Init+0x58>)
 800d020:	2200      	movs	r2, #0
 800d022:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d024:	4b0e      	ldr	r3, [pc, #56]	; (800d060 <MX_I2C1_Init+0x58>)
 800d026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d02a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d02c:	4b0c      	ldr	r3, [pc, #48]	; (800d060 <MX_I2C1_Init+0x58>)
 800d02e:	2200      	movs	r2, #0
 800d030:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800d032:	4b0b      	ldr	r3, [pc, #44]	; (800d060 <MX_I2C1_Init+0x58>)
 800d034:	2200      	movs	r2, #0
 800d036:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d038:	4b09      	ldr	r3, [pc, #36]	; (800d060 <MX_I2C1_Init+0x58>)
 800d03a:	2200      	movs	r2, #0
 800d03c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d03e:	4b08      	ldr	r3, [pc, #32]	; (800d060 <MX_I2C1_Init+0x58>)
 800d040:	2200      	movs	r2, #0
 800d042:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800d044:	4806      	ldr	r0, [pc, #24]	; (800d060 <MX_I2C1_Init+0x58>)
 800d046:	f7f6 f863 	bl	8003110 <HAL_I2C_Init>
 800d04a:	4603      	mov	r3, r0
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d004      	beq.n	800d05a <MX_I2C1_Init+0x52>
		_Error_Handler(__FILE__, __LINE__);
 800d050:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800d054:	4805      	ldr	r0, [pc, #20]	; (800d06c <MX_I2C1_Init+0x64>)
 800d056:	f000 fa8f 	bl	800d578 <_Error_Handler>
	}

}
 800d05a:	bf00      	nop
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	2000016c 	.word	0x2000016c
 800d064:	40005400 	.word	0x40005400
 800d068:	000186a0 	.word	0x000186a0
 800d06c:	0800e200 	.word	0x0800e200

0800d070 <MX_I2C2_Init>:

/* I2C2 init function */
static void MX_I2C2_Init(void) {
 800d070:	b580      	push	{r7, lr}
 800d072:	af00      	add	r7, sp, #0

	hi2c2.Instance = I2C2;
 800d074:	4b14      	ldr	r3, [pc, #80]	; (800d0c8 <MX_I2C2_Init+0x58>)
 800d076:	4a15      	ldr	r2, [pc, #84]	; (800d0cc <MX_I2C2_Init+0x5c>)
 800d078:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 800d07a:	4b13      	ldr	r3, [pc, #76]	; (800d0c8 <MX_I2C2_Init+0x58>)
 800d07c:	4a14      	ldr	r2, [pc, #80]	; (800d0d0 <MX_I2C2_Init+0x60>)
 800d07e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d080:	4b11      	ldr	r3, [pc, #68]	; (800d0c8 <MX_I2C2_Init+0x58>)
 800d082:	2200      	movs	r2, #0
 800d084:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800d086:	4b10      	ldr	r3, [pc, #64]	; (800d0c8 <MX_I2C2_Init+0x58>)
 800d088:	2200      	movs	r2, #0
 800d08a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d08c:	4b0e      	ldr	r3, [pc, #56]	; (800d0c8 <MX_I2C2_Init+0x58>)
 800d08e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d092:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d094:	4b0c      	ldr	r3, [pc, #48]	; (800d0c8 <MX_I2C2_Init+0x58>)
 800d096:	2200      	movs	r2, #0
 800d098:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800d09a:	4b0b      	ldr	r3, [pc, #44]	; (800d0c8 <MX_I2C2_Init+0x58>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d0a0:	4b09      	ldr	r3, [pc, #36]	; (800d0c8 <MX_I2C2_Init+0x58>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d0a6:	4b08      	ldr	r3, [pc, #32]	; (800d0c8 <MX_I2C2_Init+0x58>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800d0ac:	4806      	ldr	r0, [pc, #24]	; (800d0c8 <MX_I2C2_Init+0x58>)
 800d0ae:	f7f6 f82f 	bl	8003110 <HAL_I2C_Init>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d004      	beq.n	800d0c2 <MX_I2C2_Init+0x52>
		_Error_Handler(__FILE__, __LINE__);
 800d0b8:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800d0bc:	4805      	ldr	r0, [pc, #20]	; (800d0d4 <MX_I2C2_Init+0x64>)
 800d0be:	f000 fa5b 	bl	800d578 <_Error_Handler>
	}

}
 800d0c2:	bf00      	nop
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	200001c0 	.word	0x200001c0
 800d0cc:	40005800 	.word	0x40005800
 800d0d0:	000186a0 	.word	0x000186a0
 800d0d4:	0800e200 	.word	0x0800e200

0800d0d8 <MX_SPI2_Init>:

/* SPI2 init function */
static void MX_SPI2_Init(void) {
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	af00      	add	r7, sp, #0

	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800d0dc:	4b19      	ldr	r3, [pc, #100]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d0de:	4a1a      	ldr	r2, [pc, #104]	; (800d148 <MX_SPI2_Init+0x70>)
 800d0e0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800d0e2:	4b18      	ldr	r3, [pc, #96]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d0e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d0e8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800d0ea:	4b16      	ldr	r3, [pc, #88]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800d0f0:	4b14      	ldr	r3, [pc, #80]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d0f6:	4b13      	ldr	r3, [pc, #76]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d0fc:	4b11      	ldr	r3, [pc, #68]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d0fe:	2200      	movs	r2, #0
 800d100:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800d102:	4b10      	ldr	r3, [pc, #64]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d104:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d108:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d10a:	4b0e      	ldr	r3, [pc, #56]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d110:	4b0c      	ldr	r3, [pc, #48]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d112:	2200      	movs	r2, #0
 800d114:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d116:	4b0b      	ldr	r3, [pc, #44]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d118:	2200      	movs	r2, #0
 800d11a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d11c:	4b09      	ldr	r3, [pc, #36]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d11e:	2200      	movs	r2, #0
 800d120:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800d122:	4b08      	ldr	r3, [pc, #32]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d124:	220a      	movs	r2, #10
 800d126:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800d128:	4806      	ldr	r0, [pc, #24]	; (800d144 <MX_SPI2_Init+0x6c>)
 800d12a:	f7fb fe5b 	bl	8008de4 <HAL_SPI_Init>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d004      	beq.n	800d13e <MX_SPI2_Init+0x66>
		_Error_Handler(__FILE__, __LINE__);
 800d134:	f44f 71c9 	mov.w	r1, #402	; 0x192
 800d138:	4804      	ldr	r0, [pc, #16]	; (800d14c <MX_SPI2_Init+0x74>)
 800d13a:	f000 fa1d 	bl	800d578 <_Error_Handler>
	}

}
 800d13e:	bf00      	nop
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	2000002c 	.word	0x2000002c
 800d148:	40003800 	.word	0x40003800
 800d14c:	0800e200 	.word	0x0800e200

0800d150 <MX_SPI3_Init>:

/* SPI3 init function */
static void MX_SPI3_Init(void) {
 800d150:	b580      	push	{r7, lr}
 800d152:	af00      	add	r7, sp, #0

	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800d154:	4b19      	ldr	r3, [pc, #100]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d156:	4a1a      	ldr	r2, [pc, #104]	; (800d1c0 <MX_SPI3_Init+0x70>)
 800d158:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800d15a:	4b18      	ldr	r3, [pc, #96]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d15c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d160:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800d162:	4b16      	ldr	r3, [pc, #88]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d164:	2200      	movs	r2, #0
 800d166:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800d168:	4b14      	ldr	r3, [pc, #80]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d16e:	4b13      	ldr	r3, [pc, #76]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d170:	2200      	movs	r2, #0
 800d172:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d174:	4b11      	ldr	r3, [pc, #68]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d176:	2200      	movs	r2, #0
 800d178:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800d17a:	4b10      	ldr	r3, [pc, #64]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d17c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d180:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d182:	4b0e      	ldr	r3, [pc, #56]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d184:	2200      	movs	r2, #0
 800d186:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d188:	4b0c      	ldr	r3, [pc, #48]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800d18e:	4b0b      	ldr	r3, [pc, #44]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d190:	2200      	movs	r2, #0
 800d192:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d194:	4b09      	ldr	r3, [pc, #36]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d196:	2200      	movs	r2, #0
 800d198:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 800d19a:	4b08      	ldr	r3, [pc, #32]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d19c:	220a      	movs	r2, #10
 800d19e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 800d1a0:	4806      	ldr	r0, [pc, #24]	; (800d1bc <MX_SPI3_Init+0x6c>)
 800d1a2:	f7fb fe1f 	bl	8008de4 <HAL_SPI_Init>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d004      	beq.n	800d1b6 <MX_SPI3_Init+0x66>
		_Error_Handler(__FILE__, __LINE__);
 800d1ac:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800d1b0:	4804      	ldr	r0, [pc, #16]	; (800d1c4 <MX_SPI3_Init+0x74>)
 800d1b2:	f000 f9e1 	bl	800d578 <_Error_Handler>
	}

}
 800d1b6:	bf00      	nop
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	2000027c 	.word	0x2000027c
 800d1c0:	40003c00 	.word	0x40003c00
 800d1c4:	0800e200 	.word	0x0800e200

0800d1c8 <MX_SPI4_Init>:

/* SPI4 init function */
static void MX_SPI4_Init(void) {
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	af00      	add	r7, sp, #0

	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 800d1cc:	4b19      	ldr	r3, [pc, #100]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d1ce:	4a1a      	ldr	r2, [pc, #104]	; (800d238 <MX_SPI4_Init+0x70>)
 800d1d0:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800d1d2:	4b18      	ldr	r3, [pc, #96]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d1d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d1d8:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800d1da:	4b16      	ldr	r3, [pc, #88]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d1dc:	2200      	movs	r2, #0
 800d1de:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800d1e0:	4b14      	ldr	r3, [pc, #80]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d1e6:	4b13      	ldr	r3, [pc, #76]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d1ec:	4b11      	ldr	r3, [pc, #68]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800d1f2:	4b10      	ldr	r3, [pc, #64]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d1f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d1f8:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d1fa:	4b0e      	ldr	r3, [pc, #56]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d200:	4b0c      	ldr	r3, [pc, #48]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d202:	2200      	movs	r2, #0
 800d204:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800d206:	4b0b      	ldr	r3, [pc, #44]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d208:	2200      	movs	r2, #0
 800d20a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d20c:	4b09      	ldr	r3, [pc, #36]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d20e:	2200      	movs	r2, #0
 800d210:	629a      	str	r2, [r3, #40]	; 0x28
	hspi4.Init.CRCPolynomial = 10;
 800d212:	4b08      	ldr	r3, [pc, #32]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d214:	220a      	movs	r2, #10
 800d216:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 800d218:	4806      	ldr	r0, [pc, #24]	; (800d234 <MX_SPI4_Init+0x6c>)
 800d21a:	f7fb fde3 	bl	8008de4 <HAL_SPI_Init>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d004      	beq.n	800d22e <MX_SPI4_Init+0x66>
		_Error_Handler(__FILE__, __LINE__);
 800d224:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800d228:	4804      	ldr	r0, [pc, #16]	; (800d23c <MX_SPI4_Init+0x74>)
 800d22a:	f000 f9a5 	bl	800d578 <_Error_Handler>
	}

}
 800d22e:	bf00      	nop
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	20000314 	.word	0x20000314
 800d238:	40013400 	.word	0x40013400
 800d23c:	0800e200 	.word	0x0800e200

0800d240 <MX_UART7_Init>:

/* UART7 init function */
static void MX_UART7_Init(void) {
 800d240:	b580      	push	{r7, lr}
 800d242:	af00      	add	r7, sp, #0

	huart7.Instance = UART7;
 800d244:	4b12      	ldr	r3, [pc, #72]	; (800d290 <MX_UART7_Init+0x50>)
 800d246:	4a13      	ldr	r2, [pc, #76]	; (800d294 <MX_UART7_Init+0x54>)
 800d248:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 800d24a:	4b11      	ldr	r3, [pc, #68]	; (800d290 <MX_UART7_Init+0x50>)
 800d24c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d250:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800d252:	4b0f      	ldr	r3, [pc, #60]	; (800d290 <MX_UART7_Init+0x50>)
 800d254:	2200      	movs	r2, #0
 800d256:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 800d258:	4b0d      	ldr	r3, [pc, #52]	; (800d290 <MX_UART7_Init+0x50>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 800d25e:	4b0c      	ldr	r3, [pc, #48]	; (800d290 <MX_UART7_Init+0x50>)
 800d260:	2200      	movs	r2, #0
 800d262:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 800d264:	4b0a      	ldr	r3, [pc, #40]	; (800d290 <MX_UART7_Init+0x50>)
 800d266:	220c      	movs	r2, #12
 800d268:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d26a:	4b09      	ldr	r3, [pc, #36]	; (800d290 <MX_UART7_Init+0x50>)
 800d26c:	2200      	movs	r2, #0
 800d26e:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800d270:	4b07      	ldr	r3, [pc, #28]	; (800d290 <MX_UART7_Init+0x50>)
 800d272:	2200      	movs	r2, #0
 800d274:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 800d276:	4806      	ldr	r0, [pc, #24]	; (800d290 <MX_UART7_Init+0x50>)
 800d278:	f7fd fe7e 	bl	800af78 <HAL_UART_Init>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d004      	beq.n	800d28c <MX_UART7_Init+0x4c>
		_Error_Handler(__FILE__, __LINE__);
 800d282:	f240 11cf 	movw	r1, #463	; 0x1cf
 800d286:	4804      	ldr	r0, [pc, #16]	; (800d298 <MX_UART7_Init+0x58>)
 800d288:	f000 f976 	bl	800d578 <_Error_Handler>
	}

}
 800d28c:	bf00      	nop
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	200000b8 	.word	0x200000b8
 800d294:	40007800 	.word	0x40007800
 800d298:	0800e200 	.word	0x0800e200

0800d29c <MX_UART8_Init>:

/* UART8 init function */
static void MX_UART8_Init(void) {
 800d29c:	b580      	push	{r7, lr}
 800d29e:	af00      	add	r7, sp, #0

	huart8.Instance = UART8;
 800d2a0:	4b12      	ldr	r3, [pc, #72]	; (800d2ec <MX_UART8_Init+0x50>)
 800d2a2:	4a13      	ldr	r2, [pc, #76]	; (800d2f0 <MX_UART8_Init+0x54>)
 800d2a4:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 9600;
 800d2a6:	4b11      	ldr	r3, [pc, #68]	; (800d2ec <MX_UART8_Init+0x50>)
 800d2a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800d2ac:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800d2ae:	4b0f      	ldr	r3, [pc, #60]	; (800d2ec <MX_UART8_Init+0x50>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 800d2b4:	4b0d      	ldr	r3, [pc, #52]	; (800d2ec <MX_UART8_Init+0x50>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 800d2ba:	4b0c      	ldr	r3, [pc, #48]	; (800d2ec <MX_UART8_Init+0x50>)
 800d2bc:	2200      	movs	r2, #0
 800d2be:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 800d2c0:	4b0a      	ldr	r3, [pc, #40]	; (800d2ec <MX_UART8_Init+0x50>)
 800d2c2:	220c      	movs	r2, #12
 800d2c4:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d2c6:	4b09      	ldr	r3, [pc, #36]	; (800d2ec <MX_UART8_Init+0x50>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800d2cc:	4b07      	ldr	r3, [pc, #28]	; (800d2ec <MX_UART8_Init+0x50>)
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 800d2d2:	4806      	ldr	r0, [pc, #24]	; (800d2ec <MX_UART8_Init+0x50>)
 800d2d4:	f7fd fe50 	bl	800af78 <HAL_UART_Init>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d004      	beq.n	800d2e8 <MX_UART8_Init+0x4c>
		_Error_Handler(__FILE__, __LINE__);
 800d2de:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800d2e2:	4804      	ldr	r0, [pc, #16]	; (800d2f4 <MX_UART8_Init+0x58>)
 800d2e4:	f000 f948 	bl	800d578 <_Error_Handler>
	}

}
 800d2e8:	bf00      	nop
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	2000036c 	.word	0x2000036c
 800d2f0:	40007c00 	.word	0x40007c00
 800d2f4:	0800e200 	.word	0x0800e200

0800d2f8 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void) {
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 800d2fc:	4b12      	ldr	r3, [pc, #72]	; (800d348 <MX_USART1_UART_Init+0x50>)
 800d2fe:	4a13      	ldr	r2, [pc, #76]	; (800d34c <MX_USART1_UART_Init+0x54>)
 800d300:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800d302:	4b11      	ldr	r3, [pc, #68]	; (800d348 <MX_USART1_UART_Init+0x50>)
 800d304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d308:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d30a:	4b0f      	ldr	r3, [pc, #60]	; (800d348 <MX_USART1_UART_Init+0x50>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800d310:	4b0d      	ldr	r3, [pc, #52]	; (800d348 <MX_USART1_UART_Init+0x50>)
 800d312:	2200      	movs	r2, #0
 800d314:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800d316:	4b0c      	ldr	r3, [pc, #48]	; (800d348 <MX_USART1_UART_Init+0x50>)
 800d318:	2200      	movs	r2, #0
 800d31a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800d31c:	4b0a      	ldr	r3, [pc, #40]	; (800d348 <MX_USART1_UART_Init+0x50>)
 800d31e:	220c      	movs	r2, #12
 800d320:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d322:	4b09      	ldr	r3, [pc, #36]	; (800d348 <MX_USART1_UART_Init+0x50>)
 800d324:	2200      	movs	r2, #0
 800d326:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d328:	4b07      	ldr	r3, [pc, #28]	; (800d348 <MX_USART1_UART_Init+0x50>)
 800d32a:	2200      	movs	r2, #0
 800d32c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800d32e:	4806      	ldr	r0, [pc, #24]	; (800d348 <MX_USART1_UART_Init+0x50>)
 800d330:	f7fd fe22 	bl	800af78 <HAL_UART_Init>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d004      	beq.n	800d344 <MX_USART1_UART_Init+0x4c>
		_Error_Handler(__FILE__, __LINE__);
 800d33a:	f240 11f1 	movw	r1, #497	; 0x1f1
 800d33e:	4804      	ldr	r0, [pc, #16]	; (800d350 <MX_USART1_UART_Init+0x58>)
 800d340:	f000 f91a 	bl	800d578 <_Error_Handler>
	}

}
 800d344:	bf00      	nop
 800d346:	bd80      	pop	{r7, pc}
 800d348:	200002d4 	.word	0x200002d4
 800d34c:	40011000 	.word	0x40011000
 800d350:	0800e200 	.word	0x0800e200

0800d354 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void) {
 800d354:	b580      	push	{r7, lr}
 800d356:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 800d358:	4b13      	ldr	r3, [pc, #76]	; (800d3a8 <MX_USART2_UART_Init+0x54>)
 800d35a:	4a14      	ldr	r2, [pc, #80]	; (800d3ac <MX_USART2_UART_Init+0x58>)
 800d35c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800d35e:	4b12      	ldr	r3, [pc, #72]	; (800d3a8 <MX_USART2_UART_Init+0x54>)
 800d360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d364:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d366:	4b10      	ldr	r3, [pc, #64]	; (800d3a8 <MX_USART2_UART_Init+0x54>)
 800d368:	2200      	movs	r2, #0
 800d36a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800d36c:	4b0e      	ldr	r3, [pc, #56]	; (800d3a8 <MX_USART2_UART_Init+0x54>)
 800d36e:	2200      	movs	r2, #0
 800d370:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800d372:	4b0d      	ldr	r3, [pc, #52]	; (800d3a8 <MX_USART2_UART_Init+0x54>)
 800d374:	2200      	movs	r2, #0
 800d376:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800d378:	4b0b      	ldr	r3, [pc, #44]	; (800d3a8 <MX_USART2_UART_Init+0x54>)
 800d37a:	220c      	movs	r2, #12
 800d37c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800d37e:	4b0a      	ldr	r3, [pc, #40]	; (800d3a8 <MX_USART2_UART_Init+0x54>)
 800d380:	f44f 7240 	mov.w	r2, #768	; 0x300
 800d384:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d386:	4b08      	ldr	r3, [pc, #32]	; (800d3a8 <MX_USART2_UART_Init+0x54>)
 800d388:	2200      	movs	r2, #0
 800d38a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800d38c:	4806      	ldr	r0, [pc, #24]	; (800d3a8 <MX_USART2_UART_Init+0x54>)
 800d38e:	f7fd fdf3 	bl	800af78 <HAL_UART_Init>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d004      	beq.n	800d3a2 <MX_USART2_UART_Init+0x4e>
		_Error_Handler(__FILE__, __LINE__);
 800d398:	f240 2102 	movw	r1, #514	; 0x202
 800d39c:	4804      	ldr	r0, [pc, #16]	; (800d3b0 <MX_USART2_UART_Init+0x5c>)
 800d39e:	f000 f8eb 	bl	800d578 <_Error_Handler>
	}

}
 800d3a2:	bf00      	nop
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	200005d4 	.word	0x200005d4
 800d3ac:	40004400 	.word	0x40004400
 800d3b0:	0800e200 	.word	0x0800e200

0800d3b4 <MX_USART3_UART_Init>:

/* USART3 init function */
static void MX_USART3_UART_Init(void) {
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 800d3b8:	4b13      	ldr	r3, [pc, #76]	; (800d408 <MX_USART3_UART_Init+0x54>)
 800d3ba:	4a14      	ldr	r2, [pc, #80]	; (800d40c <MX_USART3_UART_Init+0x58>)
 800d3bc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800d3be:	4b12      	ldr	r3, [pc, #72]	; (800d408 <MX_USART3_UART_Init+0x54>)
 800d3c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d3c4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d3c6:	4b10      	ldr	r3, [pc, #64]	; (800d408 <MX_USART3_UART_Init+0x54>)
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800d3cc:	4b0e      	ldr	r3, [pc, #56]	; (800d408 <MX_USART3_UART_Init+0x54>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800d3d2:	4b0d      	ldr	r3, [pc, #52]	; (800d408 <MX_USART3_UART_Init+0x54>)
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800d3d8:	4b0b      	ldr	r3, [pc, #44]	; (800d408 <MX_USART3_UART_Init+0x54>)
 800d3da:	220c      	movs	r2, #12
 800d3dc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800d3de:	4b0a      	ldr	r3, [pc, #40]	; (800d408 <MX_USART3_UART_Init+0x54>)
 800d3e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 800d3e4:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d3e6:	4b08      	ldr	r3, [pc, #32]	; (800d408 <MX_USART3_UART_Init+0x54>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800d3ec:	4806      	ldr	r0, [pc, #24]	; (800d408 <MX_USART3_UART_Init+0x54>)
 800d3ee:	f7fd fdc3 	bl	800af78 <HAL_UART_Init>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d004      	beq.n	800d402 <MX_USART3_UART_Init+0x4e>
		_Error_Handler(__FILE__, __LINE__);
 800d3f8:	f240 2113 	movw	r1, #531	; 0x213
 800d3fc:	4804      	ldr	r0, [pc, #16]	; (800d410 <MX_USART3_UART_Init+0x5c>)
 800d3fe:	f000 f8bb 	bl	800d578 <_Error_Handler>
	}

}
 800d402:	bf00      	nop
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	200000f8 	.word	0x200000f8
 800d40c:	40004800 	.word	0x40004800
 800d410:	0800e200 	.word	0x0800e200

0800d414 <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
static void MX_GPIO_Init(void) {
 800d414:	b580      	push	{r7, lr}
 800d416:	b08a      	sub	sp, #40	; 0x28
 800d418:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800d41a:	2300      	movs	r3, #0
 800d41c:	613b      	str	r3, [r7, #16]
 800d41e:	4a51      	ldr	r2, [pc, #324]	; (800d564 <MX_GPIO_Init+0x150>)
 800d420:	4b50      	ldr	r3, [pc, #320]	; (800d564 <MX_GPIO_Init+0x150>)
 800d422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d424:	f043 0310 	orr.w	r3, r3, #16
 800d428:	6313      	str	r3, [r2, #48]	; 0x30
 800d42a:	4b4e      	ldr	r3, [pc, #312]	; (800d564 <MX_GPIO_Init+0x150>)
 800d42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d42e:	f003 0310 	and.w	r3, r3, #16
 800d432:	613b      	str	r3, [r7, #16]
 800d434:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800d436:	2300      	movs	r3, #0
 800d438:	60fb      	str	r3, [r7, #12]
 800d43a:	4a4a      	ldr	r2, [pc, #296]	; (800d564 <MX_GPIO_Init+0x150>)
 800d43c:	4b49      	ldr	r3, [pc, #292]	; (800d564 <MX_GPIO_Init+0x150>)
 800d43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d440:	f043 0304 	orr.w	r3, r3, #4
 800d444:	6313      	str	r3, [r2, #48]	; 0x30
 800d446:	4b47      	ldr	r3, [pc, #284]	; (800d564 <MX_GPIO_Init+0x150>)
 800d448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d44a:	f003 0304 	and.w	r3, r3, #4
 800d44e:	60fb      	str	r3, [r7, #12]
 800d450:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800d452:	2300      	movs	r3, #0
 800d454:	60bb      	str	r3, [r7, #8]
 800d456:	4a43      	ldr	r2, [pc, #268]	; (800d564 <MX_GPIO_Init+0x150>)
 800d458:	4b42      	ldr	r3, [pc, #264]	; (800d564 <MX_GPIO_Init+0x150>)
 800d45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d45c:	f043 0301 	orr.w	r3, r3, #1
 800d460:	6313      	str	r3, [r2, #48]	; 0x30
 800d462:	4b40      	ldr	r3, [pc, #256]	; (800d564 <MX_GPIO_Init+0x150>)
 800d464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d466:	f003 0301 	and.w	r3, r3, #1
 800d46a:	60bb      	str	r3, [r7, #8]
 800d46c:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800d46e:	2300      	movs	r3, #0
 800d470:	607b      	str	r3, [r7, #4]
 800d472:	4a3c      	ldr	r2, [pc, #240]	; (800d564 <MX_GPIO_Init+0x150>)
 800d474:	4b3b      	ldr	r3, [pc, #236]	; (800d564 <MX_GPIO_Init+0x150>)
 800d476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d478:	f043 0302 	orr.w	r3, r3, #2
 800d47c:	6313      	str	r3, [r2, #48]	; 0x30
 800d47e:	4b39      	ldr	r3, [pc, #228]	; (800d564 <MX_GPIO_Init+0x150>)
 800d480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d482:	f003 0302 	and.w	r3, r3, #2
 800d486:	607b      	str	r3, [r7, #4]
 800d488:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800d48a:	2300      	movs	r3, #0
 800d48c:	603b      	str	r3, [r7, #0]
 800d48e:	4a35      	ldr	r2, [pc, #212]	; (800d564 <MX_GPIO_Init+0x150>)
 800d490:	4b34      	ldr	r3, [pc, #208]	; (800d564 <MX_GPIO_Init+0x150>)
 800d492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d494:	f043 0308 	orr.w	r3, r3, #8
 800d498:	6313      	str	r3, [r2, #48]	; 0x30
 800d49a:	4b32      	ldr	r3, [pc, #200]	; (800d564 <MX_GPIO_Init+0x150>)
 800d49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49e:	f003 0308 	and.w	r3, r3, #8
 800d4a2:	603b      	str	r3, [r7, #0]
 800d4a4:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LoRa_RST_GPIO_Port, LoRa_RST_Pin, GPIO_PIN_RESET);
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	2108      	movs	r1, #8
 800d4aa:	482f      	ldr	r0, [pc, #188]	; (800d568 <MX_GPIO_Init+0x154>)
 800d4ac:	f7f5 fdb8 	bl	8003020 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, HC_SET_Pin | LED1_Pin, GPIO_PIN_RESET);
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	2148      	movs	r1, #72	; 0x48
 800d4b4:	482d      	ldr	r0, [pc, #180]	; (800d56c <MX_GPIO_Init+0x158>)
 800d4b6:	f7f5 fdb3 	bl	8003020 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(M_PWR_GPIO_Port, M_PWR_Pin, GPIO_PIN_RESET);
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	2140      	movs	r1, #64	; 0x40
 800d4be:	482c      	ldr	r0, [pc, #176]	; (800d570 <MX_GPIO_Init+0x15c>)
 800d4c0:	f7f5 fdae 	bl	8003020 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED4_Pin | LED3_Pin | LED2_Pin | CAN_STB_Pin,
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f24e 0104 	movw	r1, #57348	; 0xe004
 800d4ca:	482a      	ldr	r0, [pc, #168]	; (800d574 <MX_GPIO_Init+0x160>)
 800d4cc:	f7f5 fda8 	bl	8003020 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LoRa_RST_Pin */
	GPIO_InitStruct.Pin = LoRa_RST_Pin;
 800d4d0:	2308      	movs	r3, #8
 800d4d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LoRa_RST_GPIO_Port, &GPIO_InitStruct);
 800d4e0:	f107 0314 	add.w	r3, r7, #20
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	4820      	ldr	r0, [pc, #128]	; (800d568 <MX_GPIO_Init+0x154>)
 800d4e8:	f7f5 facc 	bl	8002a84 <HAL_GPIO_Init>

	/*Configure GPIO pins : HC_SET_Pin LED1_Pin */
	GPIO_InitStruct.Pin = HC_SET_Pin | LED1_Pin;
 800d4ec:	2348      	movs	r3, #72	; 0x48
 800d4ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d4fc:	f107 0314 	add.w	r3, r7, #20
 800d500:	4619      	mov	r1, r3
 800d502:	481a      	ldr	r0, [pc, #104]	; (800d56c <MX_GPIO_Init+0x158>)
 800d504:	f7f5 fabe 	bl	8002a84 <HAL_GPIO_Init>

	/*Configure GPIO pins : M_STAT_Pin M_RI_Pin */
	GPIO_InitStruct.Pin = M_STAT_Pin | M_RI_Pin;
 800d508:	2330      	movs	r3, #48	; 0x30
 800d50a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d50c:	2300      	movs	r3, #0
 800d50e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d510:	2300      	movs	r3, #0
 800d512:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d514:	f107 0314 	add.w	r3, r7, #20
 800d518:	4619      	mov	r1, r3
 800d51a:	4815      	ldr	r0, [pc, #84]	; (800d570 <MX_GPIO_Init+0x15c>)
 800d51c:	f7f5 fab2 	bl	8002a84 <HAL_GPIO_Init>

	/*Configure GPIO pin : M_PWR_Pin */
	GPIO_InitStruct.Pin = M_PWR_Pin;
 800d520:	2340      	movs	r3, #64	; 0x40
 800d522:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d524:	2301      	movs	r3, #1
 800d526:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d528:	2300      	movs	r3, #0
 800d52a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d52c:	2300      	movs	r3, #0
 800d52e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(M_PWR_GPIO_Port, &GPIO_InitStruct);
 800d530:	f107 0314 	add.w	r3, r7, #20
 800d534:	4619      	mov	r1, r3
 800d536:	480e      	ldr	r0, [pc, #56]	; (800d570 <MX_GPIO_Init+0x15c>)
 800d538:	f7f5 faa4 	bl	8002a84 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin CAN_STB_Pin */
	GPIO_InitStruct.Pin = LED4_Pin | LED3_Pin | LED2_Pin | CAN_STB_Pin;
 800d53c:	f24e 0304 	movw	r3, #57348	; 0xe004
 800d540:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d542:	2301      	movs	r3, #1
 800d544:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d546:	2300      	movs	r3, #0
 800d548:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d54a:	2300      	movs	r3, #0
 800d54c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d54e:	f107 0314 	add.w	r3, r7, #20
 800d552:	4619      	mov	r1, r3
 800d554:	4807      	ldr	r0, [pc, #28]	; (800d574 <MX_GPIO_Init+0x160>)
 800d556:	f7f5 fa95 	bl	8002a84 <HAL_GPIO_Init>

}
 800d55a:	bf00      	nop
 800d55c:	3728      	adds	r7, #40	; 0x28
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	40023800 	.word	0x40023800
 800d568:	40021000 	.word	0x40021000
 800d56c:	40020800 	.word	0x40020800
 800d570:	40020000 	.word	0x40020000
 800d574:	40020c00 	.word	0x40020c00

0800d578 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 800d582:	e7fe      	b.n	800d582 <_Error_Handler+0xa>

0800d584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d588:	2003      	movs	r0, #3
 800d58a:	f7f4 fae7 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800d58e:	2200      	movs	r2, #0
 800d590:	2100      	movs	r1, #0
 800d592:	f06f 000b 	mvn.w	r0, #11
 800d596:	f7f4 faec 	bl	8001b72 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800d59a:	2200      	movs	r2, #0
 800d59c:	2100      	movs	r1, #0
 800d59e:	f06f 000a 	mvn.w	r0, #10
 800d5a2:	f7f4 fae6 	bl	8001b72 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	f06f 0009 	mvn.w	r0, #9
 800d5ae:	f7f4 fae0 	bl	8001b72 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	f06f 0004 	mvn.w	r0, #4
 800d5ba:	f7f4 fada 	bl	8001b72 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800d5be:	2200      	movs	r2, #0
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	f06f 0003 	mvn.w	r0, #3
 800d5c6:	f7f4 fad4 	bl	8001b72 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	f06f 0001 	mvn.w	r0, #1
 800d5d2:	f7f4 face 	bl	8001b72 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	2100      	movs	r1, #0
 800d5da:	f04f 30ff 	mov.w	r0, #4294967295
 800d5de:	f7f4 fac8 	bl	8001b72 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d5e2:	bf00      	nop
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b088      	sub	sp, #32
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a12      	ldr	r2, [pc, #72]	; (800d63c <HAL_CAN_MspInit+0x56>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d11d      	bne.n	800d634 <HAL_CAN_MspInit+0x4e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	60bb      	str	r3, [r7, #8]
 800d5fc:	4a10      	ldr	r2, [pc, #64]	; (800d640 <HAL_CAN_MspInit+0x5a>)
 800d5fe:	4b10      	ldr	r3, [pc, #64]	; (800d640 <HAL_CAN_MspInit+0x5a>)
 800d600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d606:	6413      	str	r3, [r2, #64]	; 0x40
 800d608:	4b0d      	ldr	r3, [pc, #52]	; (800d640 <HAL_CAN_MspInit+0x5a>)
 800d60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d610:	60bb      	str	r3, [r7, #8]
 800d612:	68bb      	ldr	r3, [r7, #8]
  
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d614:	2303      	movs	r3, #3
 800d616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d618:	2302      	movs	r3, #2
 800d61a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d61c:	2300      	movs	r3, #0
 800d61e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d620:	2303      	movs	r3, #3
 800d622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800d624:	2309      	movs	r3, #9
 800d626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d628:	f107 030c 	add.w	r3, r7, #12
 800d62c:	4619      	mov	r1, r3
 800d62e:	4805      	ldr	r0, [pc, #20]	; (800d644 <HAL_CAN_MspInit+0x5e>)
 800d630:	f7f5 fa28 	bl	8002a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800d634:	bf00      	nop
 800d636:	3720      	adds	r7, #32
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	40006400 	.word	0x40006400
 800d640:	40023800 	.word	0x40023800
 800d644:	40020c00 	.word	0x40020c00

0800d648 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]

  if(hcan->Instance==CAN1)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a08      	ldr	r2, [pc, #32]	; (800d678 <HAL_CAN_MspDeInit+0x30>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d109      	bne.n	800d66e <HAL_CAN_MspDeInit+0x26>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 800d65a:	4a08      	ldr	r2, [pc, #32]	; (800d67c <HAL_CAN_MspDeInit+0x34>)
 800d65c:	4b07      	ldr	r3, [pc, #28]	; (800d67c <HAL_CAN_MspDeInit+0x34>)
 800d65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d660:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d664:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 800d666:	2103      	movs	r1, #3
 800d668:	4805      	ldr	r0, [pc, #20]	; (800d680 <HAL_CAN_MspDeInit+0x38>)
 800d66a:	f7f5 fbb5 	bl	8002dd8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	40006400 	.word	0x40006400
 800d67c:	40023800 	.word	0x40023800
 800d680:	40020c00 	.word	0x40020c00

0800d684 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b08a      	sub	sp, #40	; 0x28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a24      	ldr	r2, [pc, #144]	; (800d724 <HAL_I2C_MspInit+0xa0>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d11e      	bne.n	800d6d4 <HAL_I2C_MspInit+0x50>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPS_I2C1_SCL_Pin|GPS_I2C2_SCL_Pin;
 800d696:	23c0      	movs	r3, #192	; 0xc0
 800d698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d69a:	2312      	movs	r3, #18
 800d69c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6a2:	2303      	movs	r3, #3
 800d6a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d6a6:	2304      	movs	r3, #4
 800d6a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d6aa:	f107 0314 	add.w	r3, r7, #20
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	481d      	ldr	r0, [pc, #116]	; (800d728 <HAL_I2C_MspInit+0xa4>)
 800d6b2:	f7f5 f9e7 	bl	8002a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	613b      	str	r3, [r7, #16]
 800d6ba:	4a1c      	ldr	r2, [pc, #112]	; (800d72c <HAL_I2C_MspInit+0xa8>)
 800d6bc:	4b1b      	ldr	r3, [pc, #108]	; (800d72c <HAL_I2C_MspInit+0xa8>)
 800d6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d6c4:	6413      	str	r3, [r2, #64]	; 0x40
 800d6c6:	4b19      	ldr	r3, [pc, #100]	; (800d72c <HAL_I2C_MspInit+0xa8>)
 800d6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d6ce:	613b      	str	r3, [r7, #16]
 800d6d0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800d6d2:	e023      	b.n	800d71c <HAL_I2C_MspInit+0x98>
  else if(hi2c->Instance==I2C2)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a15      	ldr	r2, [pc, #84]	; (800d730 <HAL_I2C_MspInit+0xac>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d11e      	bne.n	800d71c <HAL_I2C_MspInit+0x98>
    GPIO_InitStruct.Pin = M_I2C2_SCL_Pin|M_I2C2_SDA_Pin;
 800d6de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d6e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d6e4:	2312      	movs	r3, #18
 800d6e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6ec:	2303      	movs	r3, #3
 800d6ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800d6f0:	2304      	movs	r3, #4
 800d6f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d6f4:	f107 0314 	add.w	r3, r7, #20
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	480b      	ldr	r0, [pc, #44]	; (800d728 <HAL_I2C_MspInit+0xa4>)
 800d6fc:	f7f5 f9c2 	bl	8002a84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800d700:	2300      	movs	r3, #0
 800d702:	60fb      	str	r3, [r7, #12]
 800d704:	4a09      	ldr	r2, [pc, #36]	; (800d72c <HAL_I2C_MspInit+0xa8>)
 800d706:	4b09      	ldr	r3, [pc, #36]	; (800d72c <HAL_I2C_MspInit+0xa8>)
 800d708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d70e:	6413      	str	r3, [r2, #64]	; 0x40
 800d710:	4b06      	ldr	r3, [pc, #24]	; (800d72c <HAL_I2C_MspInit+0xa8>)
 800d712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d718:	60fb      	str	r3, [r7, #12]
 800d71a:	68fb      	ldr	r3, [r7, #12]
}
 800d71c:	bf00      	nop
 800d71e:	3728      	adds	r7, #40	; 0x28
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	40005400 	.word	0x40005400
 800d728:	40020400 	.word	0x40020400
 800d72c:	40023800 	.word	0x40023800
 800d730:	40005800 	.word	0x40005800

0800d734 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]

  if(hi2c->Instance==I2C1)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a10      	ldr	r2, [pc, #64]	; (800d784 <HAL_I2C_MspDeInit+0x50>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d10a      	bne.n	800d75c <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800d746:	4a10      	ldr	r2, [pc, #64]	; (800d788 <HAL_I2C_MspDeInit+0x54>)
 800d748:	4b0f      	ldr	r3, [pc, #60]	; (800d788 <HAL_I2C_MspDeInit+0x54>)
 800d74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d74c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d750:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPS_I2C1_SCL_Pin|GPS_I2C2_SCL_Pin);
 800d752:	21c0      	movs	r1, #192	; 0xc0
 800d754:	480d      	ldr	r0, [pc, #52]	; (800d78c <HAL_I2C_MspDeInit+0x58>)
 800d756:	f7f5 fb3f 	bl	8002dd8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800d75a:	e00f      	b.n	800d77c <HAL_I2C_MspDeInit+0x48>
  else if(hi2c->Instance==I2C2)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a0b      	ldr	r2, [pc, #44]	; (800d790 <HAL_I2C_MspDeInit+0x5c>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d10a      	bne.n	800d77c <HAL_I2C_MspDeInit+0x48>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800d766:	4a08      	ldr	r2, [pc, #32]	; (800d788 <HAL_I2C_MspDeInit+0x54>)
 800d768:	4b07      	ldr	r3, [pc, #28]	; (800d788 <HAL_I2C_MspDeInit+0x54>)
 800d76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800d770:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, M_I2C2_SCL_Pin|M_I2C2_SDA_Pin);
 800d772:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800d776:	4805      	ldr	r0, [pc, #20]	; (800d78c <HAL_I2C_MspDeInit+0x58>)
 800d778:	f7f5 fb2e 	bl	8002dd8 <HAL_GPIO_DeInit>
}
 800d77c:	bf00      	nop
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	40005400 	.word	0x40005400
 800d788:	40023800 	.word	0x40023800
 800d78c:	40020400 	.word	0x40020400
 800d790:	40005800 	.word	0x40005800

0800d794 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b08a      	sub	sp, #40	; 0x28
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4a3f      	ldr	r2, [pc, #252]	; (800d8a0 <HAL_SPI_MspInit+0x10c>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d11f      	bne.n	800d7e6 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	613b      	str	r3, [r7, #16]
 800d7aa:	4a3e      	ldr	r2, [pc, #248]	; (800d8a4 <HAL_SPI_MspInit+0x110>)
 800d7ac:	4b3d      	ldr	r3, [pc, #244]	; (800d8a4 <HAL_SPI_MspInit+0x110>)
 800d7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d7b4:	6413      	str	r3, [r2, #64]	; 0x40
 800d7b6:	4b3b      	ldr	r3, [pc, #236]	; (800d8a4 <HAL_SPI_MspInit+0x110>)
 800d7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7be:	613b      	str	r3, [r7, #16]
 800d7c0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = M_SPI2_NSS_Pin|M_SPI2_SCK_Pin|M_SPI2_MISO_Pin|M_SPI2_MOSI_Pin;
 800d7c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d7c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7c8:	2302      	movs	r3, #2
 800d7ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7d0:	2303      	movs	r3, #3
 800d7d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d7d4:	2305      	movs	r3, #5
 800d7d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d7d8:	f107 0314 	add.w	r3, r7, #20
 800d7dc:	4619      	mov	r1, r3
 800d7de:	4832      	ldr	r0, [pc, #200]	; (800d8a8 <HAL_SPI_MspInit+0x114>)
 800d7e0:	f7f5 f950 	bl	8002a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800d7e4:	e058      	b.n	800d898 <HAL_SPI_MspInit+0x104>
  else if(hspi->Instance==SPI3)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a30      	ldr	r2, [pc, #192]	; (800d8ac <HAL_SPI_MspInit+0x118>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d130      	bne.n	800d852 <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	4a2b      	ldr	r2, [pc, #172]	; (800d8a4 <HAL_SPI_MspInit+0x110>)
 800d7f6:	4b2b      	ldr	r3, [pc, #172]	; (800d8a4 <HAL_SPI_MspInit+0x110>)
 800d7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7fe:	6413      	str	r3, [r2, #64]	; 0x40
 800d800:	4b28      	ldr	r3, [pc, #160]	; (800d8a4 <HAL_SPI_MspInit+0x110>)
 800d802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d808:	60fb      	str	r3, [r7, #12]
 800d80a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SPI3_NSS_Pin;
 800d80c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d812:	2302      	movs	r3, #2
 800d814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d816:	2300      	movs	r3, #0
 800d818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d81a:	2303      	movs	r3, #3
 800d81c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d81e:	2306      	movs	r3, #6
 800d820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_SPI3_NSS_GPIO_Port, &GPIO_InitStruct);
 800d822:	f107 0314 	add.w	r3, r7, #20
 800d826:	4619      	mov	r1, r3
 800d828:	4821      	ldr	r0, [pc, #132]	; (800d8b0 <HAL_SPI_MspInit+0x11c>)
 800d82a:	f7f5 f92b 	bl	8002a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI3_SCK_Pin|SD_SPI_MISO_Pin|SD_SPI3_MOSI_Pin;
 800d82e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d834:	2302      	movs	r3, #2
 800d836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d838:	2300      	movs	r3, #0
 800d83a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d83c:	2303      	movs	r3, #3
 800d83e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d840:	2306      	movs	r3, #6
 800d842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d844:	f107 0314 	add.w	r3, r7, #20
 800d848:	4619      	mov	r1, r3
 800d84a:	481a      	ldr	r0, [pc, #104]	; (800d8b4 <HAL_SPI_MspInit+0x120>)
 800d84c:	f7f5 f91a 	bl	8002a84 <HAL_GPIO_Init>
}
 800d850:	e022      	b.n	800d898 <HAL_SPI_MspInit+0x104>
  else if(hspi->Instance==SPI4)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a18      	ldr	r2, [pc, #96]	; (800d8b8 <HAL_SPI_MspInit+0x124>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d11d      	bne.n	800d898 <HAL_SPI_MspInit+0x104>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800d85c:	2300      	movs	r3, #0
 800d85e:	60bb      	str	r3, [r7, #8]
 800d860:	4a10      	ldr	r2, [pc, #64]	; (800d8a4 <HAL_SPI_MspInit+0x110>)
 800d862:	4b10      	ldr	r3, [pc, #64]	; (800d8a4 <HAL_SPI_MspInit+0x110>)
 800d864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d866:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d86a:	6453      	str	r3, [r2, #68]	; 0x44
 800d86c:	4b0d      	ldr	r3, [pc, #52]	; (800d8a4 <HAL_SPI_MspInit+0x110>)
 800d86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d874:	60bb      	str	r3, [r7, #8]
 800d876:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LoRa_SPI4_SCK_Pin|LoRa_SPI4_NSS_Pin|LoRa_SPI4_MISO_Pin|LoRa_SPI4_MOSI_Pin;
 800d878:	2374      	movs	r3, #116	; 0x74
 800d87a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d87c:	2302      	movs	r3, #2
 800d87e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d880:	2300      	movs	r3, #0
 800d882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d884:	2303      	movs	r3, #3
 800d886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800d888:	2305      	movs	r3, #5
 800d88a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d88c:	f107 0314 	add.w	r3, r7, #20
 800d890:	4619      	mov	r1, r3
 800d892:	480a      	ldr	r0, [pc, #40]	; (800d8bc <HAL_SPI_MspInit+0x128>)
 800d894:	f7f5 f8f6 	bl	8002a84 <HAL_GPIO_Init>
}
 800d898:	bf00      	nop
 800d89a:	3728      	adds	r7, #40	; 0x28
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	40003800 	.word	0x40003800
 800d8a4:	40023800 	.word	0x40023800
 800d8a8:	40020400 	.word	0x40020400
 800d8ac:	40003c00 	.word	0x40003c00
 800d8b0:	40020000 	.word	0x40020000
 800d8b4:	40020800 	.word	0x40020800
 800d8b8:	40013400 	.word	0x40013400
 800d8bc:	40021000 	.word	0x40021000

0800d8c0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]

  if(hspi->Instance==SPI2)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a1b      	ldr	r2, [pc, #108]	; (800d93c <HAL_SPI_MspDeInit+0x7c>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d10b      	bne.n	800d8ea <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800d8d2:	4a1b      	ldr	r2, [pc, #108]	; (800d940 <HAL_SPI_MspDeInit+0x80>)
 800d8d4:	4b1a      	ldr	r3, [pc, #104]	; (800d940 <HAL_SPI_MspDeInit+0x80>)
 800d8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d8dc:	6413      	str	r3, [r2, #64]	; 0x40
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    HAL_GPIO_DeInit(GPIOB, M_SPI2_NSS_Pin|M_SPI2_SCK_Pin|M_SPI2_MISO_Pin|M_SPI2_MOSI_Pin);
 800d8de:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800d8e2:	4818      	ldr	r0, [pc, #96]	; (800d944 <HAL_SPI_MspDeInit+0x84>)
 800d8e4:	f7f5 fa78 	bl	8002dd8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 800d8e8:	e024      	b.n	800d934 <HAL_SPI_MspDeInit+0x74>
  else if(hspi->Instance==SPI3)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	4a16      	ldr	r2, [pc, #88]	; (800d948 <HAL_SPI_MspDeInit+0x88>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d110      	bne.n	800d916 <HAL_SPI_MspDeInit+0x56>
    __HAL_RCC_SPI3_CLK_DISABLE();
 800d8f4:	4a12      	ldr	r2, [pc, #72]	; (800d940 <HAL_SPI_MspDeInit+0x80>)
 800d8f6:	4b12      	ldr	r3, [pc, #72]	; (800d940 <HAL_SPI_MspDeInit+0x80>)
 800d8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d8fe:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(SD_SPI3_NSS_GPIO_Port, SD_SPI3_NSS_Pin);
 800d900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d904:	4811      	ldr	r0, [pc, #68]	; (800d94c <HAL_SPI_MspDeInit+0x8c>)
 800d906:	f7f5 fa67 	bl	8002dd8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, SD_SPI3_SCK_Pin|SD_SPI_MISO_Pin|SD_SPI3_MOSI_Pin);
 800d90a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800d90e:	4810      	ldr	r0, [pc, #64]	; (800d950 <HAL_SPI_MspDeInit+0x90>)
 800d910:	f7f5 fa62 	bl	8002dd8 <HAL_GPIO_DeInit>
}
 800d914:	e00e      	b.n	800d934 <HAL_SPI_MspDeInit+0x74>
  else if(hspi->Instance==SPI4)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a0e      	ldr	r2, [pc, #56]	; (800d954 <HAL_SPI_MspDeInit+0x94>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d109      	bne.n	800d934 <HAL_SPI_MspDeInit+0x74>
    __HAL_RCC_SPI4_CLK_DISABLE();
 800d920:	4a07      	ldr	r2, [pc, #28]	; (800d940 <HAL_SPI_MspDeInit+0x80>)
 800d922:	4b07      	ldr	r3, [pc, #28]	; (800d940 <HAL_SPI_MspDeInit+0x80>)
 800d924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d92a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOE, LoRa_SPI4_SCK_Pin|LoRa_SPI4_NSS_Pin|LoRa_SPI4_MISO_Pin|LoRa_SPI4_MOSI_Pin);
 800d92c:	2174      	movs	r1, #116	; 0x74
 800d92e:	480a      	ldr	r0, [pc, #40]	; (800d958 <HAL_SPI_MspDeInit+0x98>)
 800d930:	f7f5 fa52 	bl	8002dd8 <HAL_GPIO_DeInit>
}
 800d934:	bf00      	nop
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	40003800 	.word	0x40003800
 800d940:	40023800 	.word	0x40023800
 800d944:	40020400 	.word	0x40020400
 800d948:	40003c00 	.word	0x40003c00
 800d94c:	40020000 	.word	0x40020000
 800d950:	40020800 	.word	0x40020800
 800d954:	40013400 	.word	0x40013400
 800d958:	40021000 	.word	0x40021000

0800d95c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b08c      	sub	sp, #48	; 0x30
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART7)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a70      	ldr	r2, [pc, #448]	; (800db2c <HAL_UART_MspInit+0x1d0>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d11f      	bne.n	800d9ae <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800d96e:	2300      	movs	r3, #0
 800d970:	61bb      	str	r3, [r7, #24]
 800d972:	4a6f      	ldr	r2, [pc, #444]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800d974:	4b6e      	ldr	r3, [pc, #440]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800d976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d97c:	6413      	str	r3, [r2, #64]	; 0x40
 800d97e:	4b6c      	ldr	r3, [pc, #432]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800d980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d982:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d986:	61bb      	str	r3, [r7, #24]
 800d988:	69bb      	ldr	r3, [r7, #24]
  
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = ESP_UART7_RX_Pin|ESP_UART7_TX_Pin;
 800d98a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800d98e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d990:	2302      	movs	r3, #2
 800d992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d994:	2301      	movs	r3, #1
 800d996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d998:	2303      	movs	r3, #3
 800d99a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800d99c:	2308      	movs	r3, #8
 800d99e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d9a0:	f107 031c 	add.w	r3, r7, #28
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	4863      	ldr	r0, [pc, #396]	; (800db34 <HAL_UART_MspInit+0x1d8>)
 800d9a8:	f7f5 f86c 	bl	8002a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d9ac:	e0b9      	b.n	800db22 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART8)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a61      	ldr	r2, [pc, #388]	; (800db38 <HAL_UART_MspInit+0x1dc>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d126      	bne.n	800da06 <HAL_UART_MspInit+0xaa>
    __HAL_RCC_UART8_CLK_ENABLE();
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	617b      	str	r3, [r7, #20]
 800d9bc:	4a5c      	ldr	r2, [pc, #368]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800d9be:	4b5c      	ldr	r3, [pc, #368]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800d9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d9c6:	6413      	str	r3, [r2, #64]	; 0x40
 800d9c8:	4b59      	ldr	r3, [pc, #356]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800d9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9d0:	617b      	str	r3, [r7, #20]
 800d9d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HC_UART8_RX_Pin|HC_UART8_TX_Pin;
 800d9d4:	2303      	movs	r3, #3
 800d9d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9d8:	2302      	movs	r3, #2
 800d9da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800d9e4:	2308      	movs	r3, #8
 800d9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d9e8:	f107 031c 	add.w	r3, r7, #28
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	4851      	ldr	r0, [pc, #324]	; (800db34 <HAL_UART_MspInit+0x1d8>)
 800d9f0:	f7f5 f848 	bl	8002a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	2100      	movs	r1, #0
 800d9f8:	2053      	movs	r0, #83	; 0x53
 800d9fa:	f7f4 f8ba 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800d9fe:	2053      	movs	r0, #83	; 0x53
 800da00:	f7f4 f8d3 	bl	8001baa <HAL_NVIC_EnableIRQ>
}
 800da04:	e08d      	b.n	800db22 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART1)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4a4c      	ldr	r2, [pc, #304]	; (800db3c <HAL_UART_MspInit+0x1e0>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d11f      	bne.n	800da50 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART1_CLK_ENABLE();
 800da10:	2300      	movs	r3, #0
 800da12:	613b      	str	r3, [r7, #16]
 800da14:	4a46      	ldr	r2, [pc, #280]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800da16:	4b46      	ldr	r3, [pc, #280]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800da18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da1a:	f043 0310 	orr.w	r3, r3, #16
 800da1e:	6453      	str	r3, [r2, #68]	; 0x44
 800da20:	4b43      	ldr	r3, [pc, #268]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800da22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da24:	f003 0310 	and.w	r3, r3, #16
 800da28:	613b      	str	r3, [r7, #16]
 800da2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPS_UART1_TX_Pin|GPS_UART1_RX_Pin;
 800da2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800da30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da32:	2302      	movs	r3, #2
 800da34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800da36:	2301      	movs	r3, #1
 800da38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da3a:	2303      	movs	r3, #3
 800da3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800da3e:	2307      	movs	r3, #7
 800da40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da42:	f107 031c 	add.w	r3, r7, #28
 800da46:	4619      	mov	r1, r3
 800da48:	483d      	ldr	r0, [pc, #244]	; (800db40 <HAL_UART_MspInit+0x1e4>)
 800da4a:	f7f5 f81b 	bl	8002a84 <HAL_GPIO_Init>
}
 800da4e:	e068      	b.n	800db22 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART2)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a3b      	ldr	r2, [pc, #236]	; (800db44 <HAL_UART_MspInit+0x1e8>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d12e      	bne.n	800dab8 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800da5a:	2300      	movs	r3, #0
 800da5c:	60fb      	str	r3, [r7, #12]
 800da5e:	4a34      	ldr	r2, [pc, #208]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800da60:	4b33      	ldr	r3, [pc, #204]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800da62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da68:	6413      	str	r3, [r2, #64]	; 0x40
 800da6a:	4b31      	ldr	r3, [pc, #196]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800da6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da72:	60fb      	str	r3, [r7, #12]
 800da74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_USART2_CTS_Pin|STM_USART2_RTS_Pin;
 800da76:	2303      	movs	r3, #3
 800da78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da7a:	2302      	movs	r3, #2
 800da7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da7e:	2300      	movs	r3, #0
 800da80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da82:	2303      	movs	r3, #3
 800da84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800da86:	2307      	movs	r3, #7
 800da88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da8a:	f107 031c 	add.w	r3, r7, #28
 800da8e:	4619      	mov	r1, r3
 800da90:	482b      	ldr	r0, [pc, #172]	; (800db40 <HAL_UART_MspInit+0x1e4>)
 800da92:	f7f4 fff7 	bl	8002a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STM_USART2_TX_Pin|STM_USART2_RX_Pin;
 800da96:	230c      	movs	r3, #12
 800da98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da9a:	2302      	movs	r3, #2
 800da9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800da9e:	2301      	movs	r3, #1
 800daa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800daa2:	2303      	movs	r3, #3
 800daa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800daa6:	2307      	movs	r3, #7
 800daa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800daaa:	f107 031c 	add.w	r3, r7, #28
 800daae:	4619      	mov	r1, r3
 800dab0:	4823      	ldr	r0, [pc, #140]	; (800db40 <HAL_UART_MspInit+0x1e4>)
 800dab2:	f7f4 ffe7 	bl	8002a84 <HAL_GPIO_Init>
}
 800dab6:	e034      	b.n	800db22 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART3)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a22      	ldr	r2, [pc, #136]	; (800db48 <HAL_UART_MspInit+0x1ec>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d12f      	bne.n	800db22 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART3_CLK_ENABLE();
 800dac2:	2300      	movs	r3, #0
 800dac4:	60bb      	str	r3, [r7, #8]
 800dac6:	4a1a      	ldr	r2, [pc, #104]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800dac8:	4b19      	ldr	r3, [pc, #100]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800daca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dacc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dad0:	6413      	str	r3, [r2, #64]	; 0x40
 800dad2:	4b17      	ldr	r3, [pc, #92]	; (800db30 <HAL_UART_MspInit+0x1d4>)
 800dad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dada:	60bb      	str	r3, [r7, #8]
 800dadc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M_USART3_TX_Pin|M_USART3_RX_Pin;
 800dade:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dae4:	2302      	movs	r3, #2
 800dae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dae8:	2301      	movs	r3, #1
 800daea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800daec:	2303      	movs	r3, #3
 800daee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800daf0:	2307      	movs	r3, #7
 800daf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800daf4:	f107 031c 	add.w	r3, r7, #28
 800daf8:	4619      	mov	r1, r3
 800dafa:	4814      	ldr	r0, [pc, #80]	; (800db4c <HAL_UART_MspInit+0x1f0>)
 800dafc:	f7f4 ffc2 	bl	8002a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M_USART3_CTS_Pin|M_USART3_RTS_Pin;
 800db00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800db04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db06:	2302      	movs	r3, #2
 800db08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db0a:	2300      	movs	r3, #0
 800db0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db0e:	2303      	movs	r3, #3
 800db10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800db12:	2307      	movs	r3, #7
 800db14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800db16:	f107 031c 	add.w	r3, r7, #28
 800db1a:	4619      	mov	r1, r3
 800db1c:	480b      	ldr	r0, [pc, #44]	; (800db4c <HAL_UART_MspInit+0x1f0>)
 800db1e:	f7f4 ffb1 	bl	8002a84 <HAL_GPIO_Init>
}
 800db22:	bf00      	nop
 800db24:	3730      	adds	r7, #48	; 0x30
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	40007800 	.word	0x40007800
 800db30:	40023800 	.word	0x40023800
 800db34:	40021000 	.word	0x40021000
 800db38:	40007c00 	.word	0x40007c00
 800db3c:	40011000 	.word	0x40011000
 800db40:	40020000 	.word	0x40020000
 800db44:	40004400 	.word	0x40004400
 800db48:	40004800 	.word	0x40004800
 800db4c:	40020c00 	.word	0x40020c00

0800db50 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]

  if(huart->Instance==UART7)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a2b      	ldr	r2, [pc, #172]	; (800dc0c <HAL_UART_MspDeInit+0xbc>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d10b      	bne.n	800db7a <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN UART7_MspDeInit 0 */

  /* USER CODE END UART7_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART7_CLK_DISABLE();
 800db62:	4a2b      	ldr	r2, [pc, #172]	; (800dc10 <HAL_UART_MspDeInit+0xc0>)
 800db64:	4b2a      	ldr	r3, [pc, #168]	; (800dc10 <HAL_UART_MspDeInit+0xc0>)
 800db66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800db6c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    HAL_GPIO_DeInit(GPIOE, ESP_UART7_RX_Pin|ESP_UART7_TX_Pin);
 800db6e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800db72:	4828      	ldr	r0, [pc, #160]	; (800dc14 <HAL_UART_MspDeInit+0xc4>)
 800db74:	f7f5 f930 	bl	8002dd8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800db78:	e043      	b.n	800dc02 <HAL_UART_MspDeInit+0xb2>
  else if(huart->Instance==UART8)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a26      	ldr	r2, [pc, #152]	; (800dc18 <HAL_UART_MspDeInit+0xc8>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d10d      	bne.n	800dba0 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_UART8_CLK_DISABLE();
 800db84:	4a22      	ldr	r2, [pc, #136]	; (800dc10 <HAL_UART_MspDeInit+0xc0>)
 800db86:	4b22      	ldr	r3, [pc, #136]	; (800dc10 <HAL_UART_MspDeInit+0xc0>)
 800db88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db8e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, HC_UART8_RX_Pin|HC_UART8_TX_Pin);
 800db90:	2103      	movs	r1, #3
 800db92:	4820      	ldr	r0, [pc, #128]	; (800dc14 <HAL_UART_MspDeInit+0xc4>)
 800db94:	f7f5 f920 	bl	8002dd8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 800db98:	2053      	movs	r0, #83	; 0x53
 800db9a:	f7f4 f814 	bl	8001bc6 <HAL_NVIC_DisableIRQ>
}
 800db9e:	e030      	b.n	800dc02 <HAL_UART_MspDeInit+0xb2>
  else if(huart->Instance==USART1)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a1d      	ldr	r2, [pc, #116]	; (800dc1c <HAL_UART_MspDeInit+0xcc>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d10b      	bne.n	800dbc2 <HAL_UART_MspDeInit+0x72>
    __HAL_RCC_USART1_CLK_DISABLE();
 800dbaa:	4a19      	ldr	r2, [pc, #100]	; (800dc10 <HAL_UART_MspDeInit+0xc0>)
 800dbac:	4b18      	ldr	r3, [pc, #96]	; (800dc10 <HAL_UART_MspDeInit+0xc0>)
 800dbae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbb0:	f023 0310 	bic.w	r3, r3, #16
 800dbb4:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPS_UART1_TX_Pin|GPS_UART1_RX_Pin);
 800dbb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800dbba:	4819      	ldr	r0, [pc, #100]	; (800dc20 <HAL_UART_MspDeInit+0xd0>)
 800dbbc:	f7f5 f90c 	bl	8002dd8 <HAL_GPIO_DeInit>
}
 800dbc0:	e01f      	b.n	800dc02 <HAL_UART_MspDeInit+0xb2>
  else if(huart->Instance==USART2)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4a17      	ldr	r2, [pc, #92]	; (800dc24 <HAL_UART_MspDeInit+0xd4>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d10a      	bne.n	800dbe2 <HAL_UART_MspDeInit+0x92>
    __HAL_RCC_USART2_CLK_DISABLE();
 800dbcc:	4a10      	ldr	r2, [pc, #64]	; (800dc10 <HAL_UART_MspDeInit+0xc0>)
 800dbce:	4b10      	ldr	r3, [pc, #64]	; (800dc10 <HAL_UART_MspDeInit+0xc0>)
 800dbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dbd6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, STM_USART2_CTS_Pin|STM_USART2_RTS_Pin|STM_USART2_TX_Pin|STM_USART2_RX_Pin);
 800dbd8:	210f      	movs	r1, #15
 800dbda:	4811      	ldr	r0, [pc, #68]	; (800dc20 <HAL_UART_MspDeInit+0xd0>)
 800dbdc:	f7f5 f8fc 	bl	8002dd8 <HAL_GPIO_DeInit>
}
 800dbe0:	e00f      	b.n	800dc02 <HAL_UART_MspDeInit+0xb2>
  else if(huart->Instance==USART3)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4a10      	ldr	r2, [pc, #64]	; (800dc28 <HAL_UART_MspDeInit+0xd8>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d10a      	bne.n	800dc02 <HAL_UART_MspDeInit+0xb2>
    __HAL_RCC_USART3_CLK_DISABLE();
 800dbec:	4a08      	ldr	r2, [pc, #32]	; (800dc10 <HAL_UART_MspDeInit+0xc0>)
 800dbee:	4b08      	ldr	r3, [pc, #32]	; (800dc10 <HAL_UART_MspDeInit+0xc0>)
 800dbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dbf6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, M_USART3_TX_Pin|M_USART3_RX_Pin|M_USART3_CTS_Pin|M_USART3_RTS_Pin);
 800dbf8:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
 800dbfc:	480b      	ldr	r0, [pc, #44]	; (800dc2c <HAL_UART_MspDeInit+0xdc>)
 800dbfe:	f7f5 f8eb 	bl	8002dd8 <HAL_GPIO_DeInit>
}
 800dc02:	bf00      	nop
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	40007800 	.word	0x40007800
 800dc10:	40023800 	.word	0x40023800
 800dc14:	40021000 	.word	0x40021000
 800dc18:	40007c00 	.word	0x40007c00
 800dc1c:	40011000 	.word	0x40011000
 800dc20:	40020000 	.word	0x40020000
 800dc24:	40004400 	.word	0x40004400
 800dc28:	40004800 	.word	0x40004800
 800dc2c:	40020c00 	.word	0x40020c00

0800dc30 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800dc30:	b480      	push	{r7}
 800dc32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800dc34:	bf00      	nop
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr

0800dc3e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800dc3e:	b480      	push	{r7}
 800dc40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dc42:	e7fe      	b.n	800dc42 <HardFault_Handler+0x4>

0800dc44 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800dc44:	b480      	push	{r7}
 800dc46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800dc48:	e7fe      	b.n	800dc48 <MemManage_Handler+0x4>

0800dc4a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800dc4a:	b480      	push	{r7}
 800dc4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800dc4e:	e7fe      	b.n	800dc4e <BusFault_Handler+0x4>

0800dc50 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800dc50:	b480      	push	{r7}
 800dc52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800dc54:	e7fe      	b.n	800dc54 <UsageFault_Handler+0x4>

0800dc56 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800dc56:	b480      	push	{r7}
 800dc58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800dc5a:	bf00      	nop
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800dc64:	b480      	push	{r7}
 800dc66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800dc68:	bf00      	nop
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr

0800dc72 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800dc72:	b480      	push	{r7}
 800dc74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dc76:	bf00      	nop
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dc84:	f7f2 fb3e 	bl	8000304 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800dc88:	f7f4 f8aa 	bl	8001de0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800dc8c:	bf00      	nop
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <UART8_IRQHandler>:

/**
* @brief This function handles UART8 global interrupt.
*/
void UART8_IRQHandler(void)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800dc94:	4802      	ldr	r0, [pc, #8]	; (800dca0 <UART8_IRQHandler+0x10>)
 800dc96:	f7fe f909 	bl	800beac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800dc9a:	bf00      	nop
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	2000036c 	.word	0x2000036c

0800dca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800dca4:	b480      	push	{r7}
 800dca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800dca8:	4a16      	ldr	r2, [pc, #88]	; (800dd04 <SystemInit+0x60>)
 800dcaa:	4b16      	ldr	r3, [pc, #88]	; (800dd04 <SystemInit+0x60>)
 800dcac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dcb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800dcb8:	4a13      	ldr	r2, [pc, #76]	; (800dd08 <SystemInit+0x64>)
 800dcba:	4b13      	ldr	r3, [pc, #76]	; (800dd08 <SystemInit+0x64>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f043 0301 	orr.w	r3, r3, #1
 800dcc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800dcc4:	4b10      	ldr	r3, [pc, #64]	; (800dd08 <SystemInit+0x64>)
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800dcca:	4a0f      	ldr	r2, [pc, #60]	; (800dd08 <SystemInit+0x64>)
 800dccc:	4b0e      	ldr	r3, [pc, #56]	; (800dd08 <SystemInit+0x64>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800dcd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dcd8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800dcda:	4b0b      	ldr	r3, [pc, #44]	; (800dd08 <SystemInit+0x64>)
 800dcdc:	4a0b      	ldr	r2, [pc, #44]	; (800dd0c <SystemInit+0x68>)
 800dcde:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800dce0:	4a09      	ldr	r2, [pc, #36]	; (800dd08 <SystemInit+0x64>)
 800dce2:	4b09      	ldr	r3, [pc, #36]	; (800dd08 <SystemInit+0x64>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dcea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800dcec:	4b06      	ldr	r3, [pc, #24]	; (800dd08 <SystemInit+0x64>)
 800dcee:	2200      	movs	r2, #0
 800dcf0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800dcf2:	4b04      	ldr	r3, [pc, #16]	; (800dd04 <SystemInit+0x60>)
 800dcf4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dcf8:	609a      	str	r2, [r3, #8]
#endif
}
 800dcfa:	bf00      	nop
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr
 800dd04:	e000ed00 	.word	0xe000ed00
 800dd08:	40023800 	.word	0x40023800
 800dd0c:	24003010 	.word	0x24003010

0800dd10 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b087      	sub	sp, #28
 800dd14:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800dd16:	2300      	movs	r3, #0
 800dd18:	613b      	str	r3, [r7, #16]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	617b      	str	r3, [r7, #20]
 800dd1e:	2302      	movs	r3, #2
 800dd20:	60fb      	str	r3, [r7, #12]
 800dd22:	2300      	movs	r3, #0
 800dd24:	60bb      	str	r3, [r7, #8]
 800dd26:	2302      	movs	r3, #2
 800dd28:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800dd2a:	4b31      	ldr	r3, [pc, #196]	; (800ddf0 <SystemCoreClockUpdate+0xe0>)
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	f003 030c 	and.w	r3, r3, #12
 800dd32:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	2b04      	cmp	r3, #4
 800dd38:	d007      	beq.n	800dd4a <SystemCoreClockUpdate+0x3a>
 800dd3a:	2b08      	cmp	r3, #8
 800dd3c:	d009      	beq.n	800dd52 <SystemCoreClockUpdate+0x42>
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d13d      	bne.n	800ddbe <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800dd42:	4b2c      	ldr	r3, [pc, #176]	; (800ddf4 <SystemCoreClockUpdate+0xe4>)
 800dd44:	4a2c      	ldr	r2, [pc, #176]	; (800ddf8 <SystemCoreClockUpdate+0xe8>)
 800dd46:	601a      	str	r2, [r3, #0]
      break;
 800dd48:	e03d      	b.n	800ddc6 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800dd4a:	4b2a      	ldr	r3, [pc, #168]	; (800ddf4 <SystemCoreClockUpdate+0xe4>)
 800dd4c:	4a2b      	ldr	r2, [pc, #172]	; (800ddfc <SystemCoreClockUpdate+0xec>)
 800dd4e:	601a      	str	r2, [r3, #0]
      break;
 800dd50:	e039      	b.n	800ddc6 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800dd52:	4b27      	ldr	r3, [pc, #156]	; (800ddf0 <SystemCoreClockUpdate+0xe0>)
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	0d9b      	lsrs	r3, r3, #22
 800dd58:	f003 0301 	and.w	r3, r3, #1
 800dd5c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dd5e:	4b24      	ldr	r3, [pc, #144]	; (800ddf0 <SystemCoreClockUpdate+0xe0>)
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd66:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00c      	beq.n	800dd88 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800dd6e:	4a23      	ldr	r2, [pc, #140]	; (800ddfc <SystemCoreClockUpdate+0xec>)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd76:	4a1e      	ldr	r2, [pc, #120]	; (800ddf0 <SystemCoreClockUpdate+0xe0>)
 800dd78:	6852      	ldr	r2, [r2, #4]
 800dd7a:	0992      	lsrs	r2, r2, #6
 800dd7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd80:	fb02 f303 	mul.w	r3, r2, r3
 800dd84:	617b      	str	r3, [r7, #20]
 800dd86:	e00b      	b.n	800dda0 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800dd88:	4a1b      	ldr	r2, [pc, #108]	; (800ddf8 <SystemCoreClockUpdate+0xe8>)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd90:	4a17      	ldr	r2, [pc, #92]	; (800ddf0 <SystemCoreClockUpdate+0xe0>)
 800dd92:	6852      	ldr	r2, [r2, #4]
 800dd94:	0992      	lsrs	r2, r2, #6
 800dd96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd9a:	fb02 f303 	mul.w	r3, r2, r3
 800dd9e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800dda0:	4b13      	ldr	r3, [pc, #76]	; (800ddf0 <SystemCoreClockUpdate+0xe0>)
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	0c1b      	lsrs	r3, r3, #16
 800dda6:	f003 0303 	and.w	r3, r3, #3
 800ddaa:	3301      	adds	r3, #1
 800ddac:	005b      	lsls	r3, r3, #1
 800ddae:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800ddb0:	697a      	ldr	r2, [r7, #20]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddb8:	4a0e      	ldr	r2, [pc, #56]	; (800ddf4 <SystemCoreClockUpdate+0xe4>)
 800ddba:	6013      	str	r3, [r2, #0]
      break;
 800ddbc:	e003      	b.n	800ddc6 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800ddbe:	4b0d      	ldr	r3, [pc, #52]	; (800ddf4 <SystemCoreClockUpdate+0xe4>)
 800ddc0:	4a0d      	ldr	r2, [pc, #52]	; (800ddf8 <SystemCoreClockUpdate+0xe8>)
 800ddc2:	601a      	str	r2, [r3, #0]
      break;
 800ddc4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800ddc6:	4b0a      	ldr	r3, [pc, #40]	; (800ddf0 <SystemCoreClockUpdate+0xe0>)
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	091b      	lsrs	r3, r3, #4
 800ddcc:	f003 030f 	and.w	r3, r3, #15
 800ddd0:	4a0b      	ldr	r2, [pc, #44]	; (800de00 <SystemCoreClockUpdate+0xf0>)
 800ddd2:	5cd3      	ldrb	r3, [r2, r3]
 800ddd4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800ddd6:	4b07      	ldr	r3, [pc, #28]	; (800ddf4 <SystemCoreClockUpdate+0xe4>)
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	fa22 f303 	lsr.w	r3, r2, r3
 800dde0:	4a04      	ldr	r2, [pc, #16]	; (800ddf4 <SystemCoreClockUpdate+0xe4>)
 800dde2:	6013      	str	r3, [r2, #0]
}
 800dde4:	bf00      	nop
 800dde6:	371c      	adds	r7, #28
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	40023800 	.word	0x40023800
 800ddf4:	20000008 	.word	0x20000008
 800ddf8:	00f42400 	.word	0x00f42400
 800ddfc:	017d7840 	.word	0x017d7840
 800de00:	0800e210 	.word	0x0800e210

0800de04 <strlen>:
 800de04:	4603      	mov	r3, r0
 800de06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de0a:	2a00      	cmp	r2, #0
 800de0c:	d1fb      	bne.n	800de06 <strlen+0x2>
 800de0e:	1a18      	subs	r0, r3, r0
 800de10:	3801      	subs	r0, #1
 800de12:	4770      	bx	lr

0800de14 <__aeabi_uldivmod>:
 800de14:	b953      	cbnz	r3, 800de2c <__aeabi_uldivmod+0x18>
 800de16:	b94a      	cbnz	r2, 800de2c <__aeabi_uldivmod+0x18>
 800de18:	2900      	cmp	r1, #0
 800de1a:	bf08      	it	eq
 800de1c:	2800      	cmpeq	r0, #0
 800de1e:	bf1c      	itt	ne
 800de20:	f04f 31ff 	movne.w	r1, #4294967295
 800de24:	f04f 30ff 	movne.w	r0, #4294967295
 800de28:	f000 b97a 	b.w	800e120 <__aeabi_idiv0>
 800de2c:	f1ad 0c08 	sub.w	ip, sp, #8
 800de30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800de34:	f000 f806 	bl	800de44 <__udivmoddi4>
 800de38:	f8dd e004 	ldr.w	lr, [sp, #4]
 800de3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de40:	b004      	add	sp, #16
 800de42:	4770      	bx	lr

0800de44 <__udivmoddi4>:
 800de44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de48:	468c      	mov	ip, r1
 800de4a:	460d      	mov	r5, r1
 800de4c:	4604      	mov	r4, r0
 800de4e:	9e08      	ldr	r6, [sp, #32]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d151      	bne.n	800def8 <__udivmoddi4+0xb4>
 800de54:	428a      	cmp	r2, r1
 800de56:	4617      	mov	r7, r2
 800de58:	d96d      	bls.n	800df36 <__udivmoddi4+0xf2>
 800de5a:	fab2 fe82 	clz	lr, r2
 800de5e:	f1be 0f00 	cmp.w	lr, #0
 800de62:	d00b      	beq.n	800de7c <__udivmoddi4+0x38>
 800de64:	f1ce 0c20 	rsb	ip, lr, #32
 800de68:	fa01 f50e 	lsl.w	r5, r1, lr
 800de6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 800de70:	fa02 f70e 	lsl.w	r7, r2, lr
 800de74:	ea4c 0c05 	orr.w	ip, ip, r5
 800de78:	fa00 f40e 	lsl.w	r4, r0, lr
 800de7c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800de80:	0c25      	lsrs	r5, r4, #16
 800de82:	fbbc f8fa 	udiv	r8, ip, sl
 800de86:	fa1f f987 	uxth.w	r9, r7
 800de8a:	fb0a cc18 	mls	ip, sl, r8, ip
 800de8e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800de92:	fb08 f309 	mul.w	r3, r8, r9
 800de96:	42ab      	cmp	r3, r5
 800de98:	d90a      	bls.n	800deb0 <__udivmoddi4+0x6c>
 800de9a:	19ed      	adds	r5, r5, r7
 800de9c:	f108 32ff 	add.w	r2, r8, #4294967295
 800dea0:	f080 8123 	bcs.w	800e0ea <__udivmoddi4+0x2a6>
 800dea4:	42ab      	cmp	r3, r5
 800dea6:	f240 8120 	bls.w	800e0ea <__udivmoddi4+0x2a6>
 800deaa:	f1a8 0802 	sub.w	r8, r8, #2
 800deae:	443d      	add	r5, r7
 800deb0:	1aed      	subs	r5, r5, r3
 800deb2:	b2a4      	uxth	r4, r4
 800deb4:	fbb5 f0fa 	udiv	r0, r5, sl
 800deb8:	fb0a 5510 	mls	r5, sl, r0, r5
 800debc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800dec0:	fb00 f909 	mul.w	r9, r0, r9
 800dec4:	45a1      	cmp	r9, r4
 800dec6:	d909      	bls.n	800dedc <__udivmoddi4+0x98>
 800dec8:	19e4      	adds	r4, r4, r7
 800deca:	f100 33ff 	add.w	r3, r0, #4294967295
 800dece:	f080 810a 	bcs.w	800e0e6 <__udivmoddi4+0x2a2>
 800ded2:	45a1      	cmp	r9, r4
 800ded4:	f240 8107 	bls.w	800e0e6 <__udivmoddi4+0x2a2>
 800ded8:	3802      	subs	r0, #2
 800deda:	443c      	add	r4, r7
 800dedc:	eba4 0409 	sub.w	r4, r4, r9
 800dee0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800dee4:	2100      	movs	r1, #0
 800dee6:	2e00      	cmp	r6, #0
 800dee8:	d061      	beq.n	800dfae <__udivmoddi4+0x16a>
 800deea:	fa24 f40e 	lsr.w	r4, r4, lr
 800deee:	2300      	movs	r3, #0
 800def0:	6034      	str	r4, [r6, #0]
 800def2:	6073      	str	r3, [r6, #4]
 800def4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800def8:	428b      	cmp	r3, r1
 800defa:	d907      	bls.n	800df0c <__udivmoddi4+0xc8>
 800defc:	2e00      	cmp	r6, #0
 800defe:	d054      	beq.n	800dfaa <__udivmoddi4+0x166>
 800df00:	2100      	movs	r1, #0
 800df02:	e886 0021 	stmia.w	r6, {r0, r5}
 800df06:	4608      	mov	r0, r1
 800df08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df0c:	fab3 f183 	clz	r1, r3
 800df10:	2900      	cmp	r1, #0
 800df12:	f040 808e 	bne.w	800e032 <__udivmoddi4+0x1ee>
 800df16:	42ab      	cmp	r3, r5
 800df18:	d302      	bcc.n	800df20 <__udivmoddi4+0xdc>
 800df1a:	4282      	cmp	r2, r0
 800df1c:	f200 80fa 	bhi.w	800e114 <__udivmoddi4+0x2d0>
 800df20:	1a84      	subs	r4, r0, r2
 800df22:	eb65 0503 	sbc.w	r5, r5, r3
 800df26:	2001      	movs	r0, #1
 800df28:	46ac      	mov	ip, r5
 800df2a:	2e00      	cmp	r6, #0
 800df2c:	d03f      	beq.n	800dfae <__udivmoddi4+0x16a>
 800df2e:	e886 1010 	stmia.w	r6, {r4, ip}
 800df32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df36:	b912      	cbnz	r2, 800df3e <__udivmoddi4+0xfa>
 800df38:	2701      	movs	r7, #1
 800df3a:	fbb7 f7f2 	udiv	r7, r7, r2
 800df3e:	fab7 fe87 	clz	lr, r7
 800df42:	f1be 0f00 	cmp.w	lr, #0
 800df46:	d134      	bne.n	800dfb2 <__udivmoddi4+0x16e>
 800df48:	1beb      	subs	r3, r5, r7
 800df4a:	0c3a      	lsrs	r2, r7, #16
 800df4c:	fa1f fc87 	uxth.w	ip, r7
 800df50:	2101      	movs	r1, #1
 800df52:	fbb3 f8f2 	udiv	r8, r3, r2
 800df56:	0c25      	lsrs	r5, r4, #16
 800df58:	fb02 3318 	mls	r3, r2, r8, r3
 800df5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800df60:	fb0c f308 	mul.w	r3, ip, r8
 800df64:	42ab      	cmp	r3, r5
 800df66:	d907      	bls.n	800df78 <__udivmoddi4+0x134>
 800df68:	19ed      	adds	r5, r5, r7
 800df6a:	f108 30ff 	add.w	r0, r8, #4294967295
 800df6e:	d202      	bcs.n	800df76 <__udivmoddi4+0x132>
 800df70:	42ab      	cmp	r3, r5
 800df72:	f200 80d1 	bhi.w	800e118 <__udivmoddi4+0x2d4>
 800df76:	4680      	mov	r8, r0
 800df78:	1aed      	subs	r5, r5, r3
 800df7a:	b2a3      	uxth	r3, r4
 800df7c:	fbb5 f0f2 	udiv	r0, r5, r2
 800df80:	fb02 5510 	mls	r5, r2, r0, r5
 800df84:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800df88:	fb0c fc00 	mul.w	ip, ip, r0
 800df8c:	45a4      	cmp	ip, r4
 800df8e:	d907      	bls.n	800dfa0 <__udivmoddi4+0x15c>
 800df90:	19e4      	adds	r4, r4, r7
 800df92:	f100 33ff 	add.w	r3, r0, #4294967295
 800df96:	d202      	bcs.n	800df9e <__udivmoddi4+0x15a>
 800df98:	45a4      	cmp	ip, r4
 800df9a:	f200 80b8 	bhi.w	800e10e <__udivmoddi4+0x2ca>
 800df9e:	4618      	mov	r0, r3
 800dfa0:	eba4 040c 	sub.w	r4, r4, ip
 800dfa4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800dfa8:	e79d      	b.n	800dee6 <__udivmoddi4+0xa2>
 800dfaa:	4631      	mov	r1, r6
 800dfac:	4630      	mov	r0, r6
 800dfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfb2:	f1ce 0420 	rsb	r4, lr, #32
 800dfb6:	fa05 f30e 	lsl.w	r3, r5, lr
 800dfba:	fa07 f70e 	lsl.w	r7, r7, lr
 800dfbe:	fa20 f804 	lsr.w	r8, r0, r4
 800dfc2:	0c3a      	lsrs	r2, r7, #16
 800dfc4:	fa25 f404 	lsr.w	r4, r5, r4
 800dfc8:	ea48 0803 	orr.w	r8, r8, r3
 800dfcc:	fbb4 f1f2 	udiv	r1, r4, r2
 800dfd0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800dfd4:	fb02 4411 	mls	r4, r2, r1, r4
 800dfd8:	fa1f fc87 	uxth.w	ip, r7
 800dfdc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800dfe0:	fb01 f30c 	mul.w	r3, r1, ip
 800dfe4:	42ab      	cmp	r3, r5
 800dfe6:	fa00 f40e 	lsl.w	r4, r0, lr
 800dfea:	d909      	bls.n	800e000 <__udivmoddi4+0x1bc>
 800dfec:	19ed      	adds	r5, r5, r7
 800dfee:	f101 30ff 	add.w	r0, r1, #4294967295
 800dff2:	f080 808a 	bcs.w	800e10a <__udivmoddi4+0x2c6>
 800dff6:	42ab      	cmp	r3, r5
 800dff8:	f240 8087 	bls.w	800e10a <__udivmoddi4+0x2c6>
 800dffc:	3902      	subs	r1, #2
 800dffe:	443d      	add	r5, r7
 800e000:	1aeb      	subs	r3, r5, r3
 800e002:	fa1f f588 	uxth.w	r5, r8
 800e006:	fbb3 f0f2 	udiv	r0, r3, r2
 800e00a:	fb02 3310 	mls	r3, r2, r0, r3
 800e00e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800e012:	fb00 f30c 	mul.w	r3, r0, ip
 800e016:	42ab      	cmp	r3, r5
 800e018:	d907      	bls.n	800e02a <__udivmoddi4+0x1e6>
 800e01a:	19ed      	adds	r5, r5, r7
 800e01c:	f100 38ff 	add.w	r8, r0, #4294967295
 800e020:	d26f      	bcs.n	800e102 <__udivmoddi4+0x2be>
 800e022:	42ab      	cmp	r3, r5
 800e024:	d96d      	bls.n	800e102 <__udivmoddi4+0x2be>
 800e026:	3802      	subs	r0, #2
 800e028:	443d      	add	r5, r7
 800e02a:	1aeb      	subs	r3, r5, r3
 800e02c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800e030:	e78f      	b.n	800df52 <__udivmoddi4+0x10e>
 800e032:	f1c1 0720 	rsb	r7, r1, #32
 800e036:	fa22 f807 	lsr.w	r8, r2, r7
 800e03a:	408b      	lsls	r3, r1
 800e03c:	fa05 f401 	lsl.w	r4, r5, r1
 800e040:	ea48 0303 	orr.w	r3, r8, r3
 800e044:	fa20 fe07 	lsr.w	lr, r0, r7
 800e048:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800e04c:	40fd      	lsrs	r5, r7
 800e04e:	ea4e 0e04 	orr.w	lr, lr, r4
 800e052:	fbb5 f9fc 	udiv	r9, r5, ip
 800e056:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800e05a:	fb0c 5519 	mls	r5, ip, r9, r5
 800e05e:	fa1f f883 	uxth.w	r8, r3
 800e062:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800e066:	fb09 f408 	mul.w	r4, r9, r8
 800e06a:	42ac      	cmp	r4, r5
 800e06c:	fa02 f201 	lsl.w	r2, r2, r1
 800e070:	fa00 fa01 	lsl.w	sl, r0, r1
 800e074:	d908      	bls.n	800e088 <__udivmoddi4+0x244>
 800e076:	18ed      	adds	r5, r5, r3
 800e078:	f109 30ff 	add.w	r0, r9, #4294967295
 800e07c:	d243      	bcs.n	800e106 <__udivmoddi4+0x2c2>
 800e07e:	42ac      	cmp	r4, r5
 800e080:	d941      	bls.n	800e106 <__udivmoddi4+0x2c2>
 800e082:	f1a9 0902 	sub.w	r9, r9, #2
 800e086:	441d      	add	r5, r3
 800e088:	1b2d      	subs	r5, r5, r4
 800e08a:	fa1f fe8e 	uxth.w	lr, lr
 800e08e:	fbb5 f0fc 	udiv	r0, r5, ip
 800e092:	fb0c 5510 	mls	r5, ip, r0, r5
 800e096:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800e09a:	fb00 f808 	mul.w	r8, r0, r8
 800e09e:	45a0      	cmp	r8, r4
 800e0a0:	d907      	bls.n	800e0b2 <__udivmoddi4+0x26e>
 800e0a2:	18e4      	adds	r4, r4, r3
 800e0a4:	f100 35ff 	add.w	r5, r0, #4294967295
 800e0a8:	d229      	bcs.n	800e0fe <__udivmoddi4+0x2ba>
 800e0aa:	45a0      	cmp	r8, r4
 800e0ac:	d927      	bls.n	800e0fe <__udivmoddi4+0x2ba>
 800e0ae:	3802      	subs	r0, #2
 800e0b0:	441c      	add	r4, r3
 800e0b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800e0b6:	eba4 0408 	sub.w	r4, r4, r8
 800e0ba:	fba0 8902 	umull	r8, r9, r0, r2
 800e0be:	454c      	cmp	r4, r9
 800e0c0:	46c6      	mov	lr, r8
 800e0c2:	464d      	mov	r5, r9
 800e0c4:	d315      	bcc.n	800e0f2 <__udivmoddi4+0x2ae>
 800e0c6:	d012      	beq.n	800e0ee <__udivmoddi4+0x2aa>
 800e0c8:	b156      	cbz	r6, 800e0e0 <__udivmoddi4+0x29c>
 800e0ca:	ebba 030e 	subs.w	r3, sl, lr
 800e0ce:	eb64 0405 	sbc.w	r4, r4, r5
 800e0d2:	fa04 f707 	lsl.w	r7, r4, r7
 800e0d6:	40cb      	lsrs	r3, r1
 800e0d8:	431f      	orrs	r7, r3
 800e0da:	40cc      	lsrs	r4, r1
 800e0dc:	6037      	str	r7, [r6, #0]
 800e0de:	6074      	str	r4, [r6, #4]
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	e6f8      	b.n	800dedc <__udivmoddi4+0x98>
 800e0ea:	4690      	mov	r8, r2
 800e0ec:	e6e0      	b.n	800deb0 <__udivmoddi4+0x6c>
 800e0ee:	45c2      	cmp	sl, r8
 800e0f0:	d2ea      	bcs.n	800e0c8 <__udivmoddi4+0x284>
 800e0f2:	ebb8 0e02 	subs.w	lr, r8, r2
 800e0f6:	eb69 0503 	sbc.w	r5, r9, r3
 800e0fa:	3801      	subs	r0, #1
 800e0fc:	e7e4      	b.n	800e0c8 <__udivmoddi4+0x284>
 800e0fe:	4628      	mov	r0, r5
 800e100:	e7d7      	b.n	800e0b2 <__udivmoddi4+0x26e>
 800e102:	4640      	mov	r0, r8
 800e104:	e791      	b.n	800e02a <__udivmoddi4+0x1e6>
 800e106:	4681      	mov	r9, r0
 800e108:	e7be      	b.n	800e088 <__udivmoddi4+0x244>
 800e10a:	4601      	mov	r1, r0
 800e10c:	e778      	b.n	800e000 <__udivmoddi4+0x1bc>
 800e10e:	3802      	subs	r0, #2
 800e110:	443c      	add	r4, r7
 800e112:	e745      	b.n	800dfa0 <__udivmoddi4+0x15c>
 800e114:	4608      	mov	r0, r1
 800e116:	e708      	b.n	800df2a <__udivmoddi4+0xe6>
 800e118:	f1a8 0802 	sub.w	r8, r8, #2
 800e11c:	443d      	add	r5, r7
 800e11e:	e72b      	b.n	800df78 <__udivmoddi4+0x134>

0800e120 <__aeabi_idiv0>:
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop

0800e124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800e124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e15c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e128:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e12a:	e003      	b.n	800e134 <LoopCopyDataInit>

0800e12c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e12c:	4b0c      	ldr	r3, [pc, #48]	; (800e160 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e12e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e130:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e132:	3104      	adds	r1, #4

0800e134 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e134:	480b      	ldr	r0, [pc, #44]	; (800e164 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e136:	4b0c      	ldr	r3, [pc, #48]	; (800e168 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e138:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e13a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e13c:	d3f6      	bcc.n	800e12c <CopyDataInit>
  ldr  r2, =_sbss
 800e13e:	4a0b      	ldr	r2, [pc, #44]	; (800e16c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e140:	e002      	b.n	800e148 <LoopFillZerobss>

0800e142 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e142:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e144:	f842 3b04 	str.w	r3, [r2], #4

0800e148 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e148:	4b09      	ldr	r3, [pc, #36]	; (800e170 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e14a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e14c:	d3f9      	bcc.n	800e142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e14e:	f7ff fda9 	bl	800dca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e152:	f000 f811 	bl	800e178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e156:	f7fe fe45 	bl	800cde4 <main>
  bx  lr    
 800e15a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800e15c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800e160:	0800e238 	.word	0x0800e238
  ldr  r0, =_sdata
 800e164:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e168:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800e16c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800e170:	2000063c 	.word	0x2000063c

0800e174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e174:	e7fe      	b.n	800e174 <ADC_IRQHandler>
	...

0800e178 <__libc_init_array>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	4e0d      	ldr	r6, [pc, #52]	; (800e1b0 <__libc_init_array+0x38>)
 800e17c:	4c0d      	ldr	r4, [pc, #52]	; (800e1b4 <__libc_init_array+0x3c>)
 800e17e:	1ba4      	subs	r4, r4, r6
 800e180:	10a4      	asrs	r4, r4, #2
 800e182:	2500      	movs	r5, #0
 800e184:	42a5      	cmp	r5, r4
 800e186:	d109      	bne.n	800e19c <__libc_init_array+0x24>
 800e188:	4e0b      	ldr	r6, [pc, #44]	; (800e1b8 <__libc_init_array+0x40>)
 800e18a:	4c0c      	ldr	r4, [pc, #48]	; (800e1bc <__libc_init_array+0x44>)
 800e18c:	f000 f818 	bl	800e1c0 <_init>
 800e190:	1ba4      	subs	r4, r4, r6
 800e192:	10a4      	asrs	r4, r4, #2
 800e194:	2500      	movs	r5, #0
 800e196:	42a5      	cmp	r5, r4
 800e198:	d105      	bne.n	800e1a6 <__libc_init_array+0x2e>
 800e19a:	bd70      	pop	{r4, r5, r6, pc}
 800e19c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e1a0:	4798      	blx	r3
 800e1a2:	3501      	adds	r5, #1
 800e1a4:	e7ee      	b.n	800e184 <__libc_init_array+0xc>
 800e1a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e1aa:	4798      	blx	r3
 800e1ac:	3501      	adds	r5, #1
 800e1ae:	e7f2      	b.n	800e196 <__libc_init_array+0x1e>
 800e1b0:	0800e230 	.word	0x0800e230
 800e1b4:	0800e230 	.word	0x0800e230
 800e1b8:	0800e230 	.word	0x0800e230
 800e1bc:	0800e234 	.word	0x0800e234

0800e1c0 <_init>:
 800e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c2:	bf00      	nop
 800e1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1c6:	bc08      	pop	{r3}
 800e1c8:	469e      	mov	lr, r3
 800e1ca:	4770      	bx	lr

0800e1cc <_fini>:
 800e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ce:	bf00      	nop
 800e1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1d2:	bc08      	pop	{r3}
 800e1d4:	469e      	mov	lr, r3
 800e1d6:	4770      	bx	lr
