/**
 ******************************************************************************
 * @file    CAN2018.c
 * @author  SGT Generated by tool
 * @version V0.1.0 (generator)
 * @date    23-March-2019
 * @brief   CAN protocol application/PROFILE layer for use in SGT formula student electric 2018
 ******************************************************************************
 */
//#include "stm32f1xx_hal.h"
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_can.h"
#include "CAN2018.h"

uint8_t uint8 = 0;
uint16_t uint16 = 0;
int i = 0;
int16_t int16 = 0;

//CanTxMsgTypeDef CanTxMsg;
//CanRxMsgTypeDef CanRxMsg;

#if defined(Tx_BBOX_power) || defined(Rx_BBOX_power)
BBOX_power_TypeDef BBOX_power_Data = { .power = 0, .current = 0, .voltage = 0 };
#endif
/*
 #ifdef Tx_BBOX_power
 void Tx_BBOX_power_Data(CAN_HandleTypeDef* hcan, BBOX_power_TypeDef* BBOX_power_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_BBOX_power;
 hcan->pTxMsg->DLC = DLC_BBOX_power;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((BBOX_power_Data->power >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((BBOX_power_Data->power)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((BBOX_power_Data->current >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((BBOX_power_Data->current)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((BBOX_power_Data->voltage >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((BBOX_power_Data->voltage)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_BBOX_power
 void Rx_BBOX_power_Data(CAN_HandleTypeDef* hcan, BBOX_power_TypeDef* BBOX_power_Data)
 {
 BBOX_power_Data->power = (int16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 BBOX_power_Data->current = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 BBOX_power_Data->voltage = (uint16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_wheel_RPM) || defined(Rx_wheel_RPM)
wheel_RPM_TypeDef wheel_RPM_Data = { .front_right = 0, .front_left = 0,
		.rear_left = 0, .rear_right = 0 };
#endif
/*
 #ifdef Tx_wheel_RPM
 void Tx_wheel_RPM_Data(CAN_HandleTypeDef* hcan, wheel_RPM_TypeDef* wheel_RPM_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_wheel_RPM;
 hcan->pTxMsg->DLC = DLC_wheel_RPM;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((wheel_RPM_Data->front_right >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((wheel_RPM_Data->front_right)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((wheel_RPM_Data->front_left >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((wheel_RPM_Data->front_left)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((wheel_RPM_Data->rear_left >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((wheel_RPM_Data->rear_left)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((wheel_RPM_Data->rear_right >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((wheel_RPM_Data->rear_right)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_wheel_RPM
 void Rx_wheel_RPM_Data(CAN_HandleTypeDef* hcan, wheel_RPM_TypeDef* wheel_RPM_Data)
 {
 wheel_RPM_Data->front_right = (uint16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 wheel_RPM_Data->front_left = (uint16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 wheel_RPM_Data->rear_left = (uint16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 wheel_RPM_Data->rear_right = (uint16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_BBOX_status) || defined(Rx_BBOX_status)
BBOX_status_TypeDef BBOX_status_Data = { .SHD_IN = 0, .SHD_OUT = 0, .TSMS = 0,
		.AIR_N = 0, .AIR_P = 0, .PRECH_60V = 0, .IMD_OK = 0, .BMS_OK = 0,
		.SIGNAL_ERROR = 0, .SHD_RESET = 0, .SHD_EN = 0, .POLARITY = 0,
		.FANS = 0, .STM_temp = 0 };
#endif
/*
 #ifdef Tx_BBOX_status
 void Tx_BBOX_status_Data(CAN_HandleTypeDef* hcan, BBOX_status_TypeDef* BBOX_status_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_BBOX_status;
 hcan->pTxMsg->DLC = DLC_BBOX_status;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((BBOX_status_Data->SHD_IN << 7)&0b11111111);
 hcan->pTxMsg->Data[0] |= (uint8_t)((BBOX_status_Data->SHD_OUT << 6)&0b1111111);
 hcan->pTxMsg->Data[0] |= (uint8_t)((BBOX_status_Data->TSMS << 5)&0b111111);
 hcan->pTxMsg->Data[0] |= (uint8_t)((BBOX_status_Data->AIR_N << 4)&0b11111);
 hcan->pTxMsg->Data[0] |= (uint8_t)((BBOX_status_Data->AIR_P << 3)&0b1111);
 hcan->pTxMsg->Data[0] |= (uint8_t)((BBOX_status_Data->PRECH_60V << 2)&0b111);
 hcan->pTxMsg->Data[0] |= (uint8_t)((BBOX_status_Data->IMD_OK << 1)&0b11);
 hcan->pTxMsg->Data[0] |= (uint8_t)((BBOX_status_Data->BMS_OK)&0b1);
 hcan->pTxMsg->Data[1] = (uint8_t)((BBOX_status_Data->SIGNAL_ERROR << 7)&0b11111111);
 hcan->pTxMsg->Data[1] |= (uint8_t)((BBOX_status_Data->SHD_RESET << 6)&0b1111111);
 hcan->pTxMsg->Data[1] |= (uint8_t)((BBOX_status_Data->SHD_EN << 5)&0b111111);
 hcan->pTxMsg->Data[1] |= (uint8_t)((BBOX_status_Data->POLARITY << 4)&0b11111);
 hcan->pTxMsg->Data[1] |= (uint8_t)((BBOX_status_Data->FANS << 3)&0b1111);
 hcan->pTxMsg->Data[1] |= (uint8_t)((BBOX_status_Data->STM_temp >> 5)&0b111);
 hcan->pTxMsg->Data[2] = (uint8_t)((BBOX_status_Data->STM_temp << 3)&0b11111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_BBOX_status
 void Rx_BBOX_status_Data(CAN_HandleTypeDef* hcan, BBOX_status_TypeDef* BBOX_status_Data)
 {
 BBOX_status_Data->SHD_IN = (uint8_t)(((hcan->pRxMsg->Data[0]&0b11111111) >> 7));
 BBOX_status_Data->SHD_OUT = (uint8_t)(((hcan->pRxMsg->Data[0]&0b1111111) >> 6));
 BBOX_status_Data->TSMS = (uint8_t)(((hcan->pRxMsg->Data[0]&0b111111) >> 5));
 BBOX_status_Data->AIR_N = (uint8_t)(((hcan->pRxMsg->Data[0]&0b11111) >> 4));
 BBOX_status_Data->AIR_P = (uint8_t)(((hcan->pRxMsg->Data[0]&0b1111) >> 3));
 BBOX_status_Data->PRECH_60V = (uint8_t)(((hcan->pRxMsg->Data[0]&0b111) >> 2));
 BBOX_status_Data->IMD_OK = (uint8_t)(((hcan->pRxMsg->Data[0]&0b11) >> 1));
 BBOX_status_Data->BMS_OK = (uint8_t)((hcan->pRxMsg->Data[0]&0b1));
 BBOX_status_Data->SIGNAL_ERROR = (uint8_t)(((hcan->pRxMsg->Data[1]&0b11111111) >> 7));
 BBOX_status_Data->SHD_RESET = (uint8_t)(((hcan->pRxMsg->Data[1]&0b1111111) >> 6));
 BBOX_status_Data->SHD_EN = (uint8_t)(((hcan->pRxMsg->Data[1]&0b111111) >> 5));
 BBOX_status_Data->POLARITY = (uint8_t)(((hcan->pRxMsg->Data[1]&0b11111) >> 4));
 BBOX_status_Data->FANS = (uint8_t)(((hcan->pRxMsg->Data[1]&0b1111) >> 3));
 BBOX_status_Data->STM_temp = (int8_t)(((hcan->pRxMsg->Data[1]&0b111) << 5) | ((hcan->pRxMsg->Data[2]&0b11111111111) >> 3));
 }
 #endif
 */

#if defined(Tx_FU_Values_1) || defined(Rx_FU_Values_1)
FU_Values_1_TypeDef FU_Values_1_Data = { .apps1 = 0, .apps2 = 0, .brake1 = 0,
		.brake2 = 0, .error = 0 };
#endif
/*
 #ifdef Tx_FU_Values_1
 void Tx_FU_Values_1_Data(CAN_HandleTypeDef* hcan, FU_Values_1_TypeDef* FU_Values_1_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_FU_Values_1;
 hcan->pTxMsg->DLC = DLC_FU_Values_1;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((FU_Values_1_Data->apps1)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((FU_Values_1_Data->apps2)&0b11111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((FU_Values_1_Data->brake1)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((FU_Values_1_Data->brake2)&0b11111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((FU_Values_1_Data->error >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((FU_Values_1_Data->error)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_FU_Values_1
 void Rx_FU_Values_1_Data(CAN_HandleTypeDef* hcan, FU_Values_1_TypeDef* FU_Values_1_Data)
 {
 FU_Values_1_Data->apps1 = (uint8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 FU_Values_1_Data->apps2 = (uint8_t)((hcan->pRxMsg->Data[1]&0b11111111));
 FU_Values_1_Data->brake1 = (uint8_t)((hcan->pRxMsg->Data[2]&0b11111111));
 FU_Values_1_Data->brake2 = (uint8_t)((hcan->pRxMsg->Data[3]&0b11111111));
 FU_Values_1_Data->error = (uint16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_BBOX_command) || defined(Rx_BBOX_command)
BBOX_command_TypeDef BBOX_command_Data = { .FANS = 0, .SHD_EN = 0 };
#endif
/*
 #ifdef Tx_BBOX_command
 void Tx_BBOX_command_Data(CAN_HandleTypeDef* hcan, BBOX_command_TypeDef* BBOX_command_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_BBOX_command;
 hcan->pTxMsg->DLC = DLC_BBOX_command;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((BBOX_command_Data->FANS << 7)&0b11111111);
 hcan->pTxMsg->Data[0] |= (uint8_t)((BBOX_command_Data->SHD_EN << 6)&0b1111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_BBOX_command
 void Rx_BBOX_command_Data(CAN_HandleTypeDef* hcan, BBOX_command_TypeDef* BBOX_command_Data)
 {
 BBOX_command_Data->FANS = (uint8_t)(((hcan->pRxMsg->Data[0]&0b11111111) >> 7));
 BBOX_command_Data->SHD_EN = (uint8_t)(((hcan->pRxMsg->Data[0]&0b1111111) >> 6));
 }
 #endif
 */

#if defined(Tx_BMS_Command) || defined(Rx_BMS_Command)
BMS_Command_TypeDef BMS_Command_Data = { .BMS_Balanc = 0, .BMS_FullMode = 0,
		.BMS_OK = 0, .BMS_ONOFF = 0, .BMS_CAN = 0 };
#endif
/*
 #ifdef Tx_BMS_Command
 void Tx_BMS_Command_Data(CAN_HandleTypeDef* hcan, BMS_Command_TypeDef* BMS_Command_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_BMS_Command;
 hcan->pTxMsg->DLC = DLC_BMS_Command;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((BMS_Command_Data->BMS_Balanc << 6)&0b11111111);
 hcan->pTxMsg->Data[0] |= (uint8_t)((BMS_Command_Data->BMS_FullMode << 5)&0b111111);
 hcan->pTxMsg->Data[0] |= (uint8_t)((BMS_Command_Data->BMS_OK << 3)&0b11111);
 hcan->pTxMsg->Data[0] |= (uint8_t)((BMS_Command_Data->BMS_ONOFF << 1)&0b111);
 hcan->pTxMsg->Data[0] |= (uint8_t)((BMS_Command_Data->BMS_CAN >> 1)&0b1);
 hcan->pTxMsg->Data[1] = (uint8_t)((BMS_Command_Data->BMS_CAN << 7)&0b111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_BMS_Command
 void Rx_BMS_Command_Data(CAN_HandleTypeDef* hcan, BMS_Command_TypeDef* BMS_Command_Data)
 {
 BMS_Command_Data->BMS_Balanc = (uint8_t)(((hcan->pRxMsg->Data[0]&0b11111111) >> 6));
 BMS_Command_Data->BMS_FullMode = (uint8_t)(((hcan->pRxMsg->Data[0]&0b111111) >> 5));
 BMS_Command_Data->BMS_OK = (uint8_t)(((hcan->pRxMsg->Data[0]&0b11111) >> 3));
 BMS_Command_Data->BMS_ONOFF = (uint8_t)(((hcan->pRxMsg->Data[0]&0b111) >> 1));
 BMS_Command_Data->BMS_CAN = (uint8_t)(((hcan->pRxMsg->Data[0]&0b1) << 1) | ((hcan->pRxMsg->Data[1]&0b111111111) >> 7));
 }
 #endif
 */

#if defined(Tx_BMS_State) || defined(Rx_BMS_State)
BMS_State_TypeDef BMS_State_Data = { .BMS_Mode = 0, .BMS_Faults = 0,
		.CellVolt_L = 0, .CellVolt_H = 0, .CellTemp_L = 0, .CellTemp_H = 0,
		.BMS_Ident = 0 };
#endif
/*
 #ifdef Tx_BMS_State
 void Tx_BMS_State_Data(CAN_HandleTypeDef* hcan, BMS_State_TypeDef* BMS_State_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_BMS_State;
 hcan->pTxMsg->DLC = DLC_BMS_State;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((BMS_State_Data->BMS_Mode)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((BMS_State_Data->BMS_Faults >> 8)&0b11111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((BMS_State_Data->BMS_Faults)&0b1111111111111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((BMS_State_Data->CellVolt_L)&0b11111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((BMS_State_Data->CellVolt_H)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((BMS_State_Data->CellTemp_L)&0b11111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((BMS_State_Data->CellTemp_H)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((BMS_State_Data->BMS_Ident)&0b11111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_BMS_State
 void Rx_BMS_State_Data(CAN_HandleTypeDef* hcan, BMS_State_TypeDef* BMS_State_Data)
 {
 BMS_State_Data->BMS_Mode = (uint8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 BMS_State_Data->BMS_Faults = (uint16_t)(((hcan->pRxMsg->Data[1]&0b11111111) << 8) | (hcan->pRxMsg->Data[2]&0b1111111111111111));
 BMS_State_Data->CellVolt_L = (uint8_t)((hcan->pRxMsg->Data[3]&0b11111111));
 BMS_State_Data->CellVolt_H = (uint8_t)((hcan->pRxMsg->Data[4]&0b11111111));
 BMS_State_Data->CellTemp_L = (uint8_t)((hcan->pRxMsg->Data[5]&0b11111111));
 BMS_State_Data->CellTemp_H = (uint8_t)((hcan->pRxMsg->Data[6]&0b11111111));
 BMS_State_Data->BMS_Ident = (uint8_t)((hcan->pRxMsg->Data[7]&0b11111111));
 }
 #endif
 */

#if defined(Tx_ECU_State) || defined(Rx_ECU_State)
ECU_State_TypeDef ECU_State_Data = { .ECU_Status = 0, .FL_AMK_Status = 0,
		.FR_AMK_Status = 0, .RL_AMK_Status = 0, .RR_AMK_Status = 0,
		.TempMotor_H = 0, .TempInverter_H = 0, .TempIGBT_H = 0 };
#endif
/*
 #ifdef Tx_ECU_State
 void Tx_ECU_State_Data(CAN_HandleTypeDef* hcan, ECU_State_TypeDef* ECU_State_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_ECU_State;
 hcan->pTxMsg->DLC = DLC_ECU_State;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((ECU_State_Data->ECU_Status)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((ECU_State_Data->FL_AMK_Status)&0b11111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((ECU_State_Data->FR_AMK_Status)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((ECU_State_Data->RL_AMK_Status)&0b11111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((ECU_State_Data->RR_AMK_Status)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((ECU_State_Data->TempMotor_H)&0b11111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((ECU_State_Data->TempInverter_H)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((ECU_State_Data->TempIGBT_H)&0b11111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_ECU_State
 void Rx_ECU_State_Data(CAN_HandleTypeDef* hcan, ECU_State_TypeDef* ECU_State_Data)
 {
 ECU_State_Data->ECU_Status = (uint8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 ECU_State_Data->FL_AMK_Status = (uint8_t)((hcan->pRxMsg->Data[1]&0b11111111));
 ECU_State_Data->FR_AMK_Status = (uint8_t)((hcan->pRxMsg->Data[2]&0b11111111));
 ECU_State_Data->RL_AMK_Status = (uint8_t)((hcan->pRxMsg->Data[3]&0b11111111));
 ECU_State_Data->RR_AMK_Status = (uint8_t)((hcan->pRxMsg->Data[4]&0b11111111));
 ECU_State_Data->TempMotor_H = (uint8_t)((hcan->pRxMsg->Data[5]&0b11111111));
 ECU_State_Data->TempInverter_H = (uint8_t)((hcan->pRxMsg->Data[6]&0b11111111));
 ECU_State_Data->TempIGBT_H = (uint8_t)((hcan->pRxMsg->Data[7]&0b11111111));
 }
 #endif
 */

#if defined(Tx_FU_Values_2) || defined(Rx_FU_Values_2)
FU_Values_2_TypeDef FU_Values_2_Data = { .steer = 0, .susp_FL = 0, .susp_FR = 0,
		.brake_pos = 0, .RTD = 0, .BOTS = 0, .SHDB = 0, .INERTIA_SW = 0,
		.reserve = 0 };
#endif
/*
 #ifdef Tx_FU_Values_2
 void Tx_FU_Values_2_Data(CAN_HandleTypeDef* hcan, FU_Values_2_TypeDef* FU_Values_2_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_FU_Values_2;
 hcan->pTxMsg->DLC = DLC_FU_Values_2;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((FU_Values_2_Data->steer)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((FU_Values_2_Data->susp_FL >> 4)&0b11111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((FU_Values_2_Data->susp_FL << 4)&0b1111111111111111);
 hcan->pTxMsg->Data[2] |= (uint8_t)((FU_Values_2_Data->susp_FR >> 8)&0b1111);
 hcan->pTxMsg->Data[3] = (uint8_t)((FU_Values_2_Data->susp_FR)&0b111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((FU_Values_2_Data->brake_pos)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((FU_Values_2_Data->RTD << 7)&0b11111111);
 hcan->pTxMsg->Data[5] |= (uint8_t)((FU_Values_2_Data->BOTS << 6)&0b1111111);
 hcan->pTxMsg->Data[5] |= (uint8_t)((FU_Values_2_Data->SHDB << 5)&0b111111);
 hcan->pTxMsg->Data[5] |= (uint8_t)((FU_Values_2_Data->INERTIA_SW << 4)&0b11111);
 hcan->pTxMsg->Data[5] |= (uint8_t)((FU_Values_2_Data->reserve >> 4)&0b1111);
 hcan->pTxMsg->Data[6] = (uint8_t)((FU_Values_2_Data->reserve << 4)&0b111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_FU_Values_2
 void Rx_FU_Values_2_Data(CAN_HandleTypeDef* hcan, FU_Values_2_TypeDef* FU_Values_2_Data)
 {
 FU_Values_2_Data->steer = (int8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 FU_Values_2_Data->susp_FL = (uint16_t)(((hcan->pRxMsg->Data[1]&0b11111111) << 4) | ((hcan->pRxMsg->Data[2]&0b1111111111111111) >> 4));
 FU_Values_2_Data->susp_FR = (uint16_t)(((hcan->pRxMsg->Data[2]&0b1111) << 8) | (hcan->pRxMsg->Data[3]&0b111111111111));
 FU_Values_2_Data->brake_pos = (uint8_t)((hcan->pRxMsg->Data[4]&0b11111111));
 FU_Values_2_Data->RTD = (uint8_t)(((hcan->pRxMsg->Data[5]&0b11111111) >> 7));
 FU_Values_2_Data->BOTS = (uint8_t)(((hcan->pRxMsg->Data[5]&0b1111111) >> 6));
 FU_Values_2_Data->SHDB = (uint8_t)(((hcan->pRxMsg->Data[5]&0b111111) >> 5));
 FU_Values_2_Data->INERTIA_SW = (uint8_t)(((hcan->pRxMsg->Data[5]&0b11111) >> 4));
 FU_Values_2_Data->reserve = (uint8_t)(((hcan->pRxMsg->Data[5]&0b1111) << 4) | ((hcan->pRxMsg->Data[6]&0b111111111111) >> 4));
 }
 #endif
 */

#if defined(Tx_Interconnect) || defined(Rx_Interconnect)
Interconnect_TypeDef Interconnect_Data = { .car_state = 0, .left_w_pump = 0,
		.right_w_pump = 0, .brake_red = 0, .brake_white = 0, .tsas = 0,
		.killswitch_R = 0, .killswitch_L = 0, .reserve = 0, .susp_RR = 0,
		.susp_RL = 0 };
#endif
/*
 #ifdef Tx_Interconnect
 void Tx_Interconnect_Data(CAN_HandleTypeDef* hcan, Interconnect_TypeDef* Interconnect_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_Interconnect;
 hcan->pTxMsg->DLC = DLC_Interconnect;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((Interconnect_Data->car_state)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((Interconnect_Data->left_w_pump << 7)&0b11111111);
 hcan->pTxMsg->Data[1] |= (uint8_t)((Interconnect_Data->right_w_pump << 6)&0b1111111);
 hcan->pTxMsg->Data[1] |= (uint8_t)((Interconnect_Data->brake_red << 5)&0b111111);
 hcan->pTxMsg->Data[1] |= (uint8_t)((Interconnect_Data->brake_white << 4)&0b11111);
 hcan->pTxMsg->Data[1] |= (uint8_t)((Interconnect_Data->tsas << 3)&0b1111);
 hcan->pTxMsg->Data[1] |= (uint8_t)((Interconnect_Data->killswitch_R << 2)&0b111);
 hcan->pTxMsg->Data[1] |= (uint8_t)((Interconnect_Data->killswitch_L << 1)&0b11);
 hcan->pTxMsg->Data[1] |= (uint8_t)((Interconnect_Data->reserve >> 7)&0b1);
 hcan->pTxMsg->Data[2] = (uint8_t)((Interconnect_Data->reserve << 1)&0b111111111);
 hcan->pTxMsg->Data[2] |= (uint8_t)((Interconnect_Data->susp_RR >> 11)&0b1);
 hcan->pTxMsg->Data[3] = (uint8_t)((Interconnect_Data->susp_RR >> 3)&0b111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((Interconnect_Data->susp_RR << 5)&0b11111111111111111);
 hcan->pTxMsg->Data[4] |= (uint8_t)((Interconnect_Data->susp_RL >> 7)&0b11111);
 hcan->pTxMsg->Data[5] = (uint8_t)((Interconnect_Data->susp_RL << 1)&0b1111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_Interconnect
 void Rx_Interconnect_Data(CAN_HandleTypeDef* hcan, Interconnect_TypeDef* Interconnect_Data)
 {
 Interconnect_Data->car_state = (uint8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 Interconnect_Data->left_w_pump = (uint8_t)(((hcan->pRxMsg->Data[1]&0b11111111) >> 7));
 Interconnect_Data->right_w_pump = (uint8_t)(((hcan->pRxMsg->Data[1]&0b1111111) >> 6));
 Interconnect_Data->brake_red = (uint8_t)(((hcan->pRxMsg->Data[1]&0b111111) >> 5));
 Interconnect_Data->brake_white = (uint8_t)(((hcan->pRxMsg->Data[1]&0b11111) >> 4));
 Interconnect_Data->tsas = (uint8_t)(((hcan->pRxMsg->Data[1]&0b1111) >> 3));
 Interconnect_Data->killswitch_R = (uint8_t)(((hcan->pRxMsg->Data[1]&0b111) >> 2));
 Interconnect_Data->killswitch_L = (uint8_t)(((hcan->pRxMsg->Data[1]&0b11) >> 1));
 Interconnect_Data->reserve = (uint8_t)(((hcan->pRxMsg->Data[1]&0b1) << 7) | ((hcan->pRxMsg->Data[2]&0b111111111) >> 1));
 Interconnect_Data->susp_RR = (uint16_t)(((hcan->pRxMsg->Data[2]&0b1) << 11) | ((hcan->pRxMsg->Data[3]&0b111111111) << 3) | ((hcan->pRxMsg->Data[4]&0b11111111111111111) >> 5));
 Interconnect_Data->susp_RL = (uint16_t)(((hcan->pRxMsg->Data[4]&0b11111) << 7) | ((hcan->pRxMsg->Data[5]&0b1111111111111) >> 1));
 }
 #endif
 */

#if defined(Tx_BMS_Voltages) || defined(Rx_BMS_Voltages)
BMS_Voltages_TypeDef BMS_Voltages_Data = { .BMS_VoltIdent = 0, .BMS_Volt1 = 0,
		.BMS_Volt2 = 0, .BMS_Volt3 = 0, .BMS_Volt4 = 0, .BMS_Volt5 = 0,
		.BMS_Volt6 = 0, .BMS_Volt7 = 0 };
#endif
/*
 #ifdef Tx_BMS_Voltages
 void Tx_BMS_Voltages_Data(CAN_HandleTypeDef* hcan, BMS_Voltages_TypeDef* BMS_Voltages_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_BMS_Voltages;
 hcan->pTxMsg->DLC = DLC_BMS_Voltages;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((BMS_Voltages_Data->BMS_VoltIdent)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((BMS_Voltages_Data->BMS_Volt1)&0b11111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((BMS_Voltages_Data->BMS_Volt2)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((BMS_Voltages_Data->BMS_Volt3)&0b11111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((BMS_Voltages_Data->BMS_Volt4)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((BMS_Voltages_Data->BMS_Volt5)&0b11111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((BMS_Voltages_Data->BMS_Volt6)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((BMS_Voltages_Data->BMS_Volt7)&0b11111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_BMS_Voltages
 void Rx_BMS_Voltages_Data(CAN_HandleTypeDef* hcan, BMS_Voltages_TypeDef* BMS_Voltages_Data)
 {
 BMS_Voltages_Data->BMS_VoltIdent = (uint8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 BMS_Voltages_Data->BMS_Volt1 = (uint8_t)((hcan->pRxMsg->Data[1]&0b11111111));
 BMS_Voltages_Data->BMS_Volt2 = (uint8_t)((hcan->pRxMsg->Data[2]&0b11111111));
 BMS_Voltages_Data->BMS_Volt3 = (uint8_t)((hcan->pRxMsg->Data[3]&0b11111111));
 BMS_Voltages_Data->BMS_Volt4 = (uint8_t)((hcan->pRxMsg->Data[4]&0b11111111));
 BMS_Voltages_Data->BMS_Volt5 = (uint8_t)((hcan->pRxMsg->Data[5]&0b11111111));
 BMS_Voltages_Data->BMS_Volt6 = (uint8_t)((hcan->pRxMsg->Data[6]&0b11111111));
 BMS_Voltages_Data->BMS_Volt7 = (uint8_t)((hcan->pRxMsg->Data[7]&0b11111111));
 }
 #endif
 */

#if defined(Tx_BMS_Temps) || defined(Rx_BMS_Temps)
BMS_Temps_TypeDef BMS_Temps_Data = { .BMS_TempIdent = 0, .BMS_Temp1 = 0,
		.BMS_Temp2 = 0, .BMS_Temp3 = 0, .BMS_Temp4 = 0, .BMS_Temp5 = 0,
		.BMS_Temp6 = 0, .BMS_Temp7 = 0 };
#endif
/*
 #ifdef Tx_BMS_Temps
 void Tx_BMS_Temps_Data(CAN_HandleTypeDef* hcan, BMS_Temps_TypeDef* BMS_Temps_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_BMS_Temps;
 hcan->pTxMsg->DLC = DLC_BMS_Temps;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((BMS_Temps_Data->BMS_TempIdent)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((BMS_Temps_Data->BMS_Temp1)&0b11111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((BMS_Temps_Data->BMS_Temp2)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((BMS_Temps_Data->BMS_Temp3)&0b11111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((BMS_Temps_Data->BMS_Temp4)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((BMS_Temps_Data->BMS_Temp5)&0b11111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((BMS_Temps_Data->BMS_Temp6)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((BMS_Temps_Data->BMS_Temp7)&0b11111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_BMS_Temps
 void Rx_BMS_Temps_Data(CAN_HandleTypeDef* hcan, BMS_Temps_TypeDef* BMS_Temps_Data)
 {
 BMS_Temps_Data->BMS_TempIdent = (uint8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 BMS_Temps_Data->BMS_Temp1 = (uint8_t)((hcan->pRxMsg->Data[1]&0b11111111));
 BMS_Temps_Data->BMS_Temp2 = (uint8_t)((hcan->pRxMsg->Data[2]&0b11111111));
 BMS_Temps_Data->BMS_Temp3 = (uint8_t)((hcan->pRxMsg->Data[3]&0b11111111));
 BMS_Temps_Data->BMS_Temp4 = (uint8_t)((hcan->pRxMsg->Data[4]&0b11111111));
 BMS_Temps_Data->BMS_Temp5 = (uint8_t)((hcan->pRxMsg->Data[5]&0b11111111));
 BMS_Temps_Data->BMS_Temp6 = (uint8_t)((hcan->pRxMsg->Data[6]&0b11111111));
 BMS_Temps_Data->BMS_Temp7 = (uint8_t)((hcan->pRxMsg->Data[7]&0b11111111));
 }
 #endif
 */

#if defined(Tx_FL_AMK_Setpoints_1) || defined(Rx_FL_AMK_Setpoints_1)
FL_AMK_Setpoints_1_TypeDef FL_AMK_Setpoints_1_Data = { .AMK_Control = 0,
		.AMK_TargetVelocity = 0, .AMK_TorqueLimitPositiv = 0,
		.AMK_TorqueLimitNegativ = 0 };
#endif
/*
 #ifdef Tx_FL_AMK_Setpoints_1
 void Tx_FL_AMK_Setpoints_1_Data(CAN_HandleTypeDef* hcan, FL_AMK_Setpoints_1_TypeDef* FL_AMK_Setpoints_1_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_FL_AMK_Setpoints_1;
 hcan->pTxMsg->DLC = DLC_FL_AMK_Setpoints_1;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((FL_AMK_Setpoints_1_Data->AMK_Control >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((FL_AMK_Setpoints_1_Data->AMK_Control)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((FL_AMK_Setpoints_1_Data->AMK_TargetVelocity >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((FL_AMK_Setpoints_1_Data->AMK_TargetVelocity)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((FL_AMK_Setpoints_1_Data->AMK_TorqueLimitPositiv >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((FL_AMK_Setpoints_1_Data->AMK_TorqueLimitPositiv)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((FL_AMK_Setpoints_1_Data->AMK_TorqueLimitNegativ >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((FL_AMK_Setpoints_1_Data->AMK_TorqueLimitNegativ)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif

 #ifdef Rx_FL_AMK_Setpoints_1
 void Rx_FL_AMK_Setpoints_1_Data(CAN_HandleTypeDef* hcan, FL_AMK_Setpoints_1_TypeDef* FL_AMK_Setpoints_1_Data)
 {
 FL_AMK_Setpoints_1_Data->AMK_Control = (uint16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 FL_AMK_Setpoints_1_Data->AMK_TargetVelocity = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 FL_AMK_Setpoints_1_Data->AMK_TorqueLimitPositiv = (int16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 FL_AMK_Setpoints_1_Data->AMK_TorqueLimitNegativ = (int16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_FR_AMK_Setpoints_1) || defined(Rx_FR_AMK_Setpoints_1)
FR_AMK_Setpoints_1_TypeDef FR_AMK_Setpoints_1_Data = { .AMK_Control = 0,
		.AMK_TargetVelocity = 0, .AMK_TorqueLimitPositiv = 0,
		.AMK_TorqueLimitNegativ = 0 };
#endif
/*
 #ifdef Tx_FR_AMK_Setpoints_1
 void Tx_FR_AMK_Setpoints_1_Data(CAN_HandleTypeDef* hcan, FR_AMK_Setpoints_1_TypeDef* FR_AMK_Setpoints_1_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_FR_AMK_Setpoints_1;
 hcan->pTxMsg->DLC = DLC_FR_AMK_Setpoints_1;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((FR_AMK_Setpoints_1_Data->AMK_Control >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((FR_AMK_Setpoints_1_Data->AMK_Control)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((FR_AMK_Setpoints_1_Data->AMK_TargetVelocity >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((FR_AMK_Setpoints_1_Data->AMK_TargetVelocity)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((FR_AMK_Setpoints_1_Data->AMK_TorqueLimitPositiv >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((FR_AMK_Setpoints_1_Data->AMK_TorqueLimitPositiv)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((FR_AMK_Setpoints_1_Data->AMK_TorqueLimitNegativ >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((FR_AMK_Setpoints_1_Data->AMK_TorqueLimitNegativ)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_FR_AMK_Setpoints_1
 void Rx_FR_AMK_Setpoints_1_Data(CAN_HandleTypeDef* hcan, FR_AMK_Setpoints_1_TypeDef* FR_AMK_Setpoints_1_Data)
 {
 FR_AMK_Setpoints_1_Data->AMK_Control = (uint16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 FR_AMK_Setpoints_1_Data->AMK_TargetVelocity = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 FR_AMK_Setpoints_1_Data->AMK_TorqueLimitPositiv = (int16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 FR_AMK_Setpoints_1_Data->AMK_TorqueLimitNegativ = (int16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_RL_AMK_Setpoints_1) || defined(Rx_RL_AMK_Setpoints_1)
RL_AMK_Setpoints_1_TypeDef RL_AMK_Setpoints_1_Data = { .AMK_Control = 0,
		.AMK_TargetVelocity = 0, .AMK_TorqueLimitPositiv = 0,
		.AMK_TorqueLimitNegativ = 0 };
#endif
/*
 #ifdef Tx_RL_AMK_Setpoints_1
 void Tx_RL_AMK_Setpoints_1_Data(CAN_HandleTypeDef* hcan, RL_AMK_Setpoints_1_TypeDef* RL_AMK_Setpoints_1_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_RL_AMK_Setpoints_1;
 hcan->pTxMsg->DLC = DLC_RL_AMK_Setpoints_1;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((RL_AMK_Setpoints_1_Data->AMK_Control >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((RL_AMK_Setpoints_1_Data->AMK_Control)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((RL_AMK_Setpoints_1_Data->AMK_TargetVelocity >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((RL_AMK_Setpoints_1_Data->AMK_TargetVelocity)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((RL_AMK_Setpoints_1_Data->AMK_TorqueLimitPositiv >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((RL_AMK_Setpoints_1_Data->AMK_TorqueLimitPositiv)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((RL_AMK_Setpoints_1_Data->AMK_TorqueLimitNegativ >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((RL_AMK_Setpoints_1_Data->AMK_TorqueLimitNegativ)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_RL_AMK_Setpoints_1
 void Rx_RL_AMK_Setpoints_1_Data(CAN_HandleTypeDef* hcan, RL_AMK_Setpoints_1_TypeDef* RL_AMK_Setpoints_1_Data)
 {
 RL_AMK_Setpoints_1_Data->AMK_Control = (uint16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 RL_AMK_Setpoints_1_Data->AMK_TargetVelocity = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 RL_AMK_Setpoints_1_Data->AMK_TorqueLimitPositiv = (int16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 RL_AMK_Setpoints_1_Data->AMK_TorqueLimitNegativ = (int16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_RR_AMK_Setpoints_1) || defined(Rx_RR_AMK_Setpoints_1)
RR_AMK_Setpoints_1_TypeDef RR_AMK_Setpoints_1_Data = { .AMK_Control = 0,
		.AMK_TargetVelocity = 0, .AMK_TorqueLimitPositiv = 0,
		.AMK_TorqueLimitNegativ = 0 };
#endif
/*
 #ifdef Tx_RR_AMK_Setpoints_1
 void Tx_RR_AMK_Setpoints_1_Data(CAN_HandleTypeDef* hcan, RR_AMK_Setpoints_1_TypeDef* RR_AMK_Setpoints_1_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_RR_AMK_Setpoints_1;
 hcan->pTxMsg->DLC = DLC_RR_AMK_Setpoints_1;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((RR_AMK_Setpoints_1_Data->AMK_Control >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((RR_AMK_Setpoints_1_Data->AMK_Control)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((RR_AMK_Setpoints_1_Data->AMK_TargetVelocity >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((RR_AMK_Setpoints_1_Data->AMK_TargetVelocity)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((RR_AMK_Setpoints_1_Data->AMK_TorqueLimitPositiv >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((RR_AMK_Setpoints_1_Data->AMK_TorqueLimitPositiv)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((RR_AMK_Setpoints_1_Data->AMK_TorqueLimitNegativ >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((RR_AMK_Setpoints_1_Data->AMK_TorqueLimitNegativ)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_RR_AMK_Setpoints_1
 void Rx_RR_AMK_Setpoints_1_Data(CAN_HandleTypeDef* hcan, RR_AMK_Setpoints_1_TypeDef* RR_AMK_Setpoints_1_Data)
 {
 RR_AMK_Setpoints_1_Data->AMK_Control = (uint16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 RR_AMK_Setpoints_1_Data->AMK_TargetVelocity = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 RR_AMK_Setpoints_1_Data->AMK_TorqueLimitPositiv = (int16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 RR_AMK_Setpoints_1_Data->AMK_TorqueLimitNegativ = (int16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_FL_AMK_Values_1) || defined(Rx_FL_AMK_Values_1)
FL_AMK_Values_1_TypeDef FL_AMK_Values_1_Data = { .AMK_Status = 0,
		.AMK_ActualVelocity = 0, .AMK_TorqueCurrent = 0,
		.AMK_MagnetizingCurrent = 0 };
#endif
/*
 #ifdef Tx_FL_AMK_Values_1
 void Tx_FL_AMK_Values_1_Data(CAN_HandleTypeDef* hcan, FL_AMK_Values_1_TypeDef* FL_AMK_Values_1_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_FL_AMK_Values_1;
 hcan->pTxMsg->DLC = DLC_FL_AMK_Values_1;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((FL_AMK_Values_1_Data->AMK_Status >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((FL_AMK_Values_1_Data->AMK_Status)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((FL_AMK_Values_1_Data->AMK_ActualVelocity >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((FL_AMK_Values_1_Data->AMK_ActualVelocity)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((FL_AMK_Values_1_Data->AMK_TorqueCurrent >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((FL_AMK_Values_1_Data->AMK_TorqueCurrent)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((FL_AMK_Values_1_Data->AMK_MagnetizingCurrent >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((FL_AMK_Values_1_Data->AMK_MagnetizingCurrent)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_FL_AMK_Values_1
 void Rx_FL_AMK_Values_1_Data(CAN_HandleTypeDef* hcan, FL_AMK_Values_1_TypeDef* FL_AMK_Values_1_Data)
 {
 FL_AMK_Values_1_Data->AMK_Status = (uint16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 FL_AMK_Values_1_Data->AMK_ActualVelocity = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 FL_AMK_Values_1_Data->AMK_TorqueCurrent = (int16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 FL_AMK_Values_1_Data->AMK_MagnetizingCurrent = (int16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_FR_AMK_Values_1) || defined(Rx_FR_AMK_Values_1)
FR_AMK_Values_1_TypeDef FR_AMK_Values_1_Data = { .AMK_Status = 0,
		.AMK_ActualVelocity = 0, .AMK_TorqueCurrent = 0,
		.AMK_MagnetizingCurrent = 0 };
#endif
/*
 #ifdef Tx_FR_AMK_Values_1
 void Tx_FR_AMK_Values_1_Data(CAN_HandleTypeDef* hcan, FR_AMK_Values_1_TypeDef* FR_AMK_Values_1_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_FR_AMK_Values_1;
 hcan->pTxMsg->DLC = DLC_FR_AMK_Values_1;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((FR_AMK_Values_1_Data->AMK_Status >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((FR_AMK_Values_1_Data->AMK_Status)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((FR_AMK_Values_1_Data->AMK_ActualVelocity >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((FR_AMK_Values_1_Data->AMK_ActualVelocity)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((FR_AMK_Values_1_Data->AMK_TorqueCurrent >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((FR_AMK_Values_1_Data->AMK_TorqueCurrent)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((FR_AMK_Values_1_Data->AMK_MagnetizingCurrent >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((FR_AMK_Values_1_Data->AMK_MagnetizingCurrent)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_FR_AMK_Values_1
 void Rx_FR_AMK_Values_1_Data(CAN_HandleTypeDef* hcan, FR_AMK_Values_1_TypeDef* FR_AMK_Values_1_Data)
 {
 FR_AMK_Values_1_Data->AMK_Status = (uint16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 FR_AMK_Values_1_Data->AMK_ActualVelocity = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 FR_AMK_Values_1_Data->AMK_TorqueCurrent = (int16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 FR_AMK_Values_1_Data->AMK_MagnetizingCurrent = (int16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_FL_AMK_Values_2) || defined(Rx_FL_AMK_Values_2)
FL_AMK_Values_2_TypeDef FL_AMK_Values_2_Data = { .AMK_TempMotor = 0,
		.AMK_TempInverter = 0, .AMK_ErrorInfo = 0, .AMK_TempIGBT = 0 };
#endif
/*
 #ifdef Tx_FL_AMK_Values_2
 void Tx_FL_AMK_Values_2_Data(CAN_HandleTypeDef* hcan, FL_AMK_Values_2_TypeDef* FL_AMK_Values_2_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_FL_AMK_Values_2;
 hcan->pTxMsg->DLC = DLC_FL_AMK_Values_2;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((FL_AMK_Values_2_Data->AMK_TempMotor >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((FL_AMK_Values_2_Data->AMK_TempMotor)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((FL_AMK_Values_2_Data->AMK_TempInverter >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((FL_AMK_Values_2_Data->AMK_TempInverter)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((FL_AMK_Values_2_Data->AMK_ErrorInfo >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((FL_AMK_Values_2_Data->AMK_ErrorInfo)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((FL_AMK_Values_2_Data->AMK_TempIGBT >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((FL_AMK_Values_2_Data->AMK_TempIGBT)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_FL_AMK_Values_2
 void Rx_FL_AMK_Values_2_Data(CAN_HandleTypeDef* hcan, FL_AMK_Values_2_TypeDef* FL_AMK_Values_2_Data)
 {
 FL_AMK_Values_2_Data->AMK_TempMotor = (int16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 FL_AMK_Values_2_Data->AMK_TempInverter = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 FL_AMK_Values_2_Data->AMK_ErrorInfo = (uint16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 FL_AMK_Values_2_Data->AMK_TempIGBT = (int16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_FR_AMK_Values_2) || defined(Rx_FR_AMK_Values_2)
FR_AMK_Values_2_TypeDef FR_AMK_Values_2_Data = { .AMK_TempMotor = 0,
		.AMK_TempInverter = 0, .AMK_ErrorInfo = 0, .AMK_TempIGBT = 0 };
#endif
/*
 #ifdef Tx_FR_AMK_Values_2
 void Tx_FR_AMK_Values_2_Data(CAN_HandleTypeDef* hcan, FR_AMK_Values_2_TypeDef* FR_AMK_Values_2_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_FR_AMK_Values_2;
 hcan->pTxMsg->DLC = DLC_FR_AMK_Values_2;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((FR_AMK_Values_2_Data->AMK_TempMotor >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((FR_AMK_Values_2_Data->AMK_TempMotor)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((FR_AMK_Values_2_Data->AMK_TempInverter >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((FR_AMK_Values_2_Data->AMK_TempInverter)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((FR_AMK_Values_2_Data->AMK_ErrorInfo >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((FR_AMK_Values_2_Data->AMK_ErrorInfo)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((FR_AMK_Values_2_Data->AMK_TempIGBT >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((FR_AMK_Values_2_Data->AMK_TempIGBT)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_FR_AMK_Values_2
 void Rx_FR_AMK_Values_2_Data(CAN_HandleTypeDef* hcan, FR_AMK_Values_2_TypeDef* FR_AMK_Values_2_Data)
 {
 FR_AMK_Values_2_Data->AMK_TempMotor = (int16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 FR_AMK_Values_2_Data->AMK_TempInverter = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 FR_AMK_Values_2_Data->AMK_ErrorInfo = (uint16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 FR_AMK_Values_2_Data->AMK_TempIGBT = (int16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_RL_AMK_Values_1) || defined(Rx_RL_AMK_Values_1)
RL_AMK_Values_1_TypeDef RL_AMK_Values_1_Data = { .AMK_Status = 0,
		.AMK_ActualVelocity = 0, .AMK_TorqueCurrent = 0,
		.AMK_MagnetizingCurrent = 0 };
#endif
/*
 #ifdef Tx_RL_AMK_Values_1
 void Tx_RL_AMK_Values_1_Data(CAN_HandleTypeDef* hcan, RL_AMK_Values_1_TypeDef* RL_AMK_Values_1_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_RL_AMK_Values_1;
 hcan->pTxMsg->DLC = DLC_RL_AMK_Values_1;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((RL_AMK_Values_1_Data->AMK_Status >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((RL_AMK_Values_1_Data->AMK_Status)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((RL_AMK_Values_1_Data->AMK_ActualVelocity >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((RL_AMK_Values_1_Data->AMK_ActualVelocity)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((RL_AMK_Values_1_Data->AMK_TorqueCurrent >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((RL_AMK_Values_1_Data->AMK_TorqueCurrent)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((RL_AMK_Values_1_Data->AMK_MagnetizingCurrent >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((RL_AMK_Values_1_Data->AMK_MagnetizingCurrent)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_RL_AMK_Values_1
 void Rx_RL_AMK_Values_1_Data(CAN_HandleTypeDef* hcan, RL_AMK_Values_1_TypeDef* RL_AMK_Values_1_Data)
 {
 RL_AMK_Values_1_Data->AMK_Status = (uint16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 RL_AMK_Values_1_Data->AMK_ActualVelocity = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 RL_AMK_Values_1_Data->AMK_TorqueCurrent = (int16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 RL_AMK_Values_1_Data->AMK_MagnetizingCurrent = (int16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_RR_AMK_Values_1) || defined(Rx_RR_AMK_Values_1)
RR_AMK_Values_1_TypeDef RR_AMK_Values_1_Data = { .AMK_Status = 0,
		.AMK_ActualVelocity = 0, .AMK_TorqueCurrent = 0,
		.AMK_MagnetizingCurrent = 0 };
#endif
/*
 #ifdef Tx_RR_AMK_Values_1
 void Tx_RR_AMK_Values_1_Data(CAN_HandleTypeDef* hcan, RR_AMK_Values_1_TypeDef* RR_AMK_Values_1_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_RR_AMK_Values_1;
 hcan->pTxMsg->DLC = DLC_RR_AMK_Values_1;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((RR_AMK_Values_1_Data->AMK_Status >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((RR_AMK_Values_1_Data->AMK_Status)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((RR_AMK_Values_1_Data->AMK_ActualVelocity >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((RR_AMK_Values_1_Data->AMK_ActualVelocity)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((RR_AMK_Values_1_Data->AMK_TorqueCurrent >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((RR_AMK_Values_1_Data->AMK_TorqueCurrent)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((RR_AMK_Values_1_Data->AMK_MagnetizingCurrent >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((RR_AMK_Values_1_Data->AMK_MagnetizingCurrent)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_RR_AMK_Values_1
 void Rx_RR_AMK_Values_1_Data(CAN_HandleTypeDef* hcan, RR_AMK_Values_1_TypeDef* RR_AMK_Values_1_Data)
 {
 RR_AMK_Values_1_Data->AMK_Status = (uint16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 RR_AMK_Values_1_Data->AMK_ActualVelocity = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 RR_AMK_Values_1_Data->AMK_TorqueCurrent = (int16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 RR_AMK_Values_1_Data->AMK_MagnetizingCurrent = (int16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_RL_AMK_Values_2) || defined(Rx_RL_AMK_Values_2)
RL_AMK_Values_2_TypeDef RL_AMK_Values_2_Data = { .AMK_TempMotor = 0,
		.AMK_TempInverter = 0, .AMK_ErrorInfo = 0, .AMK_TempIGBT = 0 };
#endif
/*
 #ifdef Tx_RL_AMK_Values_2
 void Tx_RL_AMK_Values_2_Data(CAN_HandleTypeDef* hcan, RL_AMK_Values_2_TypeDef* RL_AMK_Values_2_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_RL_AMK_Values_2;
 hcan->pTxMsg->DLC = DLC_RL_AMK_Values_2;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((RL_AMK_Values_2_Data->AMK_TempMotor >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((RL_AMK_Values_2_Data->AMK_TempMotor)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((RL_AMK_Values_2_Data->AMK_TempInverter >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((RL_AMK_Values_2_Data->AMK_TempInverter)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((RL_AMK_Values_2_Data->AMK_ErrorInfo >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((RL_AMK_Values_2_Data->AMK_ErrorInfo)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((RL_AMK_Values_2_Data->AMK_TempIGBT >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((RL_AMK_Values_2_Data->AMK_TempIGBT)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_RL_AMK_Values_2
 void Rx_RL_AMK_Values_2_Data(CAN_HandleTypeDef* hcan, RL_AMK_Values_2_TypeDef* RL_AMK_Values_2_Data)
 {
 RL_AMK_Values_2_Data->AMK_TempMotor = (int16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 RL_AMK_Values_2_Data->AMK_TempInverter = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 RL_AMK_Values_2_Data->AMK_ErrorInfo = (uint16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 RL_AMK_Values_2_Data->AMK_TempIGBT = (int16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

#if defined(Tx_RR_AMK_Values_2) || defined(Rx_RR_AMK_Values_2)
RR_AMK_Values_2_TypeDef RR_AMK_Values_2_Data = { .AMK_TempMotor = 0,
		.AMK_TempInverter = 0, .AMK_ErrorInfo = 0, .AMK_TempIGBT = 0 };
#endif
/*
 #ifdef Tx_RR_AMK_Values_2
 void Tx_RR_AMK_Values_2_Data(CAN_HandleTypeDef* hcan, RR_AMK_Values_2_TypeDef* RR_AMK_Values_2_Data)
 {
 hcan->pTxMsg = &CanTxMsg;
 hcan->pTxMsg->StdId = ID_RR_AMK_Values_2;
 hcan->pTxMsg->DLC = DLC_RR_AMK_Values_2;
 hcan->pTxMsg->ExtId = 0x0;
 hcan->pTxMsg->RTR = CAN_RTR_DATA;
 hcan->pTxMsg->IDE = CAN_ID_STD;

 hcan->pTxMsg->Data[0] = (uint8_t)((RR_AMK_Values_2_Data->AMK_TempMotor >> 8)&0b11111111);
 hcan->pTxMsg->Data[1] = (uint8_t)((RR_AMK_Values_2_Data->AMK_TempMotor)&0b1111111111111111);
 hcan->pTxMsg->Data[2] = (uint8_t)((RR_AMK_Values_2_Data->AMK_TempInverter >> 8)&0b11111111);
 hcan->pTxMsg->Data[3] = (uint8_t)((RR_AMK_Values_2_Data->AMK_TempInverter)&0b1111111111111111);
 hcan->pTxMsg->Data[4] = (uint8_t)((RR_AMK_Values_2_Data->AMK_ErrorInfo >> 8)&0b11111111);
 hcan->pTxMsg->Data[5] = (uint8_t)((RR_AMK_Values_2_Data->AMK_ErrorInfo)&0b1111111111111111);
 hcan->pTxMsg->Data[6] = (uint8_t)((RR_AMK_Values_2_Data->AMK_TempIGBT >> 8)&0b11111111);
 hcan->pTxMsg->Data[7] = (uint8_t)((RR_AMK_Values_2_Data->AMK_TempIGBT)&0b1111111111111111);

 HAL_CAN_Transmit_IT(hcan);
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 #endif
 #ifdef Rx_RR_AMK_Values_2
 void Rx_RR_AMK_Values_2_Data(CAN_HandleTypeDef* hcan, RR_AMK_Values_2_TypeDef* RR_AMK_Values_2_Data)
 {
 RR_AMK_Values_2_Data->AMK_TempMotor = (int16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 RR_AMK_Values_2_Data->AMK_TempInverter = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 RR_AMK_Values_2_Data->AMK_ErrorInfo = (uint16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 RR_AMK_Values_2_Data->AMK_TempIGBT = (int16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 }
 #endif
 */

/** \brief Zmaze CAN error ak je
 *
 * \param hcan CAN_HandleTypeDef*
 * \return void
 *
 */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
	hcan->ErrorCode = HAL_CAN_ERROR_NONE;
	hcan->Instance->MSR &= 0x1C;
}

/**
 * @brief Event for CAN Rx message
 * @param Can controller message structure
 */
/*
 void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
 {
 switch (hcan->pRxMsg->StdId)
 {

 #ifdef Rx_BBOX_power
 case ID_BBOX_power:
 Rx_BBOX_power_Data(hcan, &BBOX_power_Data);
 break;
 #endif

 #ifdef Rx_wheel_RPM
 case ID_wheel_RPM:
 Rx_wheel_RPM_Data(hcan, &wheel_RPM_Data);
 break;
 #endif

 #ifdef Rx_BBOX_status
 case ID_BBOX_status:
 Rx_BBOX_status_Data(hcan, &BBOX_status_Data);
 break;
 #endif

 #ifdef Rx_FU_Values_1
 case ID_FU_Values_1:
 Rx_FU_Values_1_Data(hcan, &FU_Values_1_Data);
 break;
 #endif

 #ifdef Rx_BBOX_command
 case ID_BBOX_command:
 Rx_BBOX_command_Data(hcan, &BBOX_command_Data);
 break;
 #endif

 #ifdef Rx_BMS_Command
 case ID_BMS_Command:
 Rx_BMS_Command_Data(hcan, &BMS_Command_Data);
 break;
 #endif

 #ifdef Rx_BMS_State
 case ID_BMS_State:
 Rx_BMS_State_Data(hcan, &BMS_State_Data);
 break;
 #endif

 #ifdef Rx_ECU_State
 case ID_ECU_State:
 Rx_ECU_State_Data(hcan, &ECU_State_Data);
 break;
 #endif

 #ifdef Rx_FU_Values_2
 case ID_FU_Values_2:
 Rx_FU_Values_2_Data(hcan, &FU_Values_2_Data);
 break;
 #endif

 #ifdef Rx_Interconnect
 case ID_Interconnect:
 Rx_Interconnect_Data(hcan, &Interconnect_Data);
 break;
 #endif

 #ifdef Rx_BMS_Voltages
 case ID_BMS_Voltages:
 Rx_BMS_Voltages_Data(hcan, &BMS_Voltages_Data);
 break;
 #endif

 #ifdef Rx_BMS_Temps
 case ID_BMS_Temps:
 Rx_BMS_Temps_Data(hcan, &BMS_Temps_Data);
 break;
 #endif

 #ifdef Rx_FL_AMK_Setpoints_1
 case ID_FL_AMK_Setpoints_1:
 Rx_FL_AMK_Setpoints_1_Data(hcan, &FL_AMK_Setpoints_1_Data);
 break;
 #endif

 #ifdef Rx_FR_AMK_Setpoints_1
 case ID_FR_AMK_Setpoints_1:
 Rx_FR_AMK_Setpoints_1_Data(hcan, &FR_AMK_Setpoints_1_Data);
 break;
 #endif

 #ifdef Rx_RL_AMK_Setpoints_1
 case ID_RL_AMK_Setpoints_1:
 Rx_RL_AMK_Setpoints_1_Data(hcan, &RL_AMK_Setpoints_1_Data);
 break;
 #endif

 #ifdef Rx_RR_AMK_Setpoints_1
 case ID_RR_AMK_Setpoints_1:
 Rx_RR_AMK_Setpoints_1_Data(hcan, &RR_AMK_Setpoints_1_Data);
 break;
 #endif

 #ifdef Rx_FL_AMK_Values_1
 case ID_FL_AMK_Values_1:
 Rx_FL_AMK_Values_1_Data(hcan, &FL_AMK_Values_1_Data);
 break;
 #endif

 #ifdef Rx_FR_AMK_Values_1
 case ID_FR_AMK_Values_1:
 Rx_FR_AMK_Values_1_Data(hcan, &FR_AMK_Values_1_Data);
 break;
 #endif

 #ifdef Rx_FL_AMK_Values_2
 case ID_FL_AMK_Values_2:
 Rx_FL_AMK_Values_2_Data(hcan, &FL_AMK_Values_2_Data);
 break;
 #endif

 #ifdef Rx_FR_AMK_Values_2
 case ID_FR_AMK_Values_2:
 Rx_FR_AMK_Values_2_Data(hcan, &FR_AMK_Values_2_Data);
 break;
 #endif

 #ifdef Rx_RL_AMK_Values_1
 case ID_RL_AMK_Values_1:
 Rx_RL_AMK_Values_1_Data(hcan, &RL_AMK_Values_1_Data);
 break;
 #endif

 #ifdef Rx_RR_AMK_Values_1
 case ID_RR_AMK_Values_1:
 Rx_RR_AMK_Values_1_Data(hcan, &RR_AMK_Values_1_Data);
 break;
 #endif

 #ifdef Rx_RL_AMK_Values_2
 case ID_RL_AMK_Values_2:
 Rx_RL_AMK_Values_2_Data(hcan, &RL_AMK_Values_2_Data);
 break;
 #endif

 #ifdef Rx_RR_AMK_Values_2
 case ID_RR_AMK_Values_2:
 Rx_RR_AMK_Values_2_Data(hcan, &RR_AMK_Values_2_Data);
 break;
 #endif

 default:
 break;
 }
 HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 }
 */

uint8_t * append_BBOX_power_Data(uint8_t *msg, uint16_t *msg_len) {
	uint8_t dataSize = 6 + 2;
	uint16_t dataID = 10;
	msg = (uint8_t *) realloc(msg, *msg_len + dataSize * sizeof(uint8_t));

	BBOX_power_Data.power = int16++;
	BBOX_power_Data.current = int16++;
	BBOX_power_Data.voltage = int16++;

	int index = *msg_len;
	msg[index++] = dataID & 0xff;
	msg[index++] = (dataID >> 8);
	msg[index++] = BBOX_power_Data.power & 0xff;
	msg[index++] = (BBOX_power_Data.power >> 8);
	msg[index++] = BBOX_power_Data.current & 0xff;
	msg[index++] = (BBOX_power_Data.current >> 8);
	msg[index++] = BBOX_power_Data.voltage & 0xff;
	msg[index++] = (BBOX_power_Data.voltage >> 8);
	*msg_len = *msg_len + dataSize;
	return msg;
}

uint8_t * append_wheel_RPM_Data(uint8_t *msg, uint16_t *msg_len) {
	uint8_t dataSize = 8 + 2;
	uint16_t dataID = 15;
	msg = (uint8_t *) realloc(msg, *msg_len + dataSize * sizeof(uint8_t));

	// test data
	wheel_RPM_Data.front_right = 231;
	wheel_RPM_Data.front_left = 12;
	wheel_RPM_Data.rear_left = 88;
	wheel_RPM_Data.rear_right = 99;

	int index = *msg_len;
	msg[index++] = dataID & 0xff;
	msg[index++] = (dataID >> 8);
	msg[index++] = wheel_RPM_Data.front_right & 0xff;
	msg[index++] = (wheel_RPM_Data.front_right >> 8);
	msg[index++] = wheel_RPM_Data.front_left & 0xff;
	msg[index++] = (wheel_RPM_Data.front_left >> 8);
	msg[index++] = wheel_RPM_Data.rear_left & 0xff;
	msg[index++] = (wheel_RPM_Data.rear_left >> 8);
	msg[index++] = wheel_RPM_Data.rear_right & 0xff;
	msg[index++] = (wheel_RPM_Data.rear_right >> 8);
	*msg_len = *msg_len + dataSize;
	return msg;
}

uint8_t * append_BBOX_status_Data(uint8_t *msg, uint16_t *msg_len) {
	uint8_t dataSize = 3 + 2;
	uint16_t dataID = 20;
	msg = (uint8_t *) realloc(msg, *msg_len + dataSize * sizeof(uint8_t));

	// test data
	BBOX_status_Data.AIR_N = 1;
	BBOX_status_Data.AIR_P = 0;
	BBOX_status_Data.BMS_OK = 0;
	BBOX_status_Data.FANS = 1;
	BBOX_status_Data.IMD_OK = 0;
	BBOX_status_Data.POLARITY = 1;
	BBOX_status_Data.PRECH_60V = 0;
	BBOX_status_Data.SHD_EN = 1;
	BBOX_status_Data.SHD_IN = 1;
	BBOX_status_Data.SHD_OUT = 1;
	BBOX_status_Data.SHD_RESET = 1;
	BBOX_status_Data.SIGNAL_ERROR = 0;
	BBOX_status_Data.TSMS = 0;
	BBOX_status_Data.STM_temp = 123;

	uint8_t byte1 = 0;
	uint8_t byte2 = 0;
	byte1 |= BBOX_status_Data.AIR_N << 7;
	byte1 |= BBOX_status_Data.AIR_P << 6;
	byte1 |= BBOX_status_Data.BMS_OK << 5;
	byte1 |= BBOX_status_Data.FANS << 4;
	byte1 |= BBOX_status_Data.IMD_OK << 3;
	byte1 |= BBOX_status_Data.POLARITY << 2;
	byte1 |= BBOX_status_Data.PRECH_60V << 1;
	byte1 |= BBOX_status_Data.SHD_EN << 0;

	byte2 |= BBOX_status_Data.SHD_IN << 7;
	byte2 |= BBOX_status_Data.SHD_OUT << 6;
	byte2 |= BBOX_status_Data.SHD_RESET << 5;
	byte2 |= BBOX_status_Data.SIGNAL_ERROR << 4;
	byte2 |= BBOX_status_Data.TSMS << 3;

	int index = *msg_len;
	msg[index++] = dataID & 0xff;
	msg[index++] = (dataID >> 8);
	msg[index++] = byte1 & 0xff;
	msg[index++] = byte2 & 0xff;
	msg[index++] = BBOX_status_Data.STM_temp & 0xff;
	*msg_len = *msg_len + dataSize;
	return msg;
}

uint8_t * append_FU_Values_1(uint8_t *msg, uint16_t *msg_len) {
	uint8_t dataSize = 6 + 2;
	uint16_t dataID = 25;
	msg = (uint8_t *) realloc(msg, *msg_len + dataSize * sizeof(uint8_t));

	FU_Values_1_Data.apps1 = 250;
	FU_Values_1_Data.apps2 = 251;
	FU_Values_1_Data.brake1 = 252;
	FU_Values_1_Data.brake2 = 253;
	FU_Values_1_Data.error = 63432;

	int index = *msg_len;
	msg[index++] = dataID & 0xff;
	msg[index++] = (dataID >> 8);
	msg[index++] = FU_Values_1_Data.apps1 & 0xff;
	msg[index++] = FU_Values_1_Data.apps2 & 0xff;
	msg[index++] = FU_Values_1_Data.brake1 & 0xff;
	msg[index++] = FU_Values_1_Data.brake2 & 0xff;
	msg[index++] = FU_Values_1_Data.error & 0xff;
	msg[index++] = (FU_Values_1_Data.error >> 8);
	*msg_len = *msg_len + dataSize;
	return msg;
}
uint8_t * append_BBOX_command(uint8_t *msg, uint16_t *msg_len) {
	uint8_t dataSize = 1 + 2;
	uint16_t dataID = 30;
	msg = (uint8_t *) realloc(msg, *msg_len + dataSize * sizeof(uint8_t));

	BBOX_command_Data.FANS = 1;
	BBOX_command_Data.SHD_EN = 1;
	uint8_t byte1 = 0;

	byte1 |= BBOX_command_Data.FANS << 7;
	byte1 |= BBOX_command_Data.SHD_EN << 6;
	int index = *msg_len;
	msg[index++] = dataID & 0xff;
	msg[index++] = (dataID >> 8);
	msg[index++] = byte1 & 0xff;

	*msg_len = *msg_len + dataSize;
	return msg;
}

uint8_t * append_BMS_Command(uint8_t *msg, uint16_t *msg_len) {
	uint8_t dataSize = 2 + 2;
	uint16_t dataID = 40;
	msg = (uint8_t *) realloc(msg, *msg_len + dataSize * sizeof(uint8_t));

	BMS_Command_Data.BMS_Balanc = 3;
	BMS_Command_Data.BMS_FullMode = 0;
	BMS_Command_Data.BMS_OK = 3;
	BMS_Command_Data.BMS_ONOFF = 1;
	BMS_Command_Data.BMS_CAN = 0;

	uint8_t byte1 = 0;
	uint8_t byte2 = 0;
	byte1 |= BMS_Command_Data.BMS_Balanc << 6;
	byte1 |= BMS_Command_Data.BMS_OK << 4;
	byte1 |= BMS_Command_Data.BMS_ONOFF << 2;
	byte1 |= BMS_Command_Data.BMS_CAN;

	byte2 |= BMS_Command_Data.BMS_FullMode << 7;
	int index = *msg_len;
	msg[index++] = dataID & 0xff;
	msg[index++] = (dataID >> 8);
	msg[index++] = byte1 & 0xff;
	msg[index++] = byte2 & 0xff;

	*msg_len = *msg_len + dataSize;
	return msg;
}

uint8_t * append_BMS_State(uint8_t *msg, uint16_t *msg_len) {
	uint8_t dataSize = 8 + 2;
	uint16_t dataID = 50;
	msg = (uint8_t *) realloc(msg, *msg_len + dataSize * sizeof(uint8_t));

	BMS_State_Data.BMS_Mode = 234;
	BMS_State_Data.BMS_Faults = 64523;
	BMS_State_Data.CellVolt_L = 222;
	BMS_State_Data.CellVolt_H = 212;
	BMS_State_Data.CellTemp_L = 234;
	BMS_State_Data.CellTemp_H = 208;
	BMS_State_Data.BMS_Ident = 251;

	int index = *msg_len;
	msg[index++] = dataID & 0xff;
	msg[index++] = (dataID >> 8);
	msg[index++] = BMS_State_Data.BMS_Mode & 0xff;
	msg[index++] = BMS_State_Data.BMS_Faults & 0xff;
	msg[index++] = (BMS_State_Data.BMS_Faults >> 8);
	msg[index++] = BMS_State_Data.CellVolt_L & 0xff;
	msg[index++] = BMS_State_Data.CellVolt_H & 0xff;
	msg[index++] = BMS_State_Data.CellTemp_L & 0xff;
	msg[index++] = BMS_State_Data.CellTemp_H & 0xff;
	msg[index++] = BMS_State_Data.BMS_Ident & 0xff;

	*msg_len = *msg_len + dataSize;
	return msg;
}

uint8_t * append_ECU_State(uint8_t *msg, uint16_t *msg_len) {
	uint8_t dataSize = 8 + 2;
	uint16_t dataID = 60;
	msg = (uint8_t *) realloc(msg, *msg_len + dataSize * sizeof(uint8_t));

	ECU_State_Data.ECU_Status = 234;
	ECU_State_Data.FL_AMK_Status = 211;
	ECU_State_Data.FR_AMK_Status = 209;
	ECU_State_Data.RL_AMK_Status = 228;
	ECU_State_Data.RR_AMK_Status = 243;
	ECU_State_Data.TempMotor_H = 255;
	ECU_State_Data.TempInverter_H = 249;
	ECU_State_Data.TempIGBT_H = 222;

	int index = *msg_len;
	msg[index++] = dataID & 0xff;
	msg[index++] = (dataID >> 8);
	msg[index++] = ECU_State_Data.ECU_Status & 0xff;
	msg[index++] = ECU_State_Data.FL_AMK_Status & 0xff;
	msg[index++] = ECU_State_Data.FR_AMK_Status & 0xff;
	msg[index++] = ECU_State_Data.RL_AMK_Status & 0xff;
	msg[index++] = ECU_State_Data.RR_AMK_Status & 0xff;
	msg[index++] = ECU_State_Data.TempMotor_H & 0xff;
	msg[index++] = ECU_State_Data.TempInverter_H & 0xff;
	msg[index++] = ECU_State_Data.TempIGBT_H & 0xff;

	*msg_len = *msg_len + dataSize;
	return msg;
}

uint8_t * append_FU_Values_2(uint8_t *msg, uint16_t *msg_len) {
	uint8_t dataSize = 8 + 2;
	uint16_t dataID = 70;
	msg = (uint8_t *) realloc(msg, *msg_len + dataSize * sizeof(uint8_t));

	FU_Values_2_Data.steer = -124;
	FU_Values_2_Data.susp_FL = 4095;
	FU_Values_2_Data.susp_FR = 4090;
	FU_Values_2_Data.brake_pos = 235;
	FU_Values_2_Data.RTD = 1;
	FU_Values_2_Data.BOTS = 0;
	FU_Values_2_Data.SHDB = 1;
	FU_Values_2_Data.INERTIA_SW = 0;
	FU_Values_2_Data.reserve = 251;

	uint8_t byte1 = 0;

	byte1 |= FU_Values_2_Data.RTD << 7;
	byte1 |= FU_Values_2_Data.BOTS << 6;
	byte1 |= FU_Values_2_Data.SHDB << 5;
	byte1 |= FU_Values_2_Data.INERTIA_SW << 4;

	int index = *msg_len;
	msg[index++] = dataID & 0xff;
	msg[index++] = (dataID >> 8);
	msg[index++] = FU_Values_2_Data.steer & 0xff;
	msg[index++] = FU_Values_2_Data.susp_FL & 0xff;
	msg[index++] = (FU_Values_2_Data.susp_FL >> 8);
	msg[index++] = FU_Values_2_Data.susp_FR & 0xff;
	msg[index++] = (FU_Values_2_Data.susp_FR >> 8);
	msg[index++] = FU_Values_2_Data.brake_pos & 0xff;
	msg[index++] = byte1 & 0xff;
	msg[index++] = FU_Values_2_Data.reserve & 0xff;

	*msg_len = *msg_len + dataSize;
	return msg;
}

uint8_t * append_Interconnect(uint8_t *msg, uint16_t *msg_len) {
	uint8_t dataSize = 7 + 2;
	uint16_t dataID = 80;
	msg = (uint8_t *) realloc(msg, *msg_len + dataSize * sizeof(uint8_t));

	Interconnect_Data.car_state = 250;
	Interconnect_Data.left_w_pump = 1;
	Interconnect_Data.right_w_pump = 1;
	Interconnect_Data.brake_red = 1;
	Interconnect_Data.brake_white = 1;
	Interconnect_Data.tsas = 1;
	Interconnect_Data.killswitch_R = 1;
	Interconnect_Data.killswitch_L = 1;
	Interconnect_Data.reserve = 251;
	Interconnect_Data.susp_RR = 4088;
	Interconnect_Data.susp_RL = 4094;

	uint8_t byte1 = 0;

	byte1 |= Interconnect_Data.left_w_pump << 7;
	byte1 |= Interconnect_Data.right_w_pump << 6;
	byte1 |= Interconnect_Data.brake_red << 5;
	byte1 |= Interconnect_Data.brake_white << 4;
	byte1 |= Interconnect_Data.tsas << 3;
	byte1 |= Interconnect_Data.killswitch_R << 2;
	byte1 |= Interconnect_Data.killswitch_L << 1;

	int index = *msg_len;
	msg[index++] = dataID & 0xff;
	msg[index++] = (dataID >> 8);
	msg[index++] = Interconnect_Data.car_state & 0xff;
	msg[index++] = byte1 & 0xff;
	msg[index++] = Interconnect_Data.reserve & 0xff;
	msg[index++] = Interconnect_Data.susp_RR & 0xff;
	msg[index++] = (Interconnect_Data.susp_RR >> 8);
	msg[index++] = Interconnect_Data.susp_RL & 0xff;
	msg[index++] = (Interconnect_Data.susp_RL >> 8);

	*msg_len = *msg_len + dataSize;
	return msg;
}

uint8_t * append_BMS_Voltages(uint8_t *msg, uint16_t *msg_len) {
	uint8_t dataSize = 8 + 2;
	uint16_t dataID = 90;
	msg = (uint8_t *) realloc(msg, *msg_len + dataSize * sizeof(uint8_t));

	BMS_Voltages_Data.BMS_VoltIdent = 234;
	BMS_Voltages_Data.BMS_Volt1 = 234;
	BMS_Voltages_Data.BMS_Volt2 = 235;
	BMS_Voltages_Data.BMS_Volt3 = 0;
	BMS_Voltages_Data.BMS_Volt4 = 255;
	BMS_Voltages_Data.BMS_Volt5 = 0;
	BMS_Voltages_Data.BMS_Volt6 = 239;
	BMS_Voltages_Data.BMS_Volt7 = 240;

	int index = *msg_len;
	msg[index++] = dataID & 0xff;
	msg[index++] = (dataID >> 8);
	msg[index++] = BMS_Voltages_Data.BMS_VoltIdent & 0xff;
	msg[index++] = BMS_Voltages_Data.BMS_Volt1 & 0xff;
	msg[index++] = BMS_Voltages_Data.BMS_Volt2 & 0xff;
	msg[index++] = BMS_Voltages_Data.BMS_Volt3 & 0xff;
	msg[index++] = BMS_Voltages_Data.BMS_Volt4 & 0xff;
	msg[index++] = BMS_Voltages_Data.BMS_Volt5 & 0xff;
	msg[index++] = BMS_Voltages_Data.BMS_Volt6 & 0xff;
	msg[index++] = BMS_Voltages_Data.BMS_Volt7 & 0xff;

	*msg_len = *msg_len + dataSize;
	return msg;
}

uint8_t * append_BMS_Temps(uint8_t *msg, uint16_t *msg_len) {
	uint8_t dataSize = 8 + 2;
	uint16_t dataID = 95;
	msg = (uint8_t *) realloc(msg, *msg_len + dataSize * sizeof(uint8_t));

	BMS_Temps_Data.BMS_TempIdent = 234;
	BMS_Temps_Data.BMS_Temp1 = 0;
	BMS_Temps_Data.BMS_Temp2 = 255;
	BMS_Temps_Data.BMS_Temp3 = 255;
	BMS_Temps_Data.BMS_Temp4 = 255;
	BMS_Temps_Data.BMS_Temp5 = 254;
	BMS_Temps_Data.BMS_Temp6 = 255;
	BMS_Temps_Data.BMS_Temp7 = 254;

	int index = *msg_len;
	msg[index++] = dataID & 0xff;
	msg[index++] = (dataID >> 8);
	msg[index++] = BMS_Temps_Data.BMS_TempIdent & 0xff;
	msg[index++] = BMS_Temps_Data.BMS_Temp1 & 0xff;
	msg[index++] = BMS_Temps_Data.BMS_Temp2 & 0xff;
	msg[index++] = BMS_Temps_Data.BMS_Temp3 & 0xff;
	msg[index++] = BMS_Temps_Data.BMS_Temp4 & 0xff;
	msg[index++] = BMS_Temps_Data.BMS_Temp5 & 0xff;
	msg[index++] = BMS_Temps_Data.BMS_Temp6 & 0xff;
	msg[index++] = BMS_Temps_Data.BMS_Temp7 & 0xff;

	*msg_len = *msg_len + dataSize;
	return msg;
}
