
Telemetry_v2_zakladna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  08015aac  08015aac  00025aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080161fc  080161fc  000261fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016204  08016204  00026204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016208  08016208  00026208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0801620c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030070  2**0
                  CONTENTS
  8 .bss          00000ad4  20000070  20000070  00030070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000b44  20000b44  00030070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00019dde  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002cad  00000000  00000000  00049e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000248  00000000  00000000  0004cb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006a8a  00000000  00000000  0004cd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005931  00000000  00000000  00053802  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00059133  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000540c  00000000  00000000  000591b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000020  00000000  00000000  0005e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015a94 	.word	0x08015a94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08015a94 	.word	0x08015a94

080001f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f4:	4a0e      	ldr	r2, [pc, #56]	; (8000230 <HAL_Init+0x40>)
 80001f6:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <HAL_Init+0x40>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000200:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <HAL_Init+0x40>)
 8000202:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <HAL_Init+0x40>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800020c:	4a08      	ldr	r2, [pc, #32]	; (8000230 <HAL_Init+0x40>)
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <HAL_Init+0x40>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000218:	2003      	movs	r0, #3
 800021a:	f001 fca1 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f842 	bl	80002a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000224:	f013 fee2 	bl	8013fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000228:	2300      	movs	r3, #0
}
 800022a:	4618      	mov	r0, r3
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40023c00 	.word	0x40023c00

08000234 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000238:	4b13      	ldr	r3, [pc, #76]	; (8000288 <HAL_DeInit+0x54>)
 800023a:	f04f 32ff 	mov.w	r2, #4294967295
 800023e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <HAL_DeInit+0x54>)
 8000242:	2200      	movs	r2, #0
 8000244:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000246:	4b10      	ldr	r3, [pc, #64]	; (8000288 <HAL_DeInit+0x54>)
 8000248:	f04f 32ff 	mov.w	r2, #4294967295
 800024c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <HAL_DeInit+0x54>)
 8000250:	2200      	movs	r2, #0
 8000252:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <HAL_DeInit+0x54>)
 8000256:	f04f 32ff 	mov.w	r2, #4294967295
 800025a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <HAL_DeInit+0x54>)
 800025e:	2200      	movs	r2, #0
 8000260:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <HAL_DeInit+0x54>)
 8000264:	f04f 32ff 	mov.w	r2, #4294967295
 8000268:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800026a:	4b07      	ldr	r3, [pc, #28]	; (8000288 <HAL_DeInit+0x54>)
 800026c:	2200      	movs	r2, #0
 800026e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_DeInit+0x54>)
 8000272:	f04f 32ff 	mov.w	r2, #4294967295
 8000276:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <HAL_DeInit+0x54>)
 800027a:	2200      	movs	r2, #0
 800027c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800027e:	f000 f80c 	bl	800029a <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000282:	2300      	movs	r3, #0
}
 8000284:	4618      	mov	r0, r3
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40023800 	.word	0x40023800
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr

0800029a <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800029e:	bf00      	nop
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr

080002a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002b0:	4b12      	ldr	r3, [pc, #72]	; (80002fc <HAL_InitTick+0x54>)
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <HAL_InitTick+0x58>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	4619      	mov	r1, r3
 80002ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002be:	fbb3 f3f1 	udiv	r3, r3, r1
 80002c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fc93 	bl	8001bf2 <HAL_SYSTICK_Config>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002d2:	2301      	movs	r3, #1
 80002d4:	e00e      	b.n	80002f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2b0f      	cmp	r3, #15
 80002da:	d80a      	bhi.n	80002f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002dc:	2200      	movs	r2, #0
 80002de:	6879      	ldr	r1, [r7, #4]
 80002e0:	f04f 30ff 	mov.w	r0, #4294967295
 80002e4:	f001 fc47 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002e8:	4a06      	ldr	r2, [pc, #24]	; (8000304 <HAL_InitTick+0x5c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80002ee:	2300      	movs	r3, #0
 80002f0:	e000      	b.n	80002f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002f2:	2301      	movs	r3, #1
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000008 	.word	0x20000008
 8000300:	20000004 	.word	0x20000004
 8000304:	20000000 	.word	0x20000000

08000308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <HAL_IncTick+0x20>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	461a      	mov	r2, r3
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_IncTick+0x24>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4413      	add	r3, r2
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <HAL_IncTick+0x24>)
 800031a:	6013      	str	r3, [r2, #0]
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000004 	.word	0x20000004
 800032c:	200000ac 	.word	0x200000ac

08000330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return uwTick;
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <HAL_GetTick+0x14>)
 8000336:	681b      	ldr	r3, [r3, #0]
}
 8000338:	4618      	mov	r0, r3
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	200000ac 	.word	0x200000ac

08000348 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <HAL_GetTickPrio+0x14>)
 800034e:	681b      	ldr	r3, [r3, #0]
}
 8000350:	4618      	mov	r0, r3
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	20000000 	.word	0x20000000

08000360 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 800036a:	2300      	movs	r3, #0
 800036c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <HAL_SetTickFreq+0x38>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	79fa      	ldrb	r2, [r7, #7]
 8000374:	429a      	cmp	r2, r3
 8000376:	d009      	beq.n	800038c <HAL_SetTickFreq+0x2c>
  {
    uwTickFreq = Freq;
 8000378:	4a07      	ldr	r2, [pc, #28]	; (8000398 <HAL_SetTickFreq+0x38>)
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 800037e:	4b07      	ldr	r3, [pc, #28]	; (800039c <HAL_SetTickFreq+0x3c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff90 	bl	80002a8 <HAL_InitTick>
 8000388:	4603      	mov	r3, r0
 800038a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800038c:	7bfb      	ldrb	r3, [r7, #15]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000004 	.word	0x20000004
 800039c:	20000000 	.word	0x20000000

080003a0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <HAL_GetTickFreq+0x14>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	20000004 	.word	0x20000004

080003b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80003c0:	f7ff ffb6 	bl	8000330 <HAL_GetTick>
 80003c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003d0:	d005      	beq.n	80003de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <HAL_Delay+0x40>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	461a      	mov	r2, r3
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	4413      	add	r3, r2
 80003dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80003de:	bf00      	nop
 80003e0:	f7ff ffa6 	bl	8000330 <HAL_GetTick>
 80003e4:	4602      	mov	r2, r0
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	1ad2      	subs	r2, r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d3f7      	bcc.n	80003e0 <HAL_Delay+0x28>
  {
  }
}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000004 	.word	0x20000004

080003fc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000400:	4a05      	ldr	r2, [pc, #20]	; (8000418 <HAL_SuspendTick+0x1c>)
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <HAL_SuspendTick+0x1c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f023 0302 	bic.w	r3, r3, #2
 800040a:	6013      	str	r3, [r2, #0]
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	e000e010 	.word	0xe000e010

0800041c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000420:	4a05      	ldr	r2, [pc, #20]	; (8000438 <HAL_ResumeTick+0x1c>)
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <HAL_ResumeTick+0x1c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f043 0302 	orr.w	r3, r3, #2
 800042a:	6013      	str	r3, [r2, #0]
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	e000e010 	.word	0xe000e010

0800043c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8000440:	4b02      	ldr	r3, [pc, #8]	; (800044c <HAL_GetHalVersion+0x10>)
}
 8000442:	4618      	mov	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	01070400 	.word	0x01070400

08000450 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <HAL_GetREVID+0x14>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	0c1b      	lsrs	r3, r3, #16
}
 800045a:	4618      	mov	r0, r3
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	e0042000 	.word	0xe0042000

08000468 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <HAL_GetDEVID+0x18>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000474:	4618      	mov	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	e0042000 	.word	0xe0042000

08000484 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000488:	4a05      	ldr	r2, [pc, #20]	; (80004a0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	6053      	str	r3, [r2, #4]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e0042000 	.word	0xe0042000

080004a4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80004a8:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	f023 0301 	bic.w	r3, r3, #1
 80004b2:	6053      	str	r3, [r2, #4]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	e0042000 	.word	0xe0042000

080004c4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80004c8:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	f043 0302 	orr.w	r3, r3, #2
 80004d2:	6053      	str	r3, [r2, #4]
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	e0042000 	.word	0xe0042000

080004e4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	f023 0302 	bic.w	r3, r3, #2
 80004f2:	6053      	str	r3, [r2, #4]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e0042000 	.word	0xe0042000

08000504 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000508:	4a05      	ldr	r2, [pc, #20]	; (8000520 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6053      	str	r3, [r2, #4]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e0042000 	.word	0xe0042000

08000524 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	f023 0304 	bic.w	r3, r3, #4
 8000532:	6053      	str	r3, [r2, #4]
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e0042000 	.word	0xe0042000

08000544 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_EnableCompensationCell+0x14>)
 800054a:	2201      	movs	r2, #1
 800054c:	601a      	str	r2, [r3, #0]
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	42270400 	.word	0x42270400

0800055c <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_DisableCompensationCell+0x14>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	42270400 	.word	0x42270400

08000574 <HAL_GetUID>:
  * @brief Return the unique device identifier (UID based on 96 bits)
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_GetUID+0x30>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	601a      	str	r2, [r3, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3304      	adds	r3, #4
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <HAL_GetUID+0x34>)
 800058a:	6812      	ldr	r2, [r2, #0]
 800058c:	601a      	str	r2, [r3, #0]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3308      	adds	r3, #8
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <HAL_GetUID+0x38>)
 8000594:	6812      	ldr	r2, [r2, #0]
 8000596:	601a      	str	r2, [r3, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	1fff7a10 	.word	0x1fff7a10
 80005a8:	1fff7a14 	.word	0x1fff7a14
 80005ac:	1fff7a18 	.word	0x1fff7a18

080005b0 <HAL_EnableMemorySwappingBank>:
  *         and Flash Bank1 mapped at 0x08100000 (and aliased at 0x00100000)   
  *
  * @retval None
  */
void HAL_EnableMemorySwappingBank(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)UFB_MODE_BB = (uint32_t)ENABLE;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <HAL_EnableMemorySwappingBank+0x14>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	42270020 	.word	0x42270020

080005c8 <HAL_DisableMemorySwappingBank>:
  *         and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000) 
  *           
  * @retval None
  */
void HAL_DisableMemorySwappingBank(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)UFB_MODE_BB = (uint32_t)DISABLE;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_DisableMemorySwappingBank+0x14>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	42270020 	.word	0x42270020

080005e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]

  /* Check CAN handle */
  if (hcan == NULL)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <HAL_CAN_Init+0x16>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e0ec      	b.n	80007d0 <HAL_CAN_Init+0x1f0>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d102      	bne.n	8000608 <HAL_CAN_Init+0x28>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f013 fd23 	bl	801404e <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	6812      	ldr	r2, [r2, #0]
 8000612:	f022 0202 	bic.w	r2, r2, #2
 8000616:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000618:	f7ff fe8a 	bl	8000330 <HAL_GetTick>
 800061c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 800061e:	e012      	b.n	8000646 <HAL_CAN_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000620:	f7ff fe86 	bl	8000330 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	2b0a      	cmp	r3, #10
 800062c:	d90b      	bls.n	8000646 <HAL_CAN_Init+0x66>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000632:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2205      	movs	r2, #5
 800063e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	e0c4      	b.n	80007d0 <HAL_CAN_Init+0x1f0>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1e5      	bne.n	8000620 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	6812      	ldr	r2, [r2, #0]
 800065c:	6812      	ldr	r2, [r2, #0]
 800065e:	f042 0201 	orr.w	r2, r2, #1
 8000662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000664:	f7ff fe64 	bl	8000330 <HAL_GetTick>
 8000668:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 800066a:	e012      	b.n	8000692 <HAL_CAN_Init+0xb2>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800066c:	f7ff fe60 	bl	8000330 <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	2b0a      	cmp	r3, #10
 8000678:	d90b      	bls.n	8000692 <HAL_CAN_Init+0xb2>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2205      	movs	r2, #5
 800068a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e09e      	b.n	80007d0 <HAL_CAN_Init+0x1f0>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0e5      	beq.n	800066c <HAL_CAN_Init+0x8c>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	7e1b      	ldrb	r3, [r3, #24]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d108      	bne.n	80006ba <HAL_CAN_Init+0xda>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	6812      	ldr	r2, [r2, #0]
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	e007      	b.n	80006ca <HAL_CAN_Init+0xea>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7e5b      	ldrb	r3, [r3, #25]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d108      	bne.n	80006e4 <HAL_CAN_Init+0x104>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	6812      	ldr	r2, [r2, #0]
 80006da:	6812      	ldr	r2, [r2, #0]
 80006dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	e007      	b.n	80006f4 <HAL_CAN_Init+0x114>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	6812      	ldr	r2, [r2, #0]
 80006ec:	6812      	ldr	r2, [r2, #0]
 80006ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	7e9b      	ldrb	r3, [r3, #26]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d108      	bne.n	800070e <HAL_CAN_Init+0x12e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	6812      	ldr	r2, [r2, #0]
 8000704:	6812      	ldr	r2, [r2, #0]
 8000706:	f042 0220 	orr.w	r2, r2, #32
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	e007      	b.n	800071e <HAL_CAN_Init+0x13e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	6812      	ldr	r2, [r2, #0]
 8000716:	6812      	ldr	r2, [r2, #0]
 8000718:	f022 0220 	bic.w	r2, r2, #32
 800071c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	7edb      	ldrb	r3, [r3, #27]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d108      	bne.n	8000738 <HAL_CAN_Init+0x158>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	6812      	ldr	r2, [r2, #0]
 800072e:	6812      	ldr	r2, [r2, #0]
 8000730:	f022 0210 	bic.w	r2, r2, #16
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	e007      	b.n	8000748 <HAL_CAN_Init+0x168>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	6812      	ldr	r2, [r2, #0]
 8000740:	6812      	ldr	r2, [r2, #0]
 8000742:	f042 0210 	orr.w	r2, r2, #16
 8000746:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	7f1b      	ldrb	r3, [r3, #28]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d108      	bne.n	8000762 <HAL_CAN_Init+0x182>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	6812      	ldr	r2, [r2, #0]
 8000758:	6812      	ldr	r2, [r2, #0]
 800075a:	f042 0208 	orr.w	r2, r2, #8
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	e007      	b.n	8000772 <HAL_CAN_Init+0x192>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	6812      	ldr	r2, [r2, #0]
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	f022 0208 	bic.w	r2, r2, #8
 8000770:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	7f5b      	ldrb	r3, [r3, #29]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d108      	bne.n	800078c <HAL_CAN_Init+0x1ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	6812      	ldr	r2, [r2, #0]
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	f042 0204 	orr.w	r2, r2, #4
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	e007      	b.n	800079c <HAL_CAN_Init+0x1bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	6812      	ldr	r2, [r2, #0]
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	f022 0204 	bic.w	r2, r2, #4
 800079a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6891      	ldr	r1, [r2, #8]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	68d2      	ldr	r2, [r2, #12]
 80007a8:	4311      	orrs	r1, r2
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	6912      	ldr	r2, [r2, #16]
 80007ae:	4311      	orrs	r1, r2
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	6952      	ldr	r2, [r2, #20]
 80007b4:	4311      	orrs	r1, r2
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	6852      	ldr	r2, [r2, #4]
 80007ba:	3a01      	subs	r2, #1
 80007bc:	430a      	orrs	r2, r1
 80007be:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2201      	movs	r2, #1
 80007ca:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007ce:	2300      	movs	r3, #0
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d101      	bne.n	80007ea <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e015      	b.n	8000816 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  HAL_CAN_Stop(hcan);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 f954 	bl	8000a98 <HAL_CAN_Stop>

  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f013 fc5d 	bl	80140b0 <HAL_CAN_MspDeInit>

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	6812      	ldr	r2, [r2, #0]
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000804:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspDeInit could be implemented in the user file
   */
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000846:	b480      	push	{r7}
 8000848:	b085      	sub	sp, #20
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  CAN_TypeDef *can_ip = hcan->Instance;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60bb      	str	r3, [r7, #8]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b01      	cmp	r3, #1
 8000864:	d006      	beq.n	8000874 <HAL_CAN_ConfigFilter+0x2e>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800086c:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800086e:	2b02      	cmp	r3, #2
 8000870:	f040 80bc 	bne.w	80009ec <HAL_CAN_ConfigFilter+0x1a6>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000874:	4b64      	ldr	r3, [pc, #400]	; (8000a08 <HAL_CAN_ConfigFilter+0x1c2>)
 8000876:	60bb      	str	r3, [r7, #8]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800087e:	f043 0201 	orr.w	r2, r3, #1
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800088e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a2:	021b      	lsls	r3, r3, #8
 80008a4:	431a      	orrs	r2, r3
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	2201      	movs	r2, #1
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	43db      	mvns	r3, r3
 80008c2:	401a      	ands	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d123      	bne.n	800091a <HAL_CAN_ConfigFilter+0xd4>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	43db      	mvns	r3, r3
 80008dc:	401a      	ands	r2, r3
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	3248      	adds	r2, #72	; 0x48
 80008fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	6892      	ldr	r2, [r2, #8]
 8000906:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	6812      	ldr	r2, [r2, #0]
 800090c:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800090e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000910:	68b9      	ldr	r1, [r7, #8]
 8000912:	3348      	adds	r3, #72	; 0x48
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	440b      	add	r3, r1
 8000918:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d122      	bne.n	8000968 <HAL_CAN_ConfigFilter+0x122>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	431a      	orrs	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000942:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	3248      	adds	r2, #72	; 0x48
 8000948:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	6892      	ldr	r2, [r2, #8]
 8000954:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	68d2      	ldr	r2, [r2, #12]
 800095a:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800095c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800095e:	68b9      	ldr	r1, [r7, #8]
 8000960:	3348      	adds	r3, #72	; 0x48
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	440b      	add	r3, r1
 8000966:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d109      	bne.n	8000984 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	43db      	mvns	r3, r3
 800097a:	401a      	ands	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000982:	e007      	b.n	8000994 <HAL_CAN_ConfigFilter+0x14e>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	431a      	orrs	r2, r3
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	691b      	ldr	r3, [r3, #16]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d109      	bne.n	80009b0 <HAL_CAN_ConfigFilter+0x16a>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	43db      	mvns	r3, r3
 80009a6:	401a      	ands	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80009ae:	e007      	b.n	80009c0 <HAL_CAN_ConfigFilter+0x17a>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	431a      	orrs	r2, r3
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == ENABLE)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	6a1b      	ldr	r3, [r3, #32]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d107      	bne.n	80009d8 <HAL_CAN_ConfigFilter+0x192>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	431a      	orrs	r2, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009de:	f023 0201 	bic.w	r2, r3, #1
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	e006      	b.n	80009fa <HAL_CAN_ConfigFilter+0x1b4>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
  }
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40006400 	.word	0x40006400

08000a0c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d12e      	bne.n	8000a82 <HAL_CAN_Start+0x76>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2202      	movs	r2, #2
 8000a28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	6812      	ldr	r2, [r2, #0]
 8000a34:	6812      	ldr	r2, [r2, #0]
 8000a36:	f022 0201 	bic.w	r2, r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a3c:	f7ff fc78 	bl	8000330 <HAL_GetTick>
 8000a40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 8000a42:	e012      	b.n	8000a6a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a44:	f7ff fc74 	bl	8000330 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	d90b      	bls.n	8000a6a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2205      	movs	r2, #5
 8000a62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e012      	b.n	8000a90 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1e5      	bne.n	8000a44 <HAL_CAN_Start+0x38>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e006      	b.n	8000a90 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
  }
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d133      	bne.n	8000b18 <HAL_CAN_Stop+0x80>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	6812      	ldr	r2, [r2, #0]
 8000ab8:	6812      	ldr	r2, [r2, #0]
 8000aba:	f042 0201 	orr.w	r2, r2, #1
 8000abe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ac0:	f7ff fc36 	bl	8000330 <HAL_GetTick>
 8000ac4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8000ac6:	e012      	b.n	8000aee <HAL_CAN_Stop+0x56>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ac8:	f7ff fc32 	bl	8000330 <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	2b0a      	cmp	r3, #10
 8000ad4:	d90b      	bls.n	8000aee <HAL_CAN_Stop+0x56>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ada:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2205      	movs	r2, #5
 8000ae6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e01b      	b.n	8000b26 <HAL_CAN_Stop+0x8e>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0e5      	beq.n	8000ac8 <HAL_CAN_Stop+0x30>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	6812      	ldr	r2, [r2, #0]
 8000b04:	6812      	ldr	r2, [r2, #0]
 8000b06:	f022 0202 	bic.w	r2, r2, #2
 8000b0a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	e006      	b.n	8000b26 <HAL_CAN_Stop+0x8e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
  }
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_CAN_RequestSleep>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d005      	beq.n	8000b4e <HAL_CAN_RequestSleep+0x20>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b48:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d109      	bne.n	8000b62 <HAL_CAN_RequestSleep+0x34>
  {
    /* Request Sleep mode */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	6812      	ldr	r2, [r2, #0]
 8000b56:	6812      	ldr	r2, [r2, #0]
 8000b58:	f042 0202 	orr.w	r2, r2, #2
 8000b5c:	601a      	str	r2, [r3, #0]

    /* Return function status */
    return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e006      	b.n	8000b70 <HAL_CAN_RequestSleep+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
  }
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = 1000000U;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_CAN_WakeUp+0x80>)
 8000b8a:	60fb      	str	r3, [r7, #12]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d005      	beq.n	8000ba4 <HAL_CAN_WakeUp+0x28>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b9e:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d11e      	bne.n	8000be2 <HAL_CAN_WakeUp+0x66>
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	6812      	ldr	r2, [r2, #0]
 8000bac:	6812      	ldr	r2, [r2, #0]
 8000bae:	f022 0202 	bic.w	r2, r2, #2
 8000bb2:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Check if timeout is reached */
      if (++count > timeout)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d907      	bls.n	8000bd0 <HAL_CAN_WakeUp+0x54>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e00f      	b.n	8000bf0 <HAL_CAN_WakeUp+0x74>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1ea      	bne.n	8000bb4 <HAL_CAN_WakeUp+0x38>

    /* Return function status */
    return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e006      	b.n	8000bf0 <HAL_CAN_WakeUp+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
  }
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	000f4240 	.word	0x000f4240

08000c00 <HAL_CAN_IsSleepActive>:
  * @retval Status
  *          - 0 : Sleep mode is not active.
  *          - 1 : Sleep mode is active.
  */
uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t status = 0U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d005      	beq.n	8000c24 <HAL_CAN_IsSleepActive+0x24>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c1e:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d108      	bne.n	8000c36 <HAL_CAN_IsSleepActive+0x36>
  {
    /* Check Sleep mode */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_CAN_IsSleepActive+0x36>
    {
      status = 1U;
 8000c32:	2301      	movs	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return function status */
  return status;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	603b      	str	r3, [r7, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d006      	beq.n	8000c6c <HAL_CAN_AddTxMessage+0x28>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c64:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	f040 80b1 	bne.w	8000dce <HAL_CAN_AddTxMessage+0x18a>
  {
    /* Check that all the Tx mailboxes are not full */
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10e      	bne.n	8000c98 <HAL_CAN_AddTxMessage+0x54>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d107      	bne.n	8000c98 <HAL_CAN_AddTxMessage+0x54>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 8093 	beq.w	8000dbe <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	0e1b      	lsrs	r3, r3, #24
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = 1U << transmitmailbox;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10d      	bne.n	8000cd4 <HAL_CAN_AddTxMessage+0x90>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6819      	ldr	r1, [r3, #0]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3318      	adds	r3, #24
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	440b      	add	r3, r1
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	e00f      	b.n	8000cf4 <HAL_CAN_AddTxMessage+0xb0>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6819      	ldr	r1, [r3, #0]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ce2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 8000ce8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3318      	adds	r3, #24
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	440b      	add	r3, r1
 8000cf2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6819      	ldr	r1, [r3, #0]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	691a      	ldr	r2, [r3, #16]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3318      	adds	r3, #24
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	440b      	add	r3, r1
 8000d04:	3304      	adds	r3, #4
 8000d06:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	7d1b      	ldrb	r3, [r3, #20]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d111      	bne.n	8000d34 <HAL_CAN_AddTxMessage+0xf0>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6819      	ldr	r1, [r3, #0]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3318      	adds	r3, #24
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	4413      	add	r3, r2
 8000d20:	3304      	adds	r3, #4
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3318      	adds	r3, #24
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	440b      	add	r3, r1
 8000d30:	3304      	adds	r3, #4
 8000d32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6819      	ldr	r1, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3307      	adds	r3, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	061a      	lsls	r2, r3, #24
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3306      	adds	r3, #6
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	041b      	lsls	r3, r3, #16
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3305      	adds	r3, #5
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	4313      	orrs	r3, r2
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	3204      	adds	r2, #4
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	440b      	add	r3, r1
 8000d62:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6819      	ldr	r1, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3303      	adds	r3, #3
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	061a      	lsls	r2, r3, #24
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3302      	adds	r3, #2
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	041b      	lsls	r3, r3, #16
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3301      	adds	r3, #1
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	4313      	orrs	r3, r2
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	440b      	add	r3, r1
 8000d94:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d98:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	6819      	ldr	r1, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3318      	adds	r3, #24
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	4413      	add	r3, r2
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f043 0201 	orr.w	r2, r3, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	3318      	adds	r3, #24
 8000db4:	011b      	lsls	r3, r3, #4
 8000db6:	440b      	add	r3, r1
 8000db8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e00e      	b.n	8000ddc <HAL_CAN_AddTxMessage+0x198>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e006      	b.n	8000ddc <HAL_CAN_AddTxMessage+0x198>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
  }
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_CAN_AbortTxRequest+0x22>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e04:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d128      	bne.n	8000e5c <HAL_CAN_AbortTxRequest+0x74>
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != RESET)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d007      	beq.n	8000e24 <HAL_CAN_AbortTxRequest+0x3c>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	6892      	ldr	r2, [r2, #8]
 8000e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e22:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != RESET)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d007      	beq.n	8000e3e <HAL_CAN_AbortTxRequest+0x56>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	6892      	ldr	r2, [r2, #8]
 8000e38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e3c:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != RESET)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d007      	beq.n	8000e58 <HAL_CAN_AbortTxRequest+0x70>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	6892      	ldr	r2, [r2, #8]
 8000e52:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e56:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e006      	b.n	8000e6a <HAL_CAN_AbortTxRequest+0x82>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
  }
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b085      	sub	sp, #20
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e94:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d11d      	bne.n	8000ed6 <HAL_CAN_GetTxMailboxesFreeLevel+0x60>
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <HAL_CAN_GetTxMailboxesFreeLevel+0x38>
    {
      freelevel++;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <HAL_CAN_GetTxMailboxesFreeLevel+0x4c>
    {
      freelevel++;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <HAL_CAN_GetTxMailboxesFreeLevel+0x60>
    {
      freelevel++;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d005      	beq.n	8000f0a <HAL_CAN_IsTxMessagePending+0x26>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f04:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d10b      	bne.n	8000f22 <HAL_CAN_IsTxMessagePending+0x3e>
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	069b      	lsls	r3, r3, #26
 8000f14:	401a      	ands	r2, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	069b      	lsls	r3, r3, #26
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d001      	beq.n	8000f22 <HAL_CAN_IsTxMessagePending+0x3e>
    {
      status = 1U;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_CAN_GetTxTimestamp>:
  *         read.
  *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
  * @retval Timestamp of message sent from Tx Mailbox.
  */
uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t timestamp = 0U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t transmitmailbox;

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX(TxMailbox));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_CAN_GetTxTimestamp+0x26>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f50:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d114      	bne.n	8000f80 <HAL_CAN_GetTxTimestamp+0x50>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	fa93 f3a3 	rbit	r3, r3
 8000f60:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f62:	68bb      	ldr	r3, [r7, #8]
  {
    /* Select the Tx mailbox */
    transmitmailbox = POSITION_VAL(TxMailbox);
 8000f64:	fab3 f383 	clz	r3, r3
 8000f68:	613b      	str	r3, [r7, #16]

    /* Get timestamp */
    timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TIME_Pos;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	3318      	adds	r3, #24
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	4413      	add	r3, r2
 8000f76:	3304      	adds	r3, #4
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  }

  /* Return the timestamp */
  return timestamp;
 8000f80:	697b      	ldr	r3, [r7, #20]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	603b      	str	r3, [r7, #0]
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d006      	beq.n	8000fb6 <HAL_CAN_GetRxMessage+0x28>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fae:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	f040 80fa 	bne.w	80011aa <HAL_CAN_GetRxMessage+0x21c>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10e      	bne.n	8000fda <HAL_CAN_GetRxMessage+0x4c>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d119      	bne.n	8000ffe <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e0ee      	b.n	80011b8 <HAL_CAN_GetRxMessage+0x22a>
      }
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d10e      	bne.n	8000ffe <HAL_CAN_GetRxMessage+0x70>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e0dc      	b.n	80011b8 <HAL_CAN_GetRxMessage+0x22a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	331b      	adds	r3, #27
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0204 	and.w	r2, r3, #4
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10c      	bne.n	8001036 <HAL_CAN_GetRxMessage+0xa8>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	331b      	adds	r3, #27
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0d5b      	lsrs	r3, r3, #21
 800102c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e00b      	b.n	800104e <HAL_CAN_GetRxMessage+0xc0>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	331b      	adds	r3, #27
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	4413      	add	r3, r2
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	331b      	adds	r3, #27
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	4413      	add	r3, r2
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	f003 0201 	and.w	r2, r3, #1
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	331b      	adds	r3, #27
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	4413      	add	r3, r2
 8001072:	3304      	adds	r3, #4
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 020f 	and.w	r2, r3, #15
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	331b      	adds	r3, #27
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	4413      	add	r3, r2
 800108a:	3304      	adds	r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	b2da      	uxtb	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	331b      	adds	r3, #27
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	3304      	adds	r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	0c1b      	lsrs	r3, r3, #16
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4413      	add	r3, r2
 80010b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	701a      	strb	r2, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	6811      	ldr	r1, [r2, #0]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	440a      	add	r2, r1
 80010d2:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	0a12      	lsrs	r2, r2, #8
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	701a      	strb	r2, [r3, #0]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3302      	adds	r3, #2
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	6811      	ldr	r1, [r2, #0]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	440a      	add	r2, r1
 80010ec:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	0c12      	lsrs	r2, r2, #16
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	701a      	strb	r2, [r3, #0]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	3303      	adds	r3, #3
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	6811      	ldr	r1, [r2, #0]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	440a      	add	r2, r1
 8001106:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	0e12      	lsrs	r2, r2, #24
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3304      	adds	r3, #4
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	6811      	ldr	r1, [r2, #0]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	440a      	add	r2, r1
 8001120:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3305      	adds	r3, #5
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	6811      	ldr	r1, [r2, #0]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	440a      	add	r2, r1
 8001138:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	0a12      	lsrs	r2, r2, #8
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	3306      	adds	r3, #6
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	6811      	ldr	r1, [r2, #0]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	440a      	add	r2, r1
 8001152:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	0c12      	lsrs	r2, r2, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	3307      	adds	r3, #7
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	6811      	ldr	r1, [r2, #0]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	440a      	add	r2, r1
 800116c:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8001170:	6812      	ldr	r2, [r2, #0]
 8001172:	0e12      	lsrs	r2, r2, #24
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d108      	bne.n	8001190 <HAL_CAN_GetRxMessage+0x202>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	68d2      	ldr	r2, [r2, #12]
 8001188:	f042 0220 	orr.w	r2, r2, #32
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	e00a      	b.n	80011a6 <HAL_CAN_GetRxMessage+0x218>
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d107      	bne.n	80011a6 <HAL_CAN_GetRxMessage+0x218>
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	6912      	ldr	r2, [r2, #16]
 80011a0:	f042 0220 	orr.w	r2, r2, #32
 80011a4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e006      	b.n	80011b8 <HAL_CAN_GetRxMessage+0x22a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
  }
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d005      	beq.n	80011ea <HAL_CAN_GetRxFifoFillLevel+0x26>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e4:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d10f      	bne.n	800120a <HAL_CAN_GetRxFifoFillLevel+0x46>
  {
    if (RxFifo == CAN_RX_FIFO0)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d106      	bne.n	80011fe <HAL_CAN_GetRxFifoFillLevel+0x3a>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	e005      	b.n	800120a <HAL_CAN_GetRxFifoFillLevel+0x46>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d005      	beq.n	800123a <HAL_CAN_ActivateNotification+0x22>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001234:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001236:	2b02      	cmp	r3, #2
 8001238:	d109      	bne.n	800124e <HAL_CAN_ActivateNotification+0x36>
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	6951      	ldr	r1, [r2, #20]
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e006      	b.n	800125c <HAL_CAN_ActivateNotification+0x44>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
  }
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b01      	cmp	r3, #1
 800127c:	d005      	beq.n	800128a <HAL_CAN_DeactivateNotification+0x22>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001284:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001286:	2b02      	cmp	r3, #2
 8001288:	d10a      	bne.n	80012a0 <HAL_CAN_DeactivateNotification+0x38>
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	6951      	ldr	r1, [r2, #20]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	43d2      	mvns	r2, r2
 8001298:	400a      	ands	r2, r1
 800129a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	e006      	b.n	80012ae <HAL_CAN_DeactivateNotification+0x46>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
  }
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b08a      	sub	sp, #40	; 0x28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d07c      	beq.n	80013fa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != RESET)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d023      	beq.n	8001352 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2201      	movs	r2, #1
 8001310:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f97d 	bl	800161c <HAL_CAN_TxMailbox0CompleteCallback>
 8001322:	e016      	b.n	8001352 <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != RESET)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	e00c      	b.n	8001352 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != RESET)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d004      	beq.n	800134c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
 800134a:	e002      	b.n	8001352 <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f983 	bl	8001658 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != RESET)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d024      	beq.n	80013a6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001364:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f95d 	bl	8001630 <HAL_CAN_TxMailbox1CompleteCallback>
 8001376:	e016      	b.n	80013a6 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != RESET)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
 800138a:	e00c      	b.n	80013a6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != RESET)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	e002      	b.n	80013a6 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f963 	bl	800166c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != RESET)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d024      	beq.n	80013fa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f93d 	bl	8001644 <HAL_CAN_TxMailbox2CompleteCallback>
 80013ca:	e016      	b.n	80013fa <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != RESET)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
 80013de:	e00c      	b.n	80013fa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != RESET)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
 80013f2:	e002      	b.n	80013fa <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f943 	bl	8001680 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00c      	beq.n	800141e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001414:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2210      	movs	r2, #16
 800141c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2208      	movs	r2, #8
 8001438:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f934 	bl	80016a8 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d009      	beq.n	800145e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f91b 	bl	8001694 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00c      	beq.n	8001482 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001478:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2210      	movs	r2, #16
 8001480:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00b      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2208      	movs	r2, #8
 800149c:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f916 	bl	80016d0 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d009      	beq.n	80014c2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f8fd 	bl	80016bc <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00b      	beq.n	80014e4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != RESET)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2210      	movs	r2, #16
 80014dc:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f900 	bl	80016e4 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != RESET)
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != RESET)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2208      	movs	r2, #8
 80014fe:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f8f9 	bl	80016f8 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != RESET)
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d075      	beq.n	80015fc <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != RESET)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d06c      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != RESET))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != RESET))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != RESET))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001574:	2b00      	cmp	r3, #0
 8001576:	d03d      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != RESET))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 800157e:	2b00      	cmp	r3, #0
 8001580:	d038      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001588:	2b30      	cmp	r3, #48	; 0x30
 800158a:	d017      	beq.n	80015bc <HAL_CAN_IRQHandler+0x302>
 800158c:	2b30      	cmp	r3, #48	; 0x30
 800158e:	d804      	bhi.n	800159a <HAL_CAN_IRQHandler+0x2e0>
 8001590:	2b10      	cmp	r3, #16
 8001592:	d009      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x2ee>
 8001594:	2b20      	cmp	r3, #32
 8001596:	d00c      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001598:	e024      	b.n	80015e4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800159a:	2b50      	cmp	r3, #80	; 0x50
 800159c:	d018      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x316>
 800159e:	2b60      	cmp	r3, #96	; 0x60
 80015a0:	d01b      	beq.n	80015da <HAL_CAN_IRQHandler+0x320>
 80015a2:	2b40      	cmp	r3, #64	; 0x40
 80015a4:	d00f      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x30c>
            break;
 80015a6:	e01d      	b.n	80015e4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	f043 0308 	orr.w	r3, r3, #8
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015b0:	e018      	b.n	80015e4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	f043 0310 	orr.w	r3, r3, #16
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ba:	e013      	b.n	80015e4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	f043 0320 	orr.w	r3, r3, #32
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015c4:	e00e      	b.n	80015e4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ce:	e009      	b.n	80015e4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015d8:	e004      	b.n	80015e4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015e2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	6992      	ldr	r2, [r2, #24]
 80015ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015f2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2204      	movs	r2, #4
 80015fa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f87c 	bl	800170c <HAL_CAN_ErrorCallback>
  }
}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172e:	73fb      	strb	r3, [r7, #15]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b01      	cmp	r3, #1
 800173a:	d005      	beq.n	8001748 <HAL_CAN_GetState+0x28>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001742:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001744:	2b02      	cmp	r3, #2
 8001746:	d112      	bne.n	800176e <HAL_CAN_GetState+0x4e>
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <HAL_CAN_GetState+0x3c>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8001756:	2304      	movs	r3, #4
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	e008      	b.n	800176e <HAL_CAN_GetState+0x4e>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_CAN_GetState+0x4e>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 800176a:	2303      	movs	r3, #3
 800176c:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Return CAN state */
  return state;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d005      	beq.n	80017b8 <HAL_CAN_ResetError+0x24>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b2:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d103      	bne.n	80017c0 <HAL_CAN_ResetError+0x2c>
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
 80017be:	e007      	b.n	80017d0 <HAL_CAN_ResetError+0x3c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop

080017e0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <NVIC_SetPriorityGrouping+0x44>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <NVIC_SetPriorityGrouping+0x44>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800184e:	4909      	ldr	r1, [pc, #36]	; (8001874 <NVIC_EnableIRQ+0x30>)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	095b      	lsrs	r3, r3, #5
 8001856:	79fa      	ldrb	r2, [r7, #7]
 8001858:	f002 021f 	and.w	r2, r2, #31
 800185c:	2001      	movs	r0, #1
 800185e:	fa00 f202 	lsl.w	r2, r0, r2
 8001862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000e100 	.word	0xe000e100

08001878 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001882:	4909      	ldr	r1, [pc, #36]	; (80018a8 <NVIC_DisableIRQ+0x30>)
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	095b      	lsrs	r3, r3, #5
 800188a:	79fa      	ldrb	r2, [r7, #7]
 800188c:	f002 021f 	and.w	r2, r2, #31
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	3320      	adds	r3, #32
 8001898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100

080018ac <NVIC_GetPendingIRQ>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <NVIC_GetPendingIRQ+0x34>)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	095b      	lsrs	r3, r3, #5
 80018be:	3340      	adds	r3, #64	; 0x40
 80018c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	f003 0301 	and.w	r3, r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80018ee:	4909      	ldr	r1, [pc, #36]	; (8001914 <NVIC_SetPendingIRQ+0x30>)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	095b      	lsrs	r3, r3, #5
 80018f6:	79fa      	ldrb	r2, [r7, #7]
 80018f8:	f002 021f 	and.w	r2, r2, #31
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	3340      	adds	r3, #64	; 0x40
 8001904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100

08001918 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001922:	4909      	ldr	r1, [pc, #36]	; (8001948 <NVIC_ClearPendingIRQ+0x30>)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	095b      	lsrs	r3, r3, #5
 800192a:	79fa      	ldrb	r2, [r7, #7]
 800192c:	f002 021f 	and.w	r2, r2, #31
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	3360      	adds	r3, #96	; 0x60
 8001938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100

0800194c <NVIC_GetActive>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
 */
__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <NVIC_GetActive+0x34>)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	095b      	lsrs	r3, r3, #5
 800195e:	3380      	adds	r3, #128	; 0x80
 8001960:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	fa22 f303 	lsr.w	r3, r2, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e100 	.word	0xe000e100

08001984 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	da0b      	bge.n	80019b0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	490d      	ldr	r1, [pc, #52]	; (80019d0 <NVIC_SetPriority+0x4c>)
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	3b04      	subs	r3, #4
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ae:	e009      	b.n	80019c4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	4908      	ldr	r1, [pc, #32]	; (80019d4 <NVIC_SetPriority+0x50>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) < 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da0a      	bge.n	8001a00 <NVIC_GetPriority+0x28>
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 80019ea:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <NVIC_GetPriority+0x48>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	4413      	add	r3, r2
 80019f6:	7e1b      	ldrb	r3, [r3, #24]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e008      	b.n	8001a12 <NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8001a00:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <NVIC_GetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	4413      	add	r3, r2
 8001a08:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	b2db      	uxtb	r3, r3
  }
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	1e5a      	subs	r2, r3, #1
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	401a      	ands	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6e:	2101      	movs	r1, #1
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	1e59      	subs	r1, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	4313      	orrs	r3, r2
         );
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3724      	adds	r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b089      	sub	sp, #36	; 0x24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_DecodePriority+0x32>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_DecodePriority+0x34>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	40da      	lsrs	r2, r3
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	1e5a      	subs	r2, r3, #1
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	601a      	str	r2, [r3, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	3724      	adds	r7, #36	; 0x24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001af8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001afc:	4905      	ldr	r1, [pc, #20]	; (8001b14 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <NVIC_SystemReset+0x20>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <NVIC_SystemReset+0x24>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
 8001b0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8001b10:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b12:	e7fd      	b.n	8001b10 <NVIC_SystemReset+0x1c>
 8001b14:	e000ed00 	.word	0xe000ed00
 8001b18:	05fa0004 	.word	0x05fa0004

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff20 	bl	8001984 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fe39 	bl	80017e0 <NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff fe4e 	bl	8001828 <NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff48 	bl	8001a28 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff feef 	bl	8001984 <NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fe41 	bl	8001844 <NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fe4d 	bl	8001878 <NVIC_DisableIRQ>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001bea:	f7ff ff83 	bl	8001af4 <NVIC_SystemReset>
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ff8e 	bl	8001b1c <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001c0e:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c12:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_MPU_Disable+0x26>)
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_MPU_Disable+0x26>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_MPU_Disable+0x2a>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00
 8001c34:	e000ed90 	.word	0xe000ed90

08001c38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c40:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <HAL_MPU_Enable+0x34>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <HAL_MPU_Enable+0x38>)
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_MPU_Enable+0x38>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c5a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed90 	.word	0xe000ed90
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c7c:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_MPU_ConfigRegion+0x84>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d028      	beq.n	8001cde <HAL_MPU_ConfigRegion+0x6a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001c8c:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <HAL_MPU_ConfigRegion+0x84>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c94:	4918      	ldr	r1, [pc, #96]	; (8001cf8 <HAL_MPU_ConfigRegion+0x84>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7b1b      	ldrb	r3, [r3, #12]
 8001c9a:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7adb      	ldrb	r3, [r3, #11]
 8001ca0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ca2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7a9b      	ldrb	r3, [r3, #10]
 8001ca8:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001caa:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7b5b      	ldrb	r3, [r3, #13]
 8001cb0:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cb2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7b9b      	ldrb	r3, [r3, #14]
 8001cb8:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cba:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7bdb      	ldrb	r3, [r3, #15]
 8001cc0:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cc2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7a5b      	ldrb	r3, [r3, #9]
 8001cc8:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cca:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7a1b      	ldrb	r3, [r3, #8]
 8001cd0:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cd2:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cd8:	4313      	orrs	r3, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cda:	610b      	str	r3, [r1, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 8001cdc:	e005      	b.n	8001cea <HAL_MPU_ConfigRegion+0x76>
    MPU->RBAR = 0x00U;
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_MPU_ConfigRegion+0x84>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <HAL_MPU_ConfigRegion+0x84>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed90 	.word	0xe000ed90

08001cfc <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8001d00:	f7ff fd92 	bl	8001828 <NVIC_GetPriorityGrouping>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	4603      	mov	r3, r0
 8001d18:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8001d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fe5a 	bl	80019d8 <NVIC_GetPriority>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	f7ff feae 	bl	8001a8a <NVIC_DecodePriority>
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fdcd 	bl	80018e4 <NVIC_SetPendingIRQ>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fda3 	bl	80018ac <NVIC_GetPendingIRQ>
 8001d66:	4603      	mov	r3, r0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fdca 	bl	8001918 <NVIC_ClearPendingIRQ>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fdd6 	bl	800194c <NVIC_GetActive>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d106      	bne.n	8001dc6 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001db8:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001dc4:	e005      	b.n	8001dd2 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001dc6:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6013      	str	r3, [r2, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001de8:	f000 f802 	bl	8001df0 <HAL_SYSTICK_Callback>
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop

08001e00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7fe fa90 	bl	8000330 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e099      	b.n	8001f50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3c:	e00f      	b.n	8001e5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e3e:	f7fe fa77 	bl	8000330 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	d908      	bls.n	8001e5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2203      	movs	r2, #3
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e078      	b.n	8001f50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e8      	bne.n	8001e3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <HAL_DMA_Init+0x158>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d107      	bne.n	8001ec8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f023 0307 	bic.w	r3, r3, #7
 8001ede:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d117      	bne.n	8001f22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00e      	beq.n	8001f22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fd45 	bl	8002994 <DMA_CheckFifoParam>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2240      	movs	r2, #64	; 0x40
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e016      	b.n	8001f50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fcfc 	bl	8002928 <DMA_CalcBaseAndBitshift>
 8001f30:	4603      	mov	r3, r0
 8001f32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	223f      	movs	r2, #63	; 0x3f
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	f010803f 	.word	0xf010803f

08001f5c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e03e      	b.n	8001fec <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d101      	bne.n	8001f7e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e036      	b.n	8001fec <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2221      	movs	r2, #33	; 0x21
 8001fbc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fcb2 	bl	8002928 <DMA_CalcBaseAndBitshift>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	223f      	movs	r2, #63	; 0x3f
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_DMA_Start+0x20>
 8002010:	2302      	movs	r3, #2
 8002012:	e026      	b.n	8002062 <HAL_DMA_Start+0x6e>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d115      	bne.n	8002054 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fc45 	bl	80028cc <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e005      	b.n	8002060 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800205c:	2302      	movs	r3, #2
 800205e:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002060:	7dfb      	ldrb	r3, [r7, #23]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_DMA_Start_IT+0x26>
 800208c:	2302      	movs	r3, #2
 800208e:	e048      	b.n	8002122 <HAL_DMA_Start_IT+0xb8>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d137      	bne.n	8002114 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fc07 	bl	80028cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	223f      	movs	r2, #63	; 0x3f
 80020c4:	409a      	lsls	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	f042 0216 	orr.w	r2, r2, #22
 80020d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	6952      	ldr	r2, [r2, #20]
 80020e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020e8:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	f042 0208 	orr.w	r2, r2, #8
 8002100:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e005      	b.n	8002120 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800211c:	2302      	movs	r3, #2
 800211e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002120:	7dfb      	ldrb	r3, [r7, #23]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7fe f8fa 	bl	8000330 <HAL_GetTick>
 800213c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d008      	beq.n	800215c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e052      	b.n	8002202 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	f022 0216 	bic.w	r2, r2, #22
 800216a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	6952      	ldr	r2, [r2, #20]
 8002176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800217a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	d103      	bne.n	800218c <HAL_DMA_Abort+0x62>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	f022 0208 	bic.w	r2, r2, #8
 800219a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ac:	e013      	b.n	80021d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ae:	f7fe f8bf 	bl	8000330 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d90c      	bls.n	80021d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2203      	movs	r2, #3
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e015      	b.n	8002202 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e4      	bne.n	80021ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	223f      	movs	r2, #63	; 0x3f
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d004      	beq.n	8002228 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e00c      	b.n	8002242 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2205      	movs	r2, #5
 800222c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b08a      	sub	sp, #40	; 0x28
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	460b      	mov	r3, r1
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 800225c:	2300      	movs	r3, #0
 800225e:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8002260:	f7fe f866 	bl	8000330 <HAL_GetTick>
 8002264:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d008      	beq.n	8002284 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2280      	movs	r2, #128	; 0x80
 8002276:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0bf      	b.n	8002404 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0b2      	b.n	8002404 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800229e:	7afb      	ldrb	r3, [r7, #11]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d106      	bne.n	80022b2 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	2220      	movs	r2, #32
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
 80022b0:	e005      	b.n	80022be <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	2210      	movs	r2, #16
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80022ca:	e05a      	b.n	8002382 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d2:	d017      	beq.n	8002304 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <HAL_DMA_PollForTransfer+0x9c>
 80022da:	f7fe f829 	bl	8000330 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	1ad2      	subs	r2, r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d90c      	bls.n	8002304 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2220      	movs	r2, #32
 80022ee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e07f      	b.n	8002404 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	2208      	movs	r2, #8
 8002310:	409a      	lsls	r2, r3
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	2208      	movs	r2, #8
 800232c:	409a      	lsls	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	2201      	movs	r2, #1
 8002338:	409a      	lsls	r2, r3
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f043 0202 	orr.w	r2, r3, #2
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2201      	movs	r2, #1
 8002354:	409a      	lsls	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	2204      	movs	r2, #4
 8002360:	409a      	lsls	r2, r3
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	f043 0204 	orr.w	r2, r3, #4
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	2204      	movs	r2, #4
 800237c:	409a      	lsls	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8002382:	6a3a      	ldr	r2, [r7, #32]
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_DMA_PollForTransfer+0x14a>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d099      	beq.n	80022cc <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239c:	2b00      	cmp	r3, #0
 800239e:	d018      	beq.n	80023d2 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d012      	beq.n	80023d2 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f7ff febc 	bl	800212a <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2230      	movs	r2, #48	; 0x30
 80023b8:	409a      	lsls	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e018      	b.n	8002404 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80023d2:	7afb      	ldrb	r3, [r7, #11]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10e      	bne.n	80023f6 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	2230      	movs	r2, #48	; 0x30
 80023de:	409a      	lsls	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80023f4:	e005      	b.n	8002402 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	2210      	movs	r2, #16
 80023fc:	409a      	lsls	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8002402:	7ffb      	ldrb	r3, [r7, #31]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3728      	adds	r7, #40	; 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002418:	4b92      	ldr	r3, [pc, #584]	; (8002664 <HAL_DMA_IRQHandler+0x258>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a92      	ldr	r2, [pc, #584]	; (8002668 <HAL_DMA_IRQHandler+0x25c>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	0a9b      	lsrs	r3, r3, #10
 8002424:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002436:	2208      	movs	r2, #8
 8002438:	409a      	lsls	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01a      	beq.n	8002478 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	f022 0204 	bic.w	r2, r2, #4
 800245e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002464:	2208      	movs	r2, #8
 8002466:	409a      	lsls	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	f043 0201 	orr.w	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	2201      	movs	r2, #1
 800247e:	409a      	lsls	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d012      	beq.n	80024ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	2201      	movs	r2, #1
 800249c:	409a      	lsls	r2, r3
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	f043 0202 	orr.w	r2, r3, #2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	2204      	movs	r2, #4
 80024b4:	409a      	lsls	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d012      	beq.n	80024e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00b      	beq.n	80024e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	2204      	movs	r2, #4
 80024d2:	409a      	lsls	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	f043 0204 	orr.w	r2, r3, #4
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	2210      	movs	r2, #16
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d043      	beq.n	800257c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d03c      	beq.n	800257c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	2210      	movs	r2, #16
 8002508:	409a      	lsls	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d018      	beq.n	800254e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d108      	bne.n	800253c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d024      	beq.n	800257c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	4798      	blx	r3
 800253a:	e01f      	b.n	800257c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01b      	beq.n	800257c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	4798      	blx	r3
 800254c:	e016      	b.n	800257c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	f022 0208 	bic.w	r2, r2, #8
 800256a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	2220      	movs	r2, #32
 8002582:	409a      	lsls	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 808e 	beq.w	80026aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8086 	beq.w	80026aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	2220      	movs	r2, #32
 80025a4:	409a      	lsls	r2, r3
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d136      	bne.n	8002624 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	f022 0216 	bic.w	r2, r2, #22
 80025c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	6952      	ldr	r2, [r2, #20]
 80025d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <HAL_DMA_IRQHandler+0x1da>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	f022 0208 	bic.w	r2, r2, #8
 80025f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	223f      	movs	r2, #63	; 0x3f
 80025fc:	409a      	lsls	r2, r3
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002616:	2b00      	cmp	r3, #0
 8002618:	d07d      	beq.n	8002716 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
        }
        return;
 8002622:	e078      	b.n	8002716 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d01c      	beq.n	800266c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d108      	bne.n	8002652 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	2b00      	cmp	r3, #0
 8002646:	d030      	beq.n	80026aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
 8002650:	e02b      	b.n	80026aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d027      	beq.n	80026aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	4798      	blx	r3
 8002662:	e022      	b.n	80026aa <HAL_DMA_IRQHandler+0x29e>
 8002664:	20000008 	.word	0x20000008
 8002668:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10f      	bne.n	800269a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	f022 0210 	bic.w	r2, r2, #16
 8002688:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d032      	beq.n	8002718 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d022      	beq.n	8002704 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2205      	movs	r2, #5
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3301      	adds	r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4293      	cmp	r3, r2
 80026e0:	d807      	bhi.n	80026f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f2      	bne.n	80026d6 <HAL_DMA_IRQHandler+0x2ca>
 80026f0:	e000      	b.n	80026f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
 8002714:	e000      	b.n	8002718 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002716:	bf00      	nop
    }
  }
}
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800271e:	b480      	push	{r7}
 8002720:	b087      	sub	sp, #28
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	460b      	mov	r3, r1
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_DMA_RegisterCallback+0x20>
 800273a:	2302      	movs	r3, #2
 800273c:	e03d      	b.n	80027ba <HAL_DMA_RegisterCallback+0x9c>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d12a      	bne.n	80027a8 <HAL_DMA_RegisterCallback+0x8a>
  {
    switch (CallbackID)
 8002752:	7afb      	ldrb	r3, [r7, #11]
 8002754:	2b05      	cmp	r3, #5
 8002756:	d82a      	bhi.n	80027ae <HAL_DMA_RegisterCallback+0x90>
 8002758:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <HAL_DMA_RegisterCallback+0x42>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002779 	.word	0x08002779
 8002764:	08002781 	.word	0x08002781
 8002768:	08002789 	.word	0x08002789
 800276c:	08002791 	.word	0x08002791
 8002770:	08002799 	.word	0x08002799
 8002774:	080027a1 	.word	0x080027a1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800277e:	e017      	b.n	80027b0 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002786:	e013      	b.n	80027b0 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800278e:	e00f      	b.n	80027b0 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002796:	e00b      	b.n	80027b0 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800279e:	e007      	b.n	80027b0 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80027a6:	e003      	b.n	80027b0 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	75fb      	strb	r3, [r7, #23]
 80027ac:	e000      	b.n	80027b0 <HAL_DMA_RegisterCallback+0x92>
      break;
 80027ae:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_DMA_UnRegisterCallback+0x1e>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e053      	b.n	800288c <HAL_DMA_UnRegisterCallback+0xc6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d142      	bne.n	800287e <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d83b      	bhi.n	8002876 <HAL_DMA_UnRegisterCallback+0xb0>
 80027fe:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <HAL_DMA_UnRegisterCallback+0x3e>)
 8002800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002804:	08002821 	.word	0x08002821
 8002808:	08002829 	.word	0x08002829
 800280c:	08002831 	.word	0x08002831
 8002810:	08002839 	.word	0x08002839
 8002814:	08002841 	.word	0x08002841
 8002818:	08002849 	.word	0x08002849
 800281c:	08002851 	.word	0x08002851
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002826:	e02c      	b.n	8002882 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800282e:	e028      	b.n	8002882 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002836:	e024      	b.n	8002882 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800283e:	e020      	b.n	8002882 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002846:	e01c      	b.n	8002882 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 800284e:	e018      	b.n	8002882 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8002874:	e005      	b.n	8002882 <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
      break;
 800287a:	bf00      	nop
 800287c:	e001      	b.n	8002882 <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a6:	b2db      	uxtb	r3, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	d108      	bne.n	800290c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800290a:	e007      	b.n	800291c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	60da      	str	r2, [r3, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3b10      	subs	r3, #16
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <DMA_CalcBaseAndBitshift+0x64>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <DMA_CalcBaseAndBitshift+0x68>)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4413      	add	r3, r2
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d909      	bls.n	800296a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800295e:	f023 0303 	bic.w	r3, r3, #3
 8002962:	1d1a      	adds	r2, r3, #4
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	659a      	str	r2, [r3, #88]	; 0x58
 8002968:	e007      	b.n	800297a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002972:	f023 0303 	bic.w	r3, r3, #3
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	aaaaaaab 	.word	0xaaaaaaab
 8002990:	08015aac 	.word	0x08015aac

08002994 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11f      	bne.n	80029ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d855      	bhi.n	8002a60 <DMA_CheckFifoParam+0xcc>
 80029b4:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <DMA_CheckFifoParam+0x28>)
 80029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ba:	bf00      	nop
 80029bc:	080029cd 	.word	0x080029cd
 80029c0:	080029df 	.word	0x080029df
 80029c4:	080029cd 	.word	0x080029cd
 80029c8:	08002a61 	.word	0x08002a61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d045      	beq.n	8002a64 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029dc:	e042      	b.n	8002a64 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029e6:	d13f      	bne.n	8002a68 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ec:	e03c      	b.n	8002a68 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f6:	d121      	bne.n	8002a3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d836      	bhi.n	8002a6c <DMA_CheckFifoParam+0xd8>
 80029fe:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <DMA_CheckFifoParam+0x70>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a1b 	.word	0x08002a1b
 8002a0c:	08002a15 	.word	0x08002a15
 8002a10:	08002a2d 	.word	0x08002a2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      break;
 8002a18:	e02f      	b.n	8002a7a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d024      	beq.n	8002a70 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2a:	e021      	b.n	8002a70 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a34:	d11e      	bne.n	8002a74 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a3a:	e01b      	b.n	8002a74 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d902      	bls.n	8002a48 <DMA_CheckFifoParam+0xb4>
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d003      	beq.n	8002a4e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a46:	e018      	b.n	8002a7a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4c:	e015      	b.n	8002a7a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00e      	beq.n	8002a78 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5e:	e00b      	b.n	8002a78 <DMA_CheckFifoParam+0xe4>
      break;
 8002a60:	bf00      	nop
 8002a62:	e00a      	b.n	8002a7a <DMA_CheckFifoParam+0xe6>
      break;
 8002a64:	bf00      	nop
 8002a66:	e008      	b.n	8002a7a <DMA_CheckFifoParam+0xe6>
      break;
 8002a68:	bf00      	nop
 8002a6a:	e006      	b.n	8002a7a <DMA_CheckFifoParam+0xe6>
      break;
 8002a6c:	bf00      	nop
 8002a6e:	e004      	b.n	8002a7a <DMA_CheckFifoParam+0xe6>
      break;
 8002a70:	bf00      	nop
 8002a72:	e002      	b.n	8002a7a <DMA_CheckFifoParam+0xe6>
      break;   
 8002a74:	bf00      	nop
 8002a76:	e000      	b.n	8002a7a <DMA_CheckFifoParam+0xe6>
      break;
 8002a78:	bf00      	nop
    }
  } 
  
  return status; 
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	e177      	b.n	8002d94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f040 8166 	bne.w	8002d8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x4a>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b12      	cmp	r3, #18
 8002ad0:	d123      	bne.n	8002b1a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	08da      	lsrs	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3208      	adds	r2, #8
 8002ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	08da      	lsrs	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3208      	adds	r2, #8
 8002b14:	69b9      	ldr	r1, [r7, #24]
 8002b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0203 	and.w	r2, r3, #3
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d00b      	beq.n	8002b6e <HAL_GPIO_Init+0xe6>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d007      	beq.n	8002b6e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b62:	2b11      	cmp	r3, #17
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b12      	cmp	r3, #18
 8002b6c:	d130      	bne.n	8002bd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	2203      	movs	r2, #3
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 0201 	and.w	r2, r3, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	2203      	movs	r2, #3
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80c0 	beq.w	8002d8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4a65      	ldr	r2, [pc, #404]	; (8002da8 <HAL_GPIO_Init+0x320>)
 8002c14:	4b64      	ldr	r3, [pc, #400]	; (8002da8 <HAL_GPIO_Init+0x320>)
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1e:	4b62      	ldr	r3, [pc, #392]	; (8002da8 <HAL_GPIO_Init+0x320>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c2a:	4a60      	ldr	r2, [pc, #384]	; (8002dac <HAL_GPIO_Init+0x324>)
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	220f      	movs	r2, #15
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a57      	ldr	r2, [pc, #348]	; (8002db0 <HAL_GPIO_Init+0x328>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d037      	beq.n	8002cc6 <HAL_GPIO_Init+0x23e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a56      	ldr	r2, [pc, #344]	; (8002db4 <HAL_GPIO_Init+0x32c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d031      	beq.n	8002cc2 <HAL_GPIO_Init+0x23a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a55      	ldr	r2, [pc, #340]	; (8002db8 <HAL_GPIO_Init+0x330>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d02b      	beq.n	8002cbe <HAL_GPIO_Init+0x236>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a54      	ldr	r2, [pc, #336]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d025      	beq.n	8002cba <HAL_GPIO_Init+0x232>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a53      	ldr	r2, [pc, #332]	; (8002dc0 <HAL_GPIO_Init+0x338>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01f      	beq.n	8002cb6 <HAL_GPIO_Init+0x22e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <HAL_GPIO_Init+0x33c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d019      	beq.n	8002cb2 <HAL_GPIO_Init+0x22a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a51      	ldr	r2, [pc, #324]	; (8002dc8 <HAL_GPIO_Init+0x340>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_GPIO_Init+0x226>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a50      	ldr	r2, [pc, #320]	; (8002dcc <HAL_GPIO_Init+0x344>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00d      	beq.n	8002caa <HAL_GPIO_Init+0x222>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4f      	ldr	r2, [pc, #316]	; (8002dd0 <HAL_GPIO_Init+0x348>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <HAL_GPIO_Init+0x21e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4e      	ldr	r2, [pc, #312]	; (8002dd4 <HAL_GPIO_Init+0x34c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_GPIO_Init+0x21a>
 8002c9e:	2309      	movs	r3, #9
 8002ca0:	e012      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002ca2:	230a      	movs	r3, #10
 8002ca4:	e010      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	e00e      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002caa:	2307      	movs	r3, #7
 8002cac:	e00c      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cae:	2306      	movs	r3, #6
 8002cb0:	e00a      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	e008      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e004      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e002      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	f002 0203 	and.w	r2, r2, #3
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	4093      	lsls	r3, r2
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd8:	4934      	ldr	r1, [pc, #208]	; (8002dac <HAL_GPIO_Init+0x324>)
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce6:	4b3c      	ldr	r3, [pc, #240]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d0a:	4a33      	ldr	r2, [pc, #204]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d10:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d34:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d3a:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d88:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3301      	adds	r3, #1
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b0f      	cmp	r3, #15
 8002d98:	f67f ae84 	bls.w	8002aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3724      	adds	r7, #36	; 0x24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	40020c00 	.word	0x40020c00
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40021400 	.word	0x40021400
 8002dc8:	40021800 	.word	0x40021800
 8002dcc:	40021c00 	.word	0x40021c00
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40022400 	.word	0x40022400
 8002dd8:	40013c00 	.word	0x40013c00

08002ddc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e0da      	b.n	8002fae <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4013      	ands	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	f040 80ca 	bne.w	8002fa8 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2103      	movs	r1, #3
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	401a      	ands	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	08da      	lsrs	r2, r3, #3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	08d9      	lsrs	r1, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3108      	adds	r1, #8
 8002e36:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	200f      	movs	r0, #15
 8002e44:	fa00 f303 	lsl.w	r3, r0, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	4019      	ands	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3208      	adds	r2, #8
 8002e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2103      	movs	r1, #3
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	401a      	ands	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	401a      	ands	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2103      	movs	r1, #3
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	401a      	ands	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e94:	4a4b      	ldr	r2, [pc, #300]	; (8002fc4 <HAL_GPIO_DeInit+0x1e8>)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	220f      	movs	r2, #15
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a43      	ldr	r2, [pc, #268]	; (8002fc8 <HAL_GPIO_DeInit+0x1ec>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d037      	beq.n	8002f2e <HAL_GPIO_DeInit+0x152>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a42      	ldr	r2, [pc, #264]	; (8002fcc <HAL_GPIO_DeInit+0x1f0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d031      	beq.n	8002f2a <HAL_GPIO_DeInit+0x14e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a41      	ldr	r2, [pc, #260]	; (8002fd0 <HAL_GPIO_DeInit+0x1f4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d02b      	beq.n	8002f26 <HAL_GPIO_DeInit+0x14a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a40      	ldr	r2, [pc, #256]	; (8002fd4 <HAL_GPIO_DeInit+0x1f8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d025      	beq.n	8002f22 <HAL_GPIO_DeInit+0x146>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a3f      	ldr	r2, [pc, #252]	; (8002fd8 <HAL_GPIO_DeInit+0x1fc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01f      	beq.n	8002f1e <HAL_GPIO_DeInit+0x142>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a3e      	ldr	r2, [pc, #248]	; (8002fdc <HAL_GPIO_DeInit+0x200>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d019      	beq.n	8002f1a <HAL_GPIO_DeInit+0x13e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a3d      	ldr	r2, [pc, #244]	; (8002fe0 <HAL_GPIO_DeInit+0x204>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_GPIO_DeInit+0x13a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a3c      	ldr	r2, [pc, #240]	; (8002fe4 <HAL_GPIO_DeInit+0x208>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00d      	beq.n	8002f12 <HAL_GPIO_DeInit+0x136>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a3b      	ldr	r2, [pc, #236]	; (8002fe8 <HAL_GPIO_DeInit+0x20c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <HAL_GPIO_DeInit+0x132>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a3a      	ldr	r2, [pc, #232]	; (8002fec <HAL_GPIO_DeInit+0x210>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d101      	bne.n	8002f0a <HAL_GPIO_DeInit+0x12e>
 8002f06:	2309      	movs	r3, #9
 8002f08:	e012      	b.n	8002f30 <HAL_GPIO_DeInit+0x154>
 8002f0a:	230a      	movs	r3, #10
 8002f0c:	e010      	b.n	8002f30 <HAL_GPIO_DeInit+0x154>
 8002f0e:	2308      	movs	r3, #8
 8002f10:	e00e      	b.n	8002f30 <HAL_GPIO_DeInit+0x154>
 8002f12:	2307      	movs	r3, #7
 8002f14:	e00c      	b.n	8002f30 <HAL_GPIO_DeInit+0x154>
 8002f16:	2306      	movs	r3, #6
 8002f18:	e00a      	b.n	8002f30 <HAL_GPIO_DeInit+0x154>
 8002f1a:	2305      	movs	r3, #5
 8002f1c:	e008      	b.n	8002f30 <HAL_GPIO_DeInit+0x154>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_DeInit+0x154>
 8002f22:	2303      	movs	r3, #3
 8002f24:	e004      	b.n	8002f30 <HAL_GPIO_DeInit+0x154>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_DeInit+0x154>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_GPIO_DeInit+0x154>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	f002 0203 	and.w	r2, r2, #3
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	fa03 f202 	lsl.w	r2, r3, r2
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d132      	bne.n	8002fa8 <HAL_GPIO_DeInit+0x1cc>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	220f      	movs	r2, #15
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002f52:	481c      	ldr	r0, [pc, #112]	; (8002fc4 <HAL_GPIO_DeInit+0x1e8>)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	089b      	lsrs	r3, r3, #2
 8002f58:	491a      	ldr	r1, [pc, #104]	; (8002fc4 <HAL_GPIO_DeInit+0x1e8>)
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	0892      	lsrs	r2, r2, #2
 8002f5e:	3202      	adds	r2, #2
 8002f60:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	43d2      	mvns	r2, r2
 8002f68:	400a      	ands	r2, r1
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002f70:	491f      	ldr	r1, [pc, #124]	; (8002ff0 <HAL_GPIO_DeInit+0x214>)
 8002f72:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <HAL_GPIO_DeInit+0x214>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002f7e:	491c      	ldr	r1, [pc, #112]	; (8002ff0 <HAL_GPIO_DeInit+0x214>)
 8002f80:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <HAL_GPIO_DeInit+0x214>)
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002f8c:	4918      	ldr	r1, [pc, #96]	; (8002ff0 <HAL_GPIO_DeInit+0x214>)
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <HAL_GPIO_DeInit+0x214>)
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	4013      	ands	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002f9a:	4915      	ldr	r1, [pc, #84]	; (8002ff0 <HAL_GPIO_DeInit+0x214>)
 8002f9c:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <HAL_GPIO_DeInit+0x214>)
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3301      	adds	r3, #1
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b0f      	cmp	r3, #15
 8002fb2:	f67f af21 	bls.w	8002df8 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40013800 	.word	0x40013800
 8002fc8:	40020000 	.word	0x40020000
 8002fcc:	40020400 	.word	0x40020400
 8002fd0:	40020800 	.word	0x40020800
 8002fd4:	40020c00 	.word	0x40020c00
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40021400 	.word	0x40021400
 8002fe0:	40021800 	.word	0x40021800
 8002fe4:	40021c00 	.word	0x40021c00
 8002fe8:	40022000 	.word	0x40022000
 8002fec:	40022400 	.word	0x40022400
 8002ff0:	40013c00 	.word	0x40013c00

08002ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	887b      	ldrh	r3, [r7, #2]
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
 8003010:	e001      	b.n	8003016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003016:	7bfb      	ldrb	r3, [r7, #15]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
 8003030:	4613      	mov	r3, r2
 8003032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003034:	787b      	ldrb	r3, [r7, #1]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003040:	e003      	b.n	800304a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	041a      	lsls	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	619a      	str	r2, [r3, #24]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	887b      	ldrh	r3, [r7, #2]
 8003068:	405a      	eors	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	615a      	str	r2, [r3, #20]
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800307a:	b480      	push	{r7}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	460b      	mov	r3, r1
 8003084:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8003086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800308a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800308c:	887a      	ldrh	r2, [r7, #2]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	60fb      	str	r3, [r7, #12]

 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e000      	b.n	80030be <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
  }
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030e0:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f807 	bl	80030fc <HAL_GPIO_EXTI_Callback>
  }
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40013c00 	.word	0x40013c00

080030fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop

08003114 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0c8      	b.n	80032c0 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f010 ffd2 	bl	80140ec <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	; 0x24
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003160:	f005 fd38 	bl	8008bd4 <HAL_RCC_GetPCLK1Freq>
 8003164:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4a57      	ldr	r2, [pc, #348]	; (80032c8 <HAL_I2C_Init+0x1b4>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9b      	lsrs	r3, r3, #18
 8003170:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4952      	ldr	r1, [pc, #328]	; (80032cc <HAL_I2C_Init+0x1b8>)
 8003184:	428b      	cmp	r3, r1
 8003186:	d802      	bhi.n	800318e <HAL_I2C_Init+0x7a>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3301      	adds	r3, #1
 800318c:	e009      	b.n	80031a2 <HAL_I2C_Init+0x8e>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	494d      	ldr	r1, [pc, #308]	; (80032d0 <HAL_I2C_Init+0x1bc>)
 800319a:	fba1 1303 	umull	r1, r3, r1, r3
 800319e:	099b      	lsrs	r3, r3, #6
 80031a0:	3301      	adds	r3, #1
 80031a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6819      	ldr	r1, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a47      	ldr	r2, [pc, #284]	; (80032cc <HAL_I2C_Init+0x1b8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d812      	bhi.n	80031d8 <HAL_I2C_Init+0xc4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d906      	bls.n	80031d4 <HAL_I2C_Init+0xc0>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	e045      	b.n	8003260 <HAL_I2C_Init+0x14c>
 80031d4:	2304      	movs	r3, #4
 80031d6:	e043      	b.n	8003260 <HAL_I2C_Init+0x14c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10f      	bne.n	8003200 <HAL_I2C_Init+0xec>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e010      	b.n	8003222 <HAL_I2C_Init+0x10e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	009a      	lsls	r2, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Init+0x116>
 8003226:	2301      	movs	r3, #1
 8003228:	e01a      	b.n	8003260 <HAL_I2C_Init+0x14c>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_I2C_Init+0x134>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003246:	e00b      	b.n	8003260 <HAL_I2C_Init+0x14c>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003260:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	69d1      	ldr	r1, [r2, #28]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6a12      	ldr	r2, [r2, #32]
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6911      	ldr	r1, [r2, #16]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68d2      	ldr	r2, [r2, #12]
 800327e:	430a      	orrs	r2, r1
 8003280:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6951      	ldr	r1, [r2, #20]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6992      	ldr	r2, [r2, #24]
 800328e:	430a      	orrs	r2, r1
 8003290:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	431bde83 	.word	0x431bde83
 80032cc:	000186a0 	.word	0x000186a0
 80032d0:	10624dd3 	.word	0x10624dd3

080032d4 <HAL_I2C_DeInit>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e021      	b.n	800332a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2224      	movs	r2, #36	; 0x24
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f010 ff4c 	bl	801419c <HAL_I2C_MspDeInit>

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b088      	sub	sp, #32
 800335e:	af02      	add	r7, sp, #8
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	461a      	mov	r2, r3
 8003366:	460b      	mov	r3, r1
 8003368:	817b      	strh	r3, [r7, #10]
 800336a:	4613      	mov	r3, r2
 800336c:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003372:	f7fc ffdd 	bl	8000330 <HAL_GetTick>
 8003376:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b20      	cmp	r3, #32
 8003382:	f040 80ee 	bne.w	8003562 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	2319      	movs	r3, #25
 800338c:	2201      	movs	r2, #1
 800338e:	4977      	ldr	r1, [pc, #476]	; (800356c <HAL_I2C_Master_Transmit+0x212>)
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f004 fbee 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
 800339e:	e0e1      	b.n	8003564 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_I2C_Master_Transmit+0x54>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e0da      	b.n	8003564 <HAL_I2C_Master_Transmit+0x20a>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d007      	beq.n	80033d4 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2221      	movs	r2, #33	; 0x21
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2210      	movs	r2, #16
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	893a      	ldrh	r2, [r7, #8]
 8003404:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a59      	ldr	r2, [pc, #356]	; (8003570 <HAL_I2C_Master_Transmit+0x216>)
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003416:	8979      	ldrh	r1, [r7, #10]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	6a3a      	ldr	r2, [r7, #32]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f003 fff9 	bl	8007414 <I2C_MasterRequestWrite>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00f      	beq.n	8003448 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	2b04      	cmp	r3, #4
 800342e:	d105      	bne.n	800343c <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e093      	b.n	8003564 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e08d      	b.n	8003564 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 800345e:	e066      	b.n	800352e <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	6a39      	ldr	r1, [r7, #32]
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f004 fc43 	bl	8007cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00f      	beq.n	8003490 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	2b04      	cmp	r3, #4
 8003476:	d109      	bne.n	800348c <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003486:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e06b      	b.n	8003564 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e069      	b.n	8003564 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	1c58      	adds	r0, r3, #1
 800349a:	68f9      	ldr	r1, [r7, #12]
 800349c:	6248      	str	r0, [r1, #36]	; 0x24
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d119      	bne.n	80034fe <HAL_I2C_Master_Transmit+0x1a4>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d015      	beq.n	80034fe <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	1c58      	adds	r0, r3, #1
 80034dc:	68f9      	ldr	r1, [r7, #12]
 80034de:	6248      	str	r0, [r1, #36]	; 0x24
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	6a39      	ldr	r1, [r7, #32]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f004 fc31 	bl	8007d6a <I2C_WaitOnBTFFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00f      	beq.n	800352e <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b04      	cmp	r3, #4
 8003514:	d109      	bne.n	800352a <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003524:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e01c      	b.n	8003564 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e01a      	b.n	8003564 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	2b00      	cmp	r3, #0
 8003534:	d194      	bne.n	8003460 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003544:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
  }
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	00100002 	.word	0x00100002
 8003570:	ffff0000 	.word	0xffff0000

08003574 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08c      	sub	sp, #48	; 0x30
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	461a      	mov	r2, r3
 8003580:	460b      	mov	r3, r1
 8003582:	817b      	strh	r3, [r7, #10]
 8003584:	4613      	mov	r3, r2
 8003586:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8003588:	2300      	movs	r3, #0
 800358a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800358c:	f7fc fed0 	bl	8000330 <HAL_GetTick>
 8003590:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b20      	cmp	r3, #32
 800359c:	f040 8215 	bne.w	80039ca <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	2319      	movs	r3, #25
 80035a6:	2201      	movs	r2, #1
 80035a8:	4985      	ldr	r1, [pc, #532]	; (80037c0 <HAL_I2C_Master_Receive+0x24c>)
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f004 fae1 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
 80035b8:	e208      	b.n	80039cc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_I2C_Master_Receive+0x54>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e201      	b.n	80039cc <HAL_I2C_Master_Receive+0x458>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d007      	beq.n	80035ee <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2222      	movs	r2, #34	; 0x22
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2210      	movs	r2, #16
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	893a      	ldrh	r2, [r7, #8]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a68      	ldr	r2, [pc, #416]	; (80037c4 <HAL_I2C_Master_Receive+0x250>)
 8003624:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003630:	8979      	ldrh	r1, [r7, #10]
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f003 ff6e 	bl	8007518 <I2C_MasterRequestRead>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00f      	beq.n	8003662 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b04      	cmp	r3, #4
 8003648:	d105      	bne.n	8003656 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e1ba      	b.n	80039cc <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1b4      	b.n	80039cc <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d113      	bne.n	8003692 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366a:	2300      	movs	r3, #0
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	623b      	str	r3, [r7, #32]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	623b      	str	r3, [r7, #32]
 800367e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	e188      	b.n	80039a4 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	2b01      	cmp	r3, #1
 8003698:	d11b      	bne.n	80036d2 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e168      	b.n	80039a4 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d11b      	bne.n	8003712 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	e148      	b.n	80039a4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8003738:	e134      	b.n	80039a4 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373e:	2b03      	cmp	r3, #3
 8003740:	f200 80eb 	bhi.w	800391a <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003748:	2b01      	cmp	r3, #1
 800374a:	d127      	bne.n	800379c <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800374c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f004 fb80 	bl	8007e56 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d007      	beq.n	800376c <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	2b20      	cmp	r3, #32
 8003762:	d101      	bne.n	8003768 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e131      	b.n	80039cc <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e12f      	b.n	80039cc <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	1c59      	adds	r1, r3, #1
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	6251      	str	r1, [r2, #36]	; 0x24
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	6912      	ldr	r2, [r2, #16]
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a
 800379a:	e103      	b.n	80039a4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d14a      	bne.n	800383a <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	2200      	movs	r2, #0
 80037ac:	4906      	ldr	r1, [pc, #24]	; (80037c8 <HAL_I2C_Master_Receive+0x254>)
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f004 f9df 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e106      	b.n	80039cc <HAL_I2C_Master_Receive+0x458>
 80037be:	bf00      	nop
 80037c0:	00100002 	.word	0x00100002
 80037c4:	ffff0000 	.word	0xffff0000
 80037c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	1c59      	adds	r1, r3, #1
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	6251      	str	r1, [r2, #36]	; 0x24
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	6812      	ldr	r2, [r2, #0]
 80037ea:	6912      	ldr	r2, [r2, #16]
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	1c59      	adds	r1, r3, #1
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	6251      	str	r1, [r2, #36]	; 0x24
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	6912      	ldr	r2, [r2, #16]
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003838:	e0b4      	b.n	80039a4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	2200      	movs	r2, #0
 8003842:	4964      	ldr	r1, [pc, #400]	; (80039d4 <HAL_I2C_Master_Receive+0x460>)
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f004 f994 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e0bb      	b.n	80039cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	1c59      	adds	r1, r3, #1
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	6251      	str	r1, [r2, #36]	; 0x24
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	6912      	ldr	r2, [r2, #16]
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	2200      	movs	r2, #0
 800389a:	494e      	ldr	r1, [pc, #312]	; (80039d4 <HAL_I2C_Master_Receive+0x460>)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f004 f968 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e08f      	b.n	80039cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	1c59      	adds	r1, r3, #1
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	6251      	str	r1, [r2, #36]	; 0x24
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	6812      	ldr	r2, [r2, #0]
 80038ca:	6912      	ldr	r2, [r2, #16]
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	1c59      	adds	r1, r3, #1
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	6251      	str	r1, [r2, #36]	; 0x24
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	6912      	ldr	r2, [r2, #16]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003918:	e044      	b.n	80039a4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800391a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f004 fa99 	bl	8007e56 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b20      	cmp	r3, #32
 8003930:	d101      	bne.n	8003936 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e04a      	b.n	80039cc <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e048      	b.n	80039cc <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	1c59      	adds	r1, r3, #1
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	6251      	str	r1, [r2, #36]	; 0x24
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	6912      	ldr	r2, [r2, #16]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b04      	cmp	r3, #4
 8003974:	d116      	bne.n	80039a4 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	1c59      	adds	r1, r3, #1
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	6251      	str	r1, [r2, #36]	; 0x24
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	6912      	ldr	r2, [r2, #16]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f47f aec6 	bne.w	800373a <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	e000      	b.n	80039cc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80039ca:	2302      	movs	r3, #2
  }
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	00010004 	.word	0x00010004

080039d8 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	; 0x28
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
  
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ec:	f7fc fca0 	bl	8000330 <HAL_GetTick>
 80039f0:	61f8      	str	r0, [r7, #28]
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	f040 80fd 	bne.w	8003bfa <HAL_I2C_Slave_Transmit+0x222>
  {
    if((pData == NULL) || (Size == 0U))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_I2C_Slave_Transmit+0x34>
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_I2C_Slave_Transmit+0x38>
    {
      return  HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0f5      	b.n	8003bfc <HAL_I2C_Slave_Transmit+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_I2C_Slave_Transmit+0x46>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e0ee      	b.n	8003bfc <HAL_I2C_Slave_Transmit+0x224>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d007      	beq.n	8003a44 <HAL_I2C_Slave_Transmit+0x6c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a52:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2221      	movs	r2, #33	; 0x21
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4a62      	ldr	r2, [pc, #392]	; (8003c04 <HAL_I2C_Slave_Transmit+0x22c>)
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a94:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	495a      	ldr	r1, [pc, #360]	; (8003c08 <HAL_I2C_Slave_Transmit+0x230>)
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f004 f866 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_I2C_Slave_Transmit+0xd8>
    {
      return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e0a5      	b.n	8003bfc <HAL_I2C_Slave_Transmit+0x224>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ace:	d167      	bne.n	8003ba0 <HAL_I2C_Slave_Transmit+0x1c8>
    {
      /* Wait until ADDR flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	494b      	ldr	r1, [pc, #300]	; (8003c08 <HAL_I2C_Slave_Transmit+0x230>)
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f004 f849 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Slave_Transmit+0x112>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e088      	b.n	8003bfc <HAL_I2C_Slave_Transmit+0x224>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8003b00:	e04e      	b.n	8003ba0 <HAL_I2C_Slave_Transmit+0x1c8>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	6839      	ldr	r1, [r7, #0]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f004 f8f2 	bl	8007cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00f      	beq.n	8003b32 <HAL_I2C_Slave_Transmit+0x15a>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b20:	601a      	str	r2, [r3, #0]

        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d101      	bne.n	8003b2e <HAL_I2C_Slave_Transmit+0x156>
        {
          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e066      	b.n	8003bfc <HAL_I2C_Slave_Transmit+0x224>
        }
        else
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e064      	b.n	8003bfc <HAL_I2C_Slave_Transmit+0x224>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	1c58      	adds	r0, r3, #1
 8003b3c:	68f9      	ldr	r1, [r7, #12]
 8003b3e:	6248      	str	r0, [r1, #36]	; 0x24
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d119      	bne.n	8003ba0 <HAL_I2C_Slave_Transmit+0x1c8>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d015      	beq.n	8003ba0 <HAL_I2C_Slave_Transmit+0x1c8>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c58      	adds	r0, r3, #1
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	6248      	str	r0, [r1, #36]	; 0x24
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	851a      	strh	r2, [r3, #40]	; 0x28
    while(hi2c->XferSize > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ac      	bne.n	8003b02 <HAL_I2C_Slave_Transmit+0x12a>
      }
    }

    /* Wait until AF flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f003 ffdc 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_I2C_Slave_Transmit+0x1ec>
    {
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e01b      	b.n	8003bfc <HAL_I2C_Slave_Transmit+0x224>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bcc:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <HAL_I2C_Slave_Transmit+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	ffff0000 	.word	0xffff0000
 8003c08:	00010002 	.word	0x00010002

08003c0c <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c20:	f7fc fb86 	bl	8000330 <HAL_GetTick>
 8003c24:	61f8      	str	r0, [r7, #28]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	f040 80f5 	bne.w	8003e1e <HAL_I2C_Slave_Receive+0x212>
  {
    if((pData == NULL) || (Size == 0))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_I2C_Slave_Receive+0x34>
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_I2C_Slave_Receive+0x38>
    {
      return  HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0ed      	b.n	8003e20 <HAL_I2C_Slave_Receive+0x214>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2C_Slave_Receive+0x46>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e0e6      	b.n	8003e20 <HAL_I2C_Slave_Receive+0x214>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d007      	beq.n	8003c78 <HAL_I2C_Slave_Receive+0x6c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c86:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2222      	movs	r2, #34	; 0x22
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a5e      	ldr	r2, [pc, #376]	; (8003e28 <HAL_I2C_Slave_Receive+0x21c>)
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	4956      	ldr	r1, [pc, #344]	; (8003e2c <HAL_I2C_Slave_Receive+0x220>)
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f003 ff4c 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_I2C_Slave_Receive+0xd8>
    {
      return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e09d      	b.n	8003e20 <HAL_I2C_Slave_Receive+0x214>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	69bb      	ldr	r3, [r7, #24]

    while(hi2c->XferSize > 0U)
 8003cfa:	e04f      	b.n	8003d9c <HAL_I2C_Slave_Receive+0x190>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	6839      	ldr	r1, [r7, #0]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f004 f8a8 	bl	8007e56 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00f      	beq.n	8003d2c <HAL_I2C_Slave_Receive+0x120>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1a:	601a      	str	r2, [r3, #0]

        if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d101      	bne.n	8003d28 <HAL_I2C_Slave_Receive+0x11c>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e07b      	b.n	8003e20 <HAL_I2C_Slave_Receive+0x214>
        }
        else
        {
          return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e079      	b.n	8003e20 <HAL_I2C_Slave_Receive+0x214>
        }
      }

      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	1c59      	adds	r1, r3, #1
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	6251      	str	r1, [r2, #36]	; 0x24
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	6912      	ldr	r2, [r2, #16]
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d119      	bne.n	8003d9c <HAL_I2C_Slave_Receive+0x190>
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <HAL_I2C_Slave_Receive+0x190>
      {
        /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	1c59      	adds	r1, r3, #1
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	6251      	str	r1, [r2, #36]	; 0x24
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	6912      	ldr	r2, [r2, #16]
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1ab      	bne.n	8003cfc <HAL_I2C_Slave_Receive+0xf0>
      }
    }

    /* Wait until STOP flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	6839      	ldr	r1, [r7, #0]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f004 f81b 	bl	8007de4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00f      	beq.n	8003dd4 <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc2:	601a      	str	r2, [r3, #0]

      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d101      	bne.n	8003dd0 <HAL_I2C_Slave_Receive+0x1c4>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e027      	b.n	8003e20 <HAL_I2C_Slave_Receive+0x214>
      }
      else
      {
        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e025      	b.n	8003e20 <HAL_I2C_Slave_Receive+0x214>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e000      	b.n	8003e20 <HAL_I2C_Slave_Receive+0x214>
  }
  else
  {
    return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
  }
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	ffff0000 	.word	0xffff0000
 8003e2c:	00010002 	.word	0x00010002

08003e30 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	817b      	strh	r3, [r7, #10]
 8003e40:	4613      	mov	r3, r2
 8003e42:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d179      	bne.n	8003f48 <HAL_I2C_Master_Transmit_IT+0x118>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8003e54:	4b40      	ldr	r3, [pc, #256]	; (8003f58 <HAL_I2C_Master_Transmit_IT+0x128>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	08db      	lsrs	r3, r3, #3
 8003e5a:	4a40      	ldr	r2, [pc, #256]	; (8003f5c <HAL_I2C_Master_Transmit_IT+0x12c>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	0a1a      	lsrs	r2, r3, #8
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009a      	lsls	r2, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	1e5a      	subs	r2, r3, #1
 8003e72:	617a      	str	r2, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10c      	bne.n	8003e92 <HAL_I2C_Master_Transmit_IT+0x62>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e05b      	b.n	8003f4a <HAL_I2C_Master_Transmit_IT+0x11a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d0e6      	beq.n	8003e6e <HAL_I2C_Master_Transmit_IT+0x3e>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_I2C_Master_Transmit_IT+0x7e>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e04d      	b.n	8003f4a <HAL_I2C_Master_Transmit_IT+0x11a>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d007      	beq.n	8003ed4 <HAL_I2C_Master_Transmit_IT+0xa4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2221      	movs	r2, #33	; 0x21
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2210      	movs	r2, #16
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	893a      	ldrh	r2, [r7, #8]
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <HAL_I2C_Master_Transmit_IT+0x130>)
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8003f16:	897a      	ldrh	r2, [r7, #10]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f2a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	6852      	ldr	r2, [r2, #4]
 8003f3e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003f42:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_I2C_Master_Transmit_IT+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000008 	.word	0x20000008
 8003f5c:	14f8b589 	.word	0x14f8b589
 8003f60:	ffff0000 	.word	0xffff0000

08003f64 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	460b      	mov	r3, r1
 8003f72:	817b      	strh	r3, [r7, #10]
 8003f74:	4613      	mov	r3, r2
 8003f76:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	f040 8082 	bne.w	800408e <HAL_I2C_Master_Receive_IT+0x12a>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8003f8a:	4b44      	ldr	r3, [pc, #272]	; (800409c <HAL_I2C_Master_Receive_IT+0x138>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	08db      	lsrs	r3, r3, #3
 8003f90:	4a43      	ldr	r2, [pc, #268]	; (80040a0 <HAL_I2C_Master_Receive_IT+0x13c>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	0a1a      	lsrs	r2, r3, #8
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009a      	lsls	r2, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	1e5a      	subs	r2, r3, #1
 8003fa8:	617a      	str	r2, [r7, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10c      	bne.n	8003fc8 <HAL_I2C_Master_Receive_IT+0x64>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e063      	b.n	8004090 <HAL_I2C_Master_Receive_IT+0x12c>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d0e6      	beq.n	8003fa4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_I2C_Master_Receive_IT+0x80>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e055      	b.n	8004090 <HAL_I2C_Master_Receive_IT+0x12c>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d007      	beq.n	800400a <HAL_I2C_Master_Receive_IT+0xa6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004018:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2222      	movs	r2, #34	; 0x22
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2210      	movs	r2, #16
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	893a      	ldrh	r2, [r7, #8]
 800403a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4a19      	ldr	r2, [pc, #100]	; (80040a4 <HAL_I2C_Master_Receive_IT+0x140>)
 8004040:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 800404c:	897a      	ldrh	r2, [r7, #10]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004060:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004070:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	6852      	ldr	r2, [r2, #4]
 8004084:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004088:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <HAL_I2C_Master_Receive_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800408e:	2302      	movs	r3, #2
  }
}
 8004090:	4618      	mov	r0, r3
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	20000008 	.word	0x20000008
 80040a0:	14f8b589 	.word	0x14f8b589
 80040a4:	ffff0000 	.word	0xffff0000

080040a8 <HAL_I2C_Master_Sequential_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	461a      	mov	r2, r3
 80040b4:	460b      	mov	r3, r1
 80040b6:	817b      	strh	r3, [r7, #10]
 80040b8:	4613      	mov	r3, r2
 80040ba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	f040 8098 	bne.w	8004202 <HAL_I2C_Master_Sequential_Transmit_IT+0x15a>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d002      	beq.n	80040de <HAL_I2C_Master_Sequential_Transmit_IT+0x36>
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d125      	bne.n	800412a <HAL_I2C_Master_Sequential_Transmit_IT+0x82>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80040de:	4b4c      	ldr	r3, [pc, #304]	; (8004210 <HAL_I2C_Master_Sequential_Transmit_IT+0x168>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	08db      	lsrs	r3, r3, #3
 80040e4:	4a4b      	ldr	r2, [pc, #300]	; (8004214 <HAL_I2C_Master_Sequential_Transmit_IT+0x16c>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	0a1a      	lsrs	r2, r3, #8
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009a      	lsls	r2, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
      do
      {
        if(count-- == 0U)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1e5a      	subs	r2, r3, #1
 80040fc:	613a      	str	r2, [r7, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10c      	bne.n	800411c <HAL_I2C_Master_Sequential_Transmit_IT+0x74>
        {
          hi2c->PreviousState = I2C_STATE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State= HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT; 
 8004118:	2303      	movs	r3, #3
 800411a:	e073      	b.n	8004204 <HAL_I2C_Master_Sequential_Transmit_IT+0x15c>
        }
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d0e6      	beq.n	80040f8 <HAL_I2C_Master_Sequential_Transmit_IT+0x50>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_I2C_Master_Sequential_Transmit_IT+0x90>
 8004134:	2302      	movs	r3, #2
 8004136:	e065      	b.n	8004204 <HAL_I2C_Master_Sequential_Transmit_IT+0x15c>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d007      	beq.n	800415e <HAL_I2C_Master_Sequential_Transmit_IT+0xb6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2221      	movs	r2, #33	; 0x21
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2210      	movs	r2, #16
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	893a      	ldrh	r2, [r7, #8]
 800418e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a3a      	ldr	r2, [r7, #32]
 8004194:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 80041a0:	897a      	ldrh	r2, [r7, #10]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	617b      	str	r3, [r7, #20]
    
    /* Generate Start */    
    if((Prev_State == I2C_STATE_MASTER_BUSY_RX) || (Prev_State == I2C_STATE_NONE))
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b12      	cmp	r3, #18
 80041b0:	d002      	beq.n	80041b8 <HAL_I2C_Master_Sequential_Transmit_IT+0x110>
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d116      	bne.n	80041e6 <HAL_I2C_Master_Sequential_Transmit_IT+0x13e>
    {
      /* Generate Start condition if first transfer */
      if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d002      	beq.n	80041c4 <HAL_I2C_Master_Sequential_Transmit_IT+0x11c>
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d108      	bne.n	80041d6 <HAL_I2C_Master_Sequential_Transmit_IT+0x12e>
      {
        /* Generate Start */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	e007      	b.n	80041e6 <HAL_I2C_Master_Sequential_Transmit_IT+0x13e>
      }
      else
      {
        /* Generate ReStart */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e4:	601a      	str	r2, [r3, #0]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	6852      	ldr	r2, [r2, #4]
 80041f8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80041fc:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	e000      	b.n	8004204 <HAL_I2C_Master_Sequential_Transmit_IT+0x15c>
  }
  else
  {
    return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	20000008 	.word	0x20000008
 8004214:	14f8b589 	.word	0x14f8b589

08004218 <HAL_I2C_Master_Sequential_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	461a      	mov	r2, r3
 8004224:	460b      	mov	r3, r1
 8004226:	817b      	strh	r3, [r7, #10]
 8004228:	4613      	mov	r3, r2
 800422a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
    
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b20      	cmp	r3, #32
 800423a:	f040 80af 	bne.w	800439c <HAL_I2C_Master_Sequential_Receive_IT+0x184>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	2b04      	cmp	r3, #4
 8004242:	d002      	beq.n	800424a <HAL_I2C_Master_Sequential_Receive_IT+0x32>
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d125      	bne.n	8004296 <HAL_I2C_Master_Sequential_Receive_IT+0x7e>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 800424a:	4b58      	ldr	r3, [pc, #352]	; (80043ac <HAL_I2C_Master_Sequential_Receive_IT+0x194>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	08db      	lsrs	r3, r3, #3
 8004250:	4a57      	ldr	r2, [pc, #348]	; (80043b0 <HAL_I2C_Master_Sequential_Receive_IT+0x198>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	0a1a      	lsrs	r2, r3, #8
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	009a      	lsls	r2, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
      do
      {
        if(count-- == 0U)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	1e5a      	subs	r2, r3, #1
 8004268:	617a      	str	r2, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10c      	bne.n	8004288 <HAL_I2C_Master_Sequential_Receive_IT+0x70>
        {
          hi2c->PreviousState = I2C_STATE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State= HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT; 
 8004284:	2303      	movs	r3, #3
 8004286:	e08a      	b.n	800439e <HAL_I2C_Master_Sequential_Receive_IT+0x186>
        }
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d0e6      	beq.n	8004264 <HAL_I2C_Master_Sequential_Receive_IT+0x4c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_I2C_Master_Sequential_Receive_IT+0x8c>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e07c      	b.n	800439e <HAL_I2C_Master_Sequential_Receive_IT+0x186>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d007      	beq.n	80042ca <HAL_I2C_Master_Sequential_Receive_IT+0xb2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2222      	movs	r2, #34	; 0x22
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2210      	movs	r2, #16
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	893a      	ldrh	r2, [r7, #8]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a3a      	ldr	r2, [r7, #32]
 8004300:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress = DevAddress;
 800430c:	897a      	ldrh	r2, [r7, #10]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	645a      	str	r2, [r3, #68]	; 0x44
    
    if((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) || (hi2c->PreviousState == I2C_STATE_NONE))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	2b11      	cmp	r3, #17
 8004318:	d003      	beq.n	8004322 <HAL_I2C_Master_Sequential_Receive_IT+0x10a>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	2b00      	cmp	r3, #0
 8004320:	d12e      	bne.n	8004380 <HAL_I2C_Master_Sequential_Receive_IT+0x168>
    {
      /* Generate Start condition if first transfer */
      if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME)  || (XferOptions == I2C_NO_OPTION_FRAME))
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	2b04      	cmp	r3, #4
 8004326:	d006      	beq.n	8004336 <HAL_I2C_Master_Sequential_Receive_IT+0x11e>
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d003      	beq.n	8004336 <HAL_I2C_Master_Sequential_Receive_IT+0x11e>
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004334:	d110      	bne.n	8004358 <HAL_I2C_Master_Sequential_Receive_IT+0x140>
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004344:	601a      	str	r2, [r3, #0]
        
        /* Generate Start */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	e013      	b.n	8004380 <HAL_I2C_Master_Sequential_Receive_IT+0x168>
      }
      else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	2b11      	cmp	r3, #17
 800435e:	d10f      	bne.n	8004380 <HAL_I2C_Master_Sequential_Receive_IT+0x168>
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800436e:	601a      	str	r2, [r3, #0]
        
        /* Generate ReStart */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	6852      	ldr	r2, [r2, #4]
 8004392:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004396:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	e000      	b.n	800439e <HAL_I2C_Master_Sequential_Receive_IT+0x186>
  }
  else
  {
    return HAL_BUSY;
 800439c:	2302      	movs	r3, #2
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000008 	.word	0x20000008
 80043b0:	14f8b589 	.word	0x14f8b589

080043b4 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	4613      	mov	r3, r2
 80043c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d17e      	bne.n	80044d0 <HAL_I2C_Slave_Transmit_IT+0x11c>
  {
    if((pData == NULL) || (Size == 0U))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <HAL_I2C_Slave_Transmit_IT+0x2a>
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_I2C_Slave_Transmit_IT+0x2e>
    {
      return  HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e077      	b.n	80044d2 <HAL_I2C_Slave_Transmit_IT+0x11e>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80043e2:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_I2C_Slave_Transmit_IT+0x12c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	08db      	lsrs	r3, r3, #3
 80043e8:	4a3e      	ldr	r2, [pc, #248]	; (80044e4 <HAL_I2C_Slave_Transmit_IT+0x130>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0a1a      	lsrs	r2, r3, #8
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009a      	lsls	r2, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	1e5a      	subs	r2, r3, #1
 8004400:	617a      	str	r2, [r7, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10c      	bne.n	8004420 <HAL_I2C_Slave_Transmit_IT+0x6c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 800441c:	2303      	movs	r3, #3
 800441e:	e058      	b.n	80044d2 <HAL_I2C_Slave_Transmit_IT+0x11e>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b02      	cmp	r3, #2
 800442c:	d0e6      	beq.n	80043fc <HAL_I2C_Slave_Transmit_IT+0x48>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_I2C_Slave_Transmit_IT+0x88>
 8004438:	2302      	movs	r3, #2
 800443a:	e04a      	b.n	80044d2 <HAL_I2C_Slave_Transmit_IT+0x11e>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b01      	cmp	r3, #1
 8004450:	d007      	beq.n	8004462 <HAL_I2C_Slave_Transmit_IT+0xae>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	f042 0201 	orr.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004470:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2221      	movs	r2, #33	; 0x21
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	88fa      	ldrh	r2, [r7, #6]
 8004492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <HAL_I2C_Slave_Transmit_IT+0x134>)
 8004498:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044b2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	6852      	ldr	r2, [r2, #4]
 80044c6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80044ca:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e000      	b.n	80044d2 <HAL_I2C_Slave_Transmit_IT+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80044d0:	2302      	movs	r3, #2
  }
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000008 	.word	0x20000008
 80044e4:	14f8b589 	.word	0x14f8b589
 80044e8:	ffff0000 	.word	0xffff0000

080044ec <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b20      	cmp	r3, #32
 8004508:	d17c      	bne.n	8004604 <HAL_I2C_Slave_Receive_IT+0x118>
  {
    if((pData == NULL) || (Size == 0U))
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_I2C_Slave_Receive_IT+0x2a>
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_I2C_Slave_Receive_IT+0x2e>
    {
      return  HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e075      	b.n	8004606 <HAL_I2C_Slave_Receive_IT+0x11a>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 800451a:	4b3e      	ldr	r3, [pc, #248]	; (8004614 <HAL_I2C_Slave_Receive_IT+0x128>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	08db      	lsrs	r3, r3, #3
 8004520:	4a3d      	ldr	r2, [pc, #244]	; (8004618 <HAL_I2C_Slave_Receive_IT+0x12c>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	0a1a      	lsrs	r2, r3, #8
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009a      	lsls	r2, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1e5a      	subs	r2, r3, #1
 8004538:	617a      	str	r2, [r7, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10c      	bne.n	8004558 <HAL_I2C_Slave_Receive_IT+0x6c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004554:	2303      	movs	r3, #3
 8004556:	e056      	b.n	8004606 <HAL_I2C_Slave_Receive_IT+0x11a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b02      	cmp	r3, #2
 8004564:	d0e6      	beq.n	8004534 <HAL_I2C_Slave_Receive_IT+0x48>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_I2C_Slave_Receive_IT+0x88>
 8004570:	2302      	movs	r3, #2
 8004572:	e048      	b.n	8004606 <HAL_I2C_Slave_Receive_IT+0x11a>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b01      	cmp	r3, #1
 8004588:	d007      	beq.n	800459a <HAL_I2C_Slave_Receive_IT+0xae>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2222      	movs	r2, #34	; 0x22
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferSize = Size;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	88fa      	ldrh	r2, [r7, #6]
 80045ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4a11      	ldr	r2, [pc, #68]	; (800461c <HAL_I2C_Slave_Receive_IT+0x130>)
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045e6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	6852      	ldr	r2, [r2, #4]
 80045fa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80045fe:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <HAL_I2C_Slave_Receive_IT+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000008 	.word	0x20000008
 8004618:	14f8b589 	.word	0x14f8b589
 800461c:	ffff0000 	.word	0xffff0000

08004620 <HAL_I2C_Slave_Sequential_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b28      	cmp	r3, #40	; 0x28
 800463a:	d15b      	bne.n	80046f4 <HAL_I2C_Slave_Sequential_Transmit_IT+0xd4>
  {
    if((pData == NULL) || (Size == 0U))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_I2C_Slave_Sequential_Transmit_IT+0x28>
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_I2C_Slave_Sequential_Transmit_IT+0x2c>
    {
      return  HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e054      	b.n	80046f6 <HAL_I2C_Slave_Sequential_Transmit_IT+0xd6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_I2C_Slave_Sequential_Transmit_IT+0x3a>
 8004656:	2302      	movs	r3, #2
 8004658:	e04d      	b.n	80046f6 <HAL_I2C_Slave_Sequential_Transmit_IT+0xd6>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b01      	cmp	r3, #1
 800466e:	d007      	beq.n	8004680 <HAL_I2C_Slave_Sequential_Transmit_IT+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800468e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2229      	movs	r2, #41	; 0x29
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	6852      	ldr	r2, [r2, #4]
 80046ea:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80046ee:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_I2C_Slave_Sequential_Transmit_IT+0xd6>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_I2C_Slave_Sequential_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004702:	b480      	push	{r7}
 8004704:	b087      	sub	sp, #28
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b28      	cmp	r3, #40	; 0x28
 800471c:	d15b      	bne.n	80047d6 <HAL_I2C_Slave_Sequential_Receive_IT+0xd4>
  {
    if((pData == NULL) || (Size == 0U))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_I2C_Slave_Sequential_Receive_IT+0x28>
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_I2C_Slave_Sequential_Receive_IT+0x2c>
    {
      return  HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e054      	b.n	80047d8 <HAL_I2C_Slave_Sequential_Receive_IT+0xd6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_I2C_Slave_Sequential_Receive_IT+0x3a>
 8004738:	2302      	movs	r3, #2
 800473a:	e04d      	b.n	80047d8 <HAL_I2C_Slave_Sequential_Receive_IT+0xd6>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d007      	beq.n	8004762 <HAL_I2C_Slave_Sequential_Receive_IT+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004770:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	222a      	movs	r2, #42	; 0x2a
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr   = pData;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	88fa      	ldrh	r2, [r7, #6]
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	6852      	ldr	r2, [r2, #4]
 80047cc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80047d0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e000      	b.n	80047d8 <HAL_I2C_Slave_Sequential_Receive_IT+0xd6>
  }
  else
  {
    return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
  }
}
 80047d8:	4618      	mov	r0, r3
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  if(hi2c->State == HAL_I2C_STATE_READY)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d124      	bne.n	8004842 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2228      	movs	r2, #40	; 0x28
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b01      	cmp	r3, #1
 800480c:	d007      	beq.n	800481e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	f042 0201 	orr.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800482c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	6852      	ldr	r2, [r2, #4]
 8004838:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800483c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b28      	cmp	r3, #40	; 0x28
 8004862:	d129      	bne.n	80048b8 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a2:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	6852      	ldr	r2, [r2, #4]
 80048ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048b2:	605a      	str	r2, [r3, #4]
  
    return HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e000      	b.n	80048ba <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b086      	sub	sp, #24
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	461a      	mov	r2, r3
 80048d2:	460b      	mov	r3, r1
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	4613      	mov	r3, r2
 80048d8:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	f040 80d0 	bne.w	8004a8c <HAL_I2C_Master_Transmit_DMA+0x1c6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80048ec:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <HAL_I2C_Master_Transmit_DMA+0x1d2>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	08db      	lsrs	r3, r3, #3
 80048f2:	4a6a      	ldr	r2, [pc, #424]	; (8004a9c <HAL_I2C_Master_Transmit_DMA+0x1d6>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	0a1a      	lsrs	r2, r3, #8
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	009a      	lsls	r2, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	1e5a      	subs	r2, r3, #1
 800490a:	617a      	str	r2, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10c      	bne.n	800492a <HAL_I2C_Master_Transmit_DMA+0x64>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004926:	2303      	movs	r3, #3
 8004928:	e0b1      	b.n	8004a8e <HAL_I2C_Master_Transmit_DMA+0x1c8>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b02      	cmp	r3, #2
 8004936:	d0e6      	beq.n	8004906 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_I2C_Master_Transmit_DMA+0x80>
 8004942:	2302      	movs	r3, #2
 8004944:	e0a3      	b.n	8004a8e <HAL_I2C_Master_Transmit_DMA+0x1c8>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b01      	cmp	r3, #1
 800495a:	d007      	beq.n	800496c <HAL_I2C_Master_Transmit_DMA+0xa6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800497a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2221      	movs	r2, #33	; 0x21
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2210      	movs	r2, #16
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	893a      	ldrh	r2, [r7, #8]
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4a3f      	ldr	r2, [pc, #252]	; (8004aa0 <HAL_I2C_Master_Transmit_DMA+0x1da>)
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 80049ae:	897a      	ldrh	r2, [r7, #10]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44

    if(hi2c->XferSize > 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d049      	beq.n	8004a50 <HAL_I2C_Master_Transmit_DMA+0x18a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	4a38      	ldr	r2, [pc, #224]	; (8004aa4 <HAL_I2C_Master_Transmit_DMA+0x1de>)
 80049c2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */      
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c8:	4a37      	ldr	r2, [pc, #220]	; (8004aa8 <HAL_I2C_Master_Transmit_DMA+0x1e2>)
 80049ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d0:	2200      	movs	r2, #0
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d8:	2200      	movs	r2, #0
 80049da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	2200      	movs	r2, #0
 80049e2:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e8:	2200      	movs	r2, #0
 80049ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	4619      	mov	r1, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3310      	adds	r3, #16
 80049fc:	461a      	mov	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	f7fd fb32 	bl	800206a <HAL_DMA_Start_IT>

      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a14:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a24:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	6852      	ldr	r2, [r2, #4]
 8004a38:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004a3c:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	6852      	ldr	r2, [r2, #4]
 8004a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	e01b      	b.n	8004a88 <HAL_I2C_Master_Transmit_DMA+0x1c2>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a5e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a6e:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

     /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	6852      	ldr	r2, [r2, #4]
 8004a82:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004a86:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e000      	b.n	8004a8e <HAL_I2C_Master_Transmit_DMA+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8004a8c:	2302      	movs	r3, #2
  }
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000008 	.word	0x20000008
 8004a9c:	14f8b589 	.word	0x14f8b589
 8004aa0:	ffff0000 	.word	0xffff0000
 8004aa4:	08007991 	.word	0x08007991
 8004aa8:	08007a7d 	.word	0x08007a7d

08004aac <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	460b      	mov	r3, r1
 8004aba:	817b      	strh	r3, [r7, #10]
 8004abc:	4613      	mov	r3, r2
 8004abe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	f040 80d0 	bne.w	8004c72 <HAL_I2C_Master_Receive_DMA+0x1c6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004ad2:	4b6a      	ldr	r3, [pc, #424]	; (8004c7c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	08db      	lsrs	r3, r3, #3
 8004ad8:	4a69      	ldr	r2, [pc, #420]	; (8004c80 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0a1a      	lsrs	r2, r3, #8
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009a      	lsls	r2, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	1e5a      	subs	r2, r3, #1
 8004af0:	617a      	str	r2, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10c      	bne.n	8004b10 <HAL_I2C_Master_Receive_DMA+0x64>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e0b1      	b.n	8004c74 <HAL_I2C_Master_Receive_DMA+0x1c8>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d0e6      	beq.n	8004aec <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_I2C_Master_Receive_DMA+0x80>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0a3      	b.n	8004c74 <HAL_I2C_Master_Receive_DMA+0x1c8>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d007      	beq.n	8004b52 <HAL_I2C_Master_Receive_DMA+0xa6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b60:	601a      	str	r2, [r3, #0]
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2222      	movs	r2, #34	; 0x22
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2210      	movs	r2, #16
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	893a      	ldrh	r2, [r7, #8]
 8004b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a3f      	ldr	r2, [pc, #252]	; (8004c84 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004b88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8004b94:	897a      	ldrh	r2, [r7, #10]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
    
    if(hi2c->XferSize > 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d049      	beq.n	8004c36 <HAL_I2C_Master_Receive_DMA+0x18a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	4a38      	ldr	r2, [pc, #224]	; (8004c88 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8004ba8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	4a37      	ldr	r2, [pc, #220]	; (8004c8c <HAL_I2C_Master_Receive_DMA+0x1e0>)
 8004bb0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	2200      	movs	r2, #0
 8004bd0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3310      	adds	r3, #16
 8004bdc:	4619      	mov	r1, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	461a      	mov	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be8:	f7fd fa3f 	bl	800206a <HAL_DMA_Start_IT>

      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bfa:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c0a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	6852      	ldr	r2, [r2, #4]
 8004c1e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004c22:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	6852      	ldr	r2, [r2, #4]
 8004c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	e01b      	b.n	8004c6e <HAL_I2C_Master_Receive_DMA+0x1c2>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c44:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c54:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	6852      	ldr	r2, [r2, #4]
 8004c68:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004c6c:	605a      	str	r2, [r3, #4]
    }
    
    return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e000      	b.n	8004c74 <HAL_I2C_Master_Receive_DMA+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8004c72:	2302      	movs	r3, #2
  }
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000008 	.word	0x20000008
 8004c80:	14f8b589 	.word	0x14f8b589
 8004c84:	ffff0000 	.word	0xffff0000
 8004c88:	08007991 	.word	0x08007991
 8004c8c:	08007a7d 	.word	0x08007a7d

08004c90 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d135      	bne.n	8004d14 <HAL_I2C_Master_Abort_IT+0x84>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_I2C_Master_Abort_IT+0x26>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e02f      	b.n	8004d16 <HAL_I2C_Master_Abort_IT+0x86>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2260      	movs	r2, #96	; 0x60
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cda:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cea:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	6852      	ldr	r2, [r2, #4]
 8004cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d00:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f002 fa7e 	bl	800720c <I2C_ITError>

    return HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e000      	b.n	8004d16 <HAL_I2C_Master_Abort_IT+0x86>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
  }
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	f040 80ac 	bne.w	8004e96 <HAL_I2C_Slave_Transmit_DMA+0x178>
  {
    if((pData == NULL) || (Size == 0U))
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <HAL_I2C_Slave_Transmit_DMA+0x2c>
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_I2C_Slave_Transmit_DMA+0x30>
    {
      return  HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0a4      	b.n	8004e98 <HAL_I2C_Slave_Transmit_DMA+0x17a>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004d4e:	4b54      	ldr	r3, [pc, #336]	; (8004ea0 <HAL_I2C_Slave_Transmit_DMA+0x182>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	08db      	lsrs	r3, r3, #3
 8004d54:	4a53      	ldr	r2, [pc, #332]	; (8004ea4 <HAL_I2C_Slave_Transmit_DMA+0x186>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	0a1a      	lsrs	r2, r3, #8
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009a      	lsls	r2, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	1e5a      	subs	r2, r3, #1
 8004d6c:	617a      	str	r2, [r7, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10c      	bne.n	8004d8c <HAL_I2C_Slave_Transmit_DMA+0x6e>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e085      	b.n	8004e98 <HAL_I2C_Slave_Transmit_DMA+0x17a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d0e6      	beq.n	8004d68 <HAL_I2C_Slave_Transmit_DMA+0x4a>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_I2C_Slave_Transmit_DMA+0x8a>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e077      	b.n	8004e98 <HAL_I2C_Slave_Transmit_DMA+0x17a>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d007      	beq.n	8004dce <HAL_I2C_Slave_Transmit_DMA+0xb0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ddc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2221      	movs	r2, #33	; 0x21
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	88fa      	ldrh	r2, [r7, #6]
 8004dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4a29      	ldr	r2, [pc, #164]	; (8004ea8 <HAL_I2C_Slave_Transmit_DMA+0x18a>)
 8004e04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e14:	4a25      	ldr	r2, [pc, #148]	; (8004eac <HAL_I2C_Slave_Transmit_DMA+0x18e>)
 8004e16:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1c:	4a24      	ldr	r2, [pc, #144]	; (8004eb0 <HAL_I2C_Slave_Transmit_DMA+0x192>)
 8004e1e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e24:	2200      	movs	r2, #0
 8004e26:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e34:	2200      	movs	r2, #0
 8004e36:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	4619      	mov	r1, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3310      	adds	r3, #16
 8004e50:	461a      	mov	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e56:	f7fd f908 	bl	800206a <HAL_DMA_Start_IT>

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e68:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	6852      	ldr	r2, [r2, #4]
 8004e7c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004e80:	605a      	str	r2, [r3, #4]

    /* Enable DMA Request */
    hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	6852      	ldr	r2, [r2, #4]
 8004e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e90:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e000      	b.n	8004e98 <HAL_I2C_Slave_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 8004e96:	2302      	movs	r3, #2
  }
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000008 	.word	0x20000008
 8004ea4:	14f8b589 	.word	0x14f8b589
 8004ea8:	ffff0000 	.word	0xffff0000
 8004eac:	08007991 	.word	0x08007991
 8004eb0:	08007a7d 	.word	0x08007a7d

08004eb4 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	f040 80ac 	bne.w	800502c <HAL_I2C_Slave_Receive_DMA+0x178>
  {
    if((pData == NULL) || (Size == 0U))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_I2C_Slave_Receive_DMA+0x2c>
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_I2C_Slave_Receive_DMA+0x30>
    {
      return  HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0a4      	b.n	800502e <HAL_I2C_Slave_Receive_DMA+0x17a>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004ee4:	4b54      	ldr	r3, [pc, #336]	; (8005038 <HAL_I2C_Slave_Receive_DMA+0x184>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	08db      	lsrs	r3, r3, #3
 8004eea:	4a54      	ldr	r2, [pc, #336]	; (800503c <HAL_I2C_Slave_Receive_DMA+0x188>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	0a1a      	lsrs	r2, r3, #8
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009a      	lsls	r2, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	1e5a      	subs	r2, r3, #1
 8004f02:	617a      	str	r2, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10c      	bne.n	8004f22 <HAL_I2C_Slave_Receive_DMA+0x6e>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e085      	b.n	800502e <HAL_I2C_Slave_Receive_DMA+0x17a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d0e6      	beq.n	8004efe <HAL_I2C_Slave_Receive_DMA+0x4a>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_I2C_Slave_Receive_DMA+0x8a>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e077      	b.n	800502e <HAL_I2C_Slave_Receive_DMA+0x17a>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d007      	beq.n	8004f64 <HAL_I2C_Slave_Receive_DMA+0xb0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2222      	movs	r2, #34	; 0x22
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	88fa      	ldrh	r2, [r7, #6]
 8004f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4a29      	ldr	r2, [pc, #164]	; (8005040 <HAL_I2C_Slave_Receive_DMA+0x18c>)
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	4a26      	ldr	r2, [pc, #152]	; (8005044 <HAL_I2C_Slave_Receive_DMA+0x190>)
 8004fac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	4a25      	ldr	r2, [pc, #148]	; (8005048 <HAL_I2C_Slave_Receive_DMA+0x194>)
 8004fb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	2200      	movs	r2, #0
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	2200      	movs	r2, #0
 8004fcc:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3310      	adds	r3, #16
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fec:	f7fd f83d 	bl	800206a <HAL_DMA_Start_IT>

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ffe:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	6852      	ldr	r2, [r2, #4]
 8005012:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005016:	605a      	str	r2, [r3, #4]

    /* Enable DMA Request */
    hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	6852      	ldr	r2, [r2, #4]
 8005022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005026:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e000      	b.n	800502e <HAL_I2C_Slave_Receive_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 800502c:	2302      	movs	r3, #2
  }
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000008 	.word	0x20000008
 800503c:	14f8b589 	.word	0x14f8b589
 8005040:	ffff0000 	.word	0xffff0000
 8005044:	08007991 	.word	0x08007991
 8005048:	08007a7d 	.word	0x08007a7d

0800504c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	4608      	mov	r0, r1
 8005056:	4611      	mov	r1, r2
 8005058:	461a      	mov	r2, r3
 800505a:	4603      	mov	r3, r0
 800505c:	817b      	strh	r3, [r7, #10]
 800505e:	460b      	mov	r3, r1
 8005060:	813b      	strh	r3, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800506a:	f7fb f961 	bl	8000330 <HAL_GetTick>
 800506e:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b20      	cmp	r3, #32
 800507a:	f040 80e7 	bne.w	800524c <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	2319      	movs	r3, #25
 8005084:	2201      	movs	r2, #1
 8005086:	4974      	ldr	r1, [pc, #464]	; (8005258 <HAL_I2C_Mem_Write+0x20c>)
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f002 fd72 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 8005094:	2302      	movs	r3, #2
 8005096:	e0da      	b.n	800524e <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_I2C_Mem_Write+0x5a>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e0d3      	b.n	800524e <HAL_I2C_Mem_Write+0x202>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d007      	beq.n	80050cc <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2221      	movs	r2, #33	; 0x21
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2240      	movs	r2, #64	; 0x40
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a56      	ldr	r2, [pc, #344]	; (800525c <HAL_I2C_Mem_Write+0x210>)
 8005102:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800510e:	88f8      	ldrh	r0, [r7, #6]
 8005110:	893a      	ldrh	r2, [r7, #8]
 8005112:	8979      	ldrh	r1, [r7, #10]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	4603      	mov	r3, r0
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f002 fac2 	bl	80076a8 <I2C_RequestMemoryWrite>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d05e      	beq.n	80051e8 <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	2b04      	cmp	r3, #4
 8005130:	d105      	bne.n	800513e <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e087      	b.n	800524e <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e081      	b.n	800524e <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f002 fdce 	bl	8007cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00f      	beq.n	800517a <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	2b04      	cmp	r3, #4
 8005160:	d109      	bne.n	8005176 <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005170:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e06b      	b.n	800524e <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e069      	b.n	800524e <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	1c58      	adds	r0, r3, #1
 8005184:	68f9      	ldr	r1, [r7, #12]
 8005186:	6248      	str	r0, [r1, #36]	; 0x24
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	6113      	str	r3, [r2, #16]
      hi2c->XferSize--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d119      	bne.n	80051e8 <HAL_I2C_Mem_Write+0x19c>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	1c58      	adds	r0, r3, #1
 80051c6:	68f9      	ldr	r1, [r7, #12]
 80051c8:	6248      	str	r0, [r1, #36]	; 0x24
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	6113      	str	r3, [r2, #16]
        hi2c->XferSize--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1ac      	bne.n	800514a <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f002 fdb8 	bl	8007d6a <I2C_WaitOnBTFFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00f      	beq.n	8005220 <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	2b04      	cmp	r3, #4
 8005206:	d109      	bne.n	800521c <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005216:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e018      	b.n	800524e <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e016      	b.n	800524e <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	00100002 	.word	0x00100002
 800525c:	ffff0000 	.word	0xffff0000

08005260 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08c      	sub	sp, #48	; 0x30
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	461a      	mov	r2, r3
 800526e:	4603      	mov	r3, r0
 8005270:	817b      	strh	r3, [r7, #10]
 8005272:	460b      	mov	r3, r1
 8005274:	813b      	strh	r3, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 800527a:	2300      	movs	r3, #0
 800527c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800527e:	f7fb f857 	bl	8000330 <HAL_GetTick>
 8005282:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b20      	cmp	r3, #32
 800528e:	f040 8212 	bne.w	80056b6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	2319      	movs	r3, #25
 8005298:	2201      	movs	r2, #1
 800529a:	4984      	ldr	r1, [pc, #528]	; (80054ac <HAL_I2C_Mem_Read+0x24c>)
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f002 fc68 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
 80052aa:	e205      	b.n	80056b8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_I2C_Mem_Read+0x5a>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e1fe      	b.n	80056b8 <HAL_I2C_Mem_Read+0x458>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d007      	beq.n	80052e0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2222      	movs	r2, #34	; 0x22
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2240      	movs	r2, #64	; 0x40
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a66      	ldr	r2, [pc, #408]	; (80054b0 <HAL_I2C_Mem_Read+0x250>)
 8005316:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005322:	88f8      	ldrh	r0, [r7, #6]
 8005324:	893a      	ldrh	r2, [r7, #8]
 8005326:	8979      	ldrh	r1, [r7, #10]
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	4603      	mov	r3, r0
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f002 fa4a 	bl	80077cc <I2C_RequestMemoryRead>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00f      	beq.n	800535e <HAL_I2C_Mem_Read+0xfe>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	2b04      	cmp	r3, #4
 8005344:	d105      	bne.n	8005352 <HAL_I2C_Mem_Read+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e1b2      	b.n	80056b8 <HAL_I2C_Mem_Read+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e1ac      	b.n	80056b8 <HAL_I2C_Mem_Read+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	2b00      	cmp	r3, #0
 8005364:	d113      	bne.n	800538e <HAL_I2C_Mem_Read+0x12e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005366:	2300      	movs	r3, #0
 8005368:	623b      	str	r3, [r7, #32]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	6a3b      	ldr	r3, [r7, #32]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e180      	b.n	8005690 <HAL_I2C_Mem_Read+0x430>
    }
    else if(hi2c->XferSize == 1U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005392:	2b01      	cmp	r3, #1
 8005394:	d11b      	bne.n	80053ce <HAL_I2C_Mem_Read+0x16e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	6812      	ldr	r2, [r2, #0]
 80053c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e160      	b.n	8005690 <HAL_I2C_Mem_Read+0x430>
    }
    else if(hi2c->XferSize == 2U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d11b      	bne.n	800540e <HAL_I2C_Mem_Read+0x1ae>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	e140      	b.n	8005690 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8005424:	e134      	b.n	8005690 <HAL_I2C_Mem_Read+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542a:	2b03      	cmp	r3, #3
 800542c:	f200 80eb 	bhi.w	8005606 <HAL_I2C_Mem_Read+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005434:	2b01      	cmp	r3, #1
 8005436:	d127      	bne.n	8005488 <HAL_I2C_Mem_Read+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8005438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f002 fd0a 	bl	8007e56 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d007      	beq.n	8005458 <HAL_I2C_Mem_Read+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	2b20      	cmp	r3, #32
 800544e:	d101      	bne.n	8005454 <HAL_I2C_Mem_Read+0x1f4>
            {
              return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e131      	b.n	80056b8 <HAL_I2C_Mem_Read+0x458>
            }
            else
            {
              return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e12f      	b.n	80056b8 <HAL_I2C_Mem_Read+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	1c59      	adds	r1, r3, #1
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	6251      	str	r1, [r2, #36]	; 0x24
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	6912      	ldr	r2, [r2, #16]
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005486:	e103      	b.n	8005690 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548c:	2b02      	cmp	r3, #2
 800548e:	d14a      	bne.n	8005526 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	2200      	movs	r2, #0
 8005498:	4906      	ldr	r1, [pc, #24]	; (80054b4 <HAL_I2C_Mem_Read+0x254>)
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f002 fb69 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d008      	beq.n	80054b8 <HAL_I2C_Mem_Read+0x258>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e106      	b.n	80056b8 <HAL_I2C_Mem_Read+0x458>
 80054aa:	bf00      	nop
 80054ac:	00100002 	.word	0x00100002
 80054b0:	ffff0000 	.word	0xffff0000
 80054b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	1c59      	adds	r1, r3, #1
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	6251      	str	r1, [r2, #36]	; 0x24
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	6912      	ldr	r2, [r2, #16]
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	1c59      	adds	r1, r3, #1
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	6251      	str	r1, [r2, #36]	; 0x24
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	6912      	ldr	r2, [r2, #16]
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005524:	e0b4      	b.n	8005690 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	2200      	movs	r2, #0
 800552e:	4964      	ldr	r1, [pc, #400]	; (80056c0 <HAL_I2C_Mem_Read+0x460>)
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f002 fb1e 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e0bb      	b.n	80056b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	6812      	ldr	r2, [r2, #0]
 800554a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	1c59      	adds	r1, r3, #1
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	6251      	str	r1, [r2, #36]	; 0x24
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	6912      	ldr	r2, [r2, #16]
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	2200      	movs	r2, #0
 8005586:	494e      	ldr	r1, [pc, #312]	; (80056c0 <HAL_I2C_Mem_Read+0x460>)
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f002 faf2 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_I2C_Mem_Read+0x338>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e08f      	b.n	80056b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	1c59      	adds	r1, r3, #1
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	6251      	str	r1, [r2, #36]	; 0x24
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	6912      	ldr	r2, [r2, #16]
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	1c59      	adds	r1, r3, #1
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	6251      	str	r1, [r2, #36]	; 0x24
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	6912      	ldr	r2, [r2, #16]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005604:	e044      	b.n	8005690 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005608:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f002 fc23 	bl	8007e56 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <HAL_I2C_Mem_Read+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	2b20      	cmp	r3, #32
 800561c:	d101      	bne.n	8005622 <HAL_I2C_Mem_Read+0x3c2>
          {
            return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e04a      	b.n	80056b8 <HAL_I2C_Mem_Read+0x458>
          }
          else
          {
            return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e048      	b.n	80056b8 <HAL_I2C_Mem_Read+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	1c59      	adds	r1, r3, #1
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	6251      	str	r1, [r2, #36]	; 0x24
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	6912      	ldr	r2, [r2, #16]
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b04      	cmp	r3, #4
 8005660:	d116      	bne.n	8005690 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	1c59      	adds	r1, r3, #1
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	6251      	str	r1, [r2, #36]	; 0x24
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	6912      	ldr	r2, [r2, #16]
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005694:	2b00      	cmp	r3, #0
 8005696:	f47f aec6 	bne.w	8005426 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e000      	b.n	80056b8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3728      	adds	r7, #40	; 0x28
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	00010004 	.word	0x00010004

080056c4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	461a      	mov	r2, r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	817b      	strh	r3, [r7, #10]
 80056d6:	460b      	mov	r3, r1
 80056d8:	813b      	strh	r3, [r7, #8]
 80056da:	4613      	mov	r3, r2
 80056dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	f040 8081 	bne.w	80057f2 <HAL_I2C_Mem_Write_IT+0x12e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80056f0:	4b43      	ldr	r3, [pc, #268]	; (8005800 <HAL_I2C_Mem_Write_IT+0x13c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	08db      	lsrs	r3, r3, #3
 80056f6:	4a43      	ldr	r2, [pc, #268]	; (8005804 <HAL_I2C_Mem_Write_IT+0x140>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	0a1a      	lsrs	r2, r3, #8
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	009a      	lsls	r2, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	1e5a      	subs	r2, r3, #1
 800570e:	617a      	str	r2, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10c      	bne.n	800572e <HAL_I2C_Mem_Write_IT+0x6a>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 800572a:	2303      	movs	r3, #3
 800572c:	e062      	b.n	80057f4 <HAL_I2C_Mem_Write_IT+0x130>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b02      	cmp	r3, #2
 800573a:	d0e6      	beq.n	800570a <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_I2C_Mem_Write_IT+0x86>
 8005746:	2302      	movs	r3, #2
 8005748:	e054      	b.n	80057f4 <HAL_I2C_Mem_Write_IT+0x130>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b01      	cmp	r3, #1
 800575e:	d007      	beq.n	8005770 <HAL_I2C_Mem_Write_IT+0xac>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800577e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2221      	movs	r2, #33	; 0x21
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2240      	movs	r2, #64	; 0x40
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a3a      	ldr	r2, [r7, #32]
 800579a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferSize = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a17      	ldr	r2, [pc, #92]	; (8005808 <HAL_I2C_Mem_Write_IT+0x144>)
 80057ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress = DevAddress;
 80057ae:	897a      	ldrh	r2, [r7, #10]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress = MemAddress;
 80057b4:	893a      	ldrh	r2, [r7, #8]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize = MemAddSize;
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	6852      	ldr	r2, [r2, #4]
 80057e8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80057ec:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e000      	b.n	80057f4 <HAL_I2C_Mem_Write_IT+0x130>
  }
  else
  {
    return HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
  }
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	20000008 	.word	0x20000008
 8005804:	14f8b589 	.word	0x14f8b589
 8005808:	ffff0000 	.word	0xffff0000

0800580c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	4608      	mov	r0, r1
 8005816:	4611      	mov	r1, r2
 8005818:	461a      	mov	r2, r3
 800581a:	4603      	mov	r3, r0
 800581c:	817b      	strh	r3, [r7, #10]
 800581e:	460b      	mov	r3, r1
 8005820:	813b      	strh	r3, [r7, #8]
 8005822:	4613      	mov	r3, r2
 8005824:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b20      	cmp	r3, #32
 8005834:	f040 808d 	bne.w	8005952 <HAL_I2C_Mem_Read_IT+0x146>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8005838:	4b49      	ldr	r3, [pc, #292]	; (8005960 <HAL_I2C_Mem_Read_IT+0x154>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	08db      	lsrs	r3, r3, #3
 800583e:	4a49      	ldr	r2, [pc, #292]	; (8005964 <HAL_I2C_Mem_Read_IT+0x158>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	0a1a      	lsrs	r2, r3, #8
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	009a      	lsls	r2, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	1e5a      	subs	r2, r3, #1
 8005856:	617a      	str	r2, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10c      	bne.n	8005876 <HAL_I2C_Mem_Read_IT+0x6a>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8005872:	2303      	movs	r3, #3
 8005874:	e06e      	b.n	8005954 <HAL_I2C_Mem_Read_IT+0x148>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d0e6      	beq.n	8005852 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_I2C_Mem_Read_IT+0x86>
 800588e:	2302      	movs	r3, #2
 8005890:	e060      	b.n	8005954 <HAL_I2C_Mem_Read_IT+0x148>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d007      	beq.n	80058b8 <HAL_I2C_Mem_Read_IT+0xac>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	6812      	ldr	r2, [r2, #0]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2222      	movs	r2, #34	; 0x22
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_MEM;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2240      	movs	r2, #64	; 0x40
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a3a      	ldr	r2, [r7, #32]
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferSize = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a1d      	ldr	r2, [pc, #116]	; (8005968 <HAL_I2C_Mem_Read_IT+0x15c>)
 80058f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress = DevAddress;
 80058f6:	897a      	ldrh	r2, [r7, #10]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress = MemAddress;
 80058fc:	893a      	ldrh	r2, [r7, #8]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize = MemAddSize;
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800591c:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800592c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if(hi2c->XferSize > 0U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <HAL_I2C_Mem_Read_IT+0x142>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      
      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	6852      	ldr	r2, [r2, #4]
 8005948:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800594c:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e000      	b.n	8005954 <HAL_I2C_Mem_Read_IT+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005952:	2302      	movs	r3, #2
  }
}
 8005954:	4618      	mov	r0, r3
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	20000008 	.word	0x20000008
 8005964:	14f8b589 	.word	0x14f8b589
 8005968:	ffff0000 	.word	0xffff0000

0800596c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08a      	sub	sp, #40	; 0x28
 8005970:	af02      	add	r7, sp, #8
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	4608      	mov	r0, r1
 8005976:	4611      	mov	r1, r2
 8005978:	461a      	mov	r2, r3
 800597a:	4603      	mov	r3, r0
 800597c:	817b      	strh	r3, [r7, #10]
 800597e:	460b      	mov	r3, r1
 8005980:	813b      	strh	r3, [r7, #8]
 8005982:	4613      	mov	r3, r2
 8005984:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	61bb      	str	r3, [r7, #24]

  uint32_t tickstart = 0x00U;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800598e:	f7fa fccf 	bl	8000330 <HAL_GetTick>
 8005992:	61f8      	str	r0, [r7, #28]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b20      	cmp	r3, #32
 800599e:	f040 80c7 	bne.w	8005b30 <HAL_I2C_Mem_Write_DMA+0x1c4>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80059a2:	4b66      	ldr	r3, [pc, #408]	; (8005b3c <HAL_I2C_Mem_Write_DMA+0x1d0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	08db      	lsrs	r3, r3, #3
 80059a8:	4a65      	ldr	r2, [pc, #404]	; (8005b40 <HAL_I2C_Mem_Write_DMA+0x1d4>)
 80059aa:	fba2 2303 	umull	r2, r3, r2, r3
 80059ae:	0a1a      	lsrs	r2, r3, #8
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009a      	lsls	r2, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
    do
    {
      if(count-- == 0U)
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	1e5a      	subs	r2, r3, #1
 80059c0:	61ba      	str	r2, [r7, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10c      	bne.n	80059e0 <HAL_I2C_Mem_Write_DMA+0x74>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 80059dc:	2303      	movs	r3, #3
 80059de:	e0a8      	b.n	8005b32 <HAL_I2C_Mem_Write_DMA+0x1c6>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d0e6      	beq.n	80059bc <HAL_I2C_Mem_Write_DMA+0x50>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_I2C_Mem_Write_DMA+0x90>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e09a      	b.n	8005b32 <HAL_I2C_Mem_Write_DMA+0x1c6>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d007      	beq.n	8005a22 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	f042 0201 	orr.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a30:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2221      	movs	r2, #33	; 0x21
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2240      	movs	r2, #64	; 0x40
 8005a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferSize = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005a52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005a58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4a39      	ldr	r2, [pc, #228]	; (8005b44 <HAL_I2C_Mem_Write_DMA+0x1d8>)
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hi2c->XferSize > 0U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d061      	beq.n	8005b2c <HAL_I2C_Mem_Write_DMA+0x1c0>
    {    
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6c:	4a36      	ldr	r2, [pc, #216]	; (8005b48 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8005a6e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a74:	4a35      	ldr	r2, [pc, #212]	; (8005b4c <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8005a76:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a84:	2200      	movs	r2, #0
 8005a86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	2200      	movs	r2, #0
 8005a96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3310      	adds	r3, #16
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aae:	f7fc fadc 	bl	800206a <HAL_DMA_Start_IT>

      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005ab2:	88f8      	ldrh	r0, [r7, #6]
 8005ab4:	893a      	ldrh	r2, [r7, #8]
 8005ab6:	8979      	ldrh	r1, [r7, #10]
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	2323      	movs	r3, #35	; 0x23
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f001 fdf0 	bl	80076a8 <I2C_RequestMemoryWrite>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00f      	beq.n	8005aee <HAL_I2C_Mem_Write_DMA+0x182>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d105      	bne.n	8005ae2 <HAL_I2C_Mem_Write_DMA+0x176>
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e027      	b.n	8005b32 <HAL_I2C_Mem_Write_DMA+0x1c6>
        }
        else
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e021      	b.n	8005b32 <HAL_I2C_Mem_Write_DMA+0x1c6>
        }
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	697b      	ldr	r3, [r7, #20]
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	6852      	ldr	r2, [r2, #4]
 8005b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b1a:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	6812      	ldr	r2, [r2, #0]
 8005b24:	6852      	ldr	r2, [r2, #4]
 8005b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b2a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e000      	b.n	8005b32 <HAL_I2C_Mem_Write_DMA+0x1c6>
  }
  else
  {
    return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000008 	.word	0x20000008
 8005b40:	14f8b589 	.word	0x14f8b589
 8005b44:	ffff0000 	.word	0xffff0000
 8005b48:	08007991 	.word	0x08007991
 8005b4c:	08007a7d 	.word	0x08007a7d

08005b50 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	; 0x28
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	817b      	strh	r3, [r7, #10]
 8005b62:	460b      	mov	r3, r1
 8005b64:	813b      	strh	r3, [r7, #8]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t count = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61bb      	str	r3, [r7, #24]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b72:	f7fa fbdd 	bl	8000330 <HAL_GetTick>
 8005b76:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	f040 8117 	bne.w	8005db4 <HAL_I2C_Mem_Read_DMA+0x264>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8005b86:	4b8e      	ldr	r3, [pc, #568]	; (8005dc0 <HAL_I2C_Mem_Read_DMA+0x270>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	08db      	lsrs	r3, r3, #3
 8005b8c:	4a8d      	ldr	r2, [pc, #564]	; (8005dc4 <HAL_I2C_Mem_Read_DMA+0x274>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	0a1a      	lsrs	r2, r3, #8
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	009a      	lsls	r2, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
    do
    {
      if(count-- == 0U)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	1e5a      	subs	r2, r3, #1
 8005ba4:	61ba      	str	r2, [r7, #24]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_I2C_Mem_Read_DMA+0x74>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e0f8      	b.n	8005db6 <HAL_I2C_Mem_Read_DMA+0x266>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d0e6      	beq.n	8005ba0 <HAL_I2C_Mem_Read_DMA+0x50>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_I2C_Mem_Read_DMA+0x90>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e0ea      	b.n	8005db6 <HAL_I2C_Mem_Read_DMA+0x266>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d007      	beq.n	8005c06 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	f042 0201 	orr.w	r2, r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c14:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2222      	movs	r2, #34	; 0x22
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2240      	movs	r2, #64	; 0x40
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4a63      	ldr	r2, [pc, #396]	; (8005dc8 <HAL_I2C_Mem_Read_DMA+0x278>)
 8005c3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	851a      	strh	r2, [r3, #40]	; 0x28

    if(hi2c->XferSize > 0U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d076      	beq.n	8005d3e <HAL_I2C_Mem_Read_DMA+0x1ee>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	4a5d      	ldr	r2, [pc, #372]	; (8005dcc <HAL_I2C_Mem_Read_DMA+0x27c>)
 8005c56:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	4a5c      	ldr	r2, [pc, #368]	; (8005dd0 <HAL_I2C_Mem_Read_DMA+0x280>)
 8005c5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	2200      	movs	r2, #0
 8005c66:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	2200      	movs	r2, #0
 8005c76:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3310      	adds	r3, #16
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	461a      	mov	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c96:	f7fc f9e8 	bl	800206a <HAL_DMA_Start_IT>

      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005c9a:	88f8      	ldrh	r0, [r7, #6]
 8005c9c:	893a      	ldrh	r2, [r7, #8]
 8005c9e:	8979      	ldrh	r1, [r7, #10]
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	2323      	movs	r3, #35	; 0x23
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	4603      	mov	r3, r0
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f001 fd8e 	bl	80077cc <I2C_RequestMemoryRead>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00f      	beq.n	8005cd6 <HAL_I2C_Mem_Read_DMA+0x186>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d105      	bne.n	8005cca <HAL_I2C_Mem_Read_DMA+0x17a>
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e075      	b.n	8005db6 <HAL_I2C_Mem_Read_DMA+0x266>
        }
        else
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e06f      	b.n	8005db6 <HAL_I2C_Mem_Read_DMA+0x266>
        }
      }

      if(Size == 1U)
 8005cd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d108      	bne.n	8005cee <HAL_I2C_Mem_Read_DMA+0x19e>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e007      	b.n	8005cfe <HAL_I2C_Mem_Read_DMA+0x1ae>
      }
      else
      {
        /* Enable Last DMA bit */
        hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	6852      	ldr	r2, [r2, #4]
 8005cf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cfc:	605a      	str	r2, [r3, #4]
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	697b      	ldr	r3, [r7, #20]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	6852      	ldr	r2, [r2, #4]
 8005d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d2a:	605a      	str	r2, [r3, #4]
      
     /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	6852      	ldr	r2, [r2, #4]
 8005d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	e038      	b.n	8005db0 <HAL_I2C_Mem_Read_DMA+0x260>
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005d3e:	88f8      	ldrh	r0, [r7, #6]
 8005d40:	893a      	ldrh	r2, [r7, #8]
 8005d42:	8979      	ldrh	r1, [r7, #10]
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	2323      	movs	r3, #35	; 0x23
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f001 fd3c 	bl	80077cc <I2C_RequestMemoryRead>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00f      	beq.n	8005d7a <HAL_I2C_Mem_Read_DMA+0x22a>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d105      	bne.n	8005d6e <HAL_I2C_Mem_Read_DMA+0x21e>
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e023      	b.n	8005db6 <HAL_I2C_Mem_Read_DMA+0x266>
        }
        else
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e01d      	b.n	8005db6 <HAL_I2C_Mem_Read_DMA+0x266>
        }
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	613b      	str	r3, [r7, #16]
 8005d8e:	693b      	ldr	r3, [r7, #16]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	6812      	ldr	r2, [r2, #0]
 8005d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d9e:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e000      	b.n	8005db6 <HAL_I2C_Mem_Read_DMA+0x266>
  }
  else
  {
    return HAL_BUSY;
 8005db4:	2302      	movs	r3, #2
  }
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000008 	.word	0x20000008
 8005dc4:	14f8b589 	.word	0x14f8b589
 8005dc8:	ffff0000 	.word	0xffff0000
 8005dcc:	08007991 	.word	0x08007991
 8005dd0:	08007a7d 	.word	0x08007a7d

08005dd4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08c      	sub	sp, #48	; 0x30
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	460b      	mov	r3, r1
 8005de2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
 8005de8:	2300      	movs	r3, #0
 8005dea:	623b      	str	r3, [r7, #32]
 8005dec:	2300      	movs	r3, #0
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	2301      	movs	r3, #1
 8005df6:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005df8:	f7fa fa9a 	bl	8000330 <HAL_GetTick>
 8005dfc:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	f040 810a 	bne.w	8006020 <HAL_I2C_IsDeviceReady+0x24c>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	2319      	movs	r3, #25
 8005e12:	2201      	movs	r2, #1
 8005e14:	4985      	ldr	r1, [pc, #532]	; (800602c <HAL_I2C_IsDeviceReady+0x258>)
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f001 feab 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_I2C_IsDeviceReady+0x52>
    {
      return HAL_BUSY;
 8005e22:	2302      	movs	r3, #2
 8005e24:	e0fd      	b.n	8006022 <HAL_I2C_IsDeviceReady+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_I2C_IsDeviceReady+0x60>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e0f6      	b.n	8006022 <HAL_I2C_IsDeviceReady+0x24e>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d007      	beq.n	8005e5a <HAL_I2C_IsDeviceReady+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	6812      	ldr	r2, [r2, #0]
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	f042 0201 	orr.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	6812      	ldr	r2, [r2, #0]
 8005e62:	6812      	ldr	r2, [r2, #0]
 8005e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2224      	movs	r2, #36	; 0x24
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4a6d      	ldr	r2, [pc, #436]	; (8006030 <HAL_I2C_IsDeviceReady+0x25c>)
 8005e7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e8c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f001 fe69 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <HAL_I2C_IsDeviceReady+0xd6>
      {
        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e0bb      	b.n	8006022 <HAL_I2C_IsDeviceReady+0x24e>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	897a      	ldrh	r2, [r7, #10]
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005eb6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005eb8:	f7fa fa3a 	bl	8000330 <HAL_GetTick>
 8005ebc:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	bf0c      	ite	eq
 8005ecc:	2301      	moveq	r3, #1
 8005ece:	2300      	movne	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee2:	bf0c      	ite	eq
 8005ee4:	2301      	moveq	r3, #1
 8005ee6:	2300      	movne	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8005ef6:	e02a      	b.n	8005f4e <HAL_I2C_IsDeviceReady+0x17a>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <HAL_I2C_IsDeviceReady+0x13a>
 8005efe:	f7fa fa17 	bl	8000330 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	1ad2      	subs	r2, r2, r3
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d903      	bls.n	8005f16 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	22a0      	movs	r2, #160	; 0xa0
 8005f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	bf0c      	ite	eq
 8005f24:	2301      	moveq	r3, #1
 8005f26:	2300      	movne	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f3a:	bf0c      	ite	eq
 8005f3c:	2301      	moveq	r3, #1
 8005f3e:	2300      	movne	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d105      	bne.n	8005f60 <HAL_I2C_IsDeviceReady+0x18c>
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <HAL_I2C_IsDeviceReady+0x18c>
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2ba0      	cmp	r3, #160	; 0xa0
 8005f5e:	d1cb      	bne.n	8005ef8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d129      	bne.n	8005fca <HAL_I2C_IsDeviceReady+0x1f6>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	6812      	ldr	r2, [r2, #0]
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f86:	2300      	movs	r3, #0
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	2319      	movs	r3, #25
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	4921      	ldr	r1, [pc, #132]	; (800602c <HAL_I2C_IsDeviceReady+0x258>)
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f001 fde3 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <HAL_I2C_IsDeviceReady+0x1e2>
        {
          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e035      	b.n	8006022 <HAL_I2C_IsDeviceReady+0x24e>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e02b      	b.n	8006022 <HAL_I2C_IsDeviceReady+0x24e>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	6812      	ldr	r2, [r2, #0]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fe2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	2319      	movs	r3, #25
 8005fea:	2201      	movs	r2, #1
 8005fec:	490f      	ldr	r1, [pc, #60]	; (800602c <HAL_I2C_IsDeviceReady+0x258>)
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f001 fdbf 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_I2C_IsDeviceReady+0x22a>
        {
          return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e011      	b.n	8006022 <HAL_I2C_IsDeviceReady+0x24e>
        }
      }
    }while(I2C_Trials++ < Trials);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	617a      	str	r2, [r7, #20]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	4293      	cmp	r3, r2
 8006008:	f4ff af39 	bcc.w	8005e7e <HAL_I2C_IsDeviceReady+0xaa>

    hi2c->State = HAL_I2C_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <HAL_I2C_IsDeviceReady+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006020:	2302      	movs	r3, #2
  }
}
 8006022:	4618      	mov	r0, r3
 8006024:	3728      	adds	r7, #40	; 0x28
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	00100002 	.word	0x00100002
 8006030:	ffff0000 	.word	0xffff0000

08006034 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	617b      	str	r3, [r7, #20]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	613b      	str	r3, [r7, #16]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	60fb      	str	r3, [r7, #12]

  uint32_t CurrentMode  = hi2c->Mode;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800605a:	b2db      	uxtb	r3, r3
 800605c:	60bb      	str	r3, [r7, #8]

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b10      	cmp	r3, #16
 8006062:	d002      	beq.n	800606a <HAL_I2C_EV_IRQHandler+0x36>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d172      	bne.n	8006150 <HAL_I2C_EV_IRQHandler+0x11c>
  {
    /* SB Set ----------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <HAL_I2C_EV_IRQHandler+0x52>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_I2C_EV_IRQHandler+0x52>
    {
      I2C_Master_SB(hi2c);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fcc8 	bl	8006a14 <I2C_Master_SB>
 8006084:	e01a      	b.n	80060bc <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4b65      	ldr	r3, [pc, #404]	; (8006220 <HAL_I2C_EV_IRQHandler+0x1ec>)
 800608a:	4013      	ands	r3, r2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_I2C_EV_IRQHandler+0x6e>
    {
      I2C_Master_ADD10(hi2c);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fd25 	bl	8006aea <I2C_Master_ADD10>
 80060a0:	e00c      	b.n	80060bc <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	4b5f      	ldr	r3, [pc, #380]	; (8006224 <HAL_I2C_EV_IRQHandler+0x1f0>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d007      	beq.n	80060bc <HAL_I2C_EV_IRQHandler+0x88>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <HAL_I2C_EV_IRQHandler+0x88>
    {
      I2C_Master_ADDR(hi2c);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fd28 	bl	8006b0c <I2C_Master_ADDR>
    }

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4b5a      	ldr	r3, [pc, #360]	; (8006228 <HAL_I2C_EV_IRQHandler+0x1f4>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d022      	beq.n	800610c <HAL_I2C_EV_IRQHandler+0xd8>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4b58      	ldr	r3, [pc, #352]	; (800622c <HAL_I2C_EV_IRQHandler+0x1f8>)
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00d      	beq.n	80060ec <HAL_I2C_EV_IRQHandler+0xb8>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d008      	beq.n	80060ec <HAL_I2C_EV_IRQHandler+0xb8>
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4b54      	ldr	r3, [pc, #336]	; (8006230 <HAL_I2C_EV_IRQHandler+0x1fc>)
 80060de:	4013      	ands	r3, r2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d103      	bne.n	80060ec <HAL_I2C_EV_IRQHandler+0xb8>
      {
        I2C_MasterTransmit_TXE(hi2c);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f9e3 	bl	80064b0 <I2C_MasterTransmit_TXE>
 80060ea:	e030      	b.n	800614e <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4b50      	ldr	r3, [pc, #320]	; (8006230 <HAL_I2C_EV_IRQHandler+0x1fc>)
 80060f0:	4013      	ands	r3, r2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 808f 	beq.w	8006216 <HAL_I2C_EV_IRQHandler+0x1e2>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 8089 	beq.w	8006216 <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterTransmit_BTF(hi2c);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fac8 	bl	800669a <I2C_MasterTransmit_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800610a:	e084      	b.n	8006216 <HAL_I2C_EV_IRQHandler+0x1e2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4b49      	ldr	r3, [pc, #292]	; (8006234 <HAL_I2C_EV_IRQHandler+0x200>)
 8006110:	4013      	ands	r3, r2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <HAL_I2C_EV_IRQHandler+0xfe>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611c:	2b00      	cmp	r3, #0
 800611e:	d008      	beq.n	8006132 <HAL_I2C_EV_IRQHandler+0xfe>
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4b43      	ldr	r3, [pc, #268]	; (8006230 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8006124:	4013      	ands	r3, r2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d103      	bne.n	8006132 <HAL_I2C_EV_IRQHandler+0xfe>
      {
        I2C_MasterReceive_RXNE(hi2c);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fb2a 	bl	8006784 <I2C_MasterReceive_RXNE>
 8006130:	e00d      	b.n	800614e <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4b3e      	ldr	r3, [pc, #248]	; (8006230 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8006136:	4013      	ands	r3, r2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d06c      	beq.n	8006216 <HAL_I2C_EV_IRQHandler+0x1e2>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006142:	2b00      	cmp	r3, #0
 8006144:	d067      	beq.n	8006216 <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterReceive_BTF(hi2c);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fb96 	bl	8006878 <I2C_MasterReceive_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800614c:	e063      	b.n	8006216 <HAL_I2C_EV_IRQHandler+0x1e2>
 800614e:	e062      	b.n	8006216 <HAL_I2C_EV_IRQHandler+0x1e2>
  }
  /* Slave mode selected */
  else
  {
    /* ADDR set --------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4b34      	ldr	r3, [pc, #208]	; (8006224 <HAL_I2C_EV_IRQHandler+0x1f0>)
 8006154:	4013      	ands	r3, r2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <HAL_I2C_EV_IRQHandler+0x138>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_I2C_EV_IRQHandler+0x138>
    {
      I2C_Slave_ADDR(hi2c);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fef0 	bl	8006f4a <I2C_Slave_ADDR>
 800616a:	e055      	b.n	8006218 <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4b32      	ldr	r3, [pc, #200]	; (8006238 <HAL_I2C_EV_IRQHandler+0x204>)
 8006170:	4013      	ands	r3, r2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d008      	beq.n	8006188 <HAL_I2C_EV_IRQHandler+0x154>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_I2C_EV_IRQHandler+0x154>
    {
      I2C_Slave_STOPF(hi2c);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 ff0c 	bl	8006f9e <I2C_Slave_STOPF>
 8006186:	e047      	b.n	8006218 <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4b27      	ldr	r3, [pc, #156]	; (8006228 <HAL_I2C_EV_IRQHandler+0x1f4>)
 800618c:	4013      	ands	r3, r2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d020      	beq.n	80061d4 <HAL_I2C_EV_IRQHandler+0x1a0>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4b25      	ldr	r3, [pc, #148]	; (800622c <HAL_I2C_EV_IRQHandler+0x1f8>)
 8006196:	4013      	ands	r3, r2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00d      	beq.n	80061b8 <HAL_I2C_EV_IRQHandler+0x184>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d008      	beq.n	80061b8 <HAL_I2C_EV_IRQHandler+0x184>
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4b21      	ldr	r3, [pc, #132]	; (8006230 <HAL_I2C_EV_IRQHandler+0x1fc>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d103      	bne.n	80061b8 <HAL_I2C_EV_IRQHandler+0x184>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fe0e 	bl	8006dd2 <I2C_SlaveTransmit_TXE>
 80061b6:	e02f      	b.n	8006218 <HAL_I2C_EV_IRQHandler+0x1e4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <HAL_I2C_EV_IRQHandler+0x1fc>)
 80061bc:	4013      	ands	r3, r2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d02a      	beq.n	8006218 <HAL_I2C_EV_IRQHandler+0x1e4>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d025      	beq.n	8006218 <HAL_I2C_EV_IRQHandler+0x1e4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fe3d 	bl	8006e4c <I2C_SlaveTransmit_BTF>
      {
        I2C_SlaveReceive_BTF(hi2c);
      }
    }
  }
}
 80061d2:	e021      	b.n	8006218 <HAL_I2C_EV_IRQHandler+0x1e4>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	4b17      	ldr	r3, [pc, #92]	; (8006234 <HAL_I2C_EV_IRQHandler+0x200>)
 80061d8:	4013      	ands	r3, r2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00d      	beq.n	80061fa <HAL_I2C_EV_IRQHandler+0x1c6>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d008      	beq.n	80061fa <HAL_I2C_EV_IRQHandler+0x1c6>
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4b11      	ldr	r3, [pc, #68]	; (8006230 <HAL_I2C_EV_IRQHandler+0x1fc>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d103      	bne.n	80061fa <HAL_I2C_EV_IRQHandler+0x1c6>
        I2C_SlaveReceive_RXNE(hi2c);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fe4a 	bl	8006e8c <I2C_SlaveReceive_RXNE>
 80061f8:	e00e      	b.n	8006218 <HAL_I2C_EV_IRQHandler+0x1e4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <HAL_I2C_EV_IRQHandler+0x1fc>)
 80061fe:	4013      	ands	r3, r2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d009      	beq.n	8006218 <HAL_I2C_EV_IRQHandler+0x1e4>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <HAL_I2C_EV_IRQHandler+0x1e4>
        I2C_SlaveReceive_BTF(hi2c);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fe7a 	bl	8006f08 <I2C_SlaveReceive_BTF>
}
 8006214:	e000      	b.n	8006218 <HAL_I2C_EV_IRQHandler+0x1e4>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8006216:	bf00      	nop
}
 8006218:	bf00      	nop
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	00010008 	.word	0x00010008
 8006224:	00010002 	.word	0x00010002
 8006228:	00100004 	.word	0x00100004
 800622c:	00010080 	.word	0x00010080
 8006230:	00010004 	.word	0x00010004
 8006234:	00010040 	.word	0x00010040
 8006238:	00010010 	.word	0x00010010

0800623c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, tmp4 = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	2300      	movs	r3, #0
 800624a:	61bb      	str	r3, [r7, #24]
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	2300      	movs	r3, #0
 8006252:	613b      	str	r3, [r7, #16]
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4b49      	ldr	r3, [pc, #292]	; (800638c <HAL_I2C_ER_IRQHandler+0x150>)
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00f      	beq.n	800628e <HAL_I2C_ER_IRQHandler+0x52>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <HAL_I2C_ER_IRQHandler+0x52>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	f043 0201 	orr.w	r2, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800628c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f403 3381 	and.w	r3, r3, #66048	; 0x10200
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00f      	beq.n	80062b8 <HAL_I2C_ER_IRQHandler+0x7c>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <HAL_I2C_ER_IRQHandler+0x7c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	f043 0202 	orr.w	r2, r3, #2
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80062b6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f403 3382 	and.w	r3, r3, #66560	; 0x10400
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d044      	beq.n	800634c <HAL_I2C_ER_IRQHandler+0x110>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d03f      	beq.n	800634c <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	61fb      	str	r3, [r7, #28]
    tmp2 = hi2c->XferCount;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062da:	b29b      	uxth	r3, r3
 80062dc:	61bb      	str	r3, [r7, #24]
    tmp3 = hi2c->State;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	617b      	str	r3, [r7, #20]
    tmp4 = hi2c->PreviousState;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ec:	613b      	str	r3, [r7, #16]
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d112      	bne.n	800631a <HAL_I2C_ER_IRQHandler+0xde>
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10f      	bne.n	800631a <HAL_I2C_ER_IRQHandler+0xde>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b21      	cmp	r3, #33	; 0x21
 80062fe:	d008      	beq.n	8006312 <HAL_I2C_ER_IRQHandler+0xd6>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2b29      	cmp	r3, #41	; 0x29
 8006304:	d005      	beq.n	8006312 <HAL_I2C_ER_IRQHandler+0xd6>
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2b28      	cmp	r3, #40	; 0x28
 800630a:	d106      	bne.n	800631a <HAL_I2C_ER_IRQHandler+0xde>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	2b21      	cmp	r3, #33	; 0x21
 8006310:	d103      	bne.n	800631a <HAL_I2C_ER_IRQHandler+0xde>
    {
      I2C_Slave_AF(hi2c);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 ff08 	bl	8007128 <I2C_Slave_AF>
 8006318:	e018      	b.n	800634c <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f043 0204 	orr.w	r2, r3, #4
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	641a      	str	r2, [r3, #64]	; 0x40

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b10      	cmp	r3, #16
 8006330:	d107      	bne.n	8006342 <HAL_I2C_ER_IRQHandler+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6812      	ldr	r2, [r2, #0]
 800633a:	6812      	ldr	r2, [r2, #0]
 800633c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006340:	601a      	str	r2, [r3, #0]
      }

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800634a:	615a      	str	r2, [r3, #20]
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f403 3384 	and.w	r3, r3, #67584	; 0x10800
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00f      	beq.n	8006376 <HAL_I2C_ER_IRQHandler+0x13a>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	f043 0208 	orr.w	r2, r3, #8
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006374:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_I2C_ER_IRQHandler+0x148>
  {
    I2C_ITError(hi2c);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 ff44 	bl	800720c <I2C_ITError>
  }
}
 8006384:	bf00      	nop
 8006386:	3720      	adds	r7, #32
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	00010100 	.word	0x00010100

08006390 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback can be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback can be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback can be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback can be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
 80063ec:	4613      	mov	r3, r2
 80063ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback can be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

    /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback can be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback can be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback can be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback can be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646e:	b2db      	uxtb	r3, r3
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800648a:	b2db      	uxtb	r3, r3
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	617b      	str	r3, [r7, #20]
  uint32_t CurrentMode        = hi2c->Mode;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	613b      	str	r3, [r7, #16]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	60fb      	str	r3, [r7, #12]

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d150      	bne.n	800657c <I2C_MasterTransmit_TXE+0xcc>
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b21      	cmp	r3, #33	; 0x21
 80064de:	d14d      	bne.n	800657c <I2C_MasterTransmit_TXE+0xcc>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d01d      	beq.n	8006522 <I2C_MasterTransmit_TXE+0x72>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d01a      	beq.n	8006522 <I2C_MasterTransmit_TXE+0x72>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064f2:	d016      	beq.n	8006522 <I2C_MasterTransmit_TXE+0x72>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	6852      	ldr	r2, [r2, #4]
 80064fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006502:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2211      	movs	r2, #17
 8006508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      HAL_I2C_MasterTxCpltCallback(hi2c);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff ff38 	bl	8006390 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006520:	e0b6      	b.n	8006690 <I2C_MasterTransmit_TXE+0x1e0>
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	6852      	ldr	r2, [r2, #4]
 800652c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006530:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006540:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d107      	bne.n	800656c <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff ff53 	bl	8006410 <HAL_I2C_MemTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800656a:	e091      	b.n	8006690 <I2C_MasterTransmit_TXE+0x1e0>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff ff0b 	bl	8006390 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800657a:	e089      	b.n	8006690 <I2C_MasterTransmit_TXE+0x1e0>
      }
    }
  }
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2b21      	cmp	r3, #33	; 0x21
 8006580:	d006      	beq.n	8006590 <I2C_MasterTransmit_TXE+0xe0>
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	f040 8083 	bne.w	8006690 <I2C_MasterTransmit_TXE+0x1e0>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b22      	cmp	r3, #34	; 0x22
 800658e:	d17f      	bne.n	8006690 <I2C_MasterTransmit_TXE+0x1e0>
  {
    if(hi2c->XferCount == 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d108      	bne.n	80065ac <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	6852      	ldr	r2, [r2, #4]
 80065a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a8:	605a      	str	r2, [r3, #4]
 80065aa:	e071      	b.n	8006690 <I2C_MasterTransmit_TXE+0x1e0>
    }
    else
    {
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b40      	cmp	r3, #64	; 0x40
 80065b6:	d15b      	bne.n	8006670 <I2C_MasterTransmit_TXE+0x1c0>
      {
        if(hi2c->EventCount == 0)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11d      	bne.n	80065fc <I2C_MasterTransmit_TXE+0x14c>
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d10b      	bne.n	80065e0 <I2C_MasterTransmit_TXE+0x130>
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount += 2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d8:	1c9a      	adds	r2, r3, #2
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	651a      	str	r2, [r3, #80]	; 0x50
 80065de:	e057      	b.n	8006690 <I2C_MasterTransmit_TXE+0x1e0>
          }
          /* If Memory address size is 16Bit */
          else
          {
            /* Send MSB of Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065e8:	b292      	uxth	r2, r2
 80065ea:	1212      	asrs	r2, r2, #8
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount++;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	651a      	str	r2, [r3, #80]	; 0x50
 80065fa:	e049      	b.n	8006690 <I2C_MasterTransmit_TXE+0x1e0>
          }
        }
        else if(hi2c->EventCount == 1)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006600:	2b01      	cmp	r3, #1
 8006602:	d10b      	bne.n	800661c <I2C_MasterTransmit_TXE+0x16c>
        {
          /* Send LSB of Memory Address */
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	611a      	str	r2, [r3, #16]
          
          hi2c->EventCount++;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	651a      	str	r2, [r3, #80]	; 0x50
 800661a:	e039      	b.n	8006690 <I2C_MasterTransmit_TXE+0x1e0>
        }
        else if(hi2c->EventCount == 2)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006620:	2b02      	cmp	r3, #2
 8006622:	d135      	bne.n	8006690 <I2C_MasterTransmit_TXE+0x1e0>
        {
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b22      	cmp	r3, #34	; 0x22
 800662e:	d108      	bne.n	8006642 <I2C_MasterTransmit_TXE+0x192>
          {
            /* Generate Restart */
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	6812      	ldr	r2, [r2, #0]
 800663a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	e026      	b.n	8006690 <I2C_MasterTransmit_TXE+0x1e0>
          }
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b21      	cmp	r3, #33	; 0x21
 800664c:	d120      	bne.n	8006690 <I2C_MasterTransmit_TXE+0x1e0>
          {
            /* Write data to DR */
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	1c58      	adds	r0, r3, #1
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	6248      	str	r0, [r1, #36]	; 0x24
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	6113      	str	r3, [r2, #16]
            hi2c->XferCount--;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006664:	b29b      	uxth	r3, r3
 8006666:	3b01      	subs	r3, #1
 8006668:	b29a      	uxth	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800666e:	e00f      	b.n	8006690 <I2C_MasterTransmit_TXE+0x1e0>
        }
      }
      else
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	1c58      	adds	r0, r3, #1
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	6248      	str	r0, [r1, #36]	; 0x24
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	855a      	strh	r2, [r3, #42]	; 0x2a
      }
    }
  }
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	60fb      	str	r3, [r7, #12]

  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b21      	cmp	r3, #33	; 0x21
 80066b2:	d162      	bne.n	800677a <I2C_MasterTransmit_BTF+0xe0>
  {    
    if(hi2c->XferCount != 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d010      	beq.n	80066e0 <I2C_MasterTransmit_BTF+0x46>
    {
      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	1c58      	adds	r0, r3, #1
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	6248      	str	r0, [r1, #36]	; 0x24
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066de:	e04c      	b.n	800677a <I2C_MasterTransmit_BTF+0xe0>
    }
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d01d      	beq.n	8006722 <I2C_MasterTransmit_BTF+0x88>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d01a      	beq.n	8006722 <I2C_MasterTransmit_BTF+0x88>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066f2:	d016      	beq.n	8006722 <I2C_MasterTransmit_BTF+0x88>
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6812      	ldr	r2, [r2, #0]
 80066fc:	6852      	ldr	r2, [r2, #4]
 80066fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006702:	605a      	str	r2, [r3, #4]
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2211      	movs	r2, #17
 8006708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff fe38 	bl	8006390 <HAL_I2C_MasterTxCpltCallback>
 8006720:	e02b      	b.n	800677a <I2C_MasterTransmit_BTF+0xe0>
      }
      else /* Generate Stop condition then Call TxCpltCallback() */
      {
        /* Disable EVT, BUF and ERR interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6812      	ldr	r2, [r2, #0]
 800672a:	6852      	ldr	r2, [r2, #4]
 800672c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006730:	605a      	str	r2, [r3, #4]
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6812      	ldr	r2, [r2, #0]
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006740:	601a      	str	r2, [r3, #0]
        
        hi2c->PreviousState = I2C_STATE_NONE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b40      	cmp	r3, #64	; 0x40
 800675a:	d107      	bne.n	800676c <I2C_MasterTransmit_BTF+0xd2>
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff fe53 	bl	8006410 <HAL_I2C_MemTxCpltCallback>
 800676a:	e006      	b.n	800677a <I2C_MasterTransmit_BTF+0xe0>
        }
        else
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff fe0b 	bl	8006390 <HAL_I2C_MasterTxCpltCallback>
        }
      }
    }
  }
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b22      	cmp	r3, #34	; 0x22
 8006796:	d16a      	bne.n	800686e <I2C_MasterReceive_RXNE+0xea>
  {
    uint32_t tmp = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	60fb      	str	r3, [r7, #12]
    
    tmp = hi2c->XferCount;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	60fb      	str	r3, [r7, #12]
    if(tmp > 3U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d91e      	bls.n	80067e8 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	1c59      	adds	r1, r3, #1
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6251      	str	r1, [r2, #36]	; 0x24
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6812      	ldr	r2, [r2, #0]
 80067b8:	6912      	ldr	r2, [r2, #16]
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      
      if(hi2c->XferCount == 3)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d14b      	bne.n	800686e <I2C_MasterReceive_RXNE+0xea>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	6852      	ldr	r2, [r2, #4]
 80067e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e4:	605a      	str	r2, [r3, #4]
 80067e6:	e042      	b.n	800686e <I2C_MasterReceive_RXNE+0xea>
      }
    }
    else if((tmp == 1U) || (tmp == 0U))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d002      	beq.n	80067f4 <I2C_MasterReceive_RXNE+0x70>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d13c      	bne.n	800686e <I2C_MasterReceive_RXNE+0xea>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6812      	ldr	r2, [r2, #0]
 80067fc:	6812      	ldr	r2, [r2, #0]
 80067fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006802:	601a      	str	r2, [r3, #0]

      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6812      	ldr	r2, [r2, #0]
 800680c:	6852      	ldr	r2, [r2, #4]
 800680e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006812:	605a      	str	r2, [r3, #4]
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	1c59      	adds	r1, r3, #1
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6251      	str	r1, [r2, #36]	; 0x24
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	6912      	ldr	r2, [r2, #16]
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	855a      	strh	r2, [r3, #42]	; 0x2a

      hi2c->State = HAL_I2C_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	631a      	str	r2, [r3, #48]	; 0x30

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b40      	cmp	r3, #64	; 0x40
 800684e:	d107      	bne.n	8006860 <I2C_MasterReceive_RXNE+0xdc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff fde3 	bl	8006424 <HAL_I2C_MemRxCpltCallback>
 800685e:	e006      	b.n	800686e <I2C_MasterReceive_RXNE+0xea>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff fd9b 	bl	80063a4 <HAL_I2C_MasterRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount == 4U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	2b04      	cmp	r3, #4
 800688e:	d119      	bne.n	80068c4 <I2C_MasterReceive_BTF+0x4c>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6812      	ldr	r2, [r2, #0]
 8006898:	6852      	ldr	r2, [r2, #4]
 800689a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	1c59      	adds	r1, r3, #1
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6251      	str	r1, [r2, #36]	; 0x24
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6812      	ldr	r2, [r2, #0]
 80068ae:	6912      	ldr	r2, [r2, #16]
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29a      	uxth	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068c2:	e0a2      	b.n	8006a0a <I2C_MasterReceive_BTF+0x192>
  }
  else if(hi2c->XferCount == 3U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d121      	bne.n	8006912 <I2C_MasterReceive_BTF+0x9a>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	6852      	ldr	r2, [r2, #4]
 80068d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068dc:	605a      	str	r2, [r3, #4]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6812      	ldr	r2, [r2, #0]
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ec:	601a      	str	r2, [r3, #0]

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	1c59      	adds	r1, r3, #1
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6251      	str	r1, [r2, #36]	; 0x24
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	6912      	ldr	r2, [r2, #16]
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006910:	e07b      	b.n	8006a0a <I2C_MasterReceive_BTF+0x192>
  }
  else if(hi2c->XferCount == 2U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d165      	bne.n	80069e8 <I2C_MasterReceive_BTF+0x170>
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b02      	cmp	r3, #2
 8006920:	d002      	beq.n	8006928 <I2C_MasterReceive_BTF+0xb0>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d110      	bne.n	800694a <I2C_MasterReceive_BTF+0xd2>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	6812      	ldr	r2, [r2, #0]
 8006932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006936:	601a      	str	r2, [r3, #0]

      /* Generate ReStart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6812      	ldr	r2, [r2, #0]
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	e007      	b.n	800695a <I2C_MasterReceive_BTF+0xe2>
    }
    else
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006958:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	1c59      	adds	r1, r3, #1
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6251      	str	r1, [r2, #36]	; 0x24
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	6912      	ldr	r2, [r2, #16]
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006972:	b29b      	uxth	r3, r3
 8006974:	3b01      	subs	r3, #1
 8006976:	b29a      	uxth	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	1c59      	adds	r1, r3, #1
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6251      	str	r1, [r2, #36]	; 0x24
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6812      	ldr	r2, [r2, #0]
 800698a:	6912      	ldr	r2, [r2, #16]
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6812      	ldr	r2, [r2, #0]
 80069a6:	6852      	ldr	r2, [r2, #4]
 80069a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80069ac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	631a      	str	r2, [r3, #48]	; 0x30

    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b40      	cmp	r3, #64	; 0x40
 80069c6:	d107      	bne.n	80069d8 <I2C_MasterReceive_BTF+0x160>
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MemRxCpltCallback(hi2c);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff fd27 	bl	8006424 <HAL_I2C_MemRxCpltCallback>
 80069d6:	e018      	b.n	8006a0a <I2C_MasterReceive_BTF+0x192>
    }
    else
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MasterRxCpltCallback(hi2c);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff fcdf 	bl	80063a4 <HAL_I2C_MasterRxCpltCallback>
 80069e6:	e010      	b.n	8006a0a <I2C_MasterReceive_BTF+0x192>
    }
  }
  else
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	1c59      	adds	r1, r3, #1
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6251      	str	r1, [r2, #36]	; 0x24
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	6912      	ldr	r2, [r2, #16]
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b40      	cmp	r3, #64	; 0x40
 8006a26:	d116      	bne.n	8006a56 <I2C_Master_SB+0x42>
  {
    if(hi2c->EventCount == 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d108      	bne.n	8006a42 <I2C_Master_SB+0x2e>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a3e:	611a      	str	r2, [r3, #16]
 8006a40:	e04c      	b.n	8006adc <I2C_Master_SB+0xc8>
    }
    else
    {
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	f042 0201 	orr.w	r2, r2, #1
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	611a      	str	r2, [r3, #16]
 8006a54:	e042      	b.n	8006adc <I2C_Master_SB+0xc8>
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a5e:	d118      	bne.n	8006a92 <I2C_Master_SB+0x7e>
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b21      	cmp	r3, #33	; 0x21
 8006a6a:	d108      	bne.n	8006a7e <I2C_Master_SB+0x6a>
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a7a:	611a      	str	r2, [r3, #16]
 8006a7c:	e02e      	b.n	8006adc <I2C_Master_SB+0xc8>
      }
      else
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	f042 0201 	orr.w	r2, r2, #1
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	611a      	str	r2, [r3, #16]
 8006a90:	e024      	b.n	8006adc <I2C_Master_SB+0xc8>
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10e      	bne.n	8006ab8 <I2C_Master_SB+0xa4>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006aa2:	b292      	uxth	r2, r2
 8006aa4:	11d2      	asrs	r2, r2, #7
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	f002 0206 	and.w	r2, r2, #6
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	f062 020f 	orn	r2, r2, #15
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	611a      	str	r2, [r3, #16]
 8006ab6:	e011      	b.n	8006adc <I2C_Master_SB+0xc8>
      }
      else if(hi2c->EventCount == 1U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d10d      	bne.n	8006adc <I2C_Master_SB+0xc8>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006ac8:	b292      	uxth	r2, r2
 8006aca:	11d2      	asrs	r2, r2, #7
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	f002 0206 	and.w	r2, r2, #6
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	f062 020e 	orn	r2, r2, #14
 8006ad8:	b2d2      	uxtb	r2, r2
 8006ada:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b091      	sub	sp, #68	; 0x44
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State         = hi2c->PreviousState;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b22      	cmp	r3, #34	; 0x22
 8006b34:	f040 813b 	bne.w	8006dae <I2C_Master_ADDR+0x2a2>
  {
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10e      	bne.n	8006b5e <I2C_Master_ADDR+0x52>
 8006b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b42:	2b40      	cmp	r3, #64	; 0x40
 8006b44:	d10b      	bne.n	8006b5e <I2C_Master_ADDR+0x52>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b46:	2300      	movs	r3, #0
 8006b48:	633b      	str	r3, [r7, #48]	; 0x30
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	633b      	str	r3, [r7, #48]	; 0x30
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	633b      	str	r3, [r7, #48]	; 0x30
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	e132      	b.n	8006dc4 <I2C_Master_ADDR+0x2b8>
    }
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d11d      	bne.n	8006ba2 <I2C_Master_ADDR+0x96>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b6e:	d118      	bne.n	8006ba2 <I2C_Master_ADDR+0x96>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b70:	2300      	movs	r3, #0
 8006b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	6812      	ldr	r2, [r2, #0]
 8006b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b94:	601a      	str	r2, [r3, #0]
      
      hi2c->EventCount++;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	651a      	str	r2, [r3, #80]	; 0x50
 8006ba0:	e110      	b.n	8006dc4 <I2C_Master_ADDR+0x2b8>
    }
    else
    {
      if(hi2c->XferCount == 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d113      	bne.n	8006bd4 <I2C_Master_ADDR+0xc8>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bac:	2300      	movs	r3, #0
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6812      	ldr	r2, [r2, #0]
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e0e8      	b.n	8006da6 <I2C_Master_ADDR+0x29a>
      }
      else if(hi2c->XferCount == 1U)   
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	f040 8082 	bne.w	8006ce4 <I2C_Master_ADDR+0x1d8>
      {
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006be6:	d137      	bne.n	8006c58 <I2C_Master_ADDR+0x14c>
        {
          /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	6812      	ldr	r2, [r2, #0]
 8006bf0:	6812      	ldr	r2, [r2, #0]
 8006bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf6:	601a      	str	r2, [r3, #0]

          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c06:	d113      	bne.n	8006c30 <I2C_Master_ADDR+0x124>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c16:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	e0ba      	b.n	8006da6 <I2C_Master_ADDR+0x29a>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c30:	2300      	movs	r3, #0
 8006c32:	623b      	str	r3, [r7, #32]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	623b      	str	r3, [r7, #32]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	623b      	str	r3, [r7, #32]
 8006c44:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	6812      	ldr	r2, [r2, #0]
 8006c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	e0a6      	b.n	8006da6 <I2C_Master_ADDR+0x29a>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d026      	beq.n	8006cac <I2C_Master_ADDR+0x1a0>
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d023      	beq.n	8006cac <I2C_Master_ADDR+0x1a0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8006c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c66:	2b12      	cmp	r3, #18
 8006c68:	d020      	beq.n	8006cac <I2C_Master_ADDR+0x1a0>
        {
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d008      	beq.n	8006c84 <I2C_Master_ADDR+0x178>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6812      	ldr	r2, [r2, #0]
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	e007      	b.n	8006c94 <I2C_Master_ADDR+0x188>
          }
          else
          {
            /* Enable Acknowledge */
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	6812      	ldr	r2, [r2, #0]
 8006c8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c92:	601a      	str	r2, [r3, #0]
          }
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c94:	2300      	movs	r3, #0
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	e07c      	b.n	8006da6 <I2C_Master_ADDR+0x29a>
        }
        else
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6812      	ldr	r2, [r2, #0]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cba:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	61bb      	str	r3, [r7, #24]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	69bb      	ldr	r3, [r7, #24]
          
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6812      	ldr	r2, [r2, #0]
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	e060      	b.n	8006da6 <I2C_Master_ADDR+0x29a>
        }
      }
      else if(hi2c->XferCount == 2U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d138      	bne.n	8006d60 <I2C_Master_ADDR+0x254>
      {
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d010      	beq.n	8006d18 <I2C_Master_ADDR+0x20c>
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6812      	ldr	r2, [r2, #0]
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d04:	601a      	str	r2, [r3, #0]
          
          /* Enable Pos */
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6812      	ldr	r2, [r2, #0]
 8006d0e:	6812      	ldr	r2, [r2, #0]
 8006d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	e007      	b.n	8006d28 <I2C_Master_ADDR+0x21c>
        }
        else
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6812      	ldr	r2, [r2, #0]
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d26:	601a      	str	r2, [r3, #0]
        }

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d36:	d107      	bne.n	8006d48 <I2C_Master_ADDR+0x23c>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6812      	ldr	r2, [r2, #0]
 8006d40:	6852      	ldr	r2, [r2, #4]
 8006d42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d46:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	e022      	b.n	8006da6 <I2C_Master_ADDR+0x29a>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6812      	ldr	r2, [r2, #0]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d6e:	601a      	str	r2, [r3, #0]

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d7e:	d107      	bne.n	8006d90 <I2C_Master_ADDR+0x284>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6812      	ldr	r2, [r2, #0]
 8006d88:	6852      	ldr	r2, [r2, #4]
 8006d8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d8e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d90:	2300      	movs	r3, #0
 8006d92:	613b      	str	r3, [r7, #16]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	693b      	ldr	r3, [r7, #16]
      }
      
      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	651a      	str	r2, [r3, #80]	; 0x50
 8006dac:	e00a      	b.n	8006dc4 <I2C_Master_ADDR+0x2b8>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
  }

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3744      	adds	r7, #68	; 0x44
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d029      	beq.n	8006e42 <I2C_SlaveTransmit_TXE+0x70>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	1c58      	adds	r0, r3, #1
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	6248      	str	r0, [r1, #36]	; 0x24
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d114      	bne.n	8006e42 <I2C_SlaveTransmit_TXE+0x70>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b29      	cmp	r3, #41	; 0x29
 8006e1c:	d111      	bne.n	8006e42 <I2C_SlaveTransmit_TXE+0x70>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6812      	ldr	r2, [r2, #0]
 8006e26:	6852      	ldr	r2, [r2, #4]
 8006e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e2c:	605a      	str	r2, [r3, #4]
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2221      	movs	r2, #33	; 0x21
 8006e32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2228      	movs	r2, #40	; 0x28
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      
      /* Call the Tx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff fabb 	bl	80063b8 <HAL_I2C_SlaveTxCpltCallback>
    }
  }
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00f      	beq.n	8006e7e <I2C_SlaveTransmit_BTF+0x32>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	1c58      	adds	r0, r3, #1
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	6248      	str	r0, [r1, #36]	; 0x24
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d02a      	beq.n	8006efe <I2C_SlaveReceive_RXNE+0x72>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	1c59      	adds	r1, r3, #1
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	6251      	str	r1, [r2, #36]	; 0x24
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	6912      	ldr	r2, [r2, #16]
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d114      	bne.n	8006efe <I2C_SlaveReceive_RXNE+0x72>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed8:	d111      	bne.n	8006efe <I2C_SlaveReceive_RXNE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	6852      	ldr	r2, [r2, #4]
 8006ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2222      	movs	r2, #34	; 0x22
 8006eee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2228      	movs	r2, #40	; 0x28
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the Rx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff fa67 	bl	80063cc <HAL_I2C_SlaveRxCpltCallback>
    }
  }
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d010      	beq.n	8006f3c <I2C_SlaveReceive_BTF+0x34>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	1c59      	adds	r1, r3, #1
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6251      	str	r1, [r2, #36]	; 0x24
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6812      	ldr	r2, [r2, #0]
 8006f28:	6912      	ldr	r2, [r2, #16]
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006f52:	2300      	movs	r3, #0
 8006f54:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	81bb      	strh	r3, [r7, #12]

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d001      	beq.n	8006f6c <I2C_Slave_ADDR+0x22>
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f76:	2b80      	cmp	r3, #128	; 0x80
 8006f78:	d003      	beq.n	8006f82 <I2C_Slave_ADDR+0x38>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	81bb      	strh	r3, [r7, #12]
 8006f80:	e002      	b.n	8006f88 <I2C_Slave_ADDR+0x3e>
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	81bb      	strh	r3, [r7, #12]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006f88:	89ba      	ldrh	r2, [r7, #12]
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff fa26 	bl	80063e0 <HAL_I2C_AddrCallback>

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	60fb      	str	r3, [r7, #12]
  
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6812      	ldr	r2, [r2, #0]
 8006fb8:	6852      	ldr	r2, [r2, #4]
 8006fba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fbe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60bb      	str	r3, [r7, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	60bb      	str	r3, [r7, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	6812      	ldr	r2, [r2, #0]
 8006fd6:	f042 0201 	orr.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	6812      	ldr	r2, [r2, #0]
 8006fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ffc:	d11a      	bne.n	8007034 <I2C_Slave_STOPF+0x96>
  {
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b22      	cmp	r3, #34	; 0x22
 8007008:	d005      	beq.n	8007016 <I2C_Slave_STOPF+0x78>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b2a      	cmp	r3, #42	; 0x2a
 8007014:	d107      	bne.n	8007026 <I2C_Slave_STOPF+0x88>
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	b29a      	uxth	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007024:	e006      	b.n	8007034 <I2C_Slave_STOPF+0x96>
    }
    else
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	b29a      	uxth	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if(hi2c->XferCount != 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d035      	beq.n	80070aa <I2C_Slave_STOPF+0x10c>
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b04      	cmp	r3, #4
 800704a:	d110      	bne.n	800706e <I2C_Slave_STOPF+0xd0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	1c59      	adds	r1, r3, #1
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6251      	str	r1, [r2, #36]	; 0x24
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6812      	ldr	r2, [r2, #0]
 800705a:	6912      	ldr	r2, [r2, #16]
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	b29a      	uxth	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007078:	2b40      	cmp	r3, #64	; 0x40
 800707a:	d110      	bne.n	800709e <I2C_Slave_STOPF+0x100>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	1c59      	adds	r1, r3, #1
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6251      	str	r1, [r2, #36]	; 0x24
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	6912      	ldr	r2, [r2, #16]
 800708c:	b2d2      	uxtb	r2, r2
 800708e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	f043 0204 	orr.w	r2, r3, #4
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <I2C_Slave_STOPF+0x11c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f8aa 	bl	800720c <I2C_ITError>
 80070b8:	e02f      	b.n	800711a <I2C_Slave_STOPF+0x17c>
  }
  else
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b28      	cmp	r3, #40	; 0x28
 80070be:	d005      	beq.n	80070cc <I2C_Slave_STOPF+0x12e>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b2a      	cmp	r3, #42	; 0x2a
 80070c4:	d002      	beq.n	80070cc <I2C_Slave_STOPF+0x12e>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b29      	cmp	r3, #41	; 0x29
 80070ca:	d111      	bne.n	80070f0 <I2C_Slave_STOPF+0x152>
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a15      	ldr	r2, [pc, #84]	; (8007124 <I2C_Slave_STOPF+0x186>)
 80070d0:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2220      	movs	r2, #32
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff f987 	bl	80063fc <HAL_I2C_ListenCpltCallback>
 80070ee:	e014      	b.n	800711a <I2C_Slave_STOPF+0x17c>
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	2b22      	cmp	r3, #34	; 0x22
 80070f6:	d002      	beq.n	80070fe <I2C_Slave_STOPF+0x160>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b22      	cmp	r3, #34	; 0x22
 80070fc:	d10d      	bne.n	800711a <I2C_Slave_STOPF+0x17c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff f959 	bl	80063cc <HAL_I2C_SlaveRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	ffff0000 	.word	0xffff0000

08007128 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007136:	b2db      	uxtb	r3, r3
 8007138:	60fb      	str	r3, [r7, #12]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	60bb      	str	r3, [r7, #8]

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b04      	cmp	r3, #4
 8007144:	d002      	beq.n	800714c <I2C_Slave_AF+0x24>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b08      	cmp	r3, #8
 800714a:	d129      	bne.n	80071a0 <I2C_Slave_AF+0x78>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b28      	cmp	r3, #40	; 0x28
 8007150:	d126      	bne.n	80071a0 <I2C_Slave_AF+0x78>
          (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a2c      	ldr	r2, [pc, #176]	; (8007208 <I2C_Slave_AF+0xe0>)
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6812      	ldr	r2, [r2, #0]
 8007160:	6852      	ldr	r2, [r2, #4]
 8007162:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007166:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007170:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007180:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff f92f 	bl	80063fc <HAL_I2C_ListenCpltCallback>
 800719e:	e02e      	b.n	80071fe <I2C_Slave_AF+0xd6>
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b21      	cmp	r3, #33	; 0x21
 80071a4:	d126      	bne.n	80071f4 <I2C_Slave_AF+0xcc>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a17      	ldr	r2, [pc, #92]	; (8007208 <I2C_Slave_AF+0xe0>)
 80071aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2221      	movs	r2, #33	; 0x21
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	6852      	ldr	r2, [r2, #4]
 80071cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071d0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071da:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ea:	601a      	str	r2, [r3, #0]

    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff f8e3 	bl	80063b8 <HAL_I2C_SlaveTxCpltCallback>
 80071f2:	e004      	b.n	80071fe <I2C_Slave_AF+0xd6>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071fc:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	ffff0000 	.word	0xffff0000

0800720c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721a:	b2db      	uxtb	r3, r3
 800721c:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b29      	cmp	r3, #41	; 0x29
 8007222:	d002      	beq.n	800722a <I2C_ITError+0x1e>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b2a      	cmp	r3, #42	; 0x2a
 8007228:	d107      	bne.n	800723a <I2C_ITError+0x2e>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2228      	movs	r2, #40	; 0x28
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007238:	e018      	b.n	800726c <I2C_ITError+0x60>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b60      	cmp	r3, #96	; 0x60
 8007244:	d00b      	beq.n	800725e <I2C_ITError+0x52>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007254:	d003      	beq.n	800725e <I2C_ITError+0x52>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6812      	ldr	r2, [r2, #0]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800727a:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800728a:	d160      	bne.n	800734e <I2C_ITError+0x142>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	6852      	ldr	r2, [r2, #4]
 8007296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800729a:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d020      	beq.n	80072ec <I2C_ITError+0xe0>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ae:	4a57      	ldr	r2, [pc, #348]	; (800740c <I2C_ITError+0x200>)
 80072b0:	651a      	str	r2, [r3, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fa ffa7 	bl	800220a <HAL_DMA_Abort_IT>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8083 	beq.w	80073ca <I2C_ITError+0x1be>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6812      	ldr	r2, [r2, #0]
 80072cc:	6812      	ldr	r2, [r2, #0]
 80072ce:	f022 0201 	bic.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80072e6:	4610      	mov	r0, r2
 80072e8:	4798      	blx	r3
 80072ea:	e06e      	b.n	80073ca <I2C_ITError+0x1be>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	4a46      	ldr	r2, [pc, #280]	; (800740c <I2C_ITError+0x200>)
 80072f2:	651a      	str	r2, [r3, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fa ff86 	bl	800220a <HAL_DMA_Abort_IT>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d062      	beq.n	80073ca <I2C_ITError+0x1be>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730e:	2b40      	cmp	r3, #64	; 0x40
 8007310:	d109      	bne.n	8007326 <I2C_ITError+0x11a>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	1c59      	adds	r1, r3, #1
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6251      	str	r1, [r2, #36]	; 0x24
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6812      	ldr	r2, [r2, #0]
 8007320:	6912      	ldr	r2, [r2, #16]
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	f022 0201 	bic.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2220      	movs	r2, #32
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007348:	4610      	mov	r0, r2
 800734a:	4798      	blx	r3
 800734c:	e03d      	b.n	80073ca <I2C_ITError+0x1be>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b60      	cmp	r3, #96	; 0x60
 8007358:	d123      	bne.n	80073a2 <I2C_ITError+0x196>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d109      	bne.n	800738a <I2C_ITError+0x17e>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	1c59      	adds	r1, r3, #1
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6251      	str	r1, [r2, #36]	; 0x24
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6812      	ldr	r2, [r2, #0]
 8007384:	6912      	ldr	r2, [r2, #16]
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	6812      	ldr	r2, [r2, #0]
 8007394:	f022 0201 	bic.w	r2, r2, #1
 8007398:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff f856 	bl	800644c <HAL_I2C_AbortCpltCallback>
 80073a0:	e013      	b.n	80073ca <I2C_ITError+0x1be>
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ac:	2b40      	cmp	r3, #64	; 0x40
 80073ae:	d109      	bne.n	80073c4 <I2C_ITError+0x1b8>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	1c59      	adds	r1, r3, #1
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6251      	str	r1, [r2, #36]	; 0x24
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6812      	ldr	r2, [r2, #0]
 80073be:	6912      	ldr	r2, [r2, #16]
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	701a      	strb	r2, [r3, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff f837 	bl	8006438 <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b28      	cmp	r3, #40	; 0x28
 80073d4:	d116      	bne.n	8007404 <I2C_ITError+0x1f8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	f003 0304 	and.w	r3, r3, #4
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d110      	bne.n	8007404 <I2C_ITError+0x1f8>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <I2C_ITError+0x204>)
 80073e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fe fffc 	bl	80063fc <HAL_I2C_ListenCpltCallback>
  }
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	08007ad7 	.word	0x08007ad7
 8007410:	ffff0000 	.word	0xffff0000

08007414 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af02      	add	r7, sp, #8
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	607a      	str	r2, [r7, #4]
 800741e:	603b      	str	r3, [r7, #0]
 8007420:	460b      	mov	r3, r1
 8007422:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b04      	cmp	r3, #4
 800742e:	d006      	beq.n	800743e <I2C_MasterRequestWrite+0x2a>
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d003      	beq.n	800743e <I2C_MasterRequestWrite+0x2a>
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800743c:	d108      	bne.n	8007450 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	6812      	ldr	r2, [r2, #0]
 8007446:	6812      	ldr	r2, [r2, #0]
 8007448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e00b      	b.n	8007468 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	2b12      	cmp	r3, #18
 8007456:	d107      	bne.n	8007468 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	6812      	ldr	r2, [r2, #0]
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007466:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fb7c 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e040      	b.n	8007506 <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800748c:	d107      	bne.n	800749e <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	897a      	ldrh	r2, [r7, #10]
 8007494:	b2d2      	uxtb	r2, r2
 8007496:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800749a:	611a      	str	r2, [r3, #16]
 800749c:	e021      	b.n	80074e2 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	897a      	ldrh	r2, [r7, #10]
 80074a4:	11d2      	asrs	r2, r2, #7
 80074a6:	b2d2      	uxtb	r2, r2
 80074a8:	f002 0206 	and.w	r2, r2, #6
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	f062 020f 	orn	r2, r2, #15
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	4915      	ldr	r1, [pc, #84]	; (8007510 <I2C_MasterRequestWrite+0xfc>)
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 fba9 	bl	8007c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d007      	beq.n	80074d8 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d101      	bne.n	80074d4 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e018      	b.n	8007506 <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e016      	b.n	8007506 <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	897a      	ldrh	r2, [r7, #10]
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	490b      	ldr	r1, [pc, #44]	; (8007514 <I2C_MasterRequestWrite+0x100>)
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 fb93 	bl	8007c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d007      	beq.n	8007504 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d101      	bne.n	8007500 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e002      	b.n	8007506 <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e000      	b.n	8007506 <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	00010008 	.word	0x00010008
 8007514:	00010002 	.word	0x00010002

08007518 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af02      	add	r7, sp, #8
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	607a      	str	r2, [r7, #4]
 8007522:	603b      	str	r3, [r7, #0]
 8007524:	460b      	mov	r3, r1
 8007526:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	6812      	ldr	r2, [r2, #0]
 8007536:	6812      	ldr	r2, [r2, #0]
 8007538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800753c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b04      	cmp	r3, #4
 8007542:	d006      	beq.n	8007552 <I2C_MasterRequestRead+0x3a>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d003      	beq.n	8007552 <I2C_MasterRequestRead+0x3a>
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007550:	d108      	bne.n	8007564 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	6812      	ldr	r2, [r2, #0]
 800755c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	e00b      	b.n	800757c <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	2b11      	cmp	r3, #17
 800756a:	d107      	bne.n	800757c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	6812      	ldr	r2, [r2, #0]
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800757a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 faf2 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e07f      	b.n	8007698 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075a0:	d108      	bne.n	80075b4 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	897a      	ldrh	r2, [r7, #10]
 80075a8:	b2d2      	uxtb	r2, r2
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	611a      	str	r2, [r3, #16]
 80075b2:	e05f      	b.n	8007674 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	897a      	ldrh	r2, [r7, #10]
 80075ba:	11d2      	asrs	r2, r2, #7
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	f002 0206 	and.w	r2, r2, #6
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	f062 020f 	orn	r2, r2, #15
 80075c8:	b2d2      	uxtb	r2, r2
 80075ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	4933      	ldr	r1, [pc, #204]	; (80076a0 <I2C_MasterRequestRead+0x188>)
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fb1e 	bl	8007c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d101      	bne.n	80075ea <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e056      	b.n	8007698 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e054      	b.n	8007698 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	897a      	ldrh	r2, [r7, #10]
 80075f4:	b2d2      	uxtb	r2, r2
 80075f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	4929      	ldr	r1, [pc, #164]	; (80076a4 <I2C_MasterRequestRead+0x18c>)
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 fb08 	bl	8007c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d007      	beq.n	800761a <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	2b04      	cmp	r3, #4
 8007610:	d101      	bne.n	8007616 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e040      	b.n	8007698 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e03e      	b.n	8007698 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800761a:	2300      	movs	r3, #0
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	6812      	ldr	r2, [r2, #0]
 8007638:	6812      	ldr	r2, [r2, #0]
 800763a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800763e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 fa90 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e01d      	b.n	8007698 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	897a      	ldrh	r2, [r7, #10]
 8007662:	11d2      	asrs	r2, r2, #7
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	f002 0206 	and.w	r2, r2, #6
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	f062 020e 	orn	r2, r2, #14
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	490a      	ldr	r1, [pc, #40]	; (80076a4 <I2C_MasterRequestRead+0x18c>)
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 faca 	bl	8007c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d007      	beq.n	8007696 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	2b04      	cmp	r3, #4
 800768c:	d101      	bne.n	8007692 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e002      	b.n	8007698 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e000      	b.n	8007698 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	00010008 	.word	0x00010008
 80076a4:	00010002 	.word	0x00010002

080076a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	4608      	mov	r0, r1
 80076b2:	4611      	mov	r1, r2
 80076b4:	461a      	mov	r2, r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	817b      	strh	r3, [r7, #10]
 80076ba:	460b      	mov	r3, r1
 80076bc:	813b      	strh	r3, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	6812      	ldr	r2, [r2, #0]
 80076ca:	6812      	ldr	r2, [r2, #0]
 80076cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	2200      	movs	r2, #0
 80076da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fa47 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e068      	b.n	80077c0 <I2C_RequestMemoryWrite+0x118>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	897a      	ldrh	r2, [r7, #10]
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	6a3a      	ldr	r2, [r7, #32]
 8007700:	4931      	ldr	r1, [pc, #196]	; (80077c8 <I2C_RequestMemoryWrite+0x120>)
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fa86 	bl	8007c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d007      	beq.n	800771e <I2C_RequestMemoryWrite+0x76>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	2b04      	cmp	r3, #4
 8007714:	d101      	bne.n	800771a <I2C_RequestMemoryWrite+0x72>
    {
      return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e052      	b.n	80077c0 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e050      	b.n	80077c0 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800771e:	2300      	movs	r3, #0
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007736:	6a39      	ldr	r1, [r7, #32]
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 fad9 	bl	8007cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00f      	beq.n	8007764 <I2C_RequestMemoryWrite+0xbc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	2b04      	cmp	r3, #4
 800774a:	d109      	bne.n	8007760 <I2C_RequestMemoryWrite+0xb8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	6812      	ldr	r2, [r2, #0]
 8007754:	6812      	ldr	r2, [r2, #0]
 8007756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800775a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e02f      	b.n	80077c0 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e02d      	b.n	80077c0 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d105      	bne.n	8007776 <I2C_RequestMemoryWrite+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	893a      	ldrh	r2, [r7, #8]
 8007770:	b2d2      	uxtb	r2, r2
 8007772:	611a      	str	r2, [r3, #16]
 8007774:	e023      	b.n	80077be <I2C_RequestMemoryWrite+0x116>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	893a      	ldrh	r2, [r7, #8]
 800777c:	0a12      	lsrs	r2, r2, #8
 800777e:	b292      	uxth	r2, r2
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007786:	6a39      	ldr	r1, [r7, #32]
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 fab1 	bl	8007cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00f      	beq.n	80077b4 <I2C_RequestMemoryWrite+0x10c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007798:	2b04      	cmp	r3, #4
 800779a:	d109      	bne.n	80077b0 <I2C_RequestMemoryWrite+0x108>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	6812      	ldr	r2, [r2, #0]
 80077a4:	6812      	ldr	r2, [r2, #0]
 80077a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077aa:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e007      	b.n	80077c0 <I2C_RequestMemoryWrite+0x118>
      }
      else
      {
        return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e005      	b.n	80077c0 <I2C_RequestMemoryWrite+0x118>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	893a      	ldrh	r2, [r7, #8]
 80077ba:	b2d2      	uxtb	r2, r2
 80077bc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	00010002 	.word	0x00010002

080077cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af02      	add	r7, sp, #8
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	4608      	mov	r0, r1
 80077d6:	4611      	mov	r1, r2
 80077d8:	461a      	mov	r2, r3
 80077da:	4603      	mov	r3, r0
 80077dc:	817b      	strh	r3, [r7, #10]
 80077de:	460b      	mov	r3, r1
 80077e0:	813b      	strh	r3, [r7, #8]
 80077e2:	4613      	mov	r3, r2
 80077e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	6812      	ldr	r2, [r2, #0]
 80077ee:	6812      	ldr	r2, [r2, #0]
 80077f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	6812      	ldr	r2, [r2, #0]
 80077fe:	6812      	ldr	r2, [r2, #0]
 8007800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007804:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	2200      	movs	r2, #0
 800780e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 f9ad 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e0af      	b.n	8007982 <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	897a      	ldrh	r2, [r7, #10]
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800782e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	6a3a      	ldr	r2, [r7, #32]
 8007834:	4955      	ldr	r1, [pc, #340]	; (800798c <I2C_RequestMemoryRead+0x1c0>)
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 f9ec 	bl	8007c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d007      	beq.n	8007852 <I2C_RequestMemoryRead+0x86>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	2b04      	cmp	r3, #4
 8007848:	d101      	bne.n	800784e <I2C_RequestMemoryRead+0x82>
    {
      return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e099      	b.n	8007982 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e097      	b.n	8007982 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	617b      	str	r3, [r7, #20]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	617b      	str	r3, [r7, #20]
 8007866:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786a:	6a39      	ldr	r1, [r7, #32]
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 fa3f 	bl	8007cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00f      	beq.n	8007898 <I2C_RequestMemoryRead+0xcc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	2b04      	cmp	r3, #4
 800787e:	d109      	bne.n	8007894 <I2C_RequestMemoryRead+0xc8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	6812      	ldr	r2, [r2, #0]
 800788a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800788e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e076      	b.n	8007982 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e074      	b.n	8007982 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d105      	bne.n	80078aa <I2C_RequestMemoryRead+0xde>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	893a      	ldrh	r2, [r7, #8]
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	611a      	str	r2, [r3, #16]
 80078a8:	e023      	b.n	80078f2 <I2C_RequestMemoryRead+0x126>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	893a      	ldrh	r2, [r7, #8]
 80078b0:	0a12      	lsrs	r2, r2, #8
 80078b2:	b292      	uxth	r2, r2
 80078b4:	b2d2      	uxtb	r2, r2
 80078b6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ba:	6a39      	ldr	r1, [r7, #32]
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fa17 	bl	8007cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00f      	beq.n	80078e8 <I2C_RequestMemoryRead+0x11c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d109      	bne.n	80078e4 <I2C_RequestMemoryRead+0x118>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	6812      	ldr	r2, [r2, #0]
 80078d8:	6812      	ldr	r2, [r2, #0]
 80078da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078de:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e04e      	b.n	8007982 <I2C_RequestMemoryRead+0x1b6>
      }
      else
      {
        return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e04c      	b.n	8007982 <I2C_RequestMemoryRead+0x1b6>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	893a      	ldrh	r2, [r7, #8]
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f4:	6a39      	ldr	r1, [r7, #32]
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 f9fa 	bl	8007cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00f      	beq.n	8007922 <I2C_RequestMemoryRead+0x156>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	2b04      	cmp	r3, #4
 8007908:	d109      	bne.n	800791e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	6812      	ldr	r2, [r2, #0]
 8007912:	6812      	ldr	r2, [r2, #0]
 8007914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007918:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e031      	b.n	8007982 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e02f      	b.n	8007982 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	6812      	ldr	r2, [r2, #0]
 800792a:	6812      	ldr	r2, [r2, #0]
 800792c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007930:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	2200      	movs	r2, #0
 800793a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 f917 	bl	8007b72 <I2C_WaitOnFlagUntilTimeout>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <I2C_RequestMemoryRead+0x182>
  {
    return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e019      	b.n	8007982 <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	897a      	ldrh	r2, [r7, #10]
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	f042 0201 	orr.w	r2, r2, #1
 800795a:	b2d2      	uxtb	r2, r2
 800795c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	6a3a      	ldr	r2, [r7, #32]
 8007962:	490a      	ldr	r1, [pc, #40]	; (800798c <I2C_RequestMemoryRead+0x1c0>)
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f955 	bl	8007c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d007      	beq.n	8007980 <I2C_RequestMemoryRead+0x1b4>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	2b04      	cmp	r3, #4
 8007976:	d101      	bne.n	800797c <I2C_RequestMemoryRead+0x1b0>
    {
      return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e002      	b.n	8007982 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e000      	b.n	8007982 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	00010002 	.word	0x00010002

08007990 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	617b      	str	r3, [r7, #20]
  
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	613b      	str	r3, [r7, #16]
  uint32_t CurrentMode  = hi2c->Mode;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b21      	cmp	r3, #33	; 0x21
 80079b6:	d005      	beq.n	80079c4 <I2C_DMAXferCplt+0x34>
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2b22      	cmp	r3, #34	; 0x22
 80079bc:	d116      	bne.n	80079ec <I2C_DMAXferCplt+0x5c>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b20      	cmp	r3, #32
 80079c2:	d113      	bne.n	80079ec <I2C_DMAXferCplt+0x5c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	6812      	ldr	r2, [r2, #0]
 80079cc:	6852      	ldr	r2, [r2, #4]
 80079ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079d2:	605a      	str	r2, [r3, #4]
    
    hi2c->XferCount = 0U;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2200      	movs	r2, #0
 80079d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	6812      	ldr	r2, [r2, #0]
 80079e2:	6852      	ldr	r2, [r2, #4]
 80079e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80079e8:	605a      	str	r2, [r3, #4]

        HAL_I2C_MasterRxCpltCallback(hi2c);
      }
    }
  }
}
 80079ea:	e043      	b.n	8007a74 <I2C_DMAXferCplt+0xe4>
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	6812      	ldr	r2, [r2, #0]
 80079f4:	6812      	ldr	r2, [r2, #0]
 80079f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079fa:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	6812      	ldr	r2, [r2, #0]
 8007a04:	6812      	ldr	r2, [r2, #0]
 8007a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a0a:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR2 &= ~I2C_CR2_LAST;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	6852      	ldr	r2, [r2, #4]
 8007a16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a1a:	605a      	str	r2, [r3, #4]
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	6812      	ldr	r2, [r2, #0]
 8007a24:	6852      	ldr	r2, [r2, #4]
 8007a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a2a:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <I2C_DMAXferCplt+0xb2>
      HAL_I2C_ErrorCallback(hi2c);
 8007a3a:	6978      	ldr	r0, [r7, #20]
 8007a3c:	f7fe fcfc 	bl	8006438 <HAL_I2C_ErrorCallback>
}
 8007a40:	e018      	b.n	8007a74 <I2C_DMAXferCplt+0xe4>
      hi2c->State = HAL_I2C_STATE_READY;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b40      	cmp	r3, #64	; 0x40
 8007a54:	d107      	bne.n	8007a66 <I2C_DMAXferCplt+0xd6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007a5e:	6978      	ldr	r0, [r7, #20]
 8007a60:	f7fe fce0 	bl	8006424 <HAL_I2C_MemRxCpltCallback>
}
 8007a64:	e006      	b.n	8007a74 <I2C_DMAXferCplt+0xe4>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007a6e:	6978      	ldr	r0, [r7, #20]
 8007a70:	f7fe fc98 	bl	80063a4 <HAL_I2C_MasterRxCpltCallback>
}
 8007a74:	bf00      	nop
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	60fb      	str	r3, [r7, #12]
  
  /* Ignore DMA FIFO error */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7fa ff12 	bl	80028b4 <HAL_DMA_GetError>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d01b      	beq.n	8007ace <I2C_DMAError+0x52>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	6812      	ldr	r2, [r2, #0]
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa4:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac0:	f043 0210 	orr.w	r2, r3, #16
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_I2C_ErrorCallback(hi2c);
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7fe fcb5 	bl	8006438 <HAL_I2C_ErrorCallback>
  }
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae2:	60fb      	str	r3, [r7, #12]
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	6812      	ldr	r2, [r2, #0]
 8007aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007af2:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afe:	2200      	movs	r2, #0
 8007b00:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	2200      	movs	r2, #0
 8007b08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b60      	cmp	r3, #96	; 0x60
 8007b14:	d116      	bne.n	8007b44 <I2C_DMAAbort+0x6e>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	6812      	ldr	r2, [r2, #0]
 8007b36:	f022 0201 	bic.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7fe fc85 	bl	800644c <HAL_I2C_AbortCpltCallback>
    __HAL_I2C_DISABLE(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 8007b42:	e012      	b.n	8007b6a <I2C_DMAAbort+0x94>
    hi2c->State = HAL_I2C_STATE_READY;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE(hi2c);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	6812      	ldr	r2, [r2, #0]
 8007b5c:	6812      	ldr	r2, [r2, #0]
 8007b5e:	f022 0201 	bic.w	r2, r2, #1
 8007b62:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7fe fc67 	bl	8006438 <HAL_I2C_ErrorCallback>
}
 8007b6a:	bf00      	nop
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	603b      	str	r3, [r7, #0]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8007b82:	e01f      	b.n	8007bc4 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d01b      	beq.n	8007bc4 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d007      	beq.n	8007ba2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b92:	f7f8 fbcd 	bl	8000330 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	1ad2      	subs	r2, r2, r3
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d910      	bls.n	8007bc4 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e023      	b.n	8007c0c <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	0c1b      	lsrs	r3, r3, #16
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d10d      	bne.n	8007bea <I2C_WaitOnFlagUntilTimeout+0x78>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	43da      	mvns	r2, r3
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bf0c      	ite	eq
 8007be0:	2301      	moveq	r3, #1
 8007be2:	2300      	movne	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	e00c      	b.n	8007c04 <I2C_WaitOnFlagUntilTimeout+0x92>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	43da      	mvns	r2, r3
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	bf0c      	ite	eq
 8007bfc:	2301      	moveq	r3, #1
 8007bfe:	2300      	movne	r3, #0
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d0bc      	beq.n	8007b84 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c22:	e040      	b.n	8007ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c32:	d11c      	bne.n	8007c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	6812      	ldr	r2, [r2, #0]
 8007c3c:	6812      	ldr	r2, [r2, #0]
 8007c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c4c:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2204      	movs	r2, #4
 8007c52:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e03c      	b.n	8007ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c74:	d017      	beq.n	8007ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d007      	beq.n	8007c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8007c7c:	f7f8 fb58 	bl	8000330 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	1ad2      	subs	r2, r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d90c      	bls.n	8007ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e020      	b.n	8007ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	0c1b      	lsrs	r3, r3, #16
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d10c      	bne.n	8007cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	43da      	mvns	r2, r3
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bf14      	ite	ne
 8007cc2:	2301      	movne	r3, #1
 8007cc4:	2300      	moveq	r3, #0
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	e00b      	b.n	8007ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	43da      	mvns	r2, r3
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	bf14      	ite	ne
 8007cdc:	2301      	movne	r3, #1
 8007cde:	2300      	moveq	r3, #0
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d19e      	bne.n	8007c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cfc:	e029      	b.n	8007d52 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 f8f3 	bl	8007eea <I2C_IsAcknowledgeFailed>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e029      	b.n	8007d62 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d14:	d01d      	beq.n	8007d52 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d007      	beq.n	8007d2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d1c:	f7f8 fb08 	bl	8000330 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	1ad2      	subs	r2, r2, r3
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d912      	bls.n	8007d52 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d30:	f043 0220 	orr.w	r2, r3, #32
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e007      	b.n	8007d62 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5c:	2b80      	cmp	r3, #128	; 0x80
 8007d5e:	d1ce      	bne.n	8007cfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d76:	e029      	b.n	8007dcc <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 f8b6 	bl	8007eea <I2C_IsAcknowledgeFailed>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e029      	b.n	8007ddc <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8e:	d01d      	beq.n	8007dcc <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d96:	f7f8 facb 	bl	8000330 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	1ad2      	subs	r2, r2, r3
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d912      	bls.n	8007dcc <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	f043 0220 	orr.w	r2, r3, #32
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e007      	b.n	8007ddc <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	f003 0304 	and.w	r3, r3, #4
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d1ce      	bne.n	8007d78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007df0:	e025      	b.n	8007e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 f879 	bl	8007eea <I2C_IsAcknowledgeFailed>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e025      	b.n	8007e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8007e08:	f7f8 fa92 	bl	8000330 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	1ad2      	subs	r2, r2, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d912      	bls.n	8007e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1c:	f043 0220 	orr.w	r2, r3, #32
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e007      	b.n	8007e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d1d2      	bne.n	8007df2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e62:	e036      	b.n	8007ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	f003 0310 	and.w	r3, r3, #16
 8007e6e:	2b10      	cmp	r3, #16
 8007e70:	d114      	bne.n	8007e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f06f 0210 	mvn.w	r2, #16
 8007e7a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e022      	b.n	8007ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8007ea2:	f7f8 fa45 	bl	8000330 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	1ad2      	subs	r2, r2, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d90f      	bls.n	8007ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	f043 0220 	orr.w	r2, r3, #32
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e007      	b.n	8007ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007edc:	2b40      	cmp	r3, #64	; 0x40
 8007ede:	d1c1      	bne.n	8007e64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f00:	d114      	bne.n	8007f2c <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f0a:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2204      	movs	r2, #4
 8007f10:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e000      	b.n	8007f2e <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop

08007f3c <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8007f46:	4b0e      	ldr	r3, [pc, #56]	; (8007f80 <HAL_PWREx_EnableBkUpReg+0x44>)
 8007f48:	2201      	movs	r2, #1
 8007f4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f4c:	f7f8 f9f0 	bl	8000330 <HAL_GetTick>
 8007f50:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8007f52:	e009      	b.n	8007f68 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8007f54:	f7f8 f9ec 	bl	8000330 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f62:	d901      	bls.n	8007f68 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e006      	b.n	8007f76 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <HAL_PWREx_EnableBkUpReg+0x48>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d1ef      	bne.n	8007f54 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	420e00a4 	.word	0x420e00a4
 8007f84:	40007000 	.word	0x40007000

08007f88 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 8007f92:	4b0e      	ldr	r3, [pc, #56]	; (8007fcc <HAL_PWREx_DisableBkUpReg+0x44>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f98:	f7f8 f9ca 	bl	8000330 <HAL_GetTick>
 8007f9c:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8007f9e:	e009      	b.n	8007fb4 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8007fa0:	f7f8 f9c6 	bl	8000330 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fae:	d901      	bls.n	8007fb4 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e006      	b.n	8007fc2 <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <HAL_PWREx_DisableBkUpReg+0x48>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	2b08      	cmp	r3, #8
 8007fbe:	d0ef      	beq.n	8007fa0 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	420e00a4 	.word	0x420e00a4
 8007fd0:	40007000 	.word	0x40007000

08007fd4 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8007fd8:	4b03      	ldr	r3, [pc, #12]	; (8007fe8 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8007fda:	2201      	movs	r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]
}
 8007fde:	bf00      	nop
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	420e0024 	.word	0x420e0024

08007fec <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8007ff0:	4b03      	ldr	r3, [pc, #12]	; (8008000 <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
}
 8007ff6:	bf00      	nop
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	420e0024 	.word	0x420e0024

08008004 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008004:	b480      	push	{r7}
 8008006:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <HAL_PWREx_GetVoltageRange+0x18>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8008010:	4618      	mov	r0, r3
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	40007000 	.word	0x40007000

08008020 <HAL_PWREx_ControlVoltageScaling>:
  * @note This API forces the PLL state ON to allow the possibility to configure the voltage scale 1 or 2.
  * @note The new voltage scale is active only when the PLL is ON.  
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 800802c:	2300      	movs	r3, #0
 800802e:	613b      	str	r3, [r7, #16]
 8008030:	4a35      	ldr	r2, [pc, #212]	; (8008108 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 8008032:	4b35      	ldr	r3, [pc, #212]	; (8008108 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 8008034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800803a:	6413      	str	r3, [r2, #64]	; 0x40
 800803c:	4b32      	ldr	r3, [pc, #200]	; (8008108 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 800803e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008044:	613b      	str	r3, [r7, #16]
 8008046:	693b      	ldr	r3, [r7, #16]
  
  /* Check if the PLL is used as system clock or not */
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008048:	4b2f      	ldr	r3, [pc, #188]	; (8008108 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f003 030c 	and.w	r3, r3, #12
 8008050:	2b08      	cmp	r3, #8
 8008052:	d051      	beq.n	80080f8 <HAL_PWREx_ControlVoltageScaling+0xd8>
  {
    /* Disable the main PLL */
    __HAL_RCC_PLL_DISABLE();
 8008054:	4b2d      	ldr	r3, [pc, #180]	; (800810c <HAL_PWREx_ControlVoltageScaling+0xec>)
 8008056:	2200      	movs	r2, #0
 8008058:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
 800805a:	f7f8 f969 	bl	8000330 <HAL_GetTick>
 800805e:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008060:	e008      	b.n	8008074 <HAL_PWREx_ControlVoltageScaling+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008062:	f7f8 f965 	bl	8000330 <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	2b02      	cmp	r3, #2
 800806e:	d901      	bls.n	8008074 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e044      	b.n	80080fe <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008074:	4b24      	ldr	r3, [pc, #144]	; (8008108 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1f0      	bne.n	8008062 <HAL_PWREx_ControlVoltageScaling+0x42>
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	4922      	ldr	r1, [pc, #136]	; (8008110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008086:	4b22      	ldr	r3, [pc, #136]	; (8008110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4313      	orrs	r3, r2
 8008092:	600b      	str	r3, [r1, #0]
 8008094:	4b1e      	ldr	r3, [pc, #120]	; (8008110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable the main PLL */
    __HAL_RCC_PLL_ENABLE();
 80080a0:	4b1a      	ldr	r3, [pc, #104]	; (800810c <HAL_PWREx_ControlVoltageScaling+0xec>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080a6:	f7f8 f943 	bl	8000330 <HAL_GetTick>
 80080aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080ac:	e008      	b.n	80080c0 <HAL_PWREx_ControlVoltageScaling+0xa0>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080ae:	f7f8 f93f 	bl	8000330 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d901      	bls.n	80080c0 <HAL_PWREx_ControlVoltageScaling+0xa0>
      {
        return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e01e      	b.n	80080fe <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080c0:	4b11      	ldr	r3, [pc, #68]	; (8008108 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0f0      	beq.n	80080ae <HAL_PWREx_ControlVoltageScaling+0x8e>
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080cc:	f7f8 f930 	bl	8000330 <HAL_GetTick>
 80080d0:	6178      	str	r0, [r7, #20]
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80080d2:	e009      	b.n	80080e8 <HAL_PWREx_ControlVoltageScaling+0xc8>
    {
      if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 80080d4:	f7f8 f92c 	bl	8000330 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080e2:	d901      	bls.n	80080e8 <HAL_PWREx_ControlVoltageScaling+0xc8>
      {
        return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e00a      	b.n	80080fe <HAL_PWREx_ControlVoltageScaling+0xde>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80080e8:	4b09      	ldr	r3, [pc, #36]	; (8008110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080f4:	d1ee      	bne.n	80080d4 <HAL_PWREx_ControlVoltageScaling+0xb4>
 80080f6:	e001      	b.n	80080fc <HAL_PWREx_ControlVoltageScaling+0xdc>
      } 
    }
  }
  else
  {
    return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e000      	b.n	80080fe <HAL_PWREx_ControlVoltageScaling+0xde>
  }

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	40023800 	.word	0x40023800
 800810c:	42470060 	.word	0x42470060
 8008110:	40007000 	.word	0x40007000

08008114 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800811e:	2300      	movs	r3, #0
 8008120:	603b      	str	r3, [r7, #0]
 8008122:	4a20      	ldr	r2, [pc, #128]	; (80081a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008124:	4b1f      	ldr	r3, [pc, #124]	; (80081a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800812c:	6413      	str	r3, [r2, #64]	; 0x40
 800812e:	4b1d      	ldr	r3, [pc, #116]	; (80081a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800813a:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800813c:	2201      	movs	r2, #1
 800813e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008140:	f7f8 f8f6 	bl	8000330 <HAL_GetTick>
 8008144:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008146:	e009      	b.n	800815c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008148:	f7f8 f8f2 	bl	8000330 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008156:	d901      	bls.n	800815c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e01f      	b.n	800819c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800815c:	4b13      	ldr	r3, [pc, #76]	; (80081ac <HAL_PWREx_EnableOverDrive+0x98>)
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008168:	d1ee      	bne.n	8008148 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800816a:	4b11      	ldr	r3, [pc, #68]	; (80081b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800816c:	2201      	movs	r2, #1
 800816e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008170:	f7f8 f8de 	bl	8000330 <HAL_GetTick>
 8008174:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008176:	e009      	b.n	800818c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008178:	f7f8 f8da 	bl	8000330 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008186:	d901      	bls.n	800818c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e007      	b.n	800819c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800818c:	4b07      	ldr	r3, [pc, #28]	; (80081ac <HAL_PWREx_EnableOverDrive+0x98>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008194:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008198:	d1ee      	bne.n	8008178 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	40023800 	.word	0x40023800
 80081a8:	420e0040 	.word	0x420e0040
 80081ac:	40007000 	.word	0x40007000
 80081b0:	420e0044 	.word	0x420e0044

080081b4 <HAL_PWREx_DisableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableOverDrive(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	607b      	str	r3, [r7, #4]
  
  __HAL_RCC_PWR_CLK_ENABLE();
 80081be:	2300      	movs	r3, #0
 80081c0:	603b      	str	r3, [r7, #0]
 80081c2:	4a20      	ldr	r2, [pc, #128]	; (8008244 <HAL_PWREx_DisableOverDrive+0x90>)
 80081c4:	4b1f      	ldr	r3, [pc, #124]	; (8008244 <HAL_PWREx_DisableOverDrive+0x90>)
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081cc:	6413      	str	r3, [r2, #64]	; 0x40
 80081ce:	4b1d      	ldr	r3, [pc, #116]	; (8008244 <HAL_PWREx_DisableOverDrive+0x90>)
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	683b      	ldr	r3, [r7, #0]
    
  /* Disable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
 80081da:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <HAL_PWREx_DisableOverDrive+0x94>)
 80081dc:	2200      	movs	r2, #0
 80081de:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80081e0:	f7f8 f8a6 	bl	8000330 <HAL_GetTick>
 80081e4:	6078      	str	r0, [r7, #4]
 
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80081e6:	e009      	b.n	80081fc <HAL_PWREx_DisableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80081e8:	f7f8 f8a2 	bl	8000330 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081f6:	d901      	bls.n	80081fc <HAL_PWREx_DisableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e01f      	b.n	800823c <HAL_PWREx_DisableOverDrive+0x88>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80081fc:	4b13      	ldr	r3, [pc, #76]	; (800824c <HAL_PWREx_DisableOverDrive+0x98>)
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008208:	d0ee      	beq.n	80081e8 <HAL_PWREx_DisableOverDrive+0x34>
    }
  } 
  
  /* Disable the Over-drive */
  __HAL_PWR_OVERDRIVE_DISABLE();
 800820a:	4b11      	ldr	r3, [pc, #68]	; (8008250 <HAL_PWREx_DisableOverDrive+0x9c>)
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008210:	f7f8 f88e 	bl	8000330 <HAL_GetTick>
 8008214:	6078      	str	r0, [r7, #4]

  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008216:	e009      	b.n	800822c <HAL_PWREx_DisableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008218:	f7f8 f88a 	bl	8000330 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008226:	d901      	bls.n	800822c <HAL_PWREx_DisableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e007      	b.n	800823c <HAL_PWREx_DisableOverDrive+0x88>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800822c:	4b07      	ldr	r3, [pc, #28]	; (800824c <HAL_PWREx_DisableOverDrive+0x98>)
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008238:	d0ee      	beq.n	8008218 <HAL_PWREx_DisableOverDrive+0x64>
    }
  }
  
  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	40023800 	.word	0x40023800
 8008248:	420e0044 	.word	0x420e0044
 800824c:	40007000 	.word	0x40007000
 8008250:	420e0040 	.word	0x420e0040

08008254 <HAL_PWREx_EnterUnderDriveSTOPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
HAL_StatusTypeDef HAL_PWREx_EnterUnderDriveSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008264:	2300      	movs	r3, #0
 8008266:	60bb      	str	r3, [r7, #8]
 8008268:	4a20      	ldr	r2, [pc, #128]	; (80082ec <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
 800826a:	4b20      	ldr	r3, [pc, #128]	; (80082ec <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008272:	6413      	str	r3, [r2, #64]	; 0x40
 8008274:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
 8008276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800827c:	60bb      	str	r3, [r7, #8]
 800827e:	68bb      	ldr	r3, [r7, #8]
  /* Enable the Under-drive Mode ---------------------------------------------*/
  /* Clear Under-drive flag */
  __HAL_PWR_CLEAR_ODRUDR_FLAG();
 8008280:	4a1b      	ldr	r2, [pc, #108]	; (80082f0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
 8008282:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800828a:	6053      	str	r3, [r2, #4]
  
  /* Enable the Under-drive */ 
  __HAL_PWR_UNDERDRIVE_ENABLE();
 800828c:	4a18      	ldr	r2, [pc, #96]	; (80082f0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
 800828e:	4b18      	ldr	r3, [pc, #96]	; (80082f0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8008296:	6013      	str	r3, [r2, #0]

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg1 = PWR->CR;
 8008298:	4b15      	ldr	r3, [pc, #84]	; (80082f0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS, LPDS, MRLUDS and LPLUDS bits */
  tmpreg1 &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS | PWR_CR_LPUDS | PWR_CR_MRUDS);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80082a4:	f023 0303 	bic.w	r3, r3, #3
 80082a8:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
  tmpreg1 |= Regulator;
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg1;
 80082b2:	4a0f      	ldr	r2, [pc, #60]	; (80082f0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80082b8:	4a0e      	ldr	r2, [pc, #56]	; (80082f4 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
 80082ba:	4b0e      	ldr	r3, [pc, #56]	; (80082f4 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	f043 0304 	orr.w	r3, r3, #4
 80082c2:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_SLEEPENTRY_WFI)
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d101      	bne.n	80082ce <HAL_PWREx_EnterUnderDriveSTOPMode+0x7a>
  __ASM volatile ("wfi");
 80082ca:	bf30      	wfi
 80082cc:	e000      	b.n	80082d0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x7c>
  __ASM volatile ("wfe");
 80082ce:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 80082d0:	4a08      	ldr	r2, [pc, #32]	; (80082f4 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
 80082d2:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f023 0304 	bic.w	r3, r3, #4
 80082da:	6113      	str	r3, [r2, #16]

  return HAL_OK;  
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	40023800 	.word	0x40023800
 80082f0:	40007000 	.word	0x40007000
 80082f4:	e000ed00 	.word	0xe000ed00
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80082f8:	b480      	push	{r7}
 80082fa:	af00      	add	r7, sp, #0
  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e22d      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d075      	beq.n	8008412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008326:	4ba3      	ldr	r3, [pc, #652]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f003 030c 	and.w	r3, r3, #12
 800832e:	2b04      	cmp	r3, #4
 8008330:	d00c      	beq.n	800834c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008332:	4ba0      	ldr	r3, [pc, #640]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800833a:	2b08      	cmp	r3, #8
 800833c:	d112      	bne.n	8008364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800833e:	4b9d      	ldr	r3, [pc, #628]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800834a:	d10b      	bne.n	8008364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800834c:	4b99      	ldr	r3, [pc, #612]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d05b      	beq.n	8008410 <HAL_RCC_OscConfig+0x108>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d157      	bne.n	8008410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e208      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800836c:	d106      	bne.n	800837c <HAL_RCC_OscConfig+0x74>
 800836e:	4a91      	ldr	r2, [pc, #580]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008370:	4b90      	ldr	r3, [pc, #576]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008378:	6013      	str	r3, [r2, #0]
 800837a:	e01d      	b.n	80083b8 <HAL_RCC_OscConfig+0xb0>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008384:	d10c      	bne.n	80083a0 <HAL_RCC_OscConfig+0x98>
 8008386:	4a8b      	ldr	r2, [pc, #556]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008388:	4b8a      	ldr	r3, [pc, #552]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008390:	6013      	str	r3, [r2, #0]
 8008392:	4a88      	ldr	r2, [pc, #544]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008394:	4b87      	ldr	r3, [pc, #540]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	e00b      	b.n	80083b8 <HAL_RCC_OscConfig+0xb0>
 80083a0:	4a84      	ldr	r2, [pc, #528]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 80083a2:	4b84      	ldr	r3, [pc, #528]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	4a81      	ldr	r2, [pc, #516]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 80083ae:	4b81      	ldr	r3, [pc, #516]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d013      	beq.n	80083e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083c0:	f7f7 ffb6 	bl	8000330 <HAL_GetTick>
 80083c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083c6:	e008      	b.n	80083da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083c8:	f7f7 ffb2 	bl	8000330 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b64      	cmp	r3, #100	; 0x64
 80083d4:	d901      	bls.n	80083da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e1cd      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083da:	4b76      	ldr	r3, [pc, #472]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0f0      	beq.n	80083c8 <HAL_RCC_OscConfig+0xc0>
 80083e6:	e014      	b.n	8008412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e8:	f7f7 ffa2 	bl	8000330 <HAL_GetTick>
 80083ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083ee:	e008      	b.n	8008402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083f0:	f7f7 ff9e 	bl	8000330 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	2b64      	cmp	r3, #100	; 0x64
 80083fc:	d901      	bls.n	8008402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e1b9      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008402:	4b6c      	ldr	r3, [pc, #432]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1f0      	bne.n	80083f0 <HAL_RCC_OscConfig+0xe8>
 800840e:	e000      	b.n	8008412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b00      	cmp	r3, #0
 800841c:	d063      	beq.n	80084e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800841e:	4b65      	ldr	r3, [pc, #404]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f003 030c 	and.w	r3, r3, #12
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00b      	beq.n	8008442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800842a:	4b62      	ldr	r3, [pc, #392]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008432:	2b08      	cmp	r3, #8
 8008434:	d11c      	bne.n	8008470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008436:	4b5f      	ldr	r3, [pc, #380]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d116      	bne.n	8008470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008442:	4b5c      	ldr	r3, [pc, #368]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <HAL_RCC_OscConfig+0x152>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d001      	beq.n	800845a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e18d      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800845a:	4956      	ldr	r1, [pc, #344]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 800845c:	4b55      	ldr	r3, [pc, #340]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	4313      	orrs	r3, r2
 800846c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800846e:	e03a      	b.n	80084e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d020      	beq.n	80084ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008478:	4b4f      	ldr	r3, [pc, #316]	; (80085b8 <HAL_RCC_OscConfig+0x2b0>)
 800847a:	2201      	movs	r2, #1
 800847c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847e:	f7f7 ff57 	bl	8000330 <HAL_GetTick>
 8008482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008484:	e008      	b.n	8008498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008486:	f7f7 ff53 	bl	8000330 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e16e      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008498:	4b46      	ldr	r3, [pc, #280]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0302 	and.w	r3, r3, #2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d0f0      	beq.n	8008486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084a4:	4943      	ldr	r1, [pc, #268]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 80084a6:	4b43      	ldr	r3, [pc, #268]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	4313      	orrs	r3, r2
 80084b6:	600b      	str	r3, [r1, #0]
 80084b8:	e015      	b.n	80084e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084ba:	4b3f      	ldr	r3, [pc, #252]	; (80085b8 <HAL_RCC_OscConfig+0x2b0>)
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c0:	f7f7 ff36 	bl	8000330 <HAL_GetTick>
 80084c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084c6:	e008      	b.n	80084da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084c8:	f7f7 ff32 	bl	8000330 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e14d      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084da:	4b36      	ldr	r3, [pc, #216]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1f0      	bne.n	80084c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0308 	and.w	r3, r3, #8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d030      	beq.n	8008554 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d016      	beq.n	8008528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084fa:	4b30      	ldr	r3, [pc, #192]	; (80085bc <HAL_RCC_OscConfig+0x2b4>)
 80084fc:	2201      	movs	r2, #1
 80084fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008500:	f7f7 ff16 	bl	8000330 <HAL_GetTick>
 8008504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008506:	e008      	b.n	800851a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008508:	f7f7 ff12 	bl	8000330 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e12d      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800851a:	4b26      	ldr	r3, [pc, #152]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 800851c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800851e:	f003 0302 	and.w	r3, r3, #2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0f0      	beq.n	8008508 <HAL_RCC_OscConfig+0x200>
 8008526:	e015      	b.n	8008554 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008528:	4b24      	ldr	r3, [pc, #144]	; (80085bc <HAL_RCC_OscConfig+0x2b4>)
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800852e:	f7f7 feff 	bl	8000330 <HAL_GetTick>
 8008532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008534:	e008      	b.n	8008548 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008536:	f7f7 fefb 	bl	8000330 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d901      	bls.n	8008548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e116      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008548:	4b1a      	ldr	r3, [pc, #104]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 800854a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1f0      	bne.n	8008536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 80a0 	beq.w	80086a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008562:	2300      	movs	r3, #0
 8008564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008566:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10f      	bne.n	8008592 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	4a0f      	ldr	r2, [pc, #60]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008578:	4b0e      	ldr	r3, [pc, #56]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 800857a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008580:	6413      	str	r3, [r2, #64]	; 0x40
 8008582:	4b0c      	ldr	r3, [pc, #48]	; (80085b4 <HAL_RCC_OscConfig+0x2ac>)
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800858e:	2301      	movs	r3, #1
 8008590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <HAL_RCC_OscConfig+0x2b8>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800859a:	2b00      	cmp	r3, #0
 800859c:	d121      	bne.n	80085e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800859e:	4a08      	ldr	r2, [pc, #32]	; (80085c0 <HAL_RCC_OscConfig+0x2b8>)
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <HAL_RCC_OscConfig+0x2b8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085aa:	f7f7 fec1 	bl	8000330 <HAL_GetTick>
 80085ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085b0:	e011      	b.n	80085d6 <HAL_RCC_OscConfig+0x2ce>
 80085b2:	bf00      	nop
 80085b4:	40023800 	.word	0x40023800
 80085b8:	42470000 	.word	0x42470000
 80085bc:	42470e80 	.word	0x42470e80
 80085c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085c4:	f7f7 feb4 	bl	8000330 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e0cf      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085d6:	4b6a      	ldr	r3, [pc, #424]	; (8008780 <HAL_RCC_OscConfig+0x478>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0f0      	beq.n	80085c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d106      	bne.n	80085f8 <HAL_RCC_OscConfig+0x2f0>
 80085ea:	4a66      	ldr	r2, [pc, #408]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 80085ec:	4b65      	ldr	r3, [pc, #404]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 80085ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f0:	f043 0301 	orr.w	r3, r3, #1
 80085f4:	6713      	str	r3, [r2, #112]	; 0x70
 80085f6:	e01c      	b.n	8008632 <HAL_RCC_OscConfig+0x32a>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	2b05      	cmp	r3, #5
 80085fe:	d10c      	bne.n	800861a <HAL_RCC_OscConfig+0x312>
 8008600:	4a60      	ldr	r2, [pc, #384]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 8008602:	4b60      	ldr	r3, [pc, #384]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 8008604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008606:	f043 0304 	orr.w	r3, r3, #4
 800860a:	6713      	str	r3, [r2, #112]	; 0x70
 800860c:	4a5d      	ldr	r2, [pc, #372]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 800860e:	4b5d      	ldr	r3, [pc, #372]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 8008610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008612:	f043 0301 	orr.w	r3, r3, #1
 8008616:	6713      	str	r3, [r2, #112]	; 0x70
 8008618:	e00b      	b.n	8008632 <HAL_RCC_OscConfig+0x32a>
 800861a:	4a5a      	ldr	r2, [pc, #360]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 800861c:	4b59      	ldr	r3, [pc, #356]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 800861e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008620:	f023 0301 	bic.w	r3, r3, #1
 8008624:	6713      	str	r3, [r2, #112]	; 0x70
 8008626:	4a57      	ldr	r2, [pc, #348]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 8008628:	4b56      	ldr	r3, [pc, #344]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 800862a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862c:	f023 0304 	bic.w	r3, r3, #4
 8008630:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d015      	beq.n	8008666 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800863a:	f7f7 fe79 	bl	8000330 <HAL_GetTick>
 800863e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008640:	e00a      	b.n	8008658 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008642:	f7f7 fe75 	bl	8000330 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008650:	4293      	cmp	r3, r2
 8008652:	d901      	bls.n	8008658 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e08e      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008658:	4b4a      	ldr	r3, [pc, #296]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 800865a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865c:	f003 0302 	and.w	r3, r3, #2
 8008660:	2b00      	cmp	r3, #0
 8008662:	d0ee      	beq.n	8008642 <HAL_RCC_OscConfig+0x33a>
 8008664:	e014      	b.n	8008690 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008666:	f7f7 fe63 	bl	8000330 <HAL_GetTick>
 800866a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800866c:	e00a      	b.n	8008684 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800866e:	f7f7 fe5f 	bl	8000330 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	f241 3288 	movw	r2, #5000	; 0x1388
 800867c:	4293      	cmp	r3, r2
 800867e:	d901      	bls.n	8008684 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e078      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008684:	4b3f      	ldr	r3, [pc, #252]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 8008686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1ee      	bne.n	800866e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d105      	bne.n	80086a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008696:	4a3b      	ldr	r2, [pc, #236]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 8008698:	4b3a      	ldr	r3, [pc, #232]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d064      	beq.n	8008774 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80086aa:	4b36      	ldr	r3, [pc, #216]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f003 030c 	and.w	r3, r3, #12
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	d05c      	beq.n	8008770 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d141      	bne.n	8008742 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086be:	4b32      	ldr	r3, [pc, #200]	; (8008788 <HAL_RCC_OscConfig+0x480>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c4:	f7f7 fe34 	bl	8000330 <HAL_GetTick>
 80086c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086cc:	f7f7 fe30 	bl	8000330 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e04b      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086de:	4b29      	ldr	r3, [pc, #164]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1f0      	bne.n	80086cc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086ea:	4926      	ldr	r1, [pc, #152]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	69da      	ldr	r2, [r3, #28]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fa:	019b      	lsls	r3, r3, #6
 80086fc:	431a      	orrs	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008702:	085b      	lsrs	r3, r3, #1
 8008704:	3b01      	subs	r3, #1
 8008706:	041b      	lsls	r3, r3, #16
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870e:	061b      	lsls	r3, r3, #24
 8008710:	4313      	orrs	r3, r2
 8008712:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008714:	4b1c      	ldr	r3, [pc, #112]	; (8008788 <HAL_RCC_OscConfig+0x480>)
 8008716:	2201      	movs	r2, #1
 8008718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800871a:	f7f7 fe09 	bl	8000330 <HAL_GetTick>
 800871e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008720:	e008      	b.n	8008734 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008722:	f7f7 fe05 	bl	8000330 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	2b02      	cmp	r3, #2
 800872e:	d901      	bls.n	8008734 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e020      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008734:	4b13      	ldr	r3, [pc, #76]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d0f0      	beq.n	8008722 <HAL_RCC_OscConfig+0x41a>
 8008740:	e018      	b.n	8008774 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008742:	4b11      	ldr	r3, [pc, #68]	; (8008788 <HAL_RCC_OscConfig+0x480>)
 8008744:	2200      	movs	r2, #0
 8008746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008748:	f7f7 fdf2 	bl	8000330 <HAL_GetTick>
 800874c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800874e:	e008      	b.n	8008762 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008750:	f7f7 fdee 	bl	8000330 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b02      	cmp	r3, #2
 800875c:	d901      	bls.n	8008762 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e009      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008762:	4b08      	ldr	r3, [pc, #32]	; (8008784 <HAL_RCC_OscConfig+0x47c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1f0      	bne.n	8008750 <HAL_RCC_OscConfig+0x448>
 800876e:	e001      	b.n	8008774 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e000      	b.n	8008776 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	40007000 	.word	0x40007000
 8008784:	40023800 	.word	0x40023800
 8008788:	42470060 	.word	0x42470060

0800878c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e0ca      	b.n	8008936 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087a0:	4b67      	ldr	r3, [pc, #412]	; (8008940 <HAL_RCC_ClockConfig+0x1b4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 020f 	and.w	r2, r3, #15
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d20c      	bcs.n	80087c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ae:	4b64      	ldr	r3, [pc, #400]	; (8008940 <HAL_RCC_ClockConfig+0x1b4>)
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087b6:	4b62      	ldr	r3, [pc, #392]	; (8008940 <HAL_RCC_ClockConfig+0x1b4>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 020f 	and.w	r2, r3, #15
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d001      	beq.n	80087c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e0b6      	b.n	8008936 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d020      	beq.n	8008816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d005      	beq.n	80087ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087e0:	4a58      	ldr	r2, [pc, #352]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 80087e2:	4b58      	ldr	r3, [pc, #352]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80087ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0308 	and.w	r3, r3, #8
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80087f8:	4a52      	ldr	r2, [pc, #328]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 80087fa:	4b52      	ldr	r3, [pc, #328]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008804:	494f      	ldr	r1, [pc, #316]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 8008806:	4b4f      	ldr	r3, [pc, #316]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	4313      	orrs	r3, r2
 8008814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d044      	beq.n	80088ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d107      	bne.n	800883a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800882a:	4b46      	ldr	r3, [pc, #280]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d119      	bne.n	800886a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e07d      	b.n	8008936 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d003      	beq.n	800884a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008846:	2b03      	cmp	r3, #3
 8008848:	d107      	bne.n	800885a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800884a:	4b3e      	ldr	r3, [pc, #248]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d109      	bne.n	800886a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e06d      	b.n	8008936 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800885a:	4b3a      	ldr	r3, [pc, #232]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e065      	b.n	8008936 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800886a:	4936      	ldr	r1, [pc, #216]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 800886c:	4b35      	ldr	r3, [pc, #212]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f023 0203 	bic.w	r2, r3, #3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	4313      	orrs	r3, r2
 800887a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800887c:	f7f7 fd58 	bl	8000330 <HAL_GetTick>
 8008880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008882:	e00a      	b.n	800889a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008884:	f7f7 fd54 	bl	8000330 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008892:	4293      	cmp	r3, r2
 8008894:	d901      	bls.n	800889a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e04d      	b.n	8008936 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800889a:	4b2a      	ldr	r3, [pc, #168]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f003 020c 	and.w	r2, r3, #12
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d1eb      	bne.n	8008884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088ac:	4b24      	ldr	r3, [pc, #144]	; (8008940 <HAL_RCC_ClockConfig+0x1b4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 020f 	and.w	r2, r3, #15
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d90c      	bls.n	80088d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ba:	4b21      	ldr	r3, [pc, #132]	; (8008940 <HAL_RCC_ClockConfig+0x1b4>)
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088c2:	4b1f      	ldr	r3, [pc, #124]	; (8008940 <HAL_RCC_ClockConfig+0x1b4>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 020f 	and.w	r2, r3, #15
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d001      	beq.n	80088d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e030      	b.n	8008936 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d008      	beq.n	80088f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088e0:	4918      	ldr	r1, [pc, #96]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 80088e2:	4b18      	ldr	r3, [pc, #96]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d009      	beq.n	8008912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088fe:	4911      	ldr	r1, [pc, #68]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 8008900:	4b10      	ldr	r3, [pc, #64]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	4313      	orrs	r3, r2
 8008910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008912:	f000 f89d 	bl	8008a50 <HAL_RCC_GetSysClockFreq>
 8008916:	4601      	mov	r1, r0
 8008918:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <HAL_RCC_ClockConfig+0x1b8>)
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	091b      	lsrs	r3, r3, #4
 800891e:	f003 030f 	and.w	r3, r3, #15
 8008922:	4a09      	ldr	r2, [pc, #36]	; (8008948 <HAL_RCC_ClockConfig+0x1bc>)
 8008924:	5cd3      	ldrb	r3, [r2, r3]
 8008926:	fa21 f303 	lsr.w	r3, r1, r3
 800892a:	4a08      	ldr	r2, [pc, #32]	; (800894c <HAL_RCC_ClockConfig+0x1c0>)
 800892c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800892e:	2000      	movs	r0, #0
 8008930:	f7f7 fcba 	bl	80002a8 <HAL_InitTick>

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	40023c00 	.word	0x40023c00
 8008944:	40023800 	.word	0x40023800
 8008948:	080161b0 	.word	0x080161b0
 800894c:	20000008 	.word	0x20000008

08008950 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08c      	sub	sp, #48	; 0x30
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d129      	bne.n	80089b6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8008962:	2300      	movs	r3, #0
 8008964:	61bb      	str	r3, [r7, #24]
 8008966:	4a2b      	ldr	r2, [pc, #172]	; (8008a14 <HAL_RCC_MCOConfig+0xc4>)
 8008968:	4b2a      	ldr	r3, [pc, #168]	; (8008a14 <HAL_RCC_MCOConfig+0xc4>)
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	f043 0301 	orr.w	r3, r3, #1
 8008970:	6313      	str	r3, [r2, #48]	; 0x30
 8008972:	4b28      	ldr	r3, [pc, #160]	; (8008a14 <HAL_RCC_MCOConfig+0xc4>)
 8008974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	61bb      	str	r3, [r7, #24]
 800897c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800897e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008984:	2302      	movs	r3, #2
 8008986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008988:	2303      	movs	r3, #3
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800898c:	2300      	movs	r3, #0
 800898e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008990:	2300      	movs	r3, #0
 8008992:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008994:	f107 031c 	add.w	r3, r7, #28
 8008998:	4619      	mov	r1, r3
 800899a:	481f      	ldr	r0, [pc, #124]	; (8008a18 <HAL_RCC_MCOConfig+0xc8>)
 800899c:	f7fa f874 	bl	8002a88 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80089a0:	481c      	ldr	r0, [pc, #112]	; (8008a14 <HAL_RCC_MCOConfig+0xc4>)
 80089a2:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <HAL_RCC_MCOConfig+0xc4>)
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80089aa:	68b9      	ldr	r1, [r7, #8]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	430b      	orrs	r3, r1
 80089b0:	4313      	orrs	r3, r2
 80089b2:	6083      	str	r3, [r0, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80089b4:	e029      	b.n	8008a0a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]
 80089ba:	4a16      	ldr	r2, [pc, #88]	; (8008a14 <HAL_RCC_MCOConfig+0xc4>)
 80089bc:	4b15      	ldr	r3, [pc, #84]	; (8008a14 <HAL_RCC_MCOConfig+0xc4>)
 80089be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c0:	f043 0304 	orr.w	r3, r3, #4
 80089c4:	6313      	str	r3, [r2, #48]	; 0x30
 80089c6:	4b13      	ldr	r3, [pc, #76]	; (8008a14 <HAL_RCC_MCOConfig+0xc4>)
 80089c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ca:	f003 0304 	and.w	r3, r3, #4
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80089d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089d8:	2302      	movs	r3, #2
 80089da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089dc:	2303      	movs	r3, #3
 80089de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089e0:	2300      	movs	r3, #0
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80089e4:	2300      	movs	r3, #0
 80089e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80089e8:	f107 031c 	add.w	r3, r7, #28
 80089ec:	4619      	mov	r1, r3
 80089ee:	480b      	ldr	r0, [pc, #44]	; (8008a1c <HAL_RCC_MCOConfig+0xcc>)
 80089f0:	f7fa f84a 	bl	8002a88 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80089f4:	4807      	ldr	r0, [pc, #28]	; (8008a14 <HAL_RCC_MCOConfig+0xc4>)
 80089f6:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <HAL_RCC_MCOConfig+0xc4>)
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	00d9      	lsls	r1, r3, #3
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	430b      	orrs	r3, r1
 8008a06:	4313      	orrs	r3, r2
 8008a08:	6083      	str	r3, [r0, #8]
}
 8008a0a:	bf00      	nop
 8008a0c:	3730      	adds	r7, #48	; 0x30
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	40023800 	.word	0x40023800
 8008a18:	40020000 	.word	0x40020000
 8008a1c:	40020800 	.word	0x40020800

08008a20 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008a20:	b480      	push	{r7}
 8008a22:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008a24:	4b03      	ldr	r3, [pc, #12]	; (8008a34 <HAL_RCC_EnableCSS+0x14>)
 8008a26:	2201      	movs	r2, #1
 8008a28:	601a      	str	r2, [r3, #0]
}
 8008a2a:	bf00      	nop
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	4247004c 	.word	0x4247004c

08008a38 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8008a3c:	4b03      	ldr	r3, [pc, #12]	; (8008a4c <HAL_RCC_DisableCSS+0x14>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]
}
 8008a42:	bf00      	nop
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	4247004c 	.word	0x4247004c

08008a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	b087      	sub	sp, #28
 8008a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a58:	2200      	movs	r2, #0
 8008a5a:	60fa      	str	r2, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	617a      	str	r2, [r7, #20]
 8008a60:	2200      	movs	r2, #0
 8008a62:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8008a64:	2200      	movs	r2, #0
 8008a66:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a68:	4a51      	ldr	r2, [pc, #324]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a6a:	6892      	ldr	r2, [r2, #8]
 8008a6c:	f002 020c 	and.w	r2, r2, #12
 8008a70:	2a04      	cmp	r2, #4
 8008a72:	d007      	beq.n	8008a84 <HAL_RCC_GetSysClockFreq+0x34>
 8008a74:	2a08      	cmp	r2, #8
 8008a76:	d008      	beq.n	8008a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8008a78:	2a00      	cmp	r2, #0
 8008a7a:	f040 8090 	bne.w	8008b9e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a7e:	4b4d      	ldr	r3, [pc, #308]	; (8008bb4 <HAL_RCC_GetSysClockFreq+0x164>)
 8008a80:	613b      	str	r3, [r7, #16]
       break;
 8008a82:	e08f      	b.n	8008ba4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a84:	4b4c      	ldr	r3, [pc, #304]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x168>)
 8008a86:	613b      	str	r3, [r7, #16]
      break;
 8008a88:	e08c      	b.n	8008ba4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a8a:	4a49      	ldr	r2, [pc, #292]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a8c:	6852      	ldr	r2, [r2, #4]
 8008a8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008a92:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a94:	4a46      	ldr	r2, [pc, #280]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a96:	6852      	ldr	r2, [r2, #4]
 8008a98:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	d023      	beq.n	8008ae8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008aa0:	4b43      	ldr	r3, [pc, #268]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	099b      	lsrs	r3, r3, #6
 8008aa6:	f04f 0400 	mov.w	r4, #0
 8008aaa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008aae:	f04f 0200 	mov.w	r2, #0
 8008ab2:	ea03 0301 	and.w	r3, r3, r1
 8008ab6:	ea04 0402 	and.w	r4, r4, r2
 8008aba:	4a3f      	ldr	r2, [pc, #252]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x168>)
 8008abc:	fb02 f104 	mul.w	r1, r2, r4
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	fb02 f203 	mul.w	r2, r2, r3
 8008ac6:	440a      	add	r2, r1
 8008ac8:	493b      	ldr	r1, [pc, #236]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x168>)
 8008aca:	fba3 0101 	umull	r0, r1, r3, r1
 8008ace:	1853      	adds	r3, r2, r1
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f04f 0400 	mov.w	r4, #0
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4623      	mov	r3, r4
 8008adc:	f00c f9d0 	bl	8014e80 <__aeabi_uldivmod>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	e04c      	b.n	8008b82 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ae8:	4a31      	ldr	r2, [pc, #196]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008aea:	6852      	ldr	r2, [r2, #4]
 8008aec:	0992      	lsrs	r2, r2, #6
 8008aee:	4611      	mov	r1, r2
 8008af0:	f04f 0200 	mov.w	r2, #0
 8008af4:	f240 15ff 	movw	r5, #511	; 0x1ff
 8008af8:	f04f 0600 	mov.w	r6, #0
 8008afc:	ea05 0501 	and.w	r5, r5, r1
 8008b00:	ea06 0602 	and.w	r6, r6, r2
 8008b04:	4629      	mov	r1, r5
 8008b06:	4632      	mov	r2, r6
 8008b08:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8008b0c:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8008b10:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8008b14:	4651      	mov	r1, sl
 8008b16:	465a      	mov	r2, fp
 8008b18:	46aa      	mov	sl, r5
 8008b1a:	46b3      	mov	fp, r6
 8008b1c:	4655      	mov	r5, sl
 8008b1e:	465e      	mov	r6, fp
 8008b20:	1b4d      	subs	r5, r1, r5
 8008b22:	eb62 0606 	sbc.w	r6, r2, r6
 8008b26:	4629      	mov	r1, r5
 8008b28:	4632      	mov	r2, r6
 8008b2a:	0194      	lsls	r4, r2, #6
 8008b2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008b30:	018b      	lsls	r3, r1, #6
 8008b32:	1a5b      	subs	r3, r3, r1
 8008b34:	eb64 0402 	sbc.w	r4, r4, r2
 8008b38:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8008b3c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8008b40:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8008b44:	4643      	mov	r3, r8
 8008b46:	464c      	mov	r4, r9
 8008b48:	4655      	mov	r5, sl
 8008b4a:	465e      	mov	r6, fp
 8008b4c:	18ed      	adds	r5, r5, r3
 8008b4e:	eb46 0604 	adc.w	r6, r6, r4
 8008b52:	462b      	mov	r3, r5
 8008b54:	4634      	mov	r4, r6
 8008b56:	02a2      	lsls	r2, r4, #10
 8008b58:	607a      	str	r2, [r7, #4]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	029b      	lsls	r3, r3, #10
 8008b64:	603b      	str	r3, [r7, #0]
 8008b66:	e897 0018 	ldmia.w	r7, {r3, r4}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f04f 0400 	mov.w	r4, #0
 8008b74:	461a      	mov	r2, r3
 8008b76:	4623      	mov	r3, r4
 8008b78:	f00c f982 	bl	8014e80 <__aeabi_uldivmod>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b82:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	0c1b      	lsrs	r3, r3, #16
 8008b88:	f003 0303 	and.w	r3, r3, #3
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	005b      	lsls	r3, r3, #1
 8008b90:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b9a:	613b      	str	r3, [r7, #16]
      break;
 8008b9c:	e002      	b.n	8008ba4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b9e:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <HAL_RCC_GetSysClockFreq+0x164>)
 8008ba0:	613b      	str	r3, [r7, #16]
      break;
 8008ba2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ba4:	693b      	ldr	r3, [r7, #16]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb0:	40023800 	.word	0x40023800
 8008bb4:	00f42400 	.word	0x00f42400
 8008bb8:	017d7840 	.word	0x017d7840

08008bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bc0:	4b03      	ldr	r3, [pc, #12]	; (8008bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	20000008 	.word	0x20000008

08008bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008bd8:	f7ff fff0 	bl	8008bbc <HAL_RCC_GetHCLKFreq>
 8008bdc:	4601      	mov	r1, r0
 8008bde:	4b05      	ldr	r3, [pc, #20]	; (8008bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	0a9b      	lsrs	r3, r3, #10
 8008be4:	f003 0307 	and.w	r3, r3, #7
 8008be8:	4a03      	ldr	r2, [pc, #12]	; (8008bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bea:	5cd3      	ldrb	r3, [r2, r3]
 8008bec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	40023800 	.word	0x40023800
 8008bf8:	080161c0 	.word	0x080161c0

08008bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c00:	f7ff ffdc 	bl	8008bbc <HAL_RCC_GetHCLKFreq>
 8008c04:	4601      	mov	r1, r0
 8008c06:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	0b5b      	lsrs	r3, r3, #13
 8008c0c:	f003 0307 	and.w	r3, r3, #7
 8008c10:	4a03      	ldr	r2, [pc, #12]	; (8008c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c12:	5cd3      	ldrb	r3, [r2, r3]
 8008c14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	080161c0 	.word	0x080161c0

08008c24 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	220f      	movs	r2, #15
 8008c30:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8008c32:	4b45      	ldr	r3, [pc, #276]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c3e:	d104      	bne.n	8008c4a <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8008c46:	605a      	str	r2, [r3, #4]
 8008c48:	e00e      	b.n	8008c68 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8008c4a:	4b3f      	ldr	r3, [pc, #252]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c56:	d104      	bne.n	8008c62 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008c5e:	605a      	str	r2, [r3, #4]
 8008c60:	e002      	b.n	8008c68 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8008c68:	4b37      	ldr	r3, [pc, #220]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d103      	bne.n	8008c7c <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	60da      	str	r2, [r3, #12]
 8008c7a:	e002      	b.n	8008c82 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8008c82:	4b31      	ldr	r3, [pc, #196]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	08db      	lsrs	r3, r3, #3
 8008c88:	f003 021f 	and.w	r2, r3, #31
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8008c90:	4b2d      	ldr	r3, [pc, #180]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c94:	f003 0304 	and.w	r3, r3, #4
 8008c98:	2b04      	cmp	r3, #4
 8008c9a:	d103      	bne.n	8008ca4 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2205      	movs	r2, #5
 8008ca0:	609a      	str	r2, [r3, #8]
 8008ca2:	e00c      	b.n	8008cbe <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8008ca4:	4b28      	ldr	r3, [pc, #160]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d103      	bne.n	8008cb8 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	609a      	str	r2, [r3, #8]
 8008cb6:	e002      	b.n	8008cbe <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8008cbe:	4b22      	ldr	r3, [pc, #136]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d103      	bne.n	8008cd2 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	615a      	str	r2, [r3, #20]
 8008cd0:	e002      	b.n	8008cd8 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8008cd8:	4b1b      	ldr	r3, [pc, #108]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ce4:	d103      	bne.n	8008cee <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2202      	movs	r2, #2
 8008cea:	619a      	str	r2, [r3, #24]
 8008cec:	e002      	b.n	8008cf4 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008cf4:	4b14      	ldr	r3, [pc, #80]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8008d00:	4b11      	ldr	r3, [pc, #68]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d0c:	4b0e      	ldr	r3, [pc, #56]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	099b      	lsrs	r3, r3, #6
 8008d12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8008d1a:	4b0b      	ldr	r3, [pc, #44]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d22:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	0c1a      	lsrs	r2, r3, #16
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8008d2e:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <HAL_RCC_GetOscConfig+0x124>)
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	0e1b      	lsrs	r3, r3, #24
 8008d34:	f003 020f 	and.w	r2, r3, #15
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	40023800 	.word	0x40023800

08008d4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	220f      	movs	r2, #15
 8008d5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d5c:	4b12      	ldr	r3, [pc, #72]	; (8008da8 <HAL_RCC_GetClockConfig+0x5c>)
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f003 0203 	and.w	r2, r3, #3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008d68:	4b0f      	ldr	r3, [pc, #60]	; (8008da8 <HAL_RCC_GetClockConfig+0x5c>)
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008d74:	4b0c      	ldr	r3, [pc, #48]	; (8008da8 <HAL_RCC_GetClockConfig+0x5c>)
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008d80:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <HAL_RCC_GetClockConfig+0x5c>)
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	08db      	lsrs	r3, r3, #3
 8008d86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008d8e:	4b07      	ldr	r3, [pc, #28]	; (8008dac <HAL_RCC_GetClockConfig+0x60>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 020f 	and.w	r2, r3, #15
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	601a      	str	r2, [r3, #0]
}
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	40023800 	.word	0x40023800
 8008dac:	40023c00 	.word	0x40023c00

08008db0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008db4:	4b06      	ldr	r3, [pc, #24]	; (8008dd0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dbc:	2b80      	cmp	r3, #128	; 0x80
 8008dbe:	d104      	bne.n	8008dca <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008dc0:	f000 f80a 	bl	8008dd8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008dc4:	4b03      	ldr	r3, [pc, #12]	; (8008dd4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008dc6:	2280      	movs	r2, #128	; 0x80
 8008dc8:	701a      	strb	r2, [r3, #0]
  }
}
 8008dca:	bf00      	nop
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	40023800 	.word	0x40023800
 8008dd4:	4002380e 	.word	0x4002380e

08008dd8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop

08008de8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e055      	b.n	8008ea6 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d106      	bne.n	8008e1a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f00b f9f1 	bl	80141fc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	6812      	ldr	r2, [r2, #0]
 8008e2a:	6812      	ldr	r2, [r2, #0]
 8008e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	6851      	ldr	r1, [r2, #4]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	6892      	ldr	r2, [r2, #8]
 8008e3e:	4311      	orrs	r1, r2
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	68d2      	ldr	r2, [r2, #12]
 8008e44:	4311      	orrs	r1, r2
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	6912      	ldr	r2, [r2, #16]
 8008e4a:	4311      	orrs	r1, r2
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	6952      	ldr	r2, [r2, #20]
 8008e50:	4311      	orrs	r1, r2
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	6992      	ldr	r2, [r2, #24]
 8008e56:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8008e5a:	4311      	orrs	r1, r2
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	69d2      	ldr	r2, [r2, #28]
 8008e60:	4311      	orrs	r1, r2
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	6a12      	ldr	r2, [r2, #32]
 8008e66:	4311      	orrs	r1, r2
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008e6c:	430a      	orrs	r2, r1
 8008e6e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	6992      	ldr	r2, [r2, #24]
 8008e78:	0c12      	lsrs	r2, r2, #16
 8008e7a:	f002 0104 	and.w	r1, r2, #4
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e82:	430a      	orrs	r2, r1
 8008e84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	6812      	ldr	r2, [r2, #0]
 8008e8e:	69d2      	ldr	r2, [r2, #28]
 8008e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e94:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e01a      	b.n	8008ef6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	6812      	ldr	r2, [r2, #0]
 8008ed0:	6812      	ldr	r2, [r2, #0]
 8008ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ed6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f00b fa2d 	bl	8014338 <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
  */
}
 8008f06:	bf00      	nop
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b083      	sub	sp, #12
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
  */
}
 8008f1a:	bf00      	nop
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b08a      	sub	sp, #40	; 0x28
 8008f2a:	af02      	add	r7, sp, #8
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	603b      	str	r3, [r7, #0]
 8008f32:	4613      	mov	r3, r2
 8008f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <HAL_SPI_Transmit+0x26>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e123      	b.n	8009194 <HAL_SPI_Transmit+0x26e>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f54:	f7f7 f9ec 	bl	8000330 <HAL_GetTick>
 8008f58:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d002      	beq.n	8008f6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008f66:	2302      	movs	r3, #2
 8008f68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f6a:	e10a      	b.n	8009182 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d002      	beq.n	8008f78 <HAL_SPI_Transmit+0x52>
 8008f72:	88fb      	ldrh	r3, [r7, #6]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d102      	bne.n	8008f7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f7c:	e101      	b.n	8009182 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2203      	movs	r2, #3
 8008f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	88fa      	ldrh	r2, [r7, #6]
 8008f96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	88fa      	ldrh	r2, [r7, #6]
 8008f9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fc4:	d107      	bne.n	8008fd6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	6812      	ldr	r2, [r2, #0]
 8008fce:	6812      	ldr	r2, [r2, #0]
 8008fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe0:	2b40      	cmp	r3, #64	; 0x40
 8008fe2:	d007      	beq.n	8008ff4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	6812      	ldr	r2, [r2, #0]
 8008fec:	6812      	ldr	r2, [r2, #0]
 8008fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ffc:	d147      	bne.n	800908e <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <HAL_SPI_Transmit+0xea>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800900a:	b29b      	uxth	r3, r3
 800900c:	2b01      	cmp	r3, #1
 800900e:	d138      	bne.n	8009082 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	8812      	ldrh	r2, [r2, #0]
 8009018:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	3302      	adds	r3, #2
 800901e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009024:	b29b      	uxth	r3, r3
 8009026:	3b01      	subs	r3, #1
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800902e:	e028      	b.n	8009082 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	2b02      	cmp	r3, #2
 800903c:	d10f      	bne.n	800905e <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	8812      	ldrh	r2, [r2, #0]
 8009046:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	3302      	adds	r3, #2
 800904c:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009052:	b29b      	uxth	r3, r3
 8009054:	3b01      	subs	r3, #1
 8009056:	b29a      	uxth	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	86da      	strh	r2, [r3, #54]	; 0x36
 800905c:	e011      	b.n	8009082 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00b      	beq.n	800907c <HAL_SPI_Transmit+0x156>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906a:	d00a      	beq.n	8009082 <HAL_SPI_Transmit+0x15c>
 800906c:	f7f7 f960 	bl	8000330 <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	1ad2      	subs	r2, r2, r3
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	d302      	bcc.n	8009082 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009080:	e07f      	b.n	8009182 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009086:	b29b      	uxth	r3, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1d1      	bne.n	8009030 <HAL_SPI_Transmit+0x10a>
 800908c:	e048      	b.n	8009120 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <HAL_SPI_Transmit+0x17a>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800909a:	b29b      	uxth	r3, r3
 800909c:	2b01      	cmp	r3, #1
 800909e:	d13a      	bne.n	8009116 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	330c      	adds	r3, #12
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	7812      	ldrb	r2, [r2, #0]
 80090aa:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	3301      	adds	r3, #1
 80090b0:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	3b01      	subs	r3, #1
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80090c0:	e029      	b.n	8009116 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d110      	bne.n	80090f2 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	330c      	adds	r3, #12
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	7812      	ldrb	r2, [r2, #0]
 80090da:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	3301      	adds	r3, #1
 80090e0:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	3b01      	subs	r3, #1
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80090f0:	e011      	b.n	8009116 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <HAL_SPI_Transmit+0x1ea>
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fe:	d00a      	beq.n	8009116 <HAL_SPI_Transmit+0x1f0>
 8009100:	f7f7 f916 	bl	8000330 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	1ad2      	subs	r2, r2, r3
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d302      	bcc.n	8009116 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009114:	e035      	b.n	8009182 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800911a:	b29b      	uxth	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1d0      	bne.n	80090c2 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	2201      	movs	r2, #1
 8009128:	2102      	movs	r1, #2
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f001 fd27 	bl	800ab7e <SPI_WaitFlagStateUntilTimeout>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	77fb      	strb	r3, [r7, #31]
    goto error;
 800913a:	e022      	b.n	8009182 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f001 fd85 	bl	800ac50 <SPI_CheckFlag_BSY>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2220      	movs	r2, #32
 8009154:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009156:	e014      	b.n	8009182 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10a      	bne.n	8009176 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009160:	2300      	movs	r3, #0
 8009162:	617b      	str	r3, [r7, #20]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	617b      	str	r3, [r7, #20]
 8009174:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009192:	7ffb      	ldrb	r3, [r7, #31]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3720      	adds	r7, #32
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	4613      	mov	r3, r2
 80091aa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091bc:	d112      	bne.n	80091e4 <HAL_SPI_Receive+0x48>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10e      	bne.n	80091e4 <HAL_SPI_Receive+0x48>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2204      	movs	r2, #4
 80091ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 80091ce:	88fa      	ldrh	r2, [r7, #6]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	4613      	mov	r3, r2
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	68b9      	ldr	r1, [r7, #8]
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 f8ec 	bl	80093b8 <HAL_SPI_TransmitReceive>
 80091e0:	4603      	mov	r3, r0
 80091e2:	e0e5      	b.n	80093b0 <HAL_SPI_Receive+0x214>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d101      	bne.n	80091f2 <HAL_SPI_Receive+0x56>
 80091ee:	2302      	movs	r3, #2
 80091f0:	e0de      	b.n	80093b0 <HAL_SPI_Receive+0x214>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091fa:	f7f7 f899 	bl	8000330 <HAL_GetTick>
 80091fe:	6138      	str	r0, [r7, #16]

  if(hspi->State != HAL_SPI_STATE_READY)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b01      	cmp	r3, #1
 800920a:	d002      	beq.n	8009212 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 800920c:	2302      	movs	r3, #2
 800920e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009210:	e0c5      	b.n	800939e <HAL_SPI_Receive+0x202>
  }

  if((pData == NULL ) || (Size == 0))
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <HAL_SPI_Receive+0x82>
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009222:	e0bc      	b.n	800939e <HAL_SPI_Receive+0x202>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2204      	movs	r2, #4
 8009228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	88fa      	ldrh	r2, [r7, #6]
 800923c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	88fa      	ldrh	r2, [r7, #6]
 8009242:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800926a:	d107      	bne.n	800927c <HAL_SPI_Receive+0xe0>
  {
    SPI_1LINE_RX(hspi);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	6812      	ldr	r2, [r2, #0]
 8009274:	6812      	ldr	r2, [r2, #0]
 8009276:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800927a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009286:	2b40      	cmp	r3, #64	; 0x40
 8009288:	d007      	beq.n	800929a <HAL_SPI_Receive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	6812      	ldr	r2, [r2, #0]
 8009292:	6812      	ldr	r2, [r2, #0]
 8009294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009298:	601a      	str	r2, [r3, #0]
  }

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d15b      	bne.n	800935a <HAL_SPI_Receive+0x1be>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 80092a2:	e02a      	b.n	80092fa <HAL_SPI_Receive+0x15e>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d111      	bne.n	80092d6 <HAL_SPI_Receive+0x13a>
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	330c      	adds	r3, #12
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	3301      	adds	r3, #1
 80092c4:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	3b01      	subs	r3, #1
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092d4:	e011      	b.n	80092fa <HAL_SPI_Receive+0x15e>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <HAL_SPI_Receive+0x158>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e2:	d00a      	beq.n	80092fa <HAL_SPI_Receive+0x15e>
 80092e4:	f7f7 f824 	bl	8000330 <HAL_GetTick>
 80092e8:	4602      	mov	r2, r0
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	1ad2      	subs	r2, r2, r3
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d302      	bcc.n	80092fa <HAL_SPI_Receive+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80092f8:	e051      	b.n	800939e <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092fe:	b29b      	uxth	r3, r3
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1cf      	bne.n	80092a4 <HAL_SPI_Receive+0x108>
 8009304:	e02e      	b.n	8009364 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f003 0301 	and.w	r3, r3, #1
 8009310:	2b01      	cmp	r3, #1
 8009312:	d110      	bne.n	8009336 <HAL_SPI_Receive+0x19a>
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	b29a      	uxth	r2, r3
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	3302      	adds	r3, #2
 8009324:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800932a:	b29b      	uxth	r3, r3
 800932c:	3b01      	subs	r3, #1
 800932e:	b29a      	uxth	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009334:	e011      	b.n	800935a <HAL_SPI_Receive+0x1be>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <HAL_SPI_Receive+0x1b8>
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009342:	d00a      	beq.n	800935a <HAL_SPI_Receive+0x1be>
 8009344:	f7f6 fff4 	bl	8000330 <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	1ad2      	subs	r2, r2, r3
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d302      	bcc.n	800935a <HAL_SPI_Receive+0x1be>
        {
          errorcode = HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009358:	e021      	b.n	800939e <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800935e:	b29b      	uxth	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1d0      	bne.n	8009306 <HAL_SPI_Receive+0x16a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800936c:	d111      	bne.n	8009392 <HAL_SPI_Receive+0x1f6>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009376:	d004      	beq.n	8009382 <HAL_SPI_Receive+0x1e6>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009380:	d107      	bne.n	8009392 <HAL_SPI_Receive+0x1f6>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	6812      	ldr	r2, [r2, #0]
 800938a:	6812      	ldr	r2, [r2, #0]
 800938c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009390:	601a      	str	r2, [r3, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <HAL_SPI_Receive+0x202>
  {
    errorcode = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b08c      	sub	sp, #48	; 0x30
 80093bc:	af02      	add	r7, sp, #8
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	61fb      	str	r3, [r7, #28]
 80093ca:	2300      	movs	r3, #0
 80093cc:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80093d2:	2301      	movs	r3, #1
 80093d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d101      	bne.n	80093ea <HAL_SPI_TransmitReceive+0x32>
 80093e6:	2302      	movs	r3, #2
 80093e8:	e181      	b.n	80096ee <HAL_SPI_TransmitReceive+0x336>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093f2:	f7f6 ff9d 	bl	8000330 <HAL_GetTick>
 80093f6:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d00e      	beq.n	800942c <HAL_SPI_TransmitReceive+0x74>
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009414:	d106      	bne.n	8009424 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d102      	bne.n	8009424 <HAL_SPI_TransmitReceive+0x6c>
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	2b04      	cmp	r3, #4
 8009422:	d003      	beq.n	800942c <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8009424:	2302      	movs	r3, #2
 8009426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800942a:	e156      	b.n	80096da <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d005      	beq.n	800943e <HAL_SPI_TransmitReceive+0x86>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <HAL_SPI_TransmitReceive+0x86>
 8009438:	887b      	ldrh	r3, [r7, #2]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d103      	bne.n	8009446 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009444:	e149      	b.n	80096da <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b01      	cmp	r3, #1
 8009450:	d103      	bne.n	800945a <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2205      	movs	r2, #5
 8009456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	887a      	ldrh	r2, [r7, #2]
 800946a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	887a      	ldrh	r2, [r7, #2]
 8009470:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	887a      	ldrh	r2, [r7, #2]
 800947c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	887a      	ldrh	r2, [r7, #2]
 8009482:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949a:	2b40      	cmp	r3, #64	; 0x40
 800949c:	d007      	beq.n	80094ae <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	6812      	ldr	r2, [r2, #0]
 80094a6:	6812      	ldr	r2, [r2, #0]
 80094a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094b6:	d171      	bne.n	800959c <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d004      	beq.n	80094ca <HAL_SPI_TransmitReceive+0x112>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d15d      	bne.n	8009586 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	8812      	ldrh	r2, [r2, #0]
 80094d2:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	3302      	adds	r3, #2
 80094d8:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094de:	b29b      	uxth	r3, r3
 80094e0:	3b01      	subs	r3, #1
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094e8:	e04d      	b.n	8009586 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80094ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d01c      	beq.n	800952a <HAL_SPI_TransmitReceive+0x172>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d017      	beq.n	800952a <HAL_SPI_TransmitReceive+0x172>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f003 0302 	and.w	r3, r3, #2
 8009504:	2b02      	cmp	r3, #2
 8009506:	d110      	bne.n	800952a <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	8812      	ldrh	r2, [r2, #0]
 8009510:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	3302      	adds	r3, #2
 8009516:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800951c:	b29b      	uxth	r3, r3
 800951e:	3b01      	subs	r3, #1
 8009520:	b29a      	uxth	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800952e:	b29b      	uxth	r3, r3
 8009530:	2b00      	cmp	r3, #0
 8009532:	d018      	beq.n	8009566 <HAL_SPI_TransmitReceive+0x1ae>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	2b01      	cmp	r3, #1
 8009540:	d111      	bne.n	8009566 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	b29a      	uxth	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	3302      	adds	r3, #2
 8009552:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009558:	b29b      	uxth	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	b29a      	uxth	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8009562:	2301      	movs	r3, #1
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956c:	d00b      	beq.n	8009586 <HAL_SPI_TransmitReceive+0x1ce>
 800956e:	f7f6 fedf 	bl	8000330 <HAL_GetTick>
 8009572:	4602      	mov	r2, r0
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	1ad2      	subs	r2, r2, r3
 8009578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957a:	429a      	cmp	r2, r3
 800957c:	d303      	bcc.n	8009586 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009584:	e0a9      	b.n	80096da <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800958a:	b29b      	uxth	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1ac      	bne.n	80094ea <HAL_SPI_TransmitReceive+0x132>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1a7      	bne.n	80094ea <HAL_SPI_TransmitReceive+0x132>
 800959a:	e071      	b.n	8009680 <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <HAL_SPI_TransmitReceive+0x1f6>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d15e      	bne.n	800966c <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	330c      	adds	r3, #12
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	7812      	ldrb	r2, [r2, #0]
 80095b8:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	3301      	adds	r3, #1
 80095be:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095ce:	e04d      	b.n	800966c <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d01d      	beq.n	8009612 <HAL_SPI_TransmitReceive+0x25a>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095da:	b29b      	uxth	r3, r3
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d018      	beq.n	8009612 <HAL_SPI_TransmitReceive+0x25a>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f003 0302 	and.w	r3, r3, #2
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d111      	bne.n	8009612 <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f103 020c 	add.w	r2, r3, #12
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	1c59      	adds	r1, r3, #1
 80095fa:	60b9      	str	r1, [r7, #8]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009604:	b29b      	uxth	r3, r3
 8009606:	3b01      	subs	r3, #1
 8009608:	b29a      	uxth	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009616:	b29b      	uxth	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d017      	beq.n	800964c <HAL_SPI_TransmitReceive+0x294>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b01      	cmp	r3, #1
 8009628:	d110      	bne.n	800964c <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	6812      	ldr	r2, [r2, #0]
 8009634:	68d2      	ldr	r2, [r2, #12]
 8009636:	b2d2      	uxtb	r2, r2
 8009638:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800963e:	b29b      	uxth	r3, r3
 8009640:	3b01      	subs	r3, #1
 8009642:	b29a      	uxth	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8009648:	2301      	movs	r3, #1
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009652:	d00b      	beq.n	800966c <HAL_SPI_TransmitReceive+0x2b4>
 8009654:	f7f6 fe6c 	bl	8000330 <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	1ad2      	subs	r2, r2, r3
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	429a      	cmp	r2, r3
 8009662:	d303      	bcc.n	800966c <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800966a:	e036      	b.n	80096da <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009670:	b29b      	uxth	r3, r3
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1ac      	bne.n	80095d0 <HAL_SPI_TransmitReceive+0x218>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800967a:	b29b      	uxth	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1a7      	bne.n	80095d0 <HAL_SPI_TransmitReceive+0x218>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009686:	2201      	movs	r2, #1
 8009688:	2102      	movs	r1, #2
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f001 fa77 	bl	800ab7e <SPI_WaitFlagStateUntilTimeout>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800969c:	e01d      	b.n	80096da <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f001 fad4 	bl	800ac50 <SPI_CheckFlag_BSY>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d006      	beq.n	80096bc <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2220      	movs	r2, #32
 80096b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80096ba:	e00e      	b.n	80096da <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096c4:	2300      	movs	r3, #0
 80096c6:	613b      	str	r3, [r7, #16]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	613b      	str	r3, [r7, #16]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	613b      	str	r3, [r7, #16]
 80096d8:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3728      	adds	r7, #40	; 0x28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b087      	sub	sp, #28
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	4613      	mov	r3, r2
 8009702:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800970e:	2b01      	cmp	r3, #1
 8009710:	d101      	bne.n	8009716 <HAL_SPI_Transmit_IT+0x20>
 8009712:	2302      	movs	r3, #2
 8009714:	e072      	b.n	80097fc <HAL_SPI_Transmit_IT+0x106>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if((pData == NULL) || (Size == 0))
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <HAL_SPI_Transmit_IT+0x34>
 8009724:	88fb      	ldrh	r3, [r7, #6]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d102      	bne.n	8009730 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800972e:	e060      	b.n	80097f2 <HAL_SPI_Transmit_IT+0xfc>
  }

  if(hspi->State != HAL_SPI_STATE_READY)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b01      	cmp	r3, #1
 800973a:	d002      	beq.n	8009742 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800973c:	2302      	movs	r3, #2
 800973e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009740:	e057      	b.n	80097f2 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2203      	movs	r2, #3
 8009746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	88fa      	ldrh	r2, [r7, #6]
 800975a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	88fa      	ldrh	r2, [r7, #6]
 8009760:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	4a20      	ldr	r2, [pc, #128]	; (8009808 <HAL_SPI_Transmit_IT+0x112>)
 8009786:	645a      	str	r2, [r3, #68]	; 0x44
 8009788:	e002      	b.n	8009790 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4a1f      	ldr	r2, [pc, #124]	; (800980c <HAL_SPI_Transmit_IT+0x116>)
 800978e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009798:	d107      	bne.n	80097aa <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	6812      	ldr	r2, [r2, #0]
 80097a2:	6812      	ldr	r2, [r2, #0]
 80097a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097a8:	601a      	str	r2, [r3, #0]
  {
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d108      	bne.n	80097c4 <HAL_SPI_Transmit_IT+0xce>
  {
    /* Enable TXE interrupt */
    __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	6812      	ldr	r2, [r2, #0]
 80097ba:	6852      	ldr	r2, [r2, #4]
 80097bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097c0:	605a      	str	r2, [r3, #4]
 80097c2:	e007      	b.n	80097d4 <HAL_SPI_Transmit_IT+0xde>
  }
  else
  {
    /* Enable TXE and ERR interrupt */
    __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	6812      	ldr	r2, [r2, #0]
 80097cc:	6852      	ldr	r2, [r2, #4]
 80097ce:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80097d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097de:	2b40      	cmp	r3, #64	; 0x40
 80097e0:	d007      	beq.n	80097f2 <HAL_SPI_Transmit_IT+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	6812      	ldr	r2, [r2, #0]
 80097ea:	6812      	ldr	r2, [r2, #0]
 80097ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097f0:	601a      	str	r2, [r3, #0]
  }

error :
  __HAL_UNLOCK(hspi);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	371c      	adds	r7, #28
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr
 8009808:	0800ab3b 	.word	0x0800ab3b
 800980c:	0800aaf7 	.word	0x0800aaf7

08009810 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	4613      	mov	r3, r2
 800981c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d110      	bne.n	800984c <HAL_SPI_Receive_IT+0x3c>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009832:	d10b      	bne.n	800984c <HAL_SPI_Receive_IT+0x3c>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2204      	movs	r2, #4
 8009838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800983c:	88fb      	ldrh	r3, [r7, #6]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	68b9      	ldr	r1, [r7, #8]
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f000 f878 	bl	8009938 <HAL_SPI_TransmitReceive_IT>
 8009848:	4603      	mov	r3, r0
 800984a:	e06c      	b.n	8009926 <HAL_SPI_Receive_IT+0x116>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009852:	2b01      	cmp	r3, #1
 8009854:	d101      	bne.n	800985a <HAL_SPI_Receive_IT+0x4a>
 8009856:	2302      	movs	r3, #2
 8009858:	e065      	b.n	8009926 <HAL_SPI_Receive_IT+0x116>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009868:	b2db      	uxtb	r3, r3
 800986a:	2b01      	cmp	r3, #1
 800986c:	d002      	beq.n	8009874 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800986e:	2302      	movs	r3, #2
 8009870:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009872:	e053      	b.n	800991c <HAL_SPI_Receive_IT+0x10c>
  }

  if((pData == NULL) || (Size == 0))
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d002      	beq.n	8009880 <HAL_SPI_Receive_IT+0x70>
 800987a:	88fb      	ldrh	r3, [r7, #6]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009884:	e04a      	b.n	800991c <HAL_SPI_Receive_IT+0x10c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2204      	movs	r2, #4
 800988a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	88fa      	ldrh	r2, [r7, #6]
 800989e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	88fa      	ldrh	r2, [r7, #6]
 80098a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4a19      	ldr	r2, [pc, #100]	; (8009930 <HAL_SPI_Receive_IT+0x120>)
 80098ca:	641a      	str	r2, [r3, #64]	; 0x40
 80098cc:	e002      	b.n	80098d4 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	4a18      	ldr	r2, [pc, #96]	; (8009934 <HAL_SPI_Receive_IT+0x124>)
 80098d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098dc:	d107      	bne.n	80098ee <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	6812      	ldr	r2, [r2, #0]
 80098e6:	6812      	ldr	r2, [r2, #0]
 80098e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80098ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	6812      	ldr	r2, [r2, #0]
 80098f6:	6852      	ldr	r2, [r2, #4]
 80098f8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80098fc:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009908:	2b40      	cmp	r3, #64	; 0x40
 800990a:	d007      	beq.n	800991c <HAL_SPI_Receive_IT+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	6812      	ldr	r2, [r2, #0]
 8009914:	6812      	ldr	r2, [r2, #0]
 8009916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800991a:	601a      	str	r2, [r3, #0]
  }

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	0800aab1 	.word	0x0800aab1
 8009934:	0800aa6d 	.word	0x0800aa6d

08009938 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009938:	b480      	push	{r7}
 800993a:	b089      	sub	sp, #36	; 0x24
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	61bb      	str	r3, [r7, #24]
 800994a:	2300      	movs	r3, #0
 800994c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009958:	2b01      	cmp	r3, #1
 800995a:	d101      	bne.n	8009960 <HAL_SPI_TransmitReceive_IT+0x28>
 800995c:	2302      	movs	r3, #2
 800995e:	e074      	b.n	8009a4a <HAL_SPI_TransmitReceive_IT+0x112>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmp  = hspi->State;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800996e:	b2db      	uxtb	r3, r3
 8009970:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	617b      	str	r3, [r7, #20]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d00d      	beq.n	800999a <HAL_SPI_TransmitReceive_IT+0x62>
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009984:	d106      	bne.n	8009994 <HAL_SPI_TransmitReceive_IT+0x5c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d102      	bne.n	8009994 <HAL_SPI_TransmitReceive_IT+0x5c>
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	2b04      	cmp	r3, #4
 8009992:	d002      	beq.n	800999a <HAL_SPI_TransmitReceive_IT+0x62>
  {
    errorcode = HAL_BUSY;
 8009994:	2302      	movs	r3, #2
 8009996:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009998:	e052      	b.n	8009a40 <HAL_SPI_TransmitReceive_IT+0x108>
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d005      	beq.n	80099ac <HAL_SPI_TransmitReceive_IT+0x74>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d002      	beq.n	80099ac <HAL_SPI_TransmitReceive_IT+0x74>
 80099a6:	887b      	ldrh	r3, [r7, #2]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d102      	bne.n	80099b2 <HAL_SPI_TransmitReceive_IT+0x7a>
  {
    errorcode = HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80099b0:	e046      	b.n	8009a40 <HAL_SPI_TransmitReceive_IT+0x108>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d103      	bne.n	80099c6 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2205      	movs	r2, #5
 80099c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	887a      	ldrh	r2, [r7, #2]
 80099d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	887a      	ldrh	r2, [r7, #2]
 80099dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	887a      	ldrh	r2, [r7, #2]
 80099e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	887a      	ldrh	r2, [r7, #2]
 80099ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d006      	beq.n	8009a06 <HAL_SPI_TransmitReceive_IT+0xce>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4a17      	ldr	r2, [pc, #92]	; (8009a58 <HAL_SPI_TransmitReceive_IT+0x120>)
 80099fc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	4a16      	ldr	r2, [pc, #88]	; (8009a5c <HAL_SPI_TransmitReceive_IT+0x124>)
 8009a02:	645a      	str	r2, [r3, #68]	; 0x44
 8009a04:	e005      	b.n	8009a12 <HAL_SPI_TransmitReceive_IT+0xda>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	4a15      	ldr	r2, [pc, #84]	; (8009a60 <HAL_SPI_TransmitReceive_IT+0x128>)
 8009a0a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4a15      	ldr	r2, [pc, #84]	; (8009a64 <HAL_SPI_TransmitReceive_IT+0x12c>)
 8009a10:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	6812      	ldr	r2, [r2, #0]
 8009a1a:	6852      	ldr	r2, [r2, #4]
 8009a1c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009a20:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2c:	2b40      	cmp	r3, #64	; 0x40
 8009a2e:	d007      	beq.n	8009a40 <HAL_SPI_TransmitReceive_IT+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	6812      	ldr	r2, [r2, #0]
 8009a38:	6812      	ldr	r2, [r2, #0]
 8009a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a3e:	601a      	str	r2, [r3, #0]
  }

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3724      	adds	r7, #36	; 0x24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	0800a9af 	.word	0x0800a9af
 8009a5c:	0800aa0f 	.word	0x0800aa0f
 8009a60:	0800a8f3 	.word	0x0800a8f3
 8009a64:	0800a951 	.word	0x0800a951

08009a68 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	4613      	mov	r3, r2
 8009a74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_SPI_Transmit_DMA+0x20>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e083      	b.n	8009b90 <HAL_SPI_Transmit_DMA+0x128>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d002      	beq.n	8009aa2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009aa0:	e071      	b.n	8009b86 <HAL_SPI_Transmit_DMA+0x11e>
  }

  if((pData == NULL) || (Size == 0))
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <HAL_SPI_Transmit_DMA+0x46>
 8009aa8:	88fb      	ldrh	r3, [r7, #6]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d102      	bne.n	8009ab4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009ab2:	e068      	b.n	8009b86 <HAL_SPI_Transmit_DMA+0x11e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2203      	movs	r2, #3
 8009ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	88fa      	ldrh	r2, [r7, #6]
 8009acc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	88fa      	ldrh	r2, [r7, #6]
 8009ad2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009afa:	d107      	bne.n	8009b0c <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	6812      	ldr	r2, [r2, #0]
 8009b04:	6812      	ldr	r2, [r2, #0]
 8009b06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b10:	4a21      	ldr	r2, [pc, #132]	; (8009b98 <HAL_SPI_Transmit_DMA+0x130>)
 8009b12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b18:	4a20      	ldr	r2, [pc, #128]	; (8009b9c <HAL_SPI_Transmit_DMA+0x134>)
 8009b1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b20:	4a1f      	ldr	r2, [pc, #124]	; (8009ba0 <HAL_SPI_Transmit_DMA+0x138>)
 8009b22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b28:	2200      	movs	r2, #0
 8009b2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b34:	4619      	mov	r1, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	330c      	adds	r3, #12
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	f7f8 fa91 	bl	800206a <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b52:	2b40      	cmp	r3, #64	; 0x40
 8009b54:	d007      	beq.n	8009b66 <HAL_SPI_Transmit_DMA+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	6812      	ldr	r2, [r2, #0]
 8009b5e:	6812      	ldr	r2, [r2, #0]
 8009b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b64:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	6812      	ldr	r2, [r2, #0]
 8009b6e:	6852      	ldr	r2, [r2, #4]
 8009b70:	f042 0220 	orr.w	r2, r2, #32
 8009b74:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	6812      	ldr	r2, [r2, #0]
 8009b7e:	6852      	ldr	r2, [r2, #4]
 8009b80:	f042 0202 	orr.w	r2, r2, #2
 8009b84:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	0800a6ed 	.word	0x0800a6ed
 8009b9c:	0800a54d 	.word	0x0800a54d
 8009ba0:	0800a741 	.word	0x0800a741

08009ba4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d110      	bne.n	8009be0 <HAL_SPI_Receive_DMA+0x3c>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bc6:	d10b      	bne.n	8009be0 <HAL_SPI_Receive_DMA+0x3c>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2204      	movs	r2, #4
 8009bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8009bd0:	88fb      	ldrh	r3, [r7, #6]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	68b9      	ldr	r1, [r7, #8]
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 f894 	bl	8009d04 <HAL_SPI_TransmitReceive_DMA>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	e087      	b.n	8009cf0 <HAL_SPI_Receive_DMA+0x14c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d101      	bne.n	8009bee <HAL_SPI_Receive_DMA+0x4a>
 8009bea:	2302      	movs	r3, #2
 8009bec:	e080      	b.n	8009cf0 <HAL_SPI_Receive_DMA+0x14c>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d002      	beq.n	8009c08 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8009c02:	2302      	movs	r3, #2
 8009c04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c06:	e06e      	b.n	8009ce6 <HAL_SPI_Receive_DMA+0x142>
  }

  if((pData == NULL) || (Size == 0))
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d002      	beq.n	8009c14 <HAL_SPI_Receive_DMA+0x70>
 8009c0e:	88fb      	ldrh	r3, [r7, #6]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d102      	bne.n	8009c1a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c18:	e065      	b.n	8009ce6 <HAL_SPI_Receive_DMA+0x142>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	88fa      	ldrh	r2, [r7, #6]
 8009c32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	88fa      	ldrh	r2, [r7, #6]
 8009c38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c5a:	d107      	bne.n	8009c6c <HAL_SPI_Receive_DMA+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	6812      	ldr	r2, [r2, #0]
 8009c64:	6812      	ldr	r2, [r2, #0]
 8009c66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c70:	4a21      	ldr	r2, [pc, #132]	; (8009cf8 <HAL_SPI_Receive_DMA+0x154>)
 8009c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c78:	4a20      	ldr	r2, [pc, #128]	; (8009cfc <HAL_SPI_Receive_DMA+0x158>)
 8009c7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c80:	4a1f      	ldr	r2, [pc, #124]	; (8009d00 <HAL_SPI_Receive_DMA+0x15c>)
 8009c82:	64da      	str	r2, [r3, #76]	; 0x4c

 /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c88:	2200      	movs	r2, #0
 8009c8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	330c      	adds	r3, #12
 8009c96:	4619      	mov	r1, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	f7f8 f9e1 	bl	800206a <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb2:	2b40      	cmp	r3, #64	; 0x40
 8009cb4:	d007      	beq.n	8009cc6 <HAL_SPI_Receive_DMA+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	6812      	ldr	r2, [r2, #0]
 8009cbe:	6812      	ldr	r2, [r2, #0]
 8009cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cc4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	6812      	ldr	r2, [r2, #0]
 8009cce:	6852      	ldr	r2, [r2, #4]
 8009cd0:	f042 0220 	orr.w	r2, r2, #32
 8009cd4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	6812      	ldr	r2, [r2, #0]
 8009cde:	6852      	ldr	r2, [r2, #4]
 8009ce0:	f042 0201 	orr.w	r2, r2, #1
 8009ce4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	0800a709 	.word	0x0800a709
 8009cfc:	0800a5e7 	.word	0x0800a5e7
 8009d00:	0800a741 	.word	0x0800a741

08009d04 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b088      	sub	sp, #32
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	61bb      	str	r3, [r7, #24]
 8009d16:	2300      	movs	r3, #0
 8009d18:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d101      	bne.n	8009d2c <HAL_SPI_TransmitReceive_DMA+0x28>
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e0c4      	b.n	8009eb6 <HAL_SPI_TransmitReceive_DMA+0x1b2>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmp  = hspi->State;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	617b      	str	r3, [r7, #20]
  if(!((tmp == HAL_SPI_STATE_READY) ||
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d00d      	beq.n	8009d66 <HAL_SPI_TransmitReceive_DMA+0x62>
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d50:	d106      	bne.n	8009d60 <HAL_SPI_TransmitReceive_DMA+0x5c>
      ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d102      	bne.n	8009d60 <HAL_SPI_TransmitReceive_DMA+0x5c>
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	2b04      	cmp	r3, #4
 8009d5e:	d002      	beq.n	8009d66 <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 8009d60:	2302      	movs	r3, #2
 8009d62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d64:	e0a2      	b.n	8009eac <HAL_SPI_TransmitReceive_DMA+0x1a8>
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d005      	beq.n	8009d78 <HAL_SPI_TransmitReceive_DMA+0x74>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <HAL_SPI_TransmitReceive_DMA+0x74>
 8009d72:	887b      	ldrh	r3, [r7, #2]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d102      	bne.n	8009d7e <HAL_SPI_TransmitReceive_DMA+0x7a>
  {
    errorcode = HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d7c:	e096      	b.n	8009eac <HAL_SPI_TransmitReceive_DMA+0x1a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d103      	bne.n	8009d92 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2205      	movs	r2, #5
 8009d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	887a      	ldrh	r2, [r7, #2]
 8009da2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	887a      	ldrh	r2, [r7, #2]
 8009da8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t*)pRxData;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	887a      	ldrh	r2, [r7, #2]
 8009db4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	887a      	ldrh	r2, [r7, #2]
 8009dba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	d108      	bne.n	8009de6 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dd8:	4a39      	ldr	r2, [pc, #228]	; (8009ec0 <HAL_SPI_TransmitReceive_DMA+0x1bc>)
 8009dda:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009de0:	4a38      	ldr	r2, [pc, #224]	; (8009ec4 <HAL_SPI_TransmitReceive_DMA+0x1c0>)
 8009de2:	63da      	str	r2, [r3, #60]	; 0x3c
 8009de4:	e007      	b.n	8009df6 <HAL_SPI_TransmitReceive_DMA+0xf2>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dea:	4a37      	ldr	r2, [pc, #220]	; (8009ec8 <HAL_SPI_TransmitReceive_DMA+0x1c4>)
 8009dec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009df2:	4a36      	ldr	r2, [pc, #216]	; (8009ecc <HAL_SPI_TransmitReceive_DMA+0x1c8>)
 8009df4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dfa:	4a35      	ldr	r2, [pc, #212]	; (8009ed0 <HAL_SPI_TransmitReceive_DMA+0x1cc>)
 8009dfc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e02:	2200      	movs	r2, #0
 8009e04:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	330c      	adds	r3, #12
 8009e10:	4619      	mov	r1, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e16:	461a      	mov	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	f7f8 f924 	bl	800206a <HAL_DMA_Start_IT>

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	6812      	ldr	r2, [r2, #0]
 8009e2a:	6852      	ldr	r2, [r2, #4]
 8009e2c:	f042 0201 	orr.w	r2, r2, #1
 8009e30:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e36:	2200      	movs	r2, #0
 8009e38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e3e:	2200      	movs	r2, #0
 8009e40:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e46:	2200      	movs	r2, #0
 8009e48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e4e:	2200      	movs	r2, #0
 8009e50:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	330c      	adds	r3, #12
 8009e62:	461a      	mov	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f7f8 f8fe 	bl	800206a <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e78:	2b40      	cmp	r3, #64	; 0x40
 8009e7a:	d007      	beq.n	8009e8c <HAL_SPI_TransmitReceive_DMA+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	6812      	ldr	r2, [r2, #0]
 8009e84:	6812      	ldr	r2, [r2, #0]
 8009e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e8a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	6812      	ldr	r2, [r2, #0]
 8009e94:	6852      	ldr	r2, [r2, #4]
 8009e96:	f042 0220 	orr.w	r2, r2, #32
 8009e9a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	6812      	ldr	r2, [r2, #0]
 8009ea4:	6852      	ldr	r2, [r2, #4]
 8009ea6:	f042 0202 	orr.w	r2, r2, #2
 8009eaa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009eb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3720      	adds	r7, #32
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	0800a709 	.word	0x0800a709
 8009ec4:	0800a5e7 	.word	0x0800a5e7
 8009ec8:	0800a725 	.word	0x0800a725
 8009ecc:	0800a66b 	.word	0x0800a66b
 8009ed0:	0800a741 	.word	0x0800a741

08009ed4 <HAL_SPI_Abort>:
  * @note   Once transfer is aborted, the __HAL_SPI_CLEAR_OVRFLAG() macro must be called in user application 
  *         before starting new SPI receive process.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009edc:	4b4e      	ldr	r3, [pc, #312]	; (800a018 <HAL_SPI_Abort+0x144>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a4e      	ldr	r2, [pc, #312]	; (800a01c <HAL_SPI_Abort+0x148>)
 8009ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee6:	0a5b      	lsrs	r3, r3, #9
 8009ee8:	2264      	movs	r2, #100	; 0x64
 8009eea:	fb02 f303 	mul.w	r3, r2, r3
 8009eee:	617b      	str	r3, [r7, #20]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if(HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <HAL_SPI_Abort+0x30>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a47      	ldr	r2, [pc, #284]	; (800a020 <HAL_SPI_Abort+0x14c>)
 8009f02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if(HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <HAL_SPI_Abort+0x44>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a43      	ldr	r2, [pc, #268]	; (800a024 <HAL_SPI_Abort+0x150>)
 8009f16:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Clear ERRIE interrupts in case of DMA Mode */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	6812      	ldr	r2, [r2, #0]
 8009f20:	6852      	ldr	r2, [r2, #4]
 8009f22:	f022 0220 	bic.w	r2, r2, #32
 8009f26:	605a      	str	r2, [r3, #4]

  /* Disable the SPI DMA Tx or SPI DMA Rx request if enabled */
  if ((HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN)))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d106      	bne.n	8009f44 <HAL_SPI_Abort+0x70>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d044      	beq.n	8009fce <HAL_SPI_Abort+0xfa>
  {
    /* Abort the SPI DMA Tx channel : use blocking DMA Abort API (no callback) */  
    if(hspi->hdmatx != NULL)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d023      	beq.n	8009f94 <HAL_SPI_Abort+0xc0>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f50:	2200      	movs	r2, #0
 8009f52:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      HAL_DMA_Abort(hspi->hdmatx);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7f8 f8e6 	bl	800212a <HAL_DMA_Abort>

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	6812      	ldr	r2, [r2, #0]
 8009f66:	6852      	ldr	r2, [r2, #4]
 8009f68:	f022 0202 	bic.w	r2, r2, #2
 8009f6c:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if(count-- == 0U)
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	1e5a      	subs	r2, r3, #1
 8009f72:	617a      	str	r2, [r7, #20]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d106      	bne.n	8009f86 <HAL_SPI_Abort+0xb2>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f7c:	f043 0220 	orr.w	r2, r3, #32
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8009f84:	e006      	b.n	8009f94 <HAL_SPI_Abort+0xc0>
        }
      }
      while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);       
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f003 0302 	and.w	r3, r3, #2
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d0ec      	beq.n	8009f6e <HAL_SPI_Abort+0x9a>
    }
    /* Abort the SPI DMA Rx channel : use blocking DMA Abort API (no callback) */
    if(hspi->hdmarx != NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d018      	beq.n	8009fce <HAL_SPI_Abort+0xfa>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      HAL_DMA_Abort(hspi->hdmarx);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7f8 f8be 	bl	800212a <HAL_DMA_Abort>

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi); 
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	6812      	ldr	r2, [r2, #0]
 8009fb6:	6812      	ldr	r2, [r2, #0]
 8009fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fbc:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	6812      	ldr	r2, [r2, #0]
 8009fc6:	6852      	ldr	r2, [r2, #4]
 8009fc8:	f022 0201 	bic.w	r2, r2, #1
 8009fcc:	605a      	str	r2, [r3, #4]
      
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Reset errorCode */
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	613b      	str	r3, [r7, #16]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	613b      	str	r3, [r7, #16]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	613b      	str	r3, [r7, #16]
 8009ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	60fb      	str	r3, [r7, #12]
 800a002:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3718      	adds	r7, #24
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20000008 	.word	0x20000008
 800a01c:	057619f1 	.word	0x057619f1
 800a020:	0800af49 	.word	0x0800af49
 800a024:	0800aec5 	.word	0x0800aec5

0800a028 <HAL_SPI_Abort_IT>:
  * @note   Once transfer is aborted, the __HAL_SPI_CLEAR_OVRFLAG() macro must be called in user application 
  *         before starting new SPI receive process.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt;

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if(HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d002      	beq.n	800a044 <HAL_SPI_Abort_IT+0x1c>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a68      	ldr	r2, [pc, #416]	; (800a1e4 <HAL_SPI_Abort_IT+0x1bc>)
 800a042:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if(HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <HAL_SPI_Abort_IT+0x30>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a64      	ldr	r2, [pc, #400]	; (800a1e8 <HAL_SPI_Abort_IT+0x1c0>)
 800a056:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Clear ERRIE interrupts in case of DMA Mode */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	6852      	ldr	r2, [r2, #4]
 800a062:	f022 0220 	bic.w	r2, r2, #32
 800a066:	605a      	str	r2, [r3, #4]

  abortcplt = 1U;
 800a068:	2301      	movs	r3, #1
 800a06a:	617b      	str	r3, [r7, #20]
  
  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */  
  /* DMA Tx Handle is valid */
  if(hspi->hdmatx != NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00f      	beq.n	800a094 <HAL_SPI_Abort_IT+0x6c>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if(HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f003 0302 	and.w	r3, r3, #2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d004      	beq.n	800a08c <HAL_SPI_Abort_IT+0x64>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a086:	4a59      	ldr	r2, [pc, #356]	; (800a1ec <HAL_SPI_Abort_IT+0x1c4>)
 800a088:	651a      	str	r2, [r3, #80]	; 0x50
 800a08a:	e003      	b.n	800a094 <HAL_SPI_Abort_IT+0x6c>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a090:	2200      	movs	r2, #0
 800a092:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }  
  /* DMA Rx Handle is valid */
  if(hspi->hdmarx != NULL)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00f      	beq.n	800a0bc <HAL_SPI_Abort_IT+0x94>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if(HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d004      	beq.n	800a0b4 <HAL_SPI_Abort_IT+0x8c>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ae:	4a50      	ldr	r2, [pc, #320]	; (800a1f0 <HAL_SPI_Abort_IT+0x1c8>)
 800a0b0:	651a      	str	r2, [r3, #80]	; 0x50
 800a0b2:	e003      	b.n	800a0bc <HAL_SPI_Abort_IT+0x94>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
  if((HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN)) && (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN)))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d02e      	beq.n	800a128 <HAL_SPI_Abort_IT+0x100>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	f003 0301 	and.w	r3, r3, #1
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d027      	beq.n	800a128 <HAL_SPI_Abort_IT+0x100>
  {
    /* Abort the SPI DMA Tx channel */
    if(hspi->hdmatx != NULL)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00e      	beq.n	800a0fe <HAL_SPI_Abort_IT+0xd6>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if(HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7f8 f890 	bl	800220a <HAL_DMA_Abort_IT>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d004      	beq.n	800a0fa <HAL_SPI_Abort_IT+0xd2>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	651a      	str	r2, [r3, #80]	; 0x50
 800a0f8:	e001      	b.n	800a0fe <HAL_SPI_Abort_IT+0xd6>
      }
      else
      {
        abortcplt = 0U;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	617b      	str	r3, [r7, #20]
      }
    }
    /* Abort the SPI DMA Rx channel */
    if(hspi->hdmarx != NULL)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d010      	beq.n	800a128 <HAL_SPI_Abort_IT+0x100>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if(HAL_DMA_Abort_IT(hspi->hdmarx)!=  HAL_OK)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7f8 f87d 	bl	800220a <HAL_DMA_Abort_IT>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d006      	beq.n	800a124 <HAL_SPI_Abort_IT+0xfc>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a11a:	2200      	movs	r2, #0
 800a11c:	651a      	str	r2, [r3, #80]	; 0x50
        abortcplt = 1U;
 800a11e:	2301      	movs	r3, #1
 800a120:	617b      	str	r3, [r7, #20]
 800a122:	e001      	b.n	800a128 <HAL_SPI_Abort_IT+0x100>
      }
      else
      {
        abortcplt = 0U;
 800a124:	2300      	movs	r3, #0
 800a126:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	f003 0302 	and.w	r3, r3, #2
 800a132:	2b00      	cmp	r3, #0
 800a134:	d012      	beq.n	800a15c <HAL_SPI_Abort_IT+0x134>
  {
    /* Abort the SPI DMA Tx channel */
    if(hspi->hdmatx != NULL)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00e      	beq.n	800a15c <HAL_SPI_Abort_IT+0x134>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if(HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a142:	4618      	mov	r0, r3
 800a144:	f7f8 f861 	bl	800220a <HAL_DMA_Abort_IT>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d004      	beq.n	800a158 <HAL_SPI_Abort_IT+0x130>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a152:	2200      	movs	r2, #0
 800a154:	651a      	str	r2, [r3, #80]	; 0x50
 800a156:	e001      	b.n	800a15c <HAL_SPI_Abort_IT+0x134>
      }
      else
      {
        abortcplt = 0U;
 800a158:	2300      	movs	r3, #0
 800a15a:	617b      	str	r3, [r7, #20]
      }
    }
  }
  /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	d012      	beq.n	800a190 <HAL_SPI_Abort_IT+0x168>
  {
    /* Abort the SPI DMA Rx channel */
    if(hspi->hdmarx != NULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00e      	beq.n	800a190 <HAL_SPI_Abort_IT+0x168>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if(HAL_DMA_Abort_IT(hspi->hdmarx)!=  HAL_OK)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a176:	4618      	mov	r0, r3
 800a178:	f7f8 f847 	bl	800220a <HAL_DMA_Abort_IT>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d004      	beq.n	800a18c <HAL_SPI_Abort_IT+0x164>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a186:	2200      	movs	r2, #0
 800a188:	651a      	str	r2, [r3, #80]	; 0x50
 800a18a:	e001      	b.n	800a190 <HAL_SPI_Abort_IT+0x168>
      }
      else
      {
        abortcplt = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  if(abortcplt == 1U)
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d121      	bne.n	800a1da <HAL_SPI_Abort_IT+0x1b2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	613b      	str	r3, [r7, #16]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	613b      	str	r3, [r7, #16]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	613b      	str	r3, [r7, #16]
 800a1bc:	693b      	ldr	r3, [r7, #16]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	60fb      	str	r3, [r7, #12]
 800a1ca:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_SPI_AbortCpltCallback(hspi);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f995 	bl	800a504 <HAL_SPI_AbortCpltCallback>
  }
  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	0800af49 	.word	0x0800af49
 800a1e8:	0800aec5 	.word	0x0800aec5
 800a1ec:	0800a7a9 	.word	0x0800a7a9
 800a1f0:	0800a85d 	.word	0x0800a85d

0800a1f4 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a202:	2b01      	cmp	r3, #1
 800a204:	d101      	bne.n	800a20a <HAL_SPI_DMAPause+0x16>
 800a206:	2302      	movs	r3, #2
 800a208:	e010      	b.n	800a22c <HAL_SPI_DMAPause+0x38>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	6812      	ldr	r2, [r2, #0]
 800a21a:	6852      	ldr	r2, [r2, #4]
 800a21c:	f022 0203 	bic.w	r2, r2, #3
 800a220:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a246:	2b01      	cmp	r3, #1
 800a248:	d101      	bne.n	800a24e <HAL_SPI_DMAResume+0x16>
 800a24a:	2302      	movs	r3, #2
 800a24c:	e010      	b.n	800a270 <HAL_SPI_DMAResume+0x38>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	6812      	ldr	r2, [r2, #0]
 800a25e:	6852      	ldr	r2, [r2, #4]
 800a260:	f042 0203 	orr.w	r2, r2, #3
 800a264:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream */
  if(hspi->hdmatx != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d004      	beq.n	800a296 <HAL_SPI_DMAStop+0x1a>
  {
    HAL_DMA_Abort(hspi->hdmatx);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a290:	4618      	mov	r0, r3
 800a292:	f7f7 ff4a 	bl	800212a <HAL_DMA_Abort>
  }
  /* Abort the SPI DMA rx Stream */
  if(hspi->hdmarx != NULL)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d004      	beq.n	800a2a8 <HAL_SPI_DMAStop+0x2c>
  {
    HAL_DMA_Abort(hspi->hdmarx);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7f7 ff41 	bl	800212a <HAL_DMA_Abort>
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	6812      	ldr	r2, [r2, #0]
 800a2b0:	6852      	ldr	r2, [r2, #4]
 800a2b2:	f022 0203 	bic.w	r2, r2, #3
 800a2b6:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return HAL_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b088      	sub	sp, #32
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10e      	bne.n	800a30a <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	f003 0301 	and.w	r3, r3, #1
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d009      	beq.n	800a30a <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d004      	beq.n	800a30a <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	4798      	blx	r3
    return;
 800a308:	e0b1      	b.n	800a46e <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	f003 0302 	and.w	r3, r3, #2
 800a310:	2b00      	cmp	r3, #0
 800a312:	d009      	beq.n	800a328 <HAL_SPI_IRQHandler+0x5e>
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d004      	beq.n	800a328 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	4798      	blx	r3
    return;
 800a326:	e0a2      	b.n	800a46e <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	f403 73b0 	and.w	r3, r3, #352	; 0x160
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f000 809d 	beq.w	800a46e <HAL_SPI_IRQHandler+0x1a4>
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	f003 0320 	and.w	r3, r3, #32
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 8097 	beq.w	800a46e <HAL_SPI_IRQHandler+0x1a4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a346:	2b00      	cmp	r3, #0
 800a348:	d023      	beq.n	800a392 <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b03      	cmp	r3, #3
 800a354:	d011      	beq.n	800a37a <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a35a:	f043 0204 	orr.w	r2, r3, #4
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	617b      	str	r3, [r7, #20]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	617b      	str	r3, [r7, #20]
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	e00b      	b.n	800a392 <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a37a:	2300      	movs	r3, #0
 800a37c:	613b      	str	r3, [r7, #16]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	613b      	str	r3, [r7, #16]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	613b      	str	r3, [r7, #16]
 800a38e:	693b      	ldr	r3, [r7, #16]
        return;
 800a390:	e06d      	b.n	800a46e <HAL_SPI_IRQHandler+0x1a4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	f003 0320 	and.w	r3, r3, #32
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d014      	beq.n	800a3c6 <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a0:	f043 0201 	orr.w	r2, r3, #1
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	6812      	ldr	r2, [r2, #0]
 800a3bc:	6812      	ldr	r2, [r2, #0]
 800a3be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00c      	beq.n	800a3ea <HAL_SPI_IRQHandler+0x120>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d4:	f043 0208 	orr.w	r2, r3, #8
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60bb      	str	r3, [r7, #8]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	60bb      	str	r3, [r7, #8]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d03c      	beq.n	800a46c <HAL_SPI_IRQHandler+0x1a2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	6812      	ldr	r2, [r2, #0]
 800a3fa:	6852      	ldr	r2, [r2, #4]
 800a3fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a400:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	f003 0302 	and.w	r3, r3, #2
 800a410:	2b00      	cmp	r3, #0
 800a412:	d104      	bne.n	800a41e <HAL_SPI_IRQHandler+0x154>
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d022      	beq.n	800a464 <HAL_SPI_IRQHandler+0x19a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	6812      	ldr	r2, [r2, #0]
 800a426:	6852      	ldr	r2, [r2, #4]
 800a428:	f022 0203 	bic.w	r2, r2, #3
 800a42c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a432:	2b00      	cmp	r3, #0
 800a434:	d008      	beq.n	800a448 <HAL_SPI_IRQHandler+0x17e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a43a:	4a0e      	ldr	r2, [pc, #56]	; (800a474 <HAL_SPI_IRQHandler+0x1aa>)
 800a43c:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a442:	4618      	mov	r0, r3
 800a444:	f7f7 fee1 	bl	800220a <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00c      	beq.n	800a46a <HAL_SPI_IRQHandler+0x1a0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a454:	4a07      	ldr	r2, [pc, #28]	; (800a474 <HAL_SPI_IRQHandler+0x1aa>)
 800a456:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7f7 fed4 	bl	800220a <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 800a462:	e002      	b.n	800a46a <HAL_SPI_IRQHandler+0x1a0>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f843 	bl	800a4f0 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 800a46a:	bf00      	nop
 800a46c:	bf00      	nop
  }
}
 800a46e:	3720      	adds	r7, #32
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	0800a781 	.word	0x0800a781

0800a478 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
  */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
  */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
  */
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
  */
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
  */
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
  */
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a526:	b2db      	uxtb	r3, r3
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a540:	4618      	mov	r0, r3
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a558:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a55e:	f7f5 fee7 	bl	8000330 <HAL_GetTick>
 800a562:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d133      	bne.n	800a5da <SPI_DMATransmitCplt+0x8e>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	6812      	ldr	r2, [r2, #0]
 800a57a:	6852      	ldr	r2, [r2, #4]
 800a57c:	f022 0202 	bic.w	r2, r2, #2
 800a580:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a582:	693a      	ldr	r2, [r7, #16]
 800a584:	2164      	movs	r1, #100	; 0x64
 800a586:	6978      	ldr	r0, [r7, #20]
 800a588:	f000 fb62 	bl	800ac50 <SPI_CheckFlag_BSY>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d005      	beq.n	800a59e <SPI_DMATransmitCplt+0x52>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a596:	f043 0220 	orr.w	r2, r3, #32
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10a      	bne.n	800a5bc <SPI_DMATransmitCplt+0x70>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60fb      	str	r3, [r7, #12]
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	60fb      	str	r3, [r7, #12]
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	60fb      	str	r3, [r7, #12]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <SPI_DMATransmitCplt+0x8e>
    {
      HAL_SPI_ErrorCallback(hspi);
 800a5d2:	6978      	ldr	r0, [r7, #20]
 800a5d4:	f7ff ff8c 	bl	800a4f0 <HAL_SPI_ErrorCallback>
      return;
 800a5d8:	e002      	b.n	800a5e0 <SPI_DMATransmitCplt+0x94>
    }
  }
  HAL_SPI_TxCpltCallback(hspi);
 800a5da:	6978      	ldr	r0, [r7, #20]
 800a5dc:	f7ff ff4c 	bl	800a478 <HAL_SPI_TxCpltCallback>
}
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
#endif /* USE_SPI_CRC */
 
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d12d      	bne.n	800a65e <SPI_DMAReceiveCplt+0x78>
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	6812      	ldr	r2, [r2, #0]
 800a60a:	6852      	ldr	r2, [r2, #4]
 800a60c:	f022 0203 	bic.w	r2, r2, #3
 800a610:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a61a:	d111      	bne.n	800a640 <SPI_DMAReceiveCplt+0x5a>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a624:	d004      	beq.n	800a630 <SPI_DMAReceiveCplt+0x4a>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a62e:	d107      	bne.n	800a640 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	6812      	ldr	r2, [r2, #0]
 800a638:	6812      	ldr	r2, [r2, #0]
 800a63a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a63e:	601a      	str	r2, [r3, #0]
    }

    hspi->RxXferCount = 0U;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a652:	2b00      	cmp	r3, #0
 800a654:	d003      	beq.n	800a65e <SPI_DMAReceiveCplt+0x78>
    {
      HAL_SPI_ErrorCallback(hspi);
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f7ff ff4a 	bl	800a4f0 <HAL_SPI_ErrorCallback>
      return;
 800a65c:	e002      	b.n	800a664 <SPI_DMAReceiveCplt+0x7e>
    }
  }
  HAL_SPI_RxCpltCallback(hspi);
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7ff ff14 	bl	800a48c <HAL_SPI_RxCpltCallback>
}
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a676:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 800a678:	2300      	movs	r3, #0
 800a67a:	60bb      	str	r3, [r7, #8]
#if (USE_SPI_CRC != 0U)
  __IO int16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a67c:	f7f5 fe58 	bl	8000330 <HAL_GetTick>
 800a680:	60b8      	str	r0, [r7, #8]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d127      	bne.n	800a6e0 <SPI_DMATransmitReceiveCplt+0x76>
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */
    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	2164      	movs	r1, #100	; 0x64
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 fadb 	bl	800ac50 <SPI_CheckFlag_BSY>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d005      	beq.n	800a6ac <SPI_DMATransmitReceiveCplt+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a4:	f043 0220 	orr.w	r2, r3, #32
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	6812      	ldr	r2, [r2, #0]
 800a6b4:	6852      	ldr	r2, [r2, #4]
 800a6b6:	f022 0203 	bic.w	r2, r2, #3
 800a6ba:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d003      	beq.n	800a6e0 <SPI_DMATransmitReceiveCplt+0x76>
    {
      HAL_SPI_ErrorCallback(hspi);
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f7ff ff09 	bl	800a4f0 <HAL_SPI_ErrorCallback>
      return;
 800a6de:	e002      	b.n	800a6e6 <SPI_DMATransmitReceiveCplt+0x7c>
    }
  }
  HAL_SPI_TxRxCpltCallback(hspi);
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7ff fedd 	bl	800a4a0 <HAL_SPI_TxRxCpltCallback>
}
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f8:	60fb      	str	r3, [r7, #12]

  HAL_SPI_TxHalfCpltCallback(hspi);
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f7ff feda 	bl	800a4b4 <HAL_SPI_TxHalfCpltCallback>
}
 800a700:	bf00      	nop
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a714:	60fb      	str	r3, [r7, #12]

  HAL_SPI_RxHalfCpltCallback(hspi);
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7ff fed6 	bl	800a4c8 <HAL_SPI_RxHalfCpltCallback>
}
 800a71c:	bf00      	nop
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a730:	60fb      	str	r3, [r7, #12]

  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7ff fed2 	bl	800a4dc <HAL_SPI_TxRxHalfCpltCallback>
}
 800a738:	bf00      	nop
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74c:	60fb      	str	r3, [r7, #12]

/* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	6812      	ldr	r2, [r2, #0]
 800a756:	6852      	ldr	r2, [r2, #4]
 800a758:	f022 0203 	bic.w	r2, r2, #3
 800a75c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a762:	f043 0210 	orr.w	r2, r3, #16
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2201      	movs	r2, #1
 800a76e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f7ff febc 	bl	800a4f0 <HAL_SPI_ErrorCallback>
}
 800a778:	bf00      	nop
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f7ff fea8 	bl	800a4f0 <HAL_SPI_ErrorCallback>
}
 800a7a0:	bf00      	nop
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a7b0:	4b28      	ldr	r3, [pc, #160]	; (800a854 <SPI_DMATxAbortCallback+0xac>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a28      	ldr	r2, [pc, #160]	; (800a858 <SPI_DMATxAbortCallback+0xb0>)
 800a7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ba:	0a5b      	lsrs	r3, r3, #9
 800a7bc:	2264      	movs	r2, #100	; 0x64
 800a7be:	fb02 f303 	mul.w	r3, r2, r3
 800a7c2:	613b      	str	r3, [r7, #16]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c8:	617b      	str	r3, [r7, #20]

  hspi->hdmatx->XferAbortCallback = NULL;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN );
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	6812      	ldr	r2, [r2, #0]
 800a7da:	6852      	ldr	r2, [r2, #4]
 800a7dc:	f022 0202 	bic.w	r2, r2, #2
 800a7e0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0U)
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	1e5a      	subs	r2, r3, #1
 800a7e6:	613a      	str	r2, [r7, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d106      	bne.n	800a7fa <SPI_DMATxAbortCallback+0x52>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f0:	f043 0220 	orr.w	r2, r3, #32
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a7f8:	e006      	b.n	800a808 <SPI_DMATxAbortCallback+0x60>
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	f003 0302 	and.w	r3, r3, #2
 800a804:	2b00      	cmp	r3, #0
 800a806:	d0ec      	beq.n	800a7e2 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if(hspi->hdmarx != NULL)
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d004      	beq.n	800a81a <SPI_DMATxAbortCallback+0x72>
  {
    if(hspi->hdmarx->XferAbortCallback != NULL)
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a816:	2b00      	cmp	r3, #0
 800a818:	d117      	bne.n	800a84a <SPI_DMATxAbortCallback+0xa2>
      return;
    }
  }
  
  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	2200      	movs	r2, #0
 800a81e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	2200      	movs	r2, #0
 800a824:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Reset errorCode */
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2200      	movs	r2, #0
 800a82a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a82c:	2300      	movs	r3, #0
 800a82e:	60fb      	str	r3, [r7, #12]
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	60fb      	str	r3, [r7, #12]
 800a838:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
  HAL_SPI_AbortCpltCallback(hspi);
 800a842:	6978      	ldr	r0, [r7, #20]
 800a844:	f7ff fe5e 	bl	800a504 <HAL_SPI_AbortCpltCallback>
 800a848:	e000      	b.n	800a84c <SPI_DMATxAbortCallback+0xa4>
      return;
 800a84a:	bf00      	nop
}
 800a84c:	3718      	adds	r7, #24
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	20000008 	.word	0x20000008
 800a858:	057619f1 	.word	0x057619f1

0800a85c <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b086      	sub	sp, #24
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a868:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	6812      	ldr	r2, [r2, #0]
 800a872:	6812      	ldr	r2, [r2, #0]
 800a874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a878:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87e:	2200      	movs	r2, #0
 800a880:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	6812      	ldr	r2, [r2, #0]
 800a88a:	6852      	ldr	r2, [r2, #4]
 800a88c:	f022 0201 	bic.w	r2, r2, #1
 800a890:	605a      	str	r2, [r3, #4]

  /* Check if an Abort process is still ongoing */
  if(hspi->hdmatx != NULL)
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a896:	2b00      	cmp	r3, #0
 800a898:	d004      	beq.n	800a8a4 <SPI_DMARxAbortCallback+0x48>
  {
    if(hspi->hdmatx->XferAbortCallback != NULL)
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a89e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d122      	bne.n	800a8ea <SPI_DMARxAbortCallback+0x8e>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Reset errorCode */
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	613b      	str	r3, [r7, #16]
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	613b      	str	r3, [r7, #16]
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	613b      	str	r3, [r7, #16]
 800a8ca:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);  
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
  HAL_SPI_AbortCpltCallback(hspi);
 800a8e2:	6978      	ldr	r0, [r7, #20]
 800a8e4:	f7ff fe0e 	bl	800a504 <HAL_SPI_AbortCpltCallback>
 800a8e8:	e000      	b.n	800a8ec <SPI_DMARxAbortCallback+0x90>
      return;
 800a8ea:	bf00      	nop
}
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b082      	sub	sp, #8
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fe:	1c59      	adds	r1, r3, #1
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	6391      	str	r1, [r2, #56]	; 0x38
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	6812      	ldr	r2, [r2, #0]
 800a908:	320c      	adds	r2, #12
 800a90a:	7812      	ldrb	r2, [r2, #0]
 800a90c:	b2d2      	uxtb	r2, r2
 800a90e:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a914:	b29b      	uxth	r3, r3
 800a916:	3b01      	subs	r3, #1
 800a918:	b29a      	uxth	r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* check end of the reception */
  if(hspi->RxXferCount == 0U)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a922:	b29b      	uxth	r3, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10f      	bne.n	800a948 <SPI_2linesRxISR_8BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	6812      	ldr	r2, [r2, #0]
 800a930:	6852      	ldr	r2, [r2, #4]
 800a932:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a936:	605a      	str	r2, [r3, #4]

    if(hspi->TxXferCount == 0U)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d102      	bne.n	800a948 <SPI_2linesRxISR_8BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f9a2 	bl	800ac8c <SPI_CloseRxTx_ISR>
    }
  }
}
 800a948:	bf00      	nop
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f103 020c 	add.w	r2, r3, #12
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a964:	1c58      	adds	r0, r3, #1
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	6308      	str	r0, [r1, #48]	; 0x30
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	7013      	strb	r3, [r2, #0]
  hspi->TxXferCount--;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a972:	b29b      	uxth	r3, r3
 800a974:	3b01      	subs	r3, #1
 800a976:	b29a      	uxth	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* check the end of the transmission */
  if(hspi->TxXferCount == 0U)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a980:	b29b      	uxth	r3, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10f      	bne.n	800a9a6 <SPI_2linesTxISR_8BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	6812      	ldr	r2, [r2, #0]
 800a98e:	6852      	ldr	r2, [r2, #4]
 800a990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a994:	605a      	str	r2, [r3, #4]

    if(hspi->RxXferCount == 0U)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d102      	bne.n	800a9a6 <SPI_2linesTxISR_8BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f973 	bl	800ac8c <SPI_CloseRxTx_ISR>
    }
  }
}
 800a9a6:	bf00      	nop
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	6812      	ldr	r2, [r2, #0]
 800a9be:	68d2      	ldr	r2, [r2, #12]
 800a9c0:	b292      	uxth	r2, r2
 800a9c2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c8:	1c9a      	adds	r2, r3, #2
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	87da      	strh	r2, [r3, #62]	; 0x3e

  if(hspi->RxXferCount == 0U)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10f      	bne.n	800aa06 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	6812      	ldr	r2, [r2, #0]
 800a9ee:	6852      	ldr	r2, [r2, #4]
 800a9f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9f4:	605a      	str	r2, [r3, #4]

    if(hspi->TxXferCount == 0U)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d102      	bne.n	800aa06 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f943 	bl	800ac8c <SPI_CloseRxTx_ISR>
    }
  }
}
 800aa06:	bf00      	nop
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b082      	sub	sp, #8
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aa1e:	8812      	ldrh	r2, [r2, #0]
 800aa20:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa26:	1c9a      	adds	r2, r3, #2
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	3b01      	subs	r3, #1
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if(hspi->TxXferCount == 0U)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10f      	bne.n	800aa64 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	6812      	ldr	r2, [r2, #0]
 800aa4c:	6852      	ldr	r2, [r2, #4]
 800aa4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa52:	605a      	str	r2, [r3, #4]

    if(hspi->RxXferCount == 0U)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d102      	bne.n	800aa64 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f914 	bl	800ac8c <SPI_CloseRxTx_ISR>
    }
  }
}
 800aa64:	bf00      	nop
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa78:	1c59      	adds	r1, r3, #1
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	6391      	str	r1, [r2, #56]	; 0x38
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	6812      	ldr	r2, [r2, #0]
 800aa82:	320c      	adds	r2, #12
 800aa84:	7812      	ldrb	r2, [r2, #0]
 800aa86:	b2d2      	uxtb	r2, r2
 800aa88:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	3b01      	subs	r3, #1
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->RxXferCount == 0U)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d102      	bne.n	800aaa8 <SPI_RxISR_8BIT+0x3c>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f966 	bl	800ad74 <SPI_CloseRx_ISR>
  }
}
 800aaa8:	bf00      	nop
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	6812      	ldr	r2, [r2, #0]
 800aac0:	68d2      	ldr	r2, [r2, #12]
 800aac2:	b292      	uxth	r2, r2
 800aac4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaca:	1c9a      	adds	r2, r3, #2
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	3b01      	subs	r3, #1
 800aad8:	b29a      	uxth	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->RxXferCount == 0U)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 f943 	bl	800ad74 <SPI_CloseRx_ISR>
  }
}
 800aaee:	bf00      	nop
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b082      	sub	sp, #8
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f103 020c 	add.w	r2, r3, #12
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0a:	1c58      	adds	r0, r3, #1
 800ab0c:	6879      	ldr	r1, [r7, #4]
 800ab0e:	6308      	str	r0, [r1, #48]	; 0x30
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	7013      	strb	r3, [r2, #0]
  hspi->TxXferCount--;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	86da      	strh	r2, [r3, #54]	; 0x36

  if(hspi->TxXferCount == 0U)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d102      	bne.n	800ab32 <SPI_TxISR_8BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f966 	bl	800adfe <SPI_CloseTx_ISR>
  }
}
 800ab32:	bf00      	nop
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b082      	sub	sp, #8
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ab4a:	8812      	ldrh	r2, [r2, #0]
 800ab4c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab52:	1c9a      	adds	r2, r3, #2
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	86da      	strh	r2, [r3, #54]	; 0x36

  if(hspi->TxXferCount == 0U)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d102      	bne.n	800ab76 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f944 	bl	800adfe <SPI_CloseTx_ISR>
  }
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	60f8      	str	r0, [r7, #12]
 800ab86:	60b9      	str	r1, [r7, #8]
 800ab88:	607a      	str	r2, [r7, #4]
 800ab8a:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800ab8c:	e04d      	b.n	800ac2a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab94:	d049      	beq.n	800ac2a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d007      	beq.n	800abac <SPI_WaitFlagStateUntilTimeout+0x2e>
 800ab9c:	f7f5 fbc8 	bl	8000330 <HAL_GetTick>
 800aba0:	4602      	mov	r2, r0
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	1ad2      	subs	r2, r2, r3
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d33e      	bcc.n	800ac2a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	6812      	ldr	r2, [r2, #0]
 800abb4:	6852      	ldr	r2, [r2, #4]
 800abb6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800abba:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abc4:	d111      	bne.n	800abea <SPI_WaitFlagStateUntilTimeout+0x6c>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abce:	d004      	beq.n	800abda <SPI_WaitFlagStateUntilTimeout+0x5c>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abd8:	d107      	bne.n	800abea <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	6812      	ldr	r2, [r2, #0]
 800abe2:	6812      	ldr	r2, [r2, #0]
 800abe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abe8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abf2:	d110      	bne.n	800ac16 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	6819      	ldr	r1, [r3, #0]
 800abfe:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800ac02:	400b      	ands	r3, r1
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	6812      	ldr	r2, [r2, #0]
 800ac0e:	6812      	ldr	r2, [r2, #0]
 800ac10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac14:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e00e      	b.n	800ac48 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	401a      	ands	r2, r3
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d101      	bne.n	800ac3e <SPI_WaitFlagStateUntilTimeout+0xc0>
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	e000      	b.n	800ac40 <SPI_WaitFlagStateUntilTimeout+0xc2>
 800ac3e:	2200      	movs	r2, #0
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d1a3      	bne.n	800ab8e <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b086      	sub	sp, #24
 800ac54:	af02      	add	r7, sp, #8
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2200      	movs	r2, #0
 800ac64:	2180      	movs	r1, #128	; 0x80
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f7ff ff89 	bl	800ab7e <SPI_WaitFlagStateUntilTimeout>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d007      	beq.n	800ac82 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac76:	f043 0220 	orr.w	r2, r3, #32
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800ac7e:	2303      	movs	r3, #3
 800ac80:	e000      	b.n	800ac84 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ac94:	2300      	movs	r3, #0
 800ac96:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800ac98:	4b34      	ldr	r3, [pc, #208]	; (800ad6c <SPI_CloseRxTx_ISR+0xe0>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a34      	ldr	r2, [pc, #208]	; (800ad70 <SPI_CloseRxTx_ISR+0xe4>)
 800ac9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aca2:	0a5b      	lsrs	r3, r3, #9
 800aca4:	2264      	movs	r2, #100	; 0x64
 800aca6:	fb02 f303 	mul.w	r3, r2, r3
 800acaa:	613b      	str	r3, [r7, #16]
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800acac:	f7f5 fb40 	bl	8000330 <HAL_GetTick>
 800acb0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	6812      	ldr	r2, [r2, #0]
 800acba:	6852      	ldr	r2, [r2, #4]
 800acbc:	f022 0220 	bic.w	r2, r2, #32
 800acc0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0U)
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	1e5a      	subs	r2, r3, #1
 800acc6:	613a      	str	r2, [r7, #16]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d106      	bne.n	800acda <SPI_CloseRxTx_ISR+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acd0:	f043 0220 	orr.w	r2, r3, #32
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800acd8:	e006      	b.n	800ace8 <SPI_CloseRxTx_ISR+0x5c>
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	f003 0302 	and.w	r3, r3, #2
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d0ec      	beq.n	800acc2 <SPI_CloseRxTx_ISR+0x36>
  
  /* Check the end of the transaction */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart)!=HAL_OK)
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	2164      	movs	r1, #100	; 0x64
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff ffaf 	bl	800ac50 <SPI_CheckFlag_BSY>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d005      	beq.n	800ad04 <SPI_CloseRxTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acfc:	f043 0220 	orr.w	r2, r3, #32
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10a      	bne.n	800ad22 <SPI_CloseRxTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	60fb      	str	r3, [r7, #12]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	60fb      	str	r3, [r7, #12]
 800ad20:	68fb      	ldr	r3, [r7, #12]
    HAL_SPI_ErrorCallback(hspi);
  }
  else
  {
#endif /* USE_SPI_CRC */
    if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d115      	bne.n	800ad56 <SPI_CloseRxTx_ISR+0xca>
    {
      if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	d107      	bne.n	800ad46 <SPI_CloseRxTx_ISR+0xba>
      {
      	hspi->State = HAL_SPI_STATE_READY;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7ff fba4 	bl	800a48c <HAL_SPI_RxCpltCallback>
      HAL_SPI_ErrorCallback(hspi);
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800ad44:	e00e      	b.n	800ad64 <SPI_CloseRxTx_ISR+0xd8>
      	hspi->State = HAL_SPI_STATE_READY;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff fba6 	bl	800a4a0 <HAL_SPI_TxRxCpltCallback>
}
 800ad54:	e006      	b.n	800ad64 <SPI_CloseRxTx_ISR+0xd8>
      hspi->State = HAL_SPI_STATE_READY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7ff fbc6 	bl	800a4f0 <HAL_SPI_ErrorCallback>
}
 800ad64:	bf00      	nop
 800ad66:	3718      	adds	r7, #24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	20000008 	.word	0x20000008
 800ad70:	057619f1 	.word	0x057619f1

0800ad74 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	6812      	ldr	r2, [r2, #0]
 800ad84:	6852      	ldr	r2, [r2, #4]
 800ad86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ad8a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad94:	d111      	bne.n	800adba <SPI_CloseRx_ISR+0x46>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad9e:	d004      	beq.n	800adaa <SPI_CloseRx_ISR+0x36>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ada8:	d107      	bne.n	800adba <SPI_CloseRx_ISR+0x46>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	6812      	ldr	r2, [r2, #0]
 800adb2:	6812      	ldr	r2, [r2, #0]
 800adb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adb8:	601a      	str	r2, [r3, #0]
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10a      	bne.n	800add8 <SPI_CloseRx_ISR+0x64>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800adc2:	2300      	movs	r3, #0
 800adc4:	60fb      	str	r3, [r7, #12]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	60fb      	str	r3, [r7, #12]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	60fb      	str	r3, [r7, #12]
 800add6:	68fb      	ldr	r3, [r7, #12]
    }
    hspi->State = HAL_SPI_STATE_READY;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
    }
    else
    {
#endif /* USE_SPI_CRC */
      if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d103      	bne.n	800adf0 <SPI_CloseRx_ISR+0x7c>
      {
        HAL_SPI_RxCpltCallback(hspi);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff fb4f 	bl	800a48c <HAL_SPI_RxCpltCallback>
        HAL_SPI_ErrorCallback(hspi);
      }
#if (USE_SPI_CRC != 0U)
    }
#endif /* USE_SPI_CRC */
}
 800adee:	e002      	b.n	800adf6 <SPI_CloseRx_ISR+0x82>
        HAL_SPI_ErrorCallback(hspi);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7ff fb7d 	bl	800a4f0 <HAL_SPI_ErrorCallback>
}
 800adf6:	bf00      	nop
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b086      	sub	sp, #24
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ae06:	2300      	movs	r3, #0
 800ae08:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800ae0a:	4b2c      	ldr	r3, [pc, #176]	; (800aebc <SPI_CloseTx_ISR+0xbe>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a2c      	ldr	r2, [pc, #176]	; (800aec0 <SPI_CloseTx_ISR+0xc2>)
 800ae10:	fba2 2303 	umull	r2, r3, r2, r3
 800ae14:	0a5b      	lsrs	r3, r3, #9
 800ae16:	2264      	movs	r2, #100	; 0x64
 800ae18:	fb02 f303 	mul.w	r3, r2, r3
 800ae1c:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae1e:	f7f5 fa87 	bl	8000330 <HAL_GetTick>
 800ae22:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0U)
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	1e5a      	subs	r2, r3, #1
 800ae28:	613a      	str	r2, [r7, #16]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d106      	bne.n	800ae3c <SPI_CloseTx_ISR+0x3e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae32:	f043 0220 	orr.w	r2, r3, #32
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae3a:	e006      	b.n	800ae4a <SPI_CloseTx_ISR+0x4c>
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0ec      	beq.n	800ae24 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	6812      	ldr	r2, [r2, #0]
 800ae52:	6852      	ldr	r2, [r2, #4]
 800ae54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ae58:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	2164      	movs	r1, #100	; 0x64
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7ff fef6 	bl	800ac50 <SPI_CheckFlag_BSY>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d005      	beq.n	800ae76 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae6e:	f043 0220 	orr.w	r2, r3, #32
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10a      	bne.n	800ae94 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	60fb      	str	r3, [r7, #12]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	60fb      	str	r3, [r7, #12]
 800ae92:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d003      	beq.n	800aeac <SPI_CloseTx_ISR+0xae>
  {
    HAL_SPI_ErrorCallback(hspi);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7ff fb23 	bl	800a4f0 <HAL_SPI_ErrorCallback>
  }
  else
  {
    HAL_SPI_TxCpltCallback(hspi);
  }
}
 800aeaa:	e002      	b.n	800aeb2 <SPI_CloseTx_ISR+0xb4>
    HAL_SPI_TxCpltCallback(hspi);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff fae3 	bl	800a478 <HAL_SPI_TxCpltCallback>
}
 800aeb2:	bf00      	nop
 800aeb4:	3718      	adds	r7, #24
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	20000008 	.word	0x20000008
 800aec0:	057619f1 	.word	0x057619f1

0800aec4 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 800aecc:	2300      	movs	r3, #0
 800aece:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800aed0:	4b1b      	ldr	r3, [pc, #108]	; (800af40 <SPI_AbortRx_ISR+0x7c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a1b      	ldr	r2, [pc, #108]	; (800af44 <SPI_AbortRx_ISR+0x80>)
 800aed6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeda:	0a5b      	lsrs	r3, r3, #9
 800aedc:	2264      	movs	r2, #100	; 0x64
 800aede:	fb02 f303 	mul.w	r3, r2, r3
 800aee2:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0U)
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	1e5a      	subs	r2, r3, #1
 800aee8:	60ba      	str	r2, [r7, #8]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d106      	bne.n	800aefc <SPI_AbortRx_ISR+0x38>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef2:	f043 0220 	orr.w	r2, r3, #32
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aefa:	e006      	b.n	800af0a <SPI_AbortRx_ISR+0x46>
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	f003 0302 	and.w	r3, r3, #2
 800af06:	2b00      	cmp	r3, #0
 800af08:	d0ec      	beq.n	800aee4 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);    
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	6812      	ldr	r2, [r2, #0]
 800af12:	6812      	ldr	r2, [r2, #0]
 800af14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af18:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	6812      	ldr	r2, [r2, #0]
 800af22:	6852      	ldr	r2, [r2, #4]
 800af24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af28:	605a      	str	r2, [r3, #4]

  /* Flush DR Register */
  tmpreg = (*(__IO uint32_t *)&hspi->Instance->DR);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	60fb      	str	r3, [r7, #12]

  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800af32:	68fb      	ldr	r3, [r7, #12]
}
 800af34:	bf00      	nop
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr
 800af40:	20000008 	.word	0x20000008
 800af44:	057619f1 	.word	0x057619f1

0800af48 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	6812      	ldr	r2, [r2, #0]
 800af58:	6852      	ldr	r2, [r2, #4]
 800af5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af5e:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	6812      	ldr	r2, [r2, #0]
 800af68:	6812      	ldr	r2, [r2, #0]
 800af6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af6e:	601a      	str	r2, [r3, #0]
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e01d      	b.n	800afca <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d106      	bne.n	800afa8 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f009 fa1a 	bl	80143dc <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2202      	movs	r2, #2
 800afac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3304      	adds	r3, #4
 800afb8:	4619      	mov	r1, r3
 800afba:	4610      	mov	r0, r2
 800afbc:	f003 f974 	bl	800e2a8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <HAL_TIM_Base_DeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{  
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b082      	sub	sp, #8
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2202      	movs	r2, #2
 800afde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6a1a      	ldr	r2, [r3, #32]
 800afe8:	f241 1311 	movw	r3, #4369	; 0x1111
 800afec:	4013      	ands	r3, r2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10f      	bne.n	800b012 <HAL_TIM_Base_DeInit+0x40>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6a1a      	ldr	r2, [r3, #32]
 800aff8:	f240 4344 	movw	r3, #1092	; 0x444
 800affc:	4013      	ands	r3, r2
 800affe:	2b00      	cmp	r3, #0
 800b000:	d107      	bne.n	800b012 <HAL_TIM_Base_DeInit+0x40>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	6812      	ldr	r2, [r2, #0]
 800b00a:	6812      	ldr	r2, [r2, #0]
 800b00c:	f022 0201 	bic.w	r2, r2, #1
 800b010:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f009 fa22 	bl	801445c <HAL_TIM_Base_MspDeInit>
  
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b032:	b480      	push	{r7}
 800b034:	b083      	sub	sp, #12
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b03a:	bf00      	nop
 800b03c:	370c      	adds	r7, #12
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 800b046:	b480      	push	{r7}
 800b048:	b083      	sub	sp, #12
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 800b04e:	bf00      	nop
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b083      	sub	sp, #12
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2202      	movs	r2, #2
 800b066:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	6812      	ldr	r2, [r2, #0]
 800b072:	6812      	ldr	r2, [r2, #0]
 800b074:	f042 0201 	orr.w	r2, r2, #1
 800b078:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <HAL_TIM_Base_Stop>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2202      	movs	r2, #2
 800b09c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6a1a      	ldr	r2, [r3, #32]
 800b0a6:	f241 1311 	movw	r3, #4369	; 0x1111
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10f      	bne.n	800b0d0 <HAL_TIM_Base_Stop+0x40>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6a1a      	ldr	r2, [r3, #32]
 800b0b6:	f240 4344 	movw	r3, #1092	; 0x444
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d107      	bne.n	800b0d0 <HAL_TIM_Base_Stop+0x40>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	6812      	ldr	r2, [r2, #0]
 800b0c8:	6812      	ldr	r2, [r2, #0]
 800b0ca:	f022 0201 	bic.w	r2, r2, #1
 800b0ce:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b083      	sub	sp, #12
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	6812      	ldr	r2, [r2, #0]
 800b0f6:	68d2      	ldr	r2, [r2, #12]
 800b0f8:	f042 0201 	orr.w	r2, r2, #1
 800b0fc:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	6812      	ldr	r2, [r2, #0]
 800b106:	6812      	ldr	r2, [r2, #0]
 800b108:	f042 0201 	orr.w	r2, r2, #1
 800b10c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <HAL_TIM_Base_Stop_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	6812      	ldr	r2, [r2, #0]
 800b12c:	68d2      	ldr	r2, [r2, #12]
 800b12e:	f022 0201 	bic.w	r2, r2, #1
 800b132:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6a1a      	ldr	r2, [r3, #32]
 800b13a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b13e:	4013      	ands	r3, r2
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10f      	bne.n	800b164 <HAL_TIM_Base_Stop_IT+0x48>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	6a1a      	ldr	r2, [r3, #32]
 800b14a:	f240 4344 	movw	r3, #1092	; 0x444
 800b14e:	4013      	ands	r3, r2
 800b150:	2b00      	cmp	r3, #0
 800b152:	d107      	bne.n	800b164 <HAL_TIM_Base_Stop_IT+0x48>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	6812      	ldr	r2, [r2, #0]
 800b15c:	6812      	ldr	r2, [r2, #0]
 800b15e:	f022 0201 	bic.w	r2, r2, #1
 800b162:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b084      	sub	sp, #16
 800b176:	af00      	add	r7, sp, #0
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	60b9      	str	r1, [r7, #8]
 800b17c:	4613      	mov	r3, r2
 800b17e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance)); 
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d101      	bne.n	800b190 <HAL_TIM_Base_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800b18c:	2302      	movs	r3, #2
 800b18e:	e034      	b.n	800b1fa <HAL_TIM_Base_Start_DMA+0x88>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b196:	b2db      	uxtb	r3, r3
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d10b      	bne.n	800b1b4 <HAL_TIM_Base_Start_DMA+0x42>
  {
    if((pData == 0U) && (Length > 0)) 
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d104      	bne.n	800b1ac <HAL_TIM_Base_Start_DMA+0x3a>
 800b1a2:	88fb      	ldrh	r3, [r7, #6]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e026      	b.n	800b1fa <HAL_TIM_Base_Start_DMA+0x88>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2202      	movs	r2, #2
 800b1b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }  
  /* Set the DMA Period elapsed callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	4a12      	ldr	r2, [pc, #72]	; (800b204 <HAL_TIM_Base_Start_DMA+0x92>)
 800b1ba:	63da      	str	r2, [r3, #60]	; 0x3c
     
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	69db      	ldr	r3, [r3, #28]
 800b1c0:	4a11      	ldr	r2, [pc, #68]	; (800b208 <HAL_TIM_Base_Start_DMA+0x96>)
 800b1c2:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	69d8      	ldr	r0, [r3, #28]
 800b1c8:	68b9      	ldr	r1, [r7, #8]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	332c      	adds	r3, #44	; 0x2c
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	88fb      	ldrh	r3, [r7, #6]
 800b1d4:	f7f6 ff49 	bl	800206a <HAL_DMA_Start_IT>
  
  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	6812      	ldr	r2, [r2, #0]
 800b1e0:	68d2      	ldr	r2, [r2, #12]
 800b1e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);  
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	6812      	ldr	r2, [r2, #0]
 800b1f0:	6812      	ldr	r2, [r2, #0]
 800b1f2:	f042 0201 	orr.w	r2, r2, #1
 800b1f6:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	0800e72f 	.word	0x0800e72f
 800b208:	0800e655 	.word	0x0800e655

0800b20c <HAL_TIM_Base_Stop_DMA>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	6812      	ldr	r2, [r2, #0]
 800b21c:	68d2      	ldr	r2, [r2, #12]
 800b21e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b222:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6a1a      	ldr	r2, [r3, #32]
 800b22a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b22e:	4013      	ands	r3, r2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10f      	bne.n	800b254 <HAL_TIM_Base_Stop_DMA+0x48>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6a1a      	ldr	r2, [r3, #32]
 800b23a:	f240 4344 	movw	r3, #1092	; 0x444
 800b23e:	4013      	ands	r3, r2
 800b240:	2b00      	cmp	r3, #0
 800b242:	d107      	bne.n	800b254 <HAL_TIM_Base_Stop_DMA+0x48>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	6812      	ldr	r2, [r2, #0]
 800b24c:	6812      	ldr	r2, [r2, #0]
 800b24e:	f022 0201 	bic.w	r2, r2, #1
 800b252:	601a      	str	r2, [r3, #0]
    
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      
  /* Return function status */
  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <HAL_TIM_OC_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b082      	sub	sp, #8
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	e01d      	b.n	800b2b8 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b282:	b2db      	uxtb	r3, r3
 800b284:	2b00      	cmp	r3, #0
 800b286:	d106      	bne.n	800b296 <HAL_TIM_OC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f845 	bl	800b320 <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2202      	movs	r2, #2
 800b29a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	f002 fffd 	bl	800e2a8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <HAL_TIM_OC_DeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   htim->State = HAL_TIM_STATE_BUSY;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6a1a      	ldr	r2, [r3, #32]
 800b2d6:	f241 1311 	movw	r3, #4369	; 0x1111
 800b2da:	4013      	ands	r3, r2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10f      	bne.n	800b300 <HAL_TIM_OC_DeInit+0x40>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6a1a      	ldr	r2, [r3, #32]
 800b2e6:	f240 4344 	movw	r3, #1092	; 0x444
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d107      	bne.n	800b300 <HAL_TIM_OC_DeInit+0x40>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	6812      	ldr	r2, [r2, #0]
 800b2f8:	6812      	ldr	r2, [r2, #0]
 800b2fa:	f022 0201 	bic.w	r2, r2, #1
 800b2fe:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f817 	bl	800b334 <HAL_TIM_OC_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <HAL_TIM_OC_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <HAL_TIM_OC_MspDeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2201      	movs	r2, #1
 800b358:	6839      	ldr	r1, [r7, #0]
 800b35a:	4618      	mov	r0, r3
 800b35c:	f003 f9c4 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a10      	ldr	r2, [pc, #64]	; (800b3a8 <HAL_TIM_OC_Start+0x60>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d004      	beq.n	800b374 <HAL_TIM_OC_Start+0x2c>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a0f      	ldr	r2, [pc, #60]	; (800b3ac <HAL_TIM_OC_Start+0x64>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d101      	bne.n	800b378 <HAL_TIM_OC_Start+0x30>
 800b374:	2301      	movs	r3, #1
 800b376:	e000      	b.n	800b37a <HAL_TIM_OC_Start+0x32>
 800b378:	2300      	movs	r3, #0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d007      	beq.n	800b38e <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	6812      	ldr	r2, [r2, #0]
 800b386:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b388:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b38c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	6812      	ldr	r2, [r2, #0]
 800b396:	6812      	ldr	r2, [r2, #0]
 800b398:	f042 0201 	orr.w	r2, r2, #1
 800b39c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	40010000 	.word	0x40010000
 800b3ac:	40010400 	.word	0x40010400

0800b3b0 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	6839      	ldr	r1, [r7, #0]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f003 f990 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a20      	ldr	r2, [pc, #128]	; (800b450 <HAL_TIM_OC_Stop+0xa0>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d004      	beq.n	800b3dc <HAL_TIM_OC_Stop+0x2c>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a1f      	ldr	r2, [pc, #124]	; (800b454 <HAL_TIM_OC_Stop+0xa4>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d101      	bne.n	800b3e0 <HAL_TIM_OC_Stop+0x30>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e000      	b.n	800b3e2 <HAL_TIM_OC_Stop+0x32>
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d017      	beq.n	800b416 <HAL_TIM_OC_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6a1a      	ldr	r2, [r3, #32]
 800b3ec:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10f      	bne.n	800b416 <HAL_TIM_OC_Stop+0x66>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6a1a      	ldr	r2, [r3, #32]
 800b3fc:	f240 4344 	movw	r3, #1092	; 0x444
 800b400:	4013      	ands	r3, r2
 800b402:	2b00      	cmp	r3, #0
 800b404:	d107      	bne.n	800b416 <HAL_TIM_OC_Stop+0x66>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	6812      	ldr	r2, [r2, #0]
 800b40e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b414:	645a      	str	r2, [r3, #68]	; 0x44
  }  
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);  
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	6a1a      	ldr	r2, [r3, #32]
 800b41c:	f241 1311 	movw	r3, #4369	; 0x1111
 800b420:	4013      	ands	r3, r2
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10f      	bne.n	800b446 <HAL_TIM_OC_Stop+0x96>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	6a1a      	ldr	r2, [r3, #32]
 800b42c:	f240 4344 	movw	r3, #1092	; 0x444
 800b430:	4013      	ands	r3, r2
 800b432:	2b00      	cmp	r3, #0
 800b434:	d107      	bne.n	800b446 <HAL_TIM_OC_Stop+0x96>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	6812      	ldr	r2, [r2, #0]
 800b43e:	6812      	ldr	r2, [r2, #0]
 800b440:	f022 0201 	bic.w	r2, r2, #1
 800b444:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800b446:	2300      	movs	r3, #0
}  
 800b448:	4618      	mov	r0, r3
 800b44a:	3708      	adds	r7, #8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	40010000 	.word	0x40010000
 800b454:	40010400 	.word	0x40010400

0800b458 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b0c      	cmp	r3, #12
 800b466:	d841      	bhi.n	800b4ec <HAL_TIM_OC_Start_IT+0x94>
 800b468:	a201      	add	r2, pc, #4	; (adr r2, 800b470 <HAL_TIM_OC_Start_IT+0x18>)
 800b46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46e:	bf00      	nop
 800b470:	0800b4a5 	.word	0x0800b4a5
 800b474:	0800b4ed 	.word	0x0800b4ed
 800b478:	0800b4ed 	.word	0x0800b4ed
 800b47c:	0800b4ed 	.word	0x0800b4ed
 800b480:	0800b4b7 	.word	0x0800b4b7
 800b484:	0800b4ed 	.word	0x0800b4ed
 800b488:	0800b4ed 	.word	0x0800b4ed
 800b48c:	0800b4ed 	.word	0x0800b4ed
 800b490:	0800b4c9 	.word	0x0800b4c9
 800b494:	0800b4ed 	.word	0x0800b4ed
 800b498:	0800b4ed 	.word	0x0800b4ed
 800b49c:	0800b4ed 	.word	0x0800b4ed
 800b4a0:	0800b4db 	.word	0x0800b4db
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	6812      	ldr	r2, [r2, #0]
 800b4ac:	68d2      	ldr	r2, [r2, #12]
 800b4ae:	f042 0202 	orr.w	r2, r2, #2
 800b4b2:	60da      	str	r2, [r3, #12]
    }
    break;
 800b4b4:	e01b      	b.n	800b4ee <HAL_TIM_OC_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	6812      	ldr	r2, [r2, #0]
 800b4be:	68d2      	ldr	r2, [r2, #12]
 800b4c0:	f042 0204 	orr.w	r2, r2, #4
 800b4c4:	60da      	str	r2, [r3, #12]
    }
    break;
 800b4c6:	e012      	b.n	800b4ee <HAL_TIM_OC_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	6812      	ldr	r2, [r2, #0]
 800b4d0:	68d2      	ldr	r2, [r2, #12]
 800b4d2:	f042 0208 	orr.w	r2, r2, #8
 800b4d6:	60da      	str	r2, [r3, #12]
    }
    break;
 800b4d8:	e009      	b.n	800b4ee <HAL_TIM_OC_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	6812      	ldr	r2, [r2, #0]
 800b4e2:	68d2      	ldr	r2, [r2, #12]
 800b4e4:	f042 0210 	orr.w	r2, r2, #16
 800b4e8:	60da      	str	r2, [r3, #12]
    }
    break;
 800b4ea:	e000      	b.n	800b4ee <HAL_TIM_OC_Start_IT+0x96>
    
    default:
    break;
 800b4ec:	bf00      	nop
  } 

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f003 f8f6 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a10      	ldr	r2, [pc, #64]	; (800b544 <HAL_TIM_OC_Start_IT+0xec>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d004      	beq.n	800b510 <HAL_TIM_OC_Start_IT+0xb8>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a0f      	ldr	r2, [pc, #60]	; (800b548 <HAL_TIM_OC_Start_IT+0xf0>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d101      	bne.n	800b514 <HAL_TIM_OC_Start_IT+0xbc>
 800b510:	2301      	movs	r3, #1
 800b512:	e000      	b.n	800b516 <HAL_TIM_OC_Start_IT+0xbe>
 800b514:	2300      	movs	r3, #0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d007      	beq.n	800b52a <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	6812      	ldr	r2, [r2, #0]
 800b522:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b524:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b528:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	6812      	ldr	r2, [r2, #0]
 800b532:	6812      	ldr	r2, [r2, #0]
 800b534:	f042 0201 	orr.w	r2, r2, #1
 800b538:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	40010000 	.word	0x40010000
 800b548:	40010400 	.word	0x40010400

0800b54c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	2b0c      	cmp	r3, #12
 800b55a:	d841      	bhi.n	800b5e0 <HAL_TIM_OC_Stop_IT+0x94>
 800b55c:	a201      	add	r2, pc, #4	; (adr r2, 800b564 <HAL_TIM_OC_Stop_IT+0x18>)
 800b55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b562:	bf00      	nop
 800b564:	0800b599 	.word	0x0800b599
 800b568:	0800b5e1 	.word	0x0800b5e1
 800b56c:	0800b5e1 	.word	0x0800b5e1
 800b570:	0800b5e1 	.word	0x0800b5e1
 800b574:	0800b5ab 	.word	0x0800b5ab
 800b578:	0800b5e1 	.word	0x0800b5e1
 800b57c:	0800b5e1 	.word	0x0800b5e1
 800b580:	0800b5e1 	.word	0x0800b5e1
 800b584:	0800b5bd 	.word	0x0800b5bd
 800b588:	0800b5e1 	.word	0x0800b5e1
 800b58c:	0800b5e1 	.word	0x0800b5e1
 800b590:	0800b5e1 	.word	0x0800b5e1
 800b594:	0800b5cf 	.word	0x0800b5cf
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	6812      	ldr	r2, [r2, #0]
 800b5a0:	68d2      	ldr	r2, [r2, #12]
 800b5a2:	f022 0202 	bic.w	r2, r2, #2
 800b5a6:	60da      	str	r2, [r3, #12]
    }
    break;
 800b5a8:	e01b      	b.n	800b5e2 <HAL_TIM_OC_Stop_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	6812      	ldr	r2, [r2, #0]
 800b5b2:	68d2      	ldr	r2, [r2, #12]
 800b5b4:	f022 0204 	bic.w	r2, r2, #4
 800b5b8:	60da      	str	r2, [r3, #12]
    }
    break;
 800b5ba:	e012      	b.n	800b5e2 <HAL_TIM_OC_Stop_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	6812      	ldr	r2, [r2, #0]
 800b5c4:	68d2      	ldr	r2, [r2, #12]
 800b5c6:	f022 0208 	bic.w	r2, r2, #8
 800b5ca:	60da      	str	r2, [r3, #12]
    }
    break;
 800b5cc:	e009      	b.n	800b5e2 <HAL_TIM_OC_Stop_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	6812      	ldr	r2, [r2, #0]
 800b5d6:	68d2      	ldr	r2, [r2, #12]
 800b5d8:	f022 0210 	bic.w	r2, r2, #16
 800b5dc:	60da      	str	r2, [r3, #12]
    }
    break;
 800b5de:	e000      	b.n	800b5e2 <HAL_TIM_OC_Stop_IT+0x96>
    
    default:
    break; 
 800b5e0:	bf00      	nop
  } 
  
  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f003 f87c 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a20      	ldr	r2, [pc, #128]	; (800b678 <HAL_TIM_OC_Stop_IT+0x12c>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d004      	beq.n	800b604 <HAL_TIM_OC_Stop_IT+0xb8>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a1f      	ldr	r2, [pc, #124]	; (800b67c <HAL_TIM_OC_Stop_IT+0x130>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d101      	bne.n	800b608 <HAL_TIM_OC_Stop_IT+0xbc>
 800b604:	2301      	movs	r3, #1
 800b606:	e000      	b.n	800b60a <HAL_TIM_OC_Stop_IT+0xbe>
 800b608:	2300      	movs	r3, #0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d017      	beq.n	800b63e <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	6a1a      	ldr	r2, [r3, #32]
 800b614:	f241 1311 	movw	r3, #4369	; 0x1111
 800b618:	4013      	ands	r3, r2
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d10f      	bne.n	800b63e <HAL_TIM_OC_Stop_IT+0xf2>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	6a1a      	ldr	r2, [r3, #32]
 800b624:	f240 4344 	movw	r3, #1092	; 0x444
 800b628:	4013      	ands	r3, r2
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d107      	bne.n	800b63e <HAL_TIM_OC_Stop_IT+0xf2>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	6812      	ldr	r2, [r2, #0]
 800b636:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b638:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b63c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);  
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	6a1a      	ldr	r2, [r3, #32]
 800b644:	f241 1311 	movw	r3, #4369	; 0x1111
 800b648:	4013      	ands	r3, r2
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10f      	bne.n	800b66e <HAL_TIM_OC_Stop_IT+0x122>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6a1a      	ldr	r2, [r3, #32]
 800b654:	f240 4344 	movw	r3, #1092	; 0x444
 800b658:	4013      	ands	r3, r2
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d107      	bne.n	800b66e <HAL_TIM_OC_Stop_IT+0x122>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	6812      	ldr	r2, [r2, #0]
 800b666:	6812      	ldr	r2, [r2, #0]
 800b668:	f022 0201 	bic.w	r2, r2, #1
 800b66c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	40010000 	.word	0x40010000
 800b67c:	40010400 	.word	0x40010400

0800b680 <HAL_TIM_OC_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
 800b68c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b694:	b2db      	uxtb	r3, r3
 800b696:	2b02      	cmp	r3, #2
 800b698:	d101      	bne.n	800b69e <HAL_TIM_OC_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800b69a:	2302      	movs	r3, #2
 800b69c:	e0c6      	b.n	800b82c <HAL_TIM_OC_Start_DMA+0x1ac>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d10b      	bne.n	800b6c2 <HAL_TIM_OC_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0)) 
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d104      	bne.n	800b6ba <HAL_TIM_OC_Start_DMA+0x3a>
 800b6b0:	887b      	ldrh	r3, [r7, #2]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <HAL_TIM_OC_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e0b8      	b.n	800b82c <HAL_TIM_OC_Start_DMA+0x1ac>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2202      	movs	r2, #2
 800b6be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }    
  switch (Channel)
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	2b0c      	cmp	r3, #12
 800b6c6:	f200 8089 	bhi.w	800b7dc <HAL_TIM_OC_Start_DMA+0x15c>
 800b6ca:	a201      	add	r2, pc, #4	; (adr r2, 800b6d0 <HAL_TIM_OC_Start_DMA+0x50>)
 800b6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d0:	0800b705 	.word	0x0800b705
 800b6d4:	0800b7dd 	.word	0x0800b7dd
 800b6d8:	0800b7dd 	.word	0x0800b7dd
 800b6dc:	0800b7dd 	.word	0x0800b7dd
 800b6e0:	0800b73b 	.word	0x0800b73b
 800b6e4:	0800b7dd 	.word	0x0800b7dd
 800b6e8:	0800b7dd 	.word	0x0800b7dd
 800b6ec:	0800b7dd 	.word	0x0800b7dd
 800b6f0:	0800b771 	.word	0x0800b771
 800b6f4:	0800b7dd 	.word	0x0800b7dd
 800b6f8:	0800b7dd 	.word	0x0800b7dd
 800b6fc:	0800b7dd 	.word	0x0800b7dd
 800b700:	0800b7a7 	.word	0x0800b7a7
  {
    case TIM_CHANNEL_1:
    {      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	4a4a      	ldr	r2, [pc, #296]	; (800b834 <HAL_TIM_OC_Start_DMA+0x1b4>)
 800b70a:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6a1b      	ldr	r3, [r3, #32]
 800b710:	4a49      	ldr	r2, [pc, #292]	; (800b838 <HAL_TIM_OC_Start_DMA+0x1b8>)
 800b712:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6a18      	ldr	r0, [r3, #32]
 800b718:	6879      	ldr	r1, [r7, #4]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	3334      	adds	r3, #52	; 0x34
 800b720:	461a      	mov	r2, r3
 800b722:	887b      	ldrh	r3, [r7, #2]
 800b724:	f7f6 fca1 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	6812      	ldr	r2, [r2, #0]
 800b730:	68d2      	ldr	r2, [r2, #12]
 800b732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b736:	60da      	str	r2, [r3, #12]
    }
    break;
 800b738:	e051      	b.n	800b7de <HAL_TIM_OC_Start_DMA+0x15e>
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73e:	4a3d      	ldr	r2, [pc, #244]	; (800b834 <HAL_TIM_OC_Start_DMA+0x1b4>)
 800b740:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b746:	4a3c      	ldr	r2, [pc, #240]	; (800b838 <HAL_TIM_OC_Start_DMA+0x1b8>)
 800b748:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b74e:	6879      	ldr	r1, [r7, #4]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3338      	adds	r3, #56	; 0x38
 800b756:	461a      	mov	r2, r3
 800b758:	887b      	ldrh	r3, [r7, #2]
 800b75a:	f7f6 fc86 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	6812      	ldr	r2, [r2, #0]
 800b766:	68d2      	ldr	r2, [r2, #12]
 800b768:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b76c:	60da      	str	r2, [r3, #12]
    }
    break;
 800b76e:	e036      	b.n	800b7de <HAL_TIM_OC_Start_DMA+0x15e>
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b774:	4a2f      	ldr	r2, [pc, #188]	; (800b834 <HAL_TIM_OC_Start_DMA+0x1b4>)
 800b776:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77c:	4a2e      	ldr	r2, [pc, #184]	; (800b838 <HAL_TIM_OC_Start_DMA+0x1b8>)
 800b77e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b784:	6879      	ldr	r1, [r7, #4]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	333c      	adds	r3, #60	; 0x3c
 800b78c:	461a      	mov	r2, r3
 800b78e:	887b      	ldrh	r3, [r7, #2]
 800b790:	f7f6 fc6b 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	6812      	ldr	r2, [r2, #0]
 800b79c:	68d2      	ldr	r2, [r2, #12]
 800b79e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7a2:	60da      	str	r2, [r3, #12]
    }
    break;
 800b7a4:	e01b      	b.n	800b7de <HAL_TIM_OC_Start_DMA+0x15e>
    
    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7aa:	4a22      	ldr	r2, [pc, #136]	; (800b834 <HAL_TIM_OC_Start_DMA+0x1b4>)
 800b7ac:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b2:	4a21      	ldr	r2, [pc, #132]	; (800b838 <HAL_TIM_OC_Start_DMA+0x1b8>)
 800b7b4:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b7ba:	6879      	ldr	r1, [r7, #4]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3340      	adds	r3, #64	; 0x40
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	887b      	ldrh	r3, [r7, #2]
 800b7c6:	f7f6 fc50 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	6812      	ldr	r2, [r2, #0]
 800b7d2:	68d2      	ldr	r2, [r2, #12]
 800b7d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b7d8:	60da      	str	r2, [r3, #12]
    }
    break;
 800b7da:	e000      	b.n	800b7de <HAL_TIM_OC_Start_DMA+0x15e>
    
    default:
    break;
 800b7dc:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	68b9      	ldr	r1, [r7, #8]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f002 ff7e 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a12      	ldr	r2, [pc, #72]	; (800b83c <HAL_TIM_OC_Start_DMA+0x1bc>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d004      	beq.n	800b800 <HAL_TIM_OC_Start_DMA+0x180>
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a11      	ldr	r2, [pc, #68]	; (800b840 <HAL_TIM_OC_Start_DMA+0x1c0>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d101      	bne.n	800b804 <HAL_TIM_OC_Start_DMA+0x184>
 800b800:	2301      	movs	r3, #1
 800b802:	e000      	b.n	800b806 <HAL_TIM_OC_Start_DMA+0x186>
 800b804:	2300      	movs	r3, #0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d007      	beq.n	800b81a <HAL_TIM_OC_Start_DMA+0x19a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	6812      	ldr	r2, [r2, #0]
 800b812:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b818:	645a      	str	r2, [r3, #68]	; 0x44
  }  
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	6812      	ldr	r2, [r2, #0]
 800b822:	6812      	ldr	r2, [r2, #0]
 800b824:	f042 0201 	orr.w	r2, r2, #1
 800b828:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	0800e5e5 	.word	0x0800e5e5
 800b838:	0800e655 	.word	0x0800e655
 800b83c:	40010000 	.word	0x40010000
 800b840:	40010400 	.word	0x40010400

0800b844 <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	2b0c      	cmp	r3, #12
 800b852:	d841      	bhi.n	800b8d8 <HAL_TIM_OC_Stop_DMA+0x94>
 800b854:	a201      	add	r2, pc, #4	; (adr r2, 800b85c <HAL_TIM_OC_Stop_DMA+0x18>)
 800b856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85a:	bf00      	nop
 800b85c:	0800b891 	.word	0x0800b891
 800b860:	0800b8d9 	.word	0x0800b8d9
 800b864:	0800b8d9 	.word	0x0800b8d9
 800b868:	0800b8d9 	.word	0x0800b8d9
 800b86c:	0800b8a3 	.word	0x0800b8a3
 800b870:	0800b8d9 	.word	0x0800b8d9
 800b874:	0800b8d9 	.word	0x0800b8d9
 800b878:	0800b8d9 	.word	0x0800b8d9
 800b87c:	0800b8b5 	.word	0x0800b8b5
 800b880:	0800b8d9 	.word	0x0800b8d9
 800b884:	0800b8d9 	.word	0x0800b8d9
 800b888:	0800b8d9 	.word	0x0800b8d9
 800b88c:	0800b8c7 	.word	0x0800b8c7
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	6812      	ldr	r2, [r2, #0]
 800b898:	68d2      	ldr	r2, [r2, #12]
 800b89a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b89e:	60da      	str	r2, [r3, #12]
    }
    break;
 800b8a0:	e01b      	b.n	800b8da <HAL_TIM_OC_Stop_DMA+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	6812      	ldr	r2, [r2, #0]
 800b8aa:	68d2      	ldr	r2, [r2, #12]
 800b8ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8b0:	60da      	str	r2, [r3, #12]
    }
    break;
 800b8b2:	e012      	b.n	800b8da <HAL_TIM_OC_Stop_DMA+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	6812      	ldr	r2, [r2, #0]
 800b8bc:	68d2      	ldr	r2, [r2, #12]
 800b8be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8c2:	60da      	str	r2, [r3, #12]
    }
    break;
 800b8c4:	e009      	b.n	800b8da <HAL_TIM_OC_Stop_DMA+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	6812      	ldr	r2, [r2, #0]
 800b8ce:	68d2      	ldr	r2, [r2, #12]
 800b8d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b8d4:	60da      	str	r2, [r3, #12]
    }
    break;
 800b8d6:	e000      	b.n	800b8da <HAL_TIM_OC_Stop_DMA+0x96>
    
    default:
    break;
 800b8d8:	bf00      	nop
  } 
  
  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	6839      	ldr	r1, [r7, #0]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f002 ff00 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a22      	ldr	r2, [pc, #136]	; (800b978 <HAL_TIM_OC_Stop_DMA+0x134>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d004      	beq.n	800b8fc <HAL_TIM_OC_Stop_DMA+0xb8>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a21      	ldr	r2, [pc, #132]	; (800b97c <HAL_TIM_OC_Stop_DMA+0x138>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d101      	bne.n	800b900 <HAL_TIM_OC_Stop_DMA+0xbc>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e000      	b.n	800b902 <HAL_TIM_OC_Stop_DMA+0xbe>
 800b900:	2300      	movs	r3, #0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d017      	beq.n	800b936 <HAL_TIM_OC_Stop_DMA+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6a1a      	ldr	r2, [r3, #32]
 800b90c:	f241 1311 	movw	r3, #4369	; 0x1111
 800b910:	4013      	ands	r3, r2
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10f      	bne.n	800b936 <HAL_TIM_OC_Stop_DMA+0xf2>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6a1a      	ldr	r2, [r3, #32]
 800b91c:	f240 4344 	movw	r3, #1092	; 0x444
 800b920:	4013      	ands	r3, r2
 800b922:	2b00      	cmp	r3, #0
 800b924:	d107      	bne.n	800b936 <HAL_TIM_OC_Stop_DMA+0xf2>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	6812      	ldr	r2, [r2, #0]
 800b92e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b930:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b934:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	6a1a      	ldr	r2, [r3, #32]
 800b93c:	f241 1311 	movw	r3, #4369	; 0x1111
 800b940:	4013      	ands	r3, r2
 800b942:	2b00      	cmp	r3, #0
 800b944:	d10f      	bne.n	800b966 <HAL_TIM_OC_Stop_DMA+0x122>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	6a1a      	ldr	r2, [r3, #32]
 800b94c:	f240 4344 	movw	r3, #1092	; 0x444
 800b950:	4013      	ands	r3, r2
 800b952:	2b00      	cmp	r3, #0
 800b954:	d107      	bne.n	800b966 <HAL_TIM_OC_Stop_DMA+0x122>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	6812      	ldr	r2, [r2, #0]
 800b95e:	6812      	ldr	r2, [r2, #0]
 800b960:	f022 0201 	bic.w	r2, r2, #1
 800b964:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2201      	movs	r2, #1
 800b96a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	40010000 	.word	0x40010000
 800b97c:	40010400 	.word	0x40010400

0800b980 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e01d      	b.n	800b9ce <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d106      	bne.n	800b9ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f845 	bl	800ba36 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	4619      	mov	r1, r3
 800b9be:	4610      	mov	r0, r2
 800b9c0:	f002 fc72 	bl	800e2a8 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
}  
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <HAL_TIM_PWM_DeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b082      	sub	sp, #8
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	6a1a      	ldr	r2, [r3, #32]
 800b9ec:	f241 1311 	movw	r3, #4369	; 0x1111
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10f      	bne.n	800ba16 <HAL_TIM_PWM_DeInit+0x40>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	6a1a      	ldr	r2, [r3, #32]
 800b9fc:	f240 4344 	movw	r3, #1092	; 0x444
 800ba00:	4013      	ands	r3, r2
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d107      	bne.n	800ba16 <HAL_TIM_PWM_DeInit+0x40>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	6812      	ldr	r2, [r2, #0]
 800ba0e:	6812      	ldr	r2, [r2, #0]
 800ba10:	f022 0201 	bic.w	r2, r2, #1
 800ba14:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f817 	bl	800ba4a <HAL_TIM_PWM_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <HAL_TIM_PWM_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b083      	sub	sp, #12
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ba3e:	bf00      	nop
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <HAL_TIM_PWM_MspDeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b083      	sub	sp, #12
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800ba52:	bf00      	nop
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f002 fe39 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a11      	ldr	r2, [pc, #68]	; (800bac0 <HAL_TIM_PWM_Start+0x62>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d004      	beq.n	800ba8a <HAL_TIM_PWM_Start+0x2c>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a0f      	ldr	r2, [pc, #60]	; (800bac4 <HAL_TIM_PWM_Start+0x66>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d101      	bne.n	800ba8e <HAL_TIM_PWM_Start+0x30>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e000      	b.n	800ba90 <HAL_TIM_PWM_Start+0x32>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d007      	beq.n	800baa4 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	6812      	ldr	r2, [r2, #0]
 800ba9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ba9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800baa2:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	6812      	ldr	r2, [r2, #0]
 800baac:	6812      	ldr	r2, [r2, #0]
 800baae:	f042 0201 	orr.w	r2, r2, #1
 800bab2:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
} 
 800bab6:	4618      	mov	r0, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	40010000 	.word	0x40010000
 800bac4:	40010400 	.word	0x40010400

0800bac8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2200      	movs	r2, #0
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	4618      	mov	r0, r3
 800badc:	f002 fe04 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a22      	ldr	r2, [pc, #136]	; (800bb70 <HAL_TIM_PWM_Stop+0xa8>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d004      	beq.n	800baf4 <HAL_TIM_PWM_Stop+0x2c>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a21      	ldr	r2, [pc, #132]	; (800bb74 <HAL_TIM_PWM_Stop+0xac>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d101      	bne.n	800baf8 <HAL_TIM_PWM_Stop+0x30>
 800baf4:	2301      	movs	r3, #1
 800baf6:	e000      	b.n	800bafa <HAL_TIM_PWM_Stop+0x32>
 800baf8:	2300      	movs	r3, #0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d017      	beq.n	800bb2e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	6a1a      	ldr	r2, [r3, #32]
 800bb04:	f241 1311 	movw	r3, #4369	; 0x1111
 800bb08:	4013      	ands	r3, r2
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10f      	bne.n	800bb2e <HAL_TIM_PWM_Stop+0x66>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	6a1a      	ldr	r2, [r3, #32]
 800bb14:	f240 4344 	movw	r3, #1092	; 0x444
 800bb18:	4013      	ands	r3, r2
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d107      	bne.n	800bb2e <HAL_TIM_PWM_Stop+0x66>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	6812      	ldr	r2, [r2, #0]
 800bb26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bb28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bb2c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	6a1a      	ldr	r2, [r3, #32]
 800bb34:	f241 1311 	movw	r3, #4369	; 0x1111
 800bb38:	4013      	ands	r3, r2
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d10f      	bne.n	800bb5e <HAL_TIM_PWM_Stop+0x96>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6a1a      	ldr	r2, [r3, #32]
 800bb44:	f240 4344 	movw	r3, #1092	; 0x444
 800bb48:	4013      	ands	r3, r2
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d107      	bne.n	800bb5e <HAL_TIM_PWM_Stop+0x96>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	6812      	ldr	r2, [r2, #0]
 800bb56:	6812      	ldr	r2, [r2, #0]
 800bb58:	f022 0201 	bic.w	r2, r2, #1
 800bb5c:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800bb66:	2300      	movs	r3, #0
} 
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	40010000 	.word	0x40010000
 800bb74:	40010400 	.word	0x40010400

0800bb78 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2b0c      	cmp	r3, #12
 800bb86:	d841      	bhi.n	800bc0c <HAL_TIM_PWM_Start_IT+0x94>
 800bb88:	a201      	add	r2, pc, #4	; (adr r2, 800bb90 <HAL_TIM_PWM_Start_IT+0x18>)
 800bb8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8e:	bf00      	nop
 800bb90:	0800bbc5 	.word	0x0800bbc5
 800bb94:	0800bc0d 	.word	0x0800bc0d
 800bb98:	0800bc0d 	.word	0x0800bc0d
 800bb9c:	0800bc0d 	.word	0x0800bc0d
 800bba0:	0800bbd7 	.word	0x0800bbd7
 800bba4:	0800bc0d 	.word	0x0800bc0d
 800bba8:	0800bc0d 	.word	0x0800bc0d
 800bbac:	0800bc0d 	.word	0x0800bc0d
 800bbb0:	0800bbe9 	.word	0x0800bbe9
 800bbb4:	0800bc0d 	.word	0x0800bc0d
 800bbb8:	0800bc0d 	.word	0x0800bc0d
 800bbbc:	0800bc0d 	.word	0x0800bc0d
 800bbc0:	0800bbfb 	.word	0x0800bbfb
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	6812      	ldr	r2, [r2, #0]
 800bbcc:	68d2      	ldr	r2, [r2, #12]
 800bbce:	f042 0202 	orr.w	r2, r2, #2
 800bbd2:	60da      	str	r2, [r3, #12]
    }
    break;
 800bbd4:	e01b      	b.n	800bc0e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	6812      	ldr	r2, [r2, #0]
 800bbde:	68d2      	ldr	r2, [r2, #12]
 800bbe0:	f042 0204 	orr.w	r2, r2, #4
 800bbe4:	60da      	str	r2, [r3, #12]
    }
    break;
 800bbe6:	e012      	b.n	800bc0e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	6812      	ldr	r2, [r2, #0]
 800bbf0:	68d2      	ldr	r2, [r2, #12]
 800bbf2:	f042 0208 	orr.w	r2, r2, #8
 800bbf6:	60da      	str	r2, [r3, #12]
    }
    break;
 800bbf8:	e009      	b.n	800bc0e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	6812      	ldr	r2, [r2, #0]
 800bc02:	68d2      	ldr	r2, [r2, #12]
 800bc04:	f042 0210 	orr.w	r2, r2, #16
 800bc08:	60da      	str	r2, [r3, #12]
    }
    break;
 800bc0a:	e000      	b.n	800bc0e <HAL_TIM_PWM_Start_IT+0x96>
    
    default:
    break;
 800bc0c:	bf00      	nop
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2201      	movs	r2, #1
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f002 fd66 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a10      	ldr	r2, [pc, #64]	; (800bc64 <HAL_TIM_PWM_Start_IT+0xec>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d004      	beq.n	800bc30 <HAL_TIM_PWM_Start_IT+0xb8>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a0f      	ldr	r2, [pc, #60]	; (800bc68 <HAL_TIM_PWM_Start_IT+0xf0>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d101      	bne.n	800bc34 <HAL_TIM_PWM_Start_IT+0xbc>
 800bc30:	2301      	movs	r3, #1
 800bc32:	e000      	b.n	800bc36 <HAL_TIM_PWM_Start_IT+0xbe>
 800bc34:	2300      	movs	r3, #0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d007      	beq.n	800bc4a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	6812      	ldr	r2, [r2, #0]
 800bc42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bc44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	6812      	ldr	r2, [r2, #0]
 800bc52:	6812      	ldr	r2, [r2, #0]
 800bc54:	f042 0201 	orr.w	r2, r2, #1
 800bc58:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800bc5a:	2300      	movs	r3, #0
} 
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	40010000 	.word	0x40010000
 800bc68:	40010400 	.word	0x40010400

0800bc6c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	2b0c      	cmp	r3, #12
 800bc7a:	d841      	bhi.n	800bd00 <HAL_TIM_PWM_Stop_IT+0x94>
 800bc7c:	a201      	add	r2, pc, #4	; (adr r2, 800bc84 <HAL_TIM_PWM_Stop_IT+0x18>)
 800bc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc82:	bf00      	nop
 800bc84:	0800bcb9 	.word	0x0800bcb9
 800bc88:	0800bd01 	.word	0x0800bd01
 800bc8c:	0800bd01 	.word	0x0800bd01
 800bc90:	0800bd01 	.word	0x0800bd01
 800bc94:	0800bccb 	.word	0x0800bccb
 800bc98:	0800bd01 	.word	0x0800bd01
 800bc9c:	0800bd01 	.word	0x0800bd01
 800bca0:	0800bd01 	.word	0x0800bd01
 800bca4:	0800bcdd 	.word	0x0800bcdd
 800bca8:	0800bd01 	.word	0x0800bd01
 800bcac:	0800bd01 	.word	0x0800bd01
 800bcb0:	0800bd01 	.word	0x0800bd01
 800bcb4:	0800bcef 	.word	0x0800bcef
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	6812      	ldr	r2, [r2, #0]
 800bcc0:	68d2      	ldr	r2, [r2, #12]
 800bcc2:	f022 0202 	bic.w	r2, r2, #2
 800bcc6:	60da      	str	r2, [r3, #12]
    }
    break;
 800bcc8:	e01b      	b.n	800bd02 <HAL_TIM_PWM_Stop_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	6812      	ldr	r2, [r2, #0]
 800bcd2:	68d2      	ldr	r2, [r2, #12]
 800bcd4:	f022 0204 	bic.w	r2, r2, #4
 800bcd8:	60da      	str	r2, [r3, #12]
    }
    break;
 800bcda:	e012      	b.n	800bd02 <HAL_TIM_PWM_Stop_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	6812      	ldr	r2, [r2, #0]
 800bce4:	68d2      	ldr	r2, [r2, #12]
 800bce6:	f022 0208 	bic.w	r2, r2, #8
 800bcea:	60da      	str	r2, [r3, #12]
    }
    break;
 800bcec:	e009      	b.n	800bd02 <HAL_TIM_PWM_Stop_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	6812      	ldr	r2, [r2, #0]
 800bcf6:	68d2      	ldr	r2, [r2, #12]
 800bcf8:	f022 0210 	bic.w	r2, r2, #16
 800bcfc:	60da      	str	r2, [r3, #12]
    }
    break;
 800bcfe:	e000      	b.n	800bd02 <HAL_TIM_PWM_Stop_IT+0x96>
    
    default:
    break; 
 800bd00:	bf00      	nop
  }
  
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2200      	movs	r2, #0
 800bd08:	6839      	ldr	r1, [r7, #0]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f002 fcec 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a20      	ldr	r2, [pc, #128]	; (800bd98 <HAL_TIM_PWM_Stop_IT+0x12c>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d004      	beq.n	800bd24 <HAL_TIM_PWM_Stop_IT+0xb8>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a1f      	ldr	r2, [pc, #124]	; (800bd9c <HAL_TIM_PWM_Stop_IT+0x130>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d101      	bne.n	800bd28 <HAL_TIM_PWM_Stop_IT+0xbc>
 800bd24:	2301      	movs	r3, #1
 800bd26:	e000      	b.n	800bd2a <HAL_TIM_PWM_Stop_IT+0xbe>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d017      	beq.n	800bd5e <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	6a1a      	ldr	r2, [r3, #32]
 800bd34:	f241 1311 	movw	r3, #4369	; 0x1111
 800bd38:	4013      	ands	r3, r2
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d10f      	bne.n	800bd5e <HAL_TIM_PWM_Stop_IT+0xf2>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	6a1a      	ldr	r2, [r3, #32]
 800bd44:	f240 4344 	movw	r3, #1092	; 0x444
 800bd48:	4013      	ands	r3, r2
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d107      	bne.n	800bd5e <HAL_TIM_PWM_Stop_IT+0xf2>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	6812      	ldr	r2, [r2, #0]
 800bd56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bd58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bd5c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	6a1a      	ldr	r2, [r3, #32]
 800bd64:	f241 1311 	movw	r3, #4369	; 0x1111
 800bd68:	4013      	ands	r3, r2
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10f      	bne.n	800bd8e <HAL_TIM_PWM_Stop_IT+0x122>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	6a1a      	ldr	r2, [r3, #32]
 800bd74:	f240 4344 	movw	r3, #1092	; 0x444
 800bd78:	4013      	ands	r3, r2
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d107      	bne.n	800bd8e <HAL_TIM_PWM_Stop_IT+0x122>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	6812      	ldr	r2, [r2, #0]
 800bd86:	6812      	ldr	r2, [r2, #0]
 800bd88:	f022 0201 	bic.w	r2, r2, #1
 800bd8c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800bd8e:	2300      	movs	r3, #0
} 
 800bd90:	4618      	mov	r0, r3
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	40010000 	.word	0x40010000
 800bd9c:	40010400 	.word	0x40010400

0800bda0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
 800bdac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d101      	bne.n	800bdbe <HAL_TIM_PWM_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800bdba:	2302      	movs	r3, #2
 800bdbc:	e0c6      	b.n	800bf4c <HAL_TIM_PWM_Start_DMA+0x1ac>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d10b      	bne.n	800bde2 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0)) 
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d104      	bne.n	800bdda <HAL_TIM_PWM_Start_DMA+0x3a>
 800bdd0:	887b      	ldrh	r3, [r7, #2]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d001      	beq.n	800bdda <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e0b8      	b.n	800bf4c <HAL_TIM_PWM_Start_DMA+0x1ac>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2202      	movs	r2, #2
 800bdde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }    
  switch (Channel)
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2b0c      	cmp	r3, #12
 800bde6:	f200 8089 	bhi.w	800befc <HAL_TIM_PWM_Start_DMA+0x15c>
 800bdea:	a201      	add	r2, pc, #4	; (adr r2, 800bdf0 <HAL_TIM_PWM_Start_DMA+0x50>)
 800bdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf0:	0800be25 	.word	0x0800be25
 800bdf4:	0800befd 	.word	0x0800befd
 800bdf8:	0800befd 	.word	0x0800befd
 800bdfc:	0800befd 	.word	0x0800befd
 800be00:	0800be5b 	.word	0x0800be5b
 800be04:	0800befd 	.word	0x0800befd
 800be08:	0800befd 	.word	0x0800befd
 800be0c:	0800befd 	.word	0x0800befd
 800be10:	0800be91 	.word	0x0800be91
 800be14:	0800befd 	.word	0x0800befd
 800be18:	0800befd 	.word	0x0800befd
 800be1c:	0800befd 	.word	0x0800befd
 800be20:	0800bec7 	.word	0x0800bec7
  {
    case TIM_CHANNEL_1:
    {      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	4a4a      	ldr	r2, [pc, #296]	; (800bf54 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 800be2a:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6a1b      	ldr	r3, [r3, #32]
 800be30:	4a49      	ldr	r2, [pc, #292]	; (800bf58 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 800be32:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6a18      	ldr	r0, [r3, #32]
 800be38:	6879      	ldr	r1, [r7, #4]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3334      	adds	r3, #52	; 0x34
 800be40:	461a      	mov	r2, r3
 800be42:	887b      	ldrh	r3, [r7, #2]
 800be44:	f7f6 f911 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	6812      	ldr	r2, [r2, #0]
 800be50:	68d2      	ldr	r2, [r2, #12]
 800be52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be56:	60da      	str	r2, [r3, #12]
    }
    break;
 800be58:	e051      	b.n	800befe <HAL_TIM_PWM_Start_DMA+0x15e>
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5e:	4a3d      	ldr	r2, [pc, #244]	; (800bf54 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 800be60:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be66:	4a3c      	ldr	r2, [pc, #240]	; (800bf58 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 800be68:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800be6e:	6879      	ldr	r1, [r7, #4]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3338      	adds	r3, #56	; 0x38
 800be76:	461a      	mov	r2, r3
 800be78:	887b      	ldrh	r3, [r7, #2]
 800be7a:	f7f6 f8f6 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	6812      	ldr	r2, [r2, #0]
 800be86:	68d2      	ldr	r2, [r2, #12]
 800be88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be8c:	60da      	str	r2, [r3, #12]
    }
    break;
 800be8e:	e036      	b.n	800befe <HAL_TIM_PWM_Start_DMA+0x15e>
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be94:	4a2f      	ldr	r2, [pc, #188]	; (800bf54 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 800be96:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be9c:	4a2e      	ldr	r2, [pc, #184]	; (800bf58 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 800be9e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bea4:	6879      	ldr	r1, [r7, #4]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	333c      	adds	r3, #60	; 0x3c
 800beac:	461a      	mov	r2, r3
 800beae:	887b      	ldrh	r3, [r7, #2]
 800beb0:	f7f6 f8db 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	6812      	ldr	r2, [r2, #0]
 800bebc:	68d2      	ldr	r2, [r2, #12]
 800bebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bec2:	60da      	str	r2, [r3, #12]
    }
    break;
 800bec4:	e01b      	b.n	800befe <HAL_TIM_PWM_Start_DMA+0x15e>
    
    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beca:	4a22      	ldr	r2, [pc, #136]	; (800bf54 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 800becc:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed2:	4a21      	ldr	r2, [pc, #132]	; (800bf58 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 800bed4:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800beda:	6879      	ldr	r1, [r7, #4]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3340      	adds	r3, #64	; 0x40
 800bee2:	461a      	mov	r2, r3
 800bee4:	887b      	ldrh	r3, [r7, #2]
 800bee6:	f7f6 f8c0 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	6812      	ldr	r2, [r2, #0]
 800bef2:	68d2      	ldr	r2, [r2, #12]
 800bef4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bef8:	60da      	str	r2, [r3, #12]
    }
    break;
 800befa:	e000      	b.n	800befe <HAL_TIM_PWM_Start_DMA+0x15e>
    
    default:
    break;
 800befc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2201      	movs	r2, #1
 800bf04:	68b9      	ldr	r1, [r7, #8]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f002 fbee 	bl	800e6e8 <TIM_CCxChannelCmd>
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a12      	ldr	r2, [pc, #72]	; (800bf5c <HAL_TIM_PWM_Start_DMA+0x1bc>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d004      	beq.n	800bf20 <HAL_TIM_PWM_Start_DMA+0x180>
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a11      	ldr	r2, [pc, #68]	; (800bf60 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d101      	bne.n	800bf24 <HAL_TIM_PWM_Start_DMA+0x184>
 800bf20:	2301      	movs	r3, #1
 800bf22:	e000      	b.n	800bf26 <HAL_TIM_PWM_Start_DMA+0x186>
 800bf24:	2300      	movs	r3, #0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d007      	beq.n	800bf3a <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	6812      	ldr	r2, [r2, #0]
 800bf32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bf34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf38:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	6812      	ldr	r2, [r2, #0]
 800bf42:	6812      	ldr	r2, [r2, #0]
 800bf44:	f042 0201 	orr.w	r2, r2, #1
 800bf48:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3710      	adds	r7, #16
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	0800e5e5 	.word	0x0800e5e5
 800bf58:	0800e655 	.word	0x0800e655
 800bf5c:	40010000 	.word	0x40010000
 800bf60:	40010400 	.word	0x40010400

0800bf64 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	2b0c      	cmp	r3, #12
 800bf72:	d841      	bhi.n	800bff8 <HAL_TIM_PWM_Stop_DMA+0x94>
 800bf74:	a201      	add	r2, pc, #4	; (adr r2, 800bf7c <HAL_TIM_PWM_Stop_DMA+0x18>)
 800bf76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7a:	bf00      	nop
 800bf7c:	0800bfb1 	.word	0x0800bfb1
 800bf80:	0800bff9 	.word	0x0800bff9
 800bf84:	0800bff9 	.word	0x0800bff9
 800bf88:	0800bff9 	.word	0x0800bff9
 800bf8c:	0800bfc3 	.word	0x0800bfc3
 800bf90:	0800bff9 	.word	0x0800bff9
 800bf94:	0800bff9 	.word	0x0800bff9
 800bf98:	0800bff9 	.word	0x0800bff9
 800bf9c:	0800bfd5 	.word	0x0800bfd5
 800bfa0:	0800bff9 	.word	0x0800bff9
 800bfa4:	0800bff9 	.word	0x0800bff9
 800bfa8:	0800bff9 	.word	0x0800bff9
 800bfac:	0800bfe7 	.word	0x0800bfe7
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	6812      	ldr	r2, [r2, #0]
 800bfb8:	68d2      	ldr	r2, [r2, #12]
 800bfba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bfbe:	60da      	str	r2, [r3, #12]
    }
    break;
 800bfc0:	e01b      	b.n	800bffa <HAL_TIM_PWM_Stop_DMA+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	6812      	ldr	r2, [r2, #0]
 800bfca:	68d2      	ldr	r2, [r2, #12]
 800bfcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfd0:	60da      	str	r2, [r3, #12]
    }
    break;
 800bfd2:	e012      	b.n	800bffa <HAL_TIM_PWM_Stop_DMA+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	6812      	ldr	r2, [r2, #0]
 800bfdc:	68d2      	ldr	r2, [r2, #12]
 800bfde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bfe2:	60da      	str	r2, [r3, #12]
    }
    break;
 800bfe4:	e009      	b.n	800bffa <HAL_TIM_PWM_Stop_DMA+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	6812      	ldr	r2, [r2, #0]
 800bfee:	68d2      	ldr	r2, [r2, #12]
 800bff0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bff4:	60da      	str	r2, [r3, #12]
    }
    break;
 800bff6:	e000      	b.n	800bffa <HAL_TIM_PWM_Stop_DMA+0x96>
    
    default:
    break;
 800bff8:	bf00      	nop
  } 
  
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2200      	movs	r2, #0
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	4618      	mov	r0, r3
 800c004:	f002 fb70 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a22      	ldr	r2, [pc, #136]	; (800c098 <HAL_TIM_PWM_Stop_DMA+0x134>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d004      	beq.n	800c01c <HAL_TIM_PWM_Stop_DMA+0xb8>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a21      	ldr	r2, [pc, #132]	; (800c09c <HAL_TIM_PWM_Stop_DMA+0x138>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d101      	bne.n	800c020 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800c01c:	2301      	movs	r3, #1
 800c01e:	e000      	b.n	800c022 <HAL_TIM_PWM_Stop_DMA+0xbe>
 800c020:	2300      	movs	r3, #0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d017      	beq.n	800c056 <HAL_TIM_PWM_Stop_DMA+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6a1a      	ldr	r2, [r3, #32]
 800c02c:	f241 1311 	movw	r3, #4369	; 0x1111
 800c030:	4013      	ands	r3, r2
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10f      	bne.n	800c056 <HAL_TIM_PWM_Stop_DMA+0xf2>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	6a1a      	ldr	r2, [r3, #32]
 800c03c:	f240 4344 	movw	r3, #1092	; 0x444
 800c040:	4013      	ands	r3, r2
 800c042:	2b00      	cmp	r3, #0
 800c044:	d107      	bne.n	800c056 <HAL_TIM_PWM_Stop_DMA+0xf2>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	6812      	ldr	r2, [r2, #0]
 800c04e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c054:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	6a1a      	ldr	r2, [r3, #32]
 800c05c:	f241 1311 	movw	r3, #4369	; 0x1111
 800c060:	4013      	ands	r3, r2
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10f      	bne.n	800c086 <HAL_TIM_PWM_Stop_DMA+0x122>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	6a1a      	ldr	r2, [r3, #32]
 800c06c:	f240 4344 	movw	r3, #1092	; 0x444
 800c070:	4013      	ands	r3, r2
 800c072:	2b00      	cmp	r3, #0
 800c074:	d107      	bne.n	800c086 <HAL_TIM_PWM_Stop_DMA+0x122>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	6812      	ldr	r2, [r2, #0]
 800c07e:	6812      	ldr	r2, [r2, #0]
 800c080:	f022 0201 	bic.w	r2, r2, #1
 800c084:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	40010000 	.word	0x40010000
 800c09c:	40010400 	.word	0x40010400

0800c0a0 <HAL_TIM_IC_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d101      	bne.n	800c0b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e01d      	b.n	800c0ee <HAL_TIM_IC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 

  if(htim->State == HAL_TIM_STATE_RESET)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d106      	bne.n	800c0cc <HAL_TIM_IC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f845 	bl	800c156 <HAL_TIM_IC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4619      	mov	r1, r3
 800c0de:	4610      	mov	r0, r2
 800c0e0:	f002 f8e2 	bl	800e2a8 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <HAL_TIM_IC_DeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b082      	sub	sp, #8
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2202      	movs	r2, #2
 800c102:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6a1a      	ldr	r2, [r3, #32]
 800c10c:	f241 1311 	movw	r3, #4369	; 0x1111
 800c110:	4013      	ands	r3, r2
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10f      	bne.n	800c136 <HAL_TIM_IC_DeInit+0x40>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	6a1a      	ldr	r2, [r3, #32]
 800c11c:	f240 4344 	movw	r3, #1092	; 0x444
 800c120:	4013      	ands	r3, r2
 800c122:	2b00      	cmp	r3, #0
 800c124:	d107      	bne.n	800c136 <HAL_TIM_IC_DeInit+0x40>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	6812      	ldr	r2, [r2, #0]
 800c12e:	6812      	ldr	r2, [r2, #0]
 800c130:	f022 0201 	bic.w	r2, r2, #1
 800c134:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 f817 	bl	800c16a <HAL_TIM_IC_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3708      	adds	r7, #8
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <HAL_TIM_IC_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c156:	b480      	push	{r7}
 800c158:	b083      	sub	sp, #12
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c15e:	bf00      	nop
 800c160:	370c      	adds	r7, #12
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr

0800c16a <HAL_TIM_IC_MspDeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 800c16a:	b480      	push	{r7}
 800c16c:	b083      	sub	sp, #12
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 800c172:	bf00      	nop
 800c174:	370c      	adds	r7, #12
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b082      	sub	sp, #8
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2201      	movs	r2, #1
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	4618      	mov	r0, r3
 800c192:	f002 faa9 	bl	800e6e8 <TIM_CCxChannelCmd>
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);  
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	6812      	ldr	r2, [r2, #0]
 800c19e:	6812      	ldr	r2, [r2, #0]
 800c1a0:	f042 0201 	orr.w	r2, r2, #1
 800c1a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;  
 800c1a6:	2300      	movs	r3, #0
} 
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f002 fa90 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6a1a      	ldr	r2, [r3, #32]
 800c1ce:	f241 1311 	movw	r3, #4369	; 0x1111
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10f      	bne.n	800c1f8 <HAL_TIM_IC_Stop+0x48>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6a1a      	ldr	r2, [r3, #32]
 800c1de:	f240 4344 	movw	r3, #1092	; 0x444
 800c1e2:	4013      	ands	r3, r2
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d107      	bne.n	800c1f8 <HAL_TIM_IC_Stop+0x48>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	6812      	ldr	r2, [r2, #0]
 800c1f0:	6812      	ldr	r2, [r2, #0]
 800c1f2:	f022 0201 	bic.w	r2, r2, #1
 800c1f6:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b082      	sub	sp, #8
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	2b0c      	cmp	r3, #12
 800c210:	d840      	bhi.n	800c294 <HAL_TIM_IC_Start_IT+0x92>
 800c212:	a201      	add	r2, pc, #4	; (adr r2, 800c218 <HAL_TIM_IC_Start_IT+0x16>)
 800c214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c218:	0800c24d 	.word	0x0800c24d
 800c21c:	0800c295 	.word	0x0800c295
 800c220:	0800c295 	.word	0x0800c295
 800c224:	0800c295 	.word	0x0800c295
 800c228:	0800c25f 	.word	0x0800c25f
 800c22c:	0800c295 	.word	0x0800c295
 800c230:	0800c295 	.word	0x0800c295
 800c234:	0800c295 	.word	0x0800c295
 800c238:	0800c271 	.word	0x0800c271
 800c23c:	0800c295 	.word	0x0800c295
 800c240:	0800c295 	.word	0x0800c295
 800c244:	0800c295 	.word	0x0800c295
 800c248:	0800c283 	.word	0x0800c283
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	6812      	ldr	r2, [r2, #0]
 800c254:	68d2      	ldr	r2, [r2, #12]
 800c256:	f042 0202 	orr.w	r2, r2, #2
 800c25a:	60da      	str	r2, [r3, #12]
    }
    break;
 800c25c:	e01b      	b.n	800c296 <HAL_TIM_IC_Start_IT+0x94>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	6812      	ldr	r2, [r2, #0]
 800c266:	68d2      	ldr	r2, [r2, #12]
 800c268:	f042 0204 	orr.w	r2, r2, #4
 800c26c:	60da      	str	r2, [r3, #12]
    }
    break;
 800c26e:	e012      	b.n	800c296 <HAL_TIM_IC_Start_IT+0x94>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	6812      	ldr	r2, [r2, #0]
 800c278:	68d2      	ldr	r2, [r2, #12]
 800c27a:	f042 0208 	orr.w	r2, r2, #8
 800c27e:	60da      	str	r2, [r3, #12]
    }
    break;
 800c280:	e009      	b.n	800c296 <HAL_TIM_IC_Start_IT+0x94>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	6812      	ldr	r2, [r2, #0]
 800c28a:	68d2      	ldr	r2, [r2, #12]
 800c28c:	f042 0210 	orr.w	r2, r2, #16
 800c290:	60da      	str	r2, [r3, #12]
    }
    break;
 800c292:	e000      	b.n	800c296 <HAL_TIM_IC_Start_IT+0x94>
    
    default:
    break;
 800c294:	bf00      	nop
  }  
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2201      	movs	r2, #1
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f002 fa22 	bl	800e6e8 <TIM_CCxChannelCmd>
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);  
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	6812      	ldr	r2, [r2, #0]
 800c2ac:	6812      	ldr	r2, [r2, #0]
 800c2ae:	f042 0201 	orr.w	r2, r2, #1
 800c2b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;  
 800c2b4:	2300      	movs	r3, #0
} 
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b082      	sub	sp, #8
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	2b0c      	cmp	r3, #12
 800c2cc:	d840      	bhi.n	800c350 <HAL_TIM_IC_Stop_IT+0x92>
 800c2ce:	a201      	add	r2, pc, #4	; (adr r2, 800c2d4 <HAL_TIM_IC_Stop_IT+0x16>)
 800c2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d4:	0800c309 	.word	0x0800c309
 800c2d8:	0800c351 	.word	0x0800c351
 800c2dc:	0800c351 	.word	0x0800c351
 800c2e0:	0800c351 	.word	0x0800c351
 800c2e4:	0800c31b 	.word	0x0800c31b
 800c2e8:	0800c351 	.word	0x0800c351
 800c2ec:	0800c351 	.word	0x0800c351
 800c2f0:	0800c351 	.word	0x0800c351
 800c2f4:	0800c32d 	.word	0x0800c32d
 800c2f8:	0800c351 	.word	0x0800c351
 800c2fc:	0800c351 	.word	0x0800c351
 800c300:	0800c351 	.word	0x0800c351
 800c304:	0800c33f 	.word	0x0800c33f
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	6812      	ldr	r2, [r2, #0]
 800c310:	68d2      	ldr	r2, [r2, #12]
 800c312:	f022 0202 	bic.w	r2, r2, #2
 800c316:	60da      	str	r2, [r3, #12]
    }
    break;
 800c318:	e01b      	b.n	800c352 <HAL_TIM_IC_Stop_IT+0x94>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	6812      	ldr	r2, [r2, #0]
 800c322:	68d2      	ldr	r2, [r2, #12]
 800c324:	f022 0204 	bic.w	r2, r2, #4
 800c328:	60da      	str	r2, [r3, #12]
    }
    break;
 800c32a:	e012      	b.n	800c352 <HAL_TIM_IC_Stop_IT+0x94>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	6812      	ldr	r2, [r2, #0]
 800c334:	68d2      	ldr	r2, [r2, #12]
 800c336:	f022 0208 	bic.w	r2, r2, #8
 800c33a:	60da      	str	r2, [r3, #12]
    }
    break;
 800c33c:	e009      	b.n	800c352 <HAL_TIM_IC_Stop_IT+0x94>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	6812      	ldr	r2, [r2, #0]
 800c346:	68d2      	ldr	r2, [r2, #12]
 800c348:	f022 0210 	bic.w	r2, r2, #16
 800c34c:	60da      	str	r2, [r3, #12]
    }
    break;
 800c34e:	e000      	b.n	800c352 <HAL_TIM_IC_Stop_IT+0x94>
    
    default:
    break; 
 800c350:	bf00      	nop
  } 
  
  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2200      	movs	r2, #0
 800c358:	6839      	ldr	r1, [r7, #0]
 800c35a:	4618      	mov	r0, r3
 800c35c:	f002 f9c4 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6a1a      	ldr	r2, [r3, #32]
 800c366:	f241 1311 	movw	r3, #4369	; 0x1111
 800c36a:	4013      	ands	r3, r2
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10f      	bne.n	800c390 <HAL_TIM_IC_Stop_IT+0xd2>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	6a1a      	ldr	r2, [r3, #32]
 800c376:	f240 4344 	movw	r3, #1092	; 0x444
 800c37a:	4013      	ands	r3, r2
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d107      	bne.n	800c390 <HAL_TIM_IC_Stop_IT+0xd2>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	6812      	ldr	r2, [r2, #0]
 800c388:	6812      	ldr	r2, [r2, #0]
 800c38a:	f022 0201 	bic.w	r2, r2, #1
 800c38e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b084      	sub	sp, #16
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	60f8      	str	r0, [r7, #12]
 800c3a2:	60b9      	str	r1, [r7, #8]
 800c3a4:	607a      	str	r2, [r7, #4]
 800c3a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d101      	bne.n	800c3b8 <HAL_TIM_IC_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800c3b4:	2302      	movs	r3, #2
 800c3b6:	e0b0      	b.n	800c51a <HAL_TIM_IC_Start_DMA+0x180>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d10b      	bne.n	800c3dc <HAL_TIM_IC_Start_DMA+0x42>
  {
    if((pData == 0U) && (Length > 0)) 
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d104      	bne.n	800c3d4 <HAL_TIM_IC_Start_DMA+0x3a>
 800c3ca:	887b      	ldrh	r3, [r7, #2]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d001      	beq.n	800c3d4 <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e0a2      	b.n	800c51a <HAL_TIM_IC_Start_DMA+0x180>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2202      	movs	r2, #2
 800c3d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }  
   
  switch (Channel)
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	2b0c      	cmp	r3, #12
 800c3e0:	f200 808a 	bhi.w	800c4f8 <HAL_TIM_IC_Start_DMA+0x15e>
 800c3e4:	a201      	add	r2, pc, #4	; (adr r2, 800c3ec <HAL_TIM_IC_Start_DMA+0x52>)
 800c3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ea:	bf00      	nop
 800c3ec:	0800c421 	.word	0x0800c421
 800c3f0:	0800c4f9 	.word	0x0800c4f9
 800c3f4:	0800c4f9 	.word	0x0800c4f9
 800c3f8:	0800c4f9 	.word	0x0800c4f9
 800c3fc:	0800c457 	.word	0x0800c457
 800c400:	0800c4f9 	.word	0x0800c4f9
 800c404:	0800c4f9 	.word	0x0800c4f9
 800c408:	0800c4f9 	.word	0x0800c4f9
 800c40c:	0800c48d 	.word	0x0800c48d
 800c410:	0800c4f9 	.word	0x0800c4f9
 800c414:	0800c4f9 	.word	0x0800c4f9
 800c418:	0800c4f9 	.word	0x0800c4f9
 800c41c:	0800c4c3 	.word	0x0800c4c3
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6a1b      	ldr	r3, [r3, #32]
 800c424:	4a3f      	ldr	r2, [pc, #252]	; (800c524 <HAL_TIM_IC_Start_DMA+0x18a>)
 800c426:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6a1b      	ldr	r3, [r3, #32]
 800c42c:	4a3e      	ldr	r2, [pc, #248]	; (800c528 <HAL_TIM_IC_Start_DMA+0x18e>)
 800c42e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length); 
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6a18      	ldr	r0, [r3, #32]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	3334      	adds	r3, #52	; 0x34
 800c43a:	4619      	mov	r1, r3
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	887b      	ldrh	r3, [r7, #2]
 800c440:	f7f5 fe13 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 1 DMA request */      
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	6812      	ldr	r2, [r2, #0]
 800c44c:	68d2      	ldr	r2, [r2, #12]
 800c44e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c452:	60da      	str	r2, [r3, #12]
    }
    break;
 800c454:	e051      	b.n	800c4fa <HAL_TIM_IC_Start_DMA+0x160>
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45a:	4a32      	ldr	r2, [pc, #200]	; (800c524 <HAL_TIM_IC_Start_DMA+0x18a>)
 800c45c:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c462:	4a31      	ldr	r2, [pc, #196]	; (800c528 <HAL_TIM_IC_Start_DMA+0x18e>)
 800c464:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3338      	adds	r3, #56	; 0x38
 800c470:	4619      	mov	r1, r3
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	887b      	ldrh	r3, [r7, #2]
 800c476:	f7f5 fdf8 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	6812      	ldr	r2, [r2, #0]
 800c482:	68d2      	ldr	r2, [r2, #12]
 800c484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c488:	60da      	str	r2, [r3, #12]
    }
    break;
 800c48a:	e036      	b.n	800c4fa <HAL_TIM_IC_Start_DMA+0x160>
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c490:	4a24      	ldr	r2, [pc, #144]	; (800c524 <HAL_TIM_IC_Start_DMA+0x18a>)
 800c492:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c498:	4a23      	ldr	r2, [pc, #140]	; (800c528 <HAL_TIM_IC_Start_DMA+0x18e>)
 800c49a:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	333c      	adds	r3, #60	; 0x3c
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	887b      	ldrh	r3, [r7, #2]
 800c4ac:	f7f5 fddd 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	6812      	ldr	r2, [r2, #0]
 800c4b8:	68d2      	ldr	r2, [r2, #12]
 800c4ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4be:	60da      	str	r2, [r3, #12]
    }
    break;
 800c4c0:	e01b      	b.n	800c4fa <HAL_TIM_IC_Start_DMA+0x160>
    
    case TIM_CHANNEL_4:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c6:	4a17      	ldr	r2, [pc, #92]	; (800c524 <HAL_TIM_IC_Start_DMA+0x18a>)
 800c4c8:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ce:	4a16      	ldr	r2, [pc, #88]	; (800c528 <HAL_TIM_IC_Start_DMA+0x18e>)
 800c4d0:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3340      	adds	r3, #64	; 0x40
 800c4dc:	4619      	mov	r1, r3
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	887b      	ldrh	r3, [r7, #2]
 800c4e2:	f7f5 fdc2 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68fa      	ldr	r2, [r7, #12]
 800c4ec:	6812      	ldr	r2, [r2, #0]
 800c4ee:	68d2      	ldr	r2, [r2, #12]
 800c4f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c4f4:	60da      	str	r2, [r3, #12]
    }
    break;
 800c4f6:	e000      	b.n	800c4fa <HAL_TIM_IC_Start_DMA+0x160>
    
    default:
    break;
 800c4f8:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2201      	movs	r2, #1
 800c500:	68b9      	ldr	r1, [r7, #8]
 800c502:	4618      	mov	r0, r3
 800c504:	f002 f8f0 	bl	800e6e8 <TIM_CCxChannelCmd>
   
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	6812      	ldr	r2, [r2, #0]
 800c510:	6812      	ldr	r2, [r2, #0]
 800c512:	f042 0201 	orr.w	r2, r2, #1
 800c516:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	0800e679 	.word	0x0800e679
 800c528:	0800e655 	.word	0x0800e655

0800c52c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  switch (Channel)
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2b0c      	cmp	r3, #12
 800c53a:	d841      	bhi.n	800c5c0 <HAL_TIM_IC_Stop_DMA+0x94>
 800c53c:	a201      	add	r2, pc, #4	; (adr r2, 800c544 <HAL_TIM_IC_Stop_DMA+0x18>)
 800c53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c542:	bf00      	nop
 800c544:	0800c579 	.word	0x0800c579
 800c548:	0800c5c1 	.word	0x0800c5c1
 800c54c:	0800c5c1 	.word	0x0800c5c1
 800c550:	0800c5c1 	.word	0x0800c5c1
 800c554:	0800c58b 	.word	0x0800c58b
 800c558:	0800c5c1 	.word	0x0800c5c1
 800c55c:	0800c5c1 	.word	0x0800c5c1
 800c560:	0800c5c1 	.word	0x0800c5c1
 800c564:	0800c59d 	.word	0x0800c59d
 800c568:	0800c5c1 	.word	0x0800c5c1
 800c56c:	0800c5c1 	.word	0x0800c5c1
 800c570:	0800c5c1 	.word	0x0800c5c1
 800c574:	0800c5af 	.word	0x0800c5af
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	6812      	ldr	r2, [r2, #0]
 800c580:	68d2      	ldr	r2, [r2, #12]
 800c582:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c586:	60da      	str	r2, [r3, #12]
    }
    break;
 800c588:	e01b      	b.n	800c5c2 <HAL_TIM_IC_Stop_DMA+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	6812      	ldr	r2, [r2, #0]
 800c592:	68d2      	ldr	r2, [r2, #12]
 800c594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c598:	60da      	str	r2, [r3, #12]
    }
    break;
 800c59a:	e012      	b.n	800c5c2 <HAL_TIM_IC_Stop_DMA+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	6812      	ldr	r2, [r2, #0]
 800c5a4:	68d2      	ldr	r2, [r2, #12]
 800c5a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c5aa:	60da      	str	r2, [r3, #12]
    }
    break;
 800c5ac:	e009      	b.n	800c5c2 <HAL_TIM_IC_Stop_DMA+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	6812      	ldr	r2, [r2, #0]
 800c5b6:	68d2      	ldr	r2, [r2, #12]
 800c5b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c5bc:	60da      	str	r2, [r3, #12]
    }
    break;
 800c5be:	e000      	b.n	800c5c2 <HAL_TIM_IC_Stop_DMA+0x96>
    
    default:
    break;
 800c5c0:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f002 f88c 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	6a1a      	ldr	r2, [r3, #32]
 800c5d6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c5da:	4013      	ands	r3, r2
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10f      	bne.n	800c600 <HAL_TIM_IC_Stop_DMA+0xd4>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6a1a      	ldr	r2, [r3, #32]
 800c5e6:	f240 4344 	movw	r3, #1092	; 0x444
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d107      	bne.n	800c600 <HAL_TIM_IC_Stop_DMA+0xd4>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	6812      	ldr	r2, [r2, #0]
 800c5f8:	6812      	ldr	r2, [r2, #0]
 800c5fa:	f022 0201 	bic.w	r2, r2, #1
 800c5fe:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800c608:	2300      	movs	r3, #0
}  
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b082      	sub	sp, #8
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
 800c61a:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d101      	bne.n	800c626 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e02d      	b.n	800c682 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d106      	bne.n	800c640 <HAL_TIM_OnePulse_Init+0x2e>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 f855 	bl	800c6ea <HAL_TIM_OnePulse_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2202      	movs	r2, #2
 800c644:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	3304      	adds	r3, #4
 800c650:	4619      	mov	r1, r3
 800c652:	4610      	mov	r0, r2
 800c654:	f001 fe28 	bl	800e2a8 <TIM_Base_SetConfig>
  
  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	6812      	ldr	r2, [r2, #0]
 800c660:	6812      	ldr	r2, [r2, #0]
 800c662:	f022 0208 	bic.w	r2, r2, #8
 800c666:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	6812      	ldr	r2, [r2, #0]
 800c670:	6811      	ldr	r1, [r2, #0]
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	430a      	orrs	r2, r1
 800c676:	601a      	str	r2, [r3, #0]
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <HAL_TIM_OnePulse_DeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b082      	sub	sp, #8
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2202      	movs	r2, #2
 800c696:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	6a1a      	ldr	r2, [r3, #32]
 800c6a0:	f241 1311 	movw	r3, #4369	; 0x1111
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d10f      	bne.n	800c6ca <HAL_TIM_OnePulse_DeInit+0x40>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	6a1a      	ldr	r2, [r3, #32]
 800c6b0:	f240 4344 	movw	r3, #1092	; 0x444
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d107      	bne.n	800c6ca <HAL_TIM_OnePulse_DeInit+0x40>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	6812      	ldr	r2, [r2, #0]
 800c6c2:	6812      	ldr	r2, [r2, #0]
 800c6c4:	f022 0201 	bic.w	r2, r2, #1
 800c6c8:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f817 	bl	800c6fe <HAL_TIM_OnePulse_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <HAL_TIM_OnePulse_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800c6f2:	bf00      	nop
 800c6f4:	370c      	adds	r7, #12
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <HAL_TIM_OnePulse_MspDeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 800c6fe:	b480      	push	{r7}
 800c700:	b083      	sub	sp, #12
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 800c706:	bf00      	nop
 800c708:	370c      	adds	r7, #12
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b082      	sub	sp, #8
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together 
    
    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2201      	movs	r2, #1
 800c722:	2100      	movs	r1, #0
 800c724:	4618      	mov	r0, r3
 800c726:	f001 ffdf 	bl	800e6e8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2201      	movs	r2, #1
 800c730:	2104      	movs	r1, #4
 800c732:	4618      	mov	r0, r3
 800c734:	f001 ffd8 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a0c      	ldr	r2, [pc, #48]	; (800c770 <HAL_TIM_OnePulse_Start+0x5e>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d004      	beq.n	800c74c <HAL_TIM_OnePulse_Start+0x3a>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a0b      	ldr	r2, [pc, #44]	; (800c774 <HAL_TIM_OnePulse_Start+0x62>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d101      	bne.n	800c750 <HAL_TIM_OnePulse_Start+0x3e>
 800c74c:	2301      	movs	r3, #1
 800c74e:	e000      	b.n	800c752 <HAL_TIM_OnePulse_Start+0x40>
 800c750:	2300      	movs	r3, #0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d007      	beq.n	800c766 <HAL_TIM_OnePulse_Start+0x54>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	6812      	ldr	r2, [r2, #0]
 800c75e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c760:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c764:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	40010000 	.word	0x40010000
 800c774:	40010400 	.word	0x40010400

0800c778 <HAL_TIM_OnePulse_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2200      	movs	r2, #0
 800c788:	2100      	movs	r1, #0
 800c78a:	4618      	mov	r0, r3
 800c78c:	f001 ffac 	bl	800e6e8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2200      	movs	r2, #0
 800c796:	2104      	movs	r1, #4
 800c798:	4618      	mov	r0, r3
 800c79a:	f001 ffa5 	bl	800e6e8 <TIM_CCxChannelCmd>
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a21      	ldr	r2, [pc, #132]	; (800c828 <HAL_TIM_OnePulse_Stop+0xb0>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d004      	beq.n	800c7b2 <HAL_TIM_OnePulse_Stop+0x3a>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a1f      	ldr	r2, [pc, #124]	; (800c82c <HAL_TIM_OnePulse_Stop+0xb4>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d101      	bne.n	800c7b6 <HAL_TIM_OnePulse_Stop+0x3e>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e000      	b.n	800c7b8 <HAL_TIM_OnePulse_Stop+0x40>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d017      	beq.n	800c7ec <HAL_TIM_OnePulse_Stop+0x74>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	6a1a      	ldr	r2, [r3, #32]
 800c7c2:	f241 1311 	movw	r3, #4369	; 0x1111
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d10f      	bne.n	800c7ec <HAL_TIM_OnePulse_Stop+0x74>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	6a1a      	ldr	r2, [r3, #32]
 800c7d2:	f240 4344 	movw	r3, #1092	; 0x444
 800c7d6:	4013      	ands	r3, r2
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d107      	bne.n	800c7ec <HAL_TIM_OnePulse_Stop+0x74>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	6812      	ldr	r2, [r2, #0]
 800c7e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c7e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c7ea:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	6a1a      	ldr	r2, [r3, #32]
 800c7f2:	f241 1311 	movw	r3, #4369	; 0x1111
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10f      	bne.n	800c81c <HAL_TIM_OnePulse_Stop+0xa4>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6a1a      	ldr	r2, [r3, #32]
 800c802:	f240 4344 	movw	r3, #1092	; 0x444
 800c806:	4013      	ands	r3, r2
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d107      	bne.n	800c81c <HAL_TIM_OnePulse_Stop+0xa4>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	6812      	ldr	r2, [r2, #0]
 800c814:	6812      	ldr	r2, [r2, #0]
 800c816:	f022 0201 	bic.w	r2, r2, #1
 800c81a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3708      	adds	r7, #8
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	40010000 	.word	0x40010000
 800c82c:	40010400 	.word	0x40010400

0800c830 <HAL_TIM_OnePulse_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	6812      	ldr	r2, [r2, #0]
 800c842:	68d2      	ldr	r2, [r2, #12]
 800c844:	f042 0202 	orr.w	r2, r2, #2
 800c848:	60da      	str	r2, [r3, #12]
  
  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	6812      	ldr	r2, [r2, #0]
 800c852:	68d2      	ldr	r2, [r2, #12]
 800c854:	f042 0204 	orr.w	r2, r2, #4
 800c858:	60da      	str	r2, [r3, #12]
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2201      	movs	r2, #1
 800c860:	2100      	movs	r1, #0
 800c862:	4618      	mov	r0, r3
 800c864:	f001 ff40 	bl	800e6e8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2201      	movs	r2, #1
 800c86e:	2104      	movs	r1, #4
 800c870:	4618      	mov	r0, r3
 800c872:	f001 ff39 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a0d      	ldr	r2, [pc, #52]	; (800c8b0 <HAL_TIM_OnePulse_Start_IT+0x80>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d004      	beq.n	800c88a <HAL_TIM_OnePulse_Start_IT+0x5a>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a0b      	ldr	r2, [pc, #44]	; (800c8b4 <HAL_TIM_OnePulse_Start_IT+0x84>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d101      	bne.n	800c88e <HAL_TIM_OnePulse_Start_IT+0x5e>
 800c88a:	2301      	movs	r3, #1
 800c88c:	e000      	b.n	800c890 <HAL_TIM_OnePulse_Start_IT+0x60>
 800c88e:	2300      	movs	r3, #0
 800c890:	2b00      	cmp	r3, #0
 800c892:	d007      	beq.n	800c8a4 <HAL_TIM_OnePulse_Start_IT+0x74>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	6812      	ldr	r2, [r2, #0]
 800c89c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c89e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c8a2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3708      	adds	r7, #8
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	40010000 	.word	0x40010000
 800c8b4:	40010400 	.word	0x40010400

0800c8b8 <HAL_TIM_OnePulse_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);  
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	6812      	ldr	r2, [r2, #0]
 800c8ca:	68d2      	ldr	r2, [r2, #12]
 800c8cc:	f022 0202 	bic.w	r2, r2, #2
 800c8d0:	60da      	str	r2, [r3, #12]
  
  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	6812      	ldr	r2, [r2, #0]
 800c8da:	68d2      	ldr	r2, [r2, #12]
 800c8dc:	f022 0204 	bic.w	r2, r2, #4
 800c8e0:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels 
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f001 fefc 	bl	800e6e8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	2104      	movs	r1, #4
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f001 fef5 	bl	800e6e8 <TIM_CCxChannelCmd>
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a21      	ldr	r2, [pc, #132]	; (800c988 <HAL_TIM_OnePulse_Stop_IT+0xd0>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d004      	beq.n	800c912 <HAL_TIM_OnePulse_Stop_IT+0x5a>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a1f      	ldr	r2, [pc, #124]	; (800c98c <HAL_TIM_OnePulse_Stop_IT+0xd4>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d101      	bne.n	800c916 <HAL_TIM_OnePulse_Stop_IT+0x5e>
 800c912:	2301      	movs	r3, #1
 800c914:	e000      	b.n	800c918 <HAL_TIM_OnePulse_Stop_IT+0x60>
 800c916:	2300      	movs	r3, #0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d017      	beq.n	800c94c <HAL_TIM_OnePulse_Stop_IT+0x94>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	6a1a      	ldr	r2, [r3, #32]
 800c922:	f241 1311 	movw	r3, #4369	; 0x1111
 800c926:	4013      	ands	r3, r2
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10f      	bne.n	800c94c <HAL_TIM_OnePulse_Stop_IT+0x94>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6a1a      	ldr	r2, [r3, #32]
 800c932:	f240 4344 	movw	r3, #1092	; 0x444
 800c936:	4013      	ands	r3, r2
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d107      	bne.n	800c94c <HAL_TIM_OnePulse_Stop_IT+0x94>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	6812      	ldr	r2, [r2, #0]
 800c944:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c94a:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Disable the Peripheral */
   __HAL_TIM_DISABLE(htim);  
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6a1a      	ldr	r2, [r3, #32]
 800c952:	f241 1311 	movw	r3, #4369	; 0x1111
 800c956:	4013      	ands	r3, r2
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10f      	bne.n	800c97c <HAL_TIM_OnePulse_Stop_IT+0xc4>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6a1a      	ldr	r2, [r3, #32]
 800c962:	f240 4344 	movw	r3, #1092	; 0x444
 800c966:	4013      	ands	r3, r2
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d107      	bne.n	800c97c <HAL_TIM_OnePulse_Stop_IT+0xc4>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	6812      	ldr	r2, [r2, #0]
 800c974:	6812      	ldr	r2, [r2, #0]
 800c976:	f022 0201 	bic.w	r2, r2, #1
 800c97a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3708      	adds	r7, #8
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	40010000 	.word	0x40010000
 800c98c:	40010400 	.word	0x40010400

0800c990 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800c99a:	2300      	movs	r3, #0
 800c99c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d101      	bne.n	800c9b0 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e081      	b.n	800cab4 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d106      	bne.n	800c9ca <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 f8a9 	bl	800cb1c <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2202      	movs	r2, #2
 800c9ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	6812      	ldr	r2, [r2, #0]
 800c9da:	6892      	ldr	r2, [r2, #8]
 800c9dc:	f022 0207 	bic.w	r2, r2, #7
 800c9e0:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	3304      	adds	r3, #4
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	4610      	mov	r0, r2
 800c9ee:	f001 fc5b 	bl	800e2a8 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	6a1b      	ldr	r3, [r3, #32]
 800ca08:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	4313      	orrs	r3, r2
 800ca12:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca1a:	f023 0303 	bic.w	r3, r3, #3
 800ca1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	689a      	ldr	r2, [r3, #8]
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	021b      	lsls	r3, r3, #8
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ca38:	f023 030c 	bic.w	r3, r3, #12
 800ca3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ca44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	68da      	ldr	r2, [r3, #12]
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	69db      	ldr	r3, [r3, #28]
 800ca52:	021b      	lsls	r3, r3, #8
 800ca54:	4313      	orrs	r3, r2
 800ca56:	693a      	ldr	r2, [r7, #16]
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	011a      	lsls	r2, r3, #4
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	031b      	lsls	r3, r3, #12
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ca76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ca7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	685a      	ldr	r2, [r3, #4]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	695b      	ldr	r3, [r3, #20]
 800ca88:	011b      	lsls	r3, r3, #4
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	697a      	ldr	r2, [r7, #20]
 800ca98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	693a      	ldr	r2, [r7, #16]
 800caa0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2201      	movs	r2, #1
 800caae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3718      	adds	r7, #24
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <HAL_TIM_Encoder_DeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2202      	movs	r2, #2
 800cac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6a1a      	ldr	r2, [r3, #32]
 800cad2:	f241 1311 	movw	r3, #4369	; 0x1111
 800cad6:	4013      	ands	r3, r2
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d10f      	bne.n	800cafc <HAL_TIM_Encoder_DeInit+0x40>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	6a1a      	ldr	r2, [r3, #32]
 800cae2:	f240 4344 	movw	r3, #1092	; 0x444
 800cae6:	4013      	ands	r3, r2
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d107      	bne.n	800cafc <HAL_TIM_Encoder_DeInit+0x40>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	6812      	ldr	r2, [r2, #0]
 800caf4:	6812      	ldr	r2, [r2, #0]
 800caf6:	f022 0201 	bic.w	r2, r2, #1
 800cafa:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f817 	bl	800cb30 <HAL_TIM_Encoder_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 
  /* Release Lock */
  __HAL_UNLOCK(htim);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800cb12:	2300      	movs	r3, #0
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <HAL_TIM_Encoder_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <HAL_TIM_Encoder_MspDeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d002      	beq.n	800cb5a <HAL_TIM_Encoder_Start+0x16>
 800cb54:	2b04      	cmp	r3, #4
 800cb56:	d008      	beq.n	800cb6a <HAL_TIM_Encoder_Start+0x26>
 800cb58:	e00f      	b.n	800cb7a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	2100      	movs	r1, #0
 800cb62:	4618      	mov	r0, r3
 800cb64:	f001 fdc0 	bl	800e6e8 <TIM_CCxChannelCmd>
      break; 
 800cb68:	e016      	b.n	800cb98 <HAL_TIM_Encoder_Start+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	2104      	movs	r1, #4
 800cb72:	4618      	mov	r0, r3
 800cb74:	f001 fdb8 	bl	800e6e8 <TIM_CCxChannelCmd>
      break;
 800cb78:	e00e      	b.n	800cb98 <HAL_TIM_Encoder_Start+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	2100      	movs	r1, #0
 800cb82:	4618      	mov	r0, r3
 800cb84:	f001 fdb0 	bl	800e6e8 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	2104      	movs	r1, #4
 800cb90:	4618      	mov	r0, r3
 800cb92:	f001 fda9 	bl	800e6e8 <TIM_CCxChannelCmd>
     break; 
 800cb96:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	6812      	ldr	r2, [r2, #0]
 800cba0:	6812      	ldr	r2, [r2, #0]
 800cba2:	f042 0201 	orr.w	r2, r2, #1
 800cba6:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b082      	sub	sp, #8
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
   /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  switch (Channel)
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d002      	beq.n	800cbc8 <HAL_TIM_Encoder_Stop+0x16>
 800cbc2:	2b04      	cmp	r3, #4
 800cbc4:	d008      	beq.n	800cbd8 <HAL_TIM_Encoder_Stop+0x26>
 800cbc6:	e00f      	b.n	800cbe8 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2100      	movs	r1, #0
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f001 fd89 	bl	800e6e8 <TIM_CCxChannelCmd>
      break; 
 800cbd6:	e016      	b.n	800cc06 <HAL_TIM_Encoder_Stop+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2104      	movs	r1, #4
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f001 fd81 	bl	800e6e8 <TIM_CCxChannelCmd>
      break;
 800cbe6:	e00e      	b.n	800cc06 <HAL_TIM_Encoder_Stop+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2200      	movs	r2, #0
 800cbee:	2100      	movs	r1, #0
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f001 fd79 	bl	800e6e8 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	2104      	movs	r1, #4
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f001 fd72 	bl	800e6e8 <TIM_CCxChannelCmd>
     break; 
 800cc04:	bf00      	nop
    }
  }  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	6a1a      	ldr	r2, [r3, #32]
 800cc0c:	f241 1311 	movw	r3, #4369	; 0x1111
 800cc10:	4013      	ands	r3, r2
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10f      	bne.n	800cc36 <HAL_TIM_Encoder_Stop+0x84>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	6a1a      	ldr	r2, [r3, #32]
 800cc1c:	f240 4344 	movw	r3, #1092	; 0x444
 800cc20:	4013      	ands	r3, r2
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d107      	bne.n	800cc36 <HAL_TIM_Encoder_Stop+0x84>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	6812      	ldr	r2, [r2, #0]
 800cc2e:	6812      	ldr	r2, [r2, #0]
 800cc30:	f022 0201 	bic.w	r2, r2, #1
 800cc34:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800cc36:	2300      	movs	r3, #0
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d002      	beq.n	800cc56 <HAL_TIM_Encoder_Start_IT+0x16>
 800cc50:	2b04      	cmp	r3, #4
 800cc52:	d010      	beq.n	800cc76 <HAL_TIM_Encoder_Start_IT+0x36>
 800cc54:	e01f      	b.n	800cc96 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f001 fd42 	bl	800e6e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	6812      	ldr	r2, [r2, #0]
 800cc6c:	68d2      	ldr	r2, [r2, #12]
 800cc6e:	f042 0202 	orr.w	r2, r2, #2
 800cc72:	60da      	str	r2, [r3, #12]
      break; 
 800cc74:	e02e      	b.n	800ccd4 <HAL_TIM_Encoder_Start_IT+0x94>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	2104      	movs	r1, #4
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f001 fd32 	bl	800e6e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2); 
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	6812      	ldr	r2, [r2, #0]
 800cc8c:	68d2      	ldr	r2, [r2, #12]
 800cc8e:	f042 0204 	orr.w	r2, r2, #4
 800cc92:	60da      	str	r2, [r3, #12]
      break;
 800cc94:	e01e      	b.n	800ccd4 <HAL_TIM_Encoder_Start_IT+0x94>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f001 fd22 	bl	800e6e8 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	2104      	movs	r1, #4
 800ccac:	4618      	mov	r0, r3
 800ccae:	f001 fd1b 	bl	800e6e8 <TIM_CCxChannelCmd>
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	6812      	ldr	r2, [r2, #0]
 800ccba:	68d2      	ldr	r2, [r2, #12]
 800ccbc:	f042 0202 	orr.w	r2, r2, #2
 800ccc0:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	6812      	ldr	r2, [r2, #0]
 800ccca:	68d2      	ldr	r2, [r2, #12]
 800cccc:	f042 0204 	orr.w	r2, r2, #4
 800ccd0:	60da      	str	r2, [r3, #12]
     break; 
 800ccd2:	bf00      	nop
    }
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	6812      	ldr	r2, [r2, #0]
 800ccdc:	6812      	ldr	r2, [r2, #0]
 800ccde:	f042 0201 	orr.w	r2, r2, #1
 800cce2:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800cce4:	2300      	movs	r3, #0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b082      	sub	sp, #8
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
 800ccf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  if(Channel == TIM_CHANNEL_1)
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d10f      	bne.n	800cd1e <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2200      	movs	r2, #0
 800cd04:	2100      	movs	r1, #0
 800cd06:	4618      	mov	r0, r3
 800cd08:	f001 fcee 	bl	800e6e8 <TIM_CCxChannelCmd>
    
    /* Disable the capture compare Interrupts 1 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	6812      	ldr	r2, [r2, #0]
 800cd14:	68d2      	ldr	r2, [r2, #12]
 800cd16:	f022 0202 	bic.w	r2, r2, #2
 800cd1a:	60da      	str	r2, [r3, #12]
 800cd1c:	e030      	b.n	800cd80 <HAL_TIM_Encoder_Stop_IT+0x92>
  }  
  else if(Channel == TIM_CHANNEL_2)
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	2b04      	cmp	r3, #4
 800cd22:	d10f      	bne.n	800cd44 <HAL_TIM_Encoder_Stop_IT+0x56>
  {  
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	2104      	movs	r1, #4
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f001 fcdb 	bl	800e6e8 <TIM_CCxChannelCmd>
    
    /* Disable the capture compare Interrupts 2 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	6812      	ldr	r2, [r2, #0]
 800cd3a:	68d2      	ldr	r2, [r2, #12]
 800cd3c:	f022 0204 	bic.w	r2, r2, #4
 800cd40:	60da      	str	r2, [r3, #12]
 800cd42:	e01d      	b.n	800cd80 <HAL_TIM_Encoder_Stop_IT+0x92>
  }  
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f001 fccb 	bl	800e6e8 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2200      	movs	r2, #0
 800cd58:	2104      	movs	r1, #4
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f001 fcc4 	bl	800e6e8 <TIM_CCxChannelCmd>
    
    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	6812      	ldr	r2, [r2, #0]
 800cd68:	68d2      	ldr	r2, [r2, #12]
 800cd6a:	f022 0202 	bic.w	r2, r2, #2
 800cd6e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	6812      	ldr	r2, [r2, #0]
 800cd78:	68d2      	ldr	r2, [r2, #12]
 800cd7a:	f022 0204 	bic.w	r2, r2, #4
 800cd7e:	60da      	str	r2, [r3, #12]
  }
    
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	6a1a      	ldr	r2, [r3, #32]
 800cd86:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd8a:	4013      	ands	r3, r2
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d10f      	bne.n	800cdb0 <HAL_TIM_Encoder_Stop_IT+0xc2>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6a1a      	ldr	r2, [r3, #32]
 800cd96:	f240 4344 	movw	r3, #1092	; 0x444
 800cd9a:	4013      	ands	r3, r2
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d107      	bne.n	800cdb0 <HAL_TIM_Encoder_Stop_IT+0xc2>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	6812      	ldr	r2, [r2, #0]
 800cda8:	6812      	ldr	r2, [r2, #0]
 800cdaa:	f022 0201 	bic.w	r2, r2, #1
 800cdae:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3708      	adds	r7, #8
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <HAL_TIM_Encoder_Start_DMA>:
  * @param  pData2 The destination Buffer address for IC2.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b084      	sub	sp, #16
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	60f8      	str	r0, [r7, #12]
 800cdca:	60b9      	str	r1, [r7, #8]
 800cdcc:	607a      	str	r2, [r7, #4]
 800cdce:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d101      	bne.n	800cde0 <HAL_TIM_Encoder_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800cddc:	2302      	movs	r3, #2
 800cdde:	e0bc      	b.n	800cf5a <HAL_TIM_Encoder_Start_DMA+0x198>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d10e      	bne.n	800ce0a <HAL_TIM_Encoder_Start_DMA+0x48>
  {
    if((((pData1 == 0U) || (pData2 == 0U) )) && (Length > 0)) 
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d002      	beq.n	800cdf8 <HAL_TIM_Encoder_Start_DMA+0x36>
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d104      	bne.n	800ce02 <HAL_TIM_Encoder_Start_DMA+0x40>
 800cdf8:	8b3b      	ldrh	r3, [r7, #24]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d001      	beq.n	800ce02 <HAL_TIM_Encoder_Start_DMA+0x40>
    {
      return HAL_ERROR;                                    
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e0ab      	b.n	800cf5a <HAL_TIM_Encoder_Start_DMA+0x198>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2202      	movs	r2, #2
 800ce06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }  
   
  switch (Channel)
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	2b04      	cmp	r3, #4
 800ce0e:	d02e      	beq.n	800ce6e <HAL_TIM_Encoder_Start_DMA+0xac>
 800ce10:	2b18      	cmp	r3, #24
 800ce12:	d056      	beq.n	800cec2 <HAL_TIM_Encoder_Start_DMA+0x100>
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d000      	beq.n	800ce1a <HAL_TIM_Encoder_Start_DMA+0x58>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
    }
    break;
    
    default:
    break;
 800ce18:	e09e      	b.n	800cf58 <HAL_TIM_Encoder_Start_DMA+0x196>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	6a1b      	ldr	r3, [r3, #32]
 800ce1e:	4a51      	ldr	r2, [pc, #324]	; (800cf64 <HAL_TIM_Encoder_Start_DMA+0x1a2>)
 800ce20:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	4a50      	ldr	r2, [pc, #320]	; (800cf68 <HAL_TIM_Encoder_Start_DMA+0x1a6>)
 800ce28:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pData1, Length); 
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	6a18      	ldr	r0, [r3, #32]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	3334      	adds	r3, #52	; 0x34
 800ce34:	4619      	mov	r1, r3
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	8b3b      	ldrh	r3, [r7, #24]
 800ce3a:	f7f5 f916 	bl	800206a <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	6812      	ldr	r2, [r2, #0]
 800ce46:	68d2      	ldr	r2, [r2, #12]
 800ce48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce4c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	6812      	ldr	r2, [r2, #0]
 800ce56:	6812      	ldr	r2, [r2, #0]
 800ce58:	f042 0201 	orr.w	r2, r2, #1
 800ce5c:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2201      	movs	r2, #1
 800ce64:	2100      	movs	r1, #0
 800ce66:	4618      	mov	r0, r3
 800ce68:	f001 fc3e 	bl	800e6e8 <TIM_CCxChannelCmd>
    break;
 800ce6c:	e074      	b.n	800cf58 <HAL_TIM_Encoder_Start_DMA+0x196>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce72:	4a3c      	ldr	r2, [pc, #240]	; (800cf64 <HAL_TIM_Encoder_Start_DMA+0x1a2>)
 800ce74:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce7a:	4a3b      	ldr	r2, [pc, #236]	; (800cf68 <HAL_TIM_Encoder_Start_DMA+0x1a6>)
 800ce7c:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3338      	adds	r3, #56	; 0x38
 800ce88:	4619      	mov	r1, r3
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	8b3b      	ldrh	r3, [r7, #24]
 800ce8e:	f7f5 f8ec 	bl	800206a <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	6812      	ldr	r2, [r2, #0]
 800ce9a:	68d2      	ldr	r2, [r2, #12]
 800ce9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cea0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	6812      	ldr	r2, [r2, #0]
 800ceaa:	6812      	ldr	r2, [r2, #0]
 800ceac:	f042 0201 	orr.w	r2, r2, #1
 800ceb0:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	2104      	movs	r1, #4
 800ceba:	4618      	mov	r0, r3
 800cebc:	f001 fc14 	bl	800e6e8 <TIM_CCxChannelCmd>
    break;
 800cec0:	e04a      	b.n	800cf58 <HAL_TIM_Encoder_Start_DMA+0x196>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	4a27      	ldr	r2, [pc, #156]	; (800cf64 <HAL_TIM_Encoder_Start_DMA+0x1a2>)
 800cec8:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6a1b      	ldr	r3, [r3, #32]
 800cece:	4a26      	ldr	r2, [pc, #152]	; (800cf68 <HAL_TIM_Encoder_Start_DMA+0x1a6>)
 800ced0:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6a18      	ldr	r0, [r3, #32]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	3334      	adds	r3, #52	; 0x34
 800cedc:	4619      	mov	r1, r3
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	8b3b      	ldrh	r3, [r7, #24]
 800cee2:	f7f5 f8c2 	bl	800206a <HAL_DMA_Start_IT>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceea:	4a1e      	ldr	r2, [pc, #120]	; (800cf64 <HAL_TIM_Encoder_Start_DMA+0x1a2>)
 800ceec:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef2:	4a1d      	ldr	r2, [pc, #116]	; (800cf68 <HAL_TIM_Encoder_Start_DMA+0x1a6>)
 800cef4:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	3338      	adds	r3, #56	; 0x38
 800cf00:	4619      	mov	r1, r3
 800cf02:	683a      	ldr	r2, [r7, #0]
 800cf04:	8b3b      	ldrh	r3, [r7, #24]
 800cf06:	f7f5 f8b0 	bl	800206a <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE(htim);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	68fa      	ldr	r2, [r7, #12]
 800cf10:	6812      	ldr	r2, [r2, #0]
 800cf12:	6812      	ldr	r2, [r2, #0]
 800cf14:	f042 0201 	orr.w	r2, r2, #1
 800cf18:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	2100      	movs	r1, #0
 800cf22:	4618      	mov	r0, r3
 800cf24:	f001 fbe0 	bl	800e6e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	2104      	movs	r1, #4
 800cf30:	4618      	mov	r0, r3
 800cf32:	f001 fbd9 	bl	800e6e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	68fa      	ldr	r2, [r7, #12]
 800cf3c:	6812      	ldr	r2, [r2, #0]
 800cf3e:	68d2      	ldr	r2, [r2, #12]
 800cf40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf44:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	6812      	ldr	r2, [r2, #0]
 800cf4e:	68d2      	ldr	r2, [r2, #12]
 800cf50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cf54:	60da      	str	r2, [r3, #12]
    break;
 800cf56:	bf00      	nop
  }  
  /* Return function status */
  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	0800e679 	.word	0x0800e679
 800cf68:	0800e655 	.word	0x0800e655

0800cf6c <HAL_TIM_Encoder_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  if(Channel == TIM_CHANNEL_1)
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10f      	bne.n	800cf9c <HAL_TIM_Encoder_Stop_DMA+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2200      	movs	r2, #0
 800cf82:	2100      	movs	r1, #0
 800cf84:	4618      	mov	r0, r3
 800cf86:	f001 fbaf 	bl	800e6e8 <TIM_CCxChannelCmd>
    
    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	6812      	ldr	r2, [r2, #0]
 800cf92:	68d2      	ldr	r2, [r2, #12]
 800cf94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cf98:	60da      	str	r2, [r3, #12]
 800cf9a:	e030      	b.n	800cffe <HAL_TIM_Encoder_Stop_DMA+0x92>
  }  
  else if(Channel == TIM_CHANNEL_2)
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	2b04      	cmp	r3, #4
 800cfa0:	d10f      	bne.n	800cfc2 <HAL_TIM_Encoder_Stop_DMA+0x56>
  {  
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	2104      	movs	r1, #4
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f001 fb9c 	bl	800e6e8 <TIM_CCxChannelCmd>
    
    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	6812      	ldr	r2, [r2, #0]
 800cfb8:	68d2      	ldr	r2, [r2, #12]
 800cfba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfbe:	60da      	str	r2, [r3, #12]
 800cfc0:	e01d      	b.n	800cffe <HAL_TIM_Encoder_Stop_DMA+0x92>
  }  
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	2100      	movs	r1, #0
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f001 fb8c 	bl	800e6e8 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	2104      	movs	r1, #4
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f001 fb85 	bl	800e6e8 <TIM_CCxChannelCmd>
    
    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	6812      	ldr	r2, [r2, #0]
 800cfe6:	68d2      	ldr	r2, [r2, #12]
 800cfe8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cfec:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	6812      	ldr	r2, [r2, #0]
 800cff6:	68d2      	ldr	r2, [r2, #12]
 800cff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cffc:	60da      	str	r2, [r3, #12]
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	6a1a      	ldr	r2, [r3, #32]
 800d004:	f241 1311 	movw	r3, #4369	; 0x1111
 800d008:	4013      	ands	r3, r2
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10f      	bne.n	800d02e <HAL_TIM_Encoder_Stop_DMA+0xc2>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	6a1a      	ldr	r2, [r3, #32]
 800d014:	f240 4344 	movw	r3, #1092	; 0x444
 800d018:	4013      	ands	r3, r2
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d107      	bne.n	800d02e <HAL_TIM_Encoder_Stop_DMA+0xc2>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	6812      	ldr	r2, [r2, #0]
 800d026:	6812      	ldr	r2, [r2, #0]
 800d028:	f022 0201 	bic.w	r2, r2, #1
 800d02c:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2201      	movs	r2, #1
 800d032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	f003 0302 	and.w	r3, r3, #2
 800d052:	2b02      	cmp	r3, #2
 800d054:	d122      	bne.n	800d09c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	f003 0302 	and.w	r3, r3, #2
 800d060:	2b02      	cmp	r3, #2
 800d062:	d11b      	bne.n	800d09c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f06f 0202 	mvn.w	r2, #2
 800d06c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2201      	movs	r2, #1
 800d072:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	699b      	ldr	r3, [r3, #24]
 800d07a:	f003 0303 	and.w	r3, r3, #3
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d003      	beq.n	800d08a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f001 f894 	bl	800e1b0 <HAL_TIM_IC_CaptureCallback>
 800d088:	e005      	b.n	800d096 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f001 f886 	bl	800e19c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f001 f897 	bl	800e1c4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	691b      	ldr	r3, [r3, #16]
 800d0a2:	f003 0304 	and.w	r3, r3, #4
 800d0a6:	2b04      	cmp	r3, #4
 800d0a8:	d122      	bne.n	800d0f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	f003 0304 	and.w	r3, r3, #4
 800d0b4:	2b04      	cmp	r3, #4
 800d0b6:	d11b      	bne.n	800d0f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f06f 0204 	mvn.w	r2, #4
 800d0c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2202      	movs	r2, #2
 800d0c6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	699b      	ldr	r3, [r3, #24]
 800d0ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d003      	beq.n	800d0de <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f001 f86a 	bl	800e1b0 <HAL_TIM_IC_CaptureCallback>
 800d0dc:	e005      	b.n	800d0ea <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f001 f85c 	bl	800e19c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f001 f86d 	bl	800e1c4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	f003 0308 	and.w	r3, r3, #8
 800d0fa:	2b08      	cmp	r3, #8
 800d0fc:	d122      	bne.n	800d144 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	f003 0308 	and.w	r3, r3, #8
 800d108:	2b08      	cmp	r3, #8
 800d10a:	d11b      	bne.n	800d144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f06f 0208 	mvn.w	r2, #8
 800d114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2204      	movs	r2, #4
 800d11a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	69db      	ldr	r3, [r3, #28]
 800d122:	f003 0303 	and.w	r3, r3, #3
 800d126:	2b00      	cmp	r3, #0
 800d128:	d003      	beq.n	800d132 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f001 f840 	bl	800e1b0 <HAL_TIM_IC_CaptureCallback>
 800d130:	e005      	b.n	800d13e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f001 f832 	bl	800e19c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f001 f843 	bl	800e1c4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	f003 0310 	and.w	r3, r3, #16
 800d14e:	2b10      	cmp	r3, #16
 800d150:	d122      	bne.n	800d198 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	f003 0310 	and.w	r3, r3, #16
 800d15c:	2b10      	cmp	r3, #16
 800d15e:	d11b      	bne.n	800d198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f06f 0210 	mvn.w	r2, #16
 800d168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2208      	movs	r2, #8
 800d16e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	69db      	ldr	r3, [r3, #28]
 800d176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d003      	beq.n	800d186 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f001 f816 	bl	800e1b0 <HAL_TIM_IC_CaptureCallback>
 800d184:	e005      	b.n	800d192 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f001 f808 	bl	800e19c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f001 f819 	bl	800e1c4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	f003 0301 	and.w	r3, r3, #1
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d10e      	bne.n	800d1c4 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	f003 0301 	and.w	r3, r3, #1
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d107      	bne.n	800d1c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f06f 0201 	mvn.w	r2, #1
 800d1bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f006 fec8 	bl	8013f54 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	691b      	ldr	r3, [r3, #16]
 800d1ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1ce:	2b80      	cmp	r3, #128	; 0x80
 800d1d0:	d10e      	bne.n	800d1f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1dc:	2b80      	cmp	r3, #128	; 0x80
 800d1de:	d107      	bne.n	800d1f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d1e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f003 f817 	bl	801021e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1fa:	2b40      	cmp	r3, #64	; 0x40
 800d1fc:	d10e      	bne.n	800d21c <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d208:	2b40      	cmp	r3, #64	; 0x40
 800d20a:	d107      	bne.n	800d21c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d214:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 ffde 	bl	800e1d8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	f003 0320 	and.w	r3, r3, #32
 800d226:	2b20      	cmp	r3, #32
 800d228:	d10e      	bne.n	800d248 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	f003 0320 	and.w	r3, r3, #32
 800d234:	2b20      	cmp	r3, #32
 800d236:	d107      	bne.n	800d248 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f06f 0220 	mvn.w	r2, #32
 800d240:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f002 ffe1 	bl	801020a <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800d248:	bf00      	nop
 800d24a:	3708      	adds	r7, #8
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d262:	2b01      	cmp	r3, #1
 800d264:	d101      	bne.n	800d26a <HAL_TIM_OC_ConfigChannel+0x1a>
 800d266:	2302      	movs	r3, #2
 800d268:	e04e      	b.n	800d308 <HAL_TIM_OC_ConfigChannel+0xb8>
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2201      	movs	r2, #1
 800d26e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2202      	movs	r2, #2
 800d276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  switch (Channel)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2b0c      	cmp	r3, #12
 800d27e:	d839      	bhi.n	800d2f4 <HAL_TIM_OC_ConfigChannel+0xa4>
 800d280:	a201      	add	r2, pc, #4	; (adr r2, 800d288 <HAL_TIM_OC_ConfigChannel+0x38>)
 800d282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d286:	bf00      	nop
 800d288:	0800d2bd 	.word	0x0800d2bd
 800d28c:	0800d2f5 	.word	0x0800d2f5
 800d290:	0800d2f5 	.word	0x0800d2f5
 800d294:	0800d2f5 	.word	0x0800d2f5
 800d298:	0800d2cb 	.word	0x0800d2cb
 800d29c:	0800d2f5 	.word	0x0800d2f5
 800d2a0:	0800d2f5 	.word	0x0800d2f5
 800d2a4:	0800d2f5 	.word	0x0800d2f5
 800d2a8:	0800d2d9 	.word	0x0800d2d9
 800d2ac:	0800d2f5 	.word	0x0800d2f5
 800d2b0:	0800d2f5 	.word	0x0800d2f5
 800d2b4:	0800d2f5 	.word	0x0800d2f5
 800d2b8:	0800d2e7 	.word	0x0800d2e7
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	68b9      	ldr	r1, [r7, #8]
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f001 fa57 	bl	800e776 <TIM_OC1_SetConfig>
    }
    break;
 800d2c8:	e015      	b.n	800d2f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68b9      	ldr	r1, [r7, #8]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f001 f90f 	bl	800e4f4 <TIM_OC2_SetConfig>
    }
    break;
 800d2d6:	e00e      	b.n	800d2f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	68b9      	ldr	r1, [r7, #8]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f001 fabc 	bl	800e85c <TIM_OC3_SetConfig>
    }
    break;
 800d2e4:	e007      	b.n	800d2f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	68b9      	ldr	r1, [r7, #8]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f001 fb2d 	bl	800e94c <TIM_OC4_SetConfig>
    }
    break;
 800d2f2:	e000      	b.n	800d2f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    default:
    break;    
 800d2f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim); 
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2200      	movs	r2, #0
 800d302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800d306:	2300      	movs	r3, #0
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3710      	adds	r7, #16
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d322:	2b01      	cmp	r3, #1
 800d324:	d101      	bne.n	800d32a <HAL_TIM_IC_ConfigChannel+0x1a>
 800d326:	2302      	movs	r3, #2
 800d328:	e08a      	b.n	800d440 <HAL_TIM_IC_ConfigChannel+0x130>
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2201      	movs	r2, #1
 800d32e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2202      	movs	r2, #2
 800d336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  if (Channel == TIM_CHANNEL_1)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d11b      	bne.n	800d378 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6818      	ldr	r0, [r3, #0]
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	6819      	ldr	r1, [r3, #0]
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	685a      	ldr	r2, [r3, #4]
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	f001 f854 	bl	800e3fc <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	6812      	ldr	r2, [r2, #0]
 800d35c:	6992      	ldr	r2, [r2, #24]
 800d35e:	f022 020c 	bic.w	r2, r2, #12
 800d362:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	6812      	ldr	r2, [r2, #0]
 800d36c:	6991      	ldr	r1, [r2, #24]
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	6892      	ldr	r2, [r2, #8]
 800d372:	430a      	orrs	r2, r1
 800d374:	619a      	str	r2, [r3, #24]
 800d376:	e05a      	b.n	800d42e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b04      	cmp	r3, #4
 800d37c:	d11c      	bne.n	800d3b8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
    TIM_TI2_SetConfig(htim->Instance, 
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	6818      	ldr	r0, [r3, #0]
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	6819      	ldr	r1, [r3, #0]
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	685a      	ldr	r2, [r3, #4]
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	f001 fbfb 	bl	800eb88 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	68fa      	ldr	r2, [r7, #12]
 800d398:	6812      	ldr	r2, [r2, #0]
 800d39a:	6992      	ldr	r2, [r2, #24]
 800d39c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d3a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	6812      	ldr	r2, [r2, #0]
 800d3aa:	6991      	ldr	r1, [r2, #24]
 800d3ac:	68ba      	ldr	r2, [r7, #8]
 800d3ae:	6892      	ldr	r2, [r2, #8]
 800d3b0:	0212      	lsls	r2, r2, #8
 800d3b2:	430a      	orrs	r2, r1
 800d3b4:	619a      	str	r2, [r3, #24]
 800d3b6:	e03a      	b.n	800d42e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2b08      	cmp	r3, #8
 800d3bc:	d11b      	bne.n	800d3f6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
    
    TIM_TI3_SetConfig(htim->Instance,  
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6818      	ldr	r0, [r3, #0]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	6819      	ldr	r1, [r3, #0]
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	685a      	ldr	r2, [r3, #4]
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	f001 fc50 	bl	800ec72 <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	6812      	ldr	r2, [r2, #0]
 800d3da:	69d2      	ldr	r2, [r2, #28]
 800d3dc:	f022 020c 	bic.w	r2, r2, #12
 800d3e0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	6812      	ldr	r2, [r2, #0]
 800d3ea:	69d1      	ldr	r1, [r2, #28]
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	6892      	ldr	r2, [r2, #8]
 800d3f0:	430a      	orrs	r2, r1
 800d3f2:	61da      	str	r2, [r3, #28]
 800d3f4:	e01b      	b.n	800d42e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
    
    TIM_TI4_SetConfig(htim->Instance, 
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6818      	ldr	r0, [r3, #0]
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	6819      	ldr	r1, [r3, #0]
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	685a      	ldr	r2, [r3, #4]
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	f001 fc74 	bl	800ecf2 <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	68fa      	ldr	r2, [r7, #12]
 800d410:	6812      	ldr	r2, [r2, #0]
 800d412:	69d2      	ldr	r2, [r2, #28]
 800d414:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d418:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	68fa      	ldr	r2, [r7, #12]
 800d420:	6812      	ldr	r2, [r2, #0]
 800d422:	69d1      	ldr	r1, [r2, #28]
 800d424:	68ba      	ldr	r2, [r7, #8]
 800d426:	6892      	ldr	r2, [r2, #8]
 800d428:	0212      	lsls	r2, r2, #8
 800d42a:	430a      	orrs	r2, r1
 800d42c:	61da      	str	r2, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2201      	movs	r2, #1
 800d432:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2200      	movs	r2, #0
 800d43a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d101      	bne.n	800d462 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d45e:	2302      	movs	r3, #2
 800d460:	e0b4      	b.n	800d5cc <HAL_TIM_PWM_ConfigChannel+0x184>
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2201      	movs	r2, #1
 800d466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2202      	movs	r2, #2
 800d46e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b0c      	cmp	r3, #12
 800d476:	f200 809f 	bhi.w	800d5b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800d47a:	a201      	add	r2, pc, #4	; (adr r2, 800d480 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d480:	0800d4b5 	.word	0x0800d4b5
 800d484:	0800d5b9 	.word	0x0800d5b9
 800d488:	0800d5b9 	.word	0x0800d5b9
 800d48c:	0800d5b9 	.word	0x0800d5b9
 800d490:	0800d4f5 	.word	0x0800d4f5
 800d494:	0800d5b9 	.word	0x0800d5b9
 800d498:	0800d5b9 	.word	0x0800d5b9
 800d49c:	0800d5b9 	.word	0x0800d5b9
 800d4a0:	0800d537 	.word	0x0800d537
 800d4a4:	0800d5b9 	.word	0x0800d5b9
 800d4a8:	0800d5b9 	.word	0x0800d5b9
 800d4ac:	0800d5b9 	.word	0x0800d5b9
 800d4b0:	0800d577 	.word	0x0800d577
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	68b9      	ldr	r1, [r7, #8]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f001 f95b 	bl	800e776 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	6812      	ldr	r2, [r2, #0]
 800d4c8:	6992      	ldr	r2, [r2, #24]
 800d4ca:	f042 0208 	orr.w	r2, r2, #8
 800d4ce:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	6812      	ldr	r2, [r2, #0]
 800d4d8:	6992      	ldr	r2, [r2, #24]
 800d4da:	f022 0204 	bic.w	r2, r2, #4
 800d4de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	6812      	ldr	r2, [r2, #0]
 800d4e8:	6991      	ldr	r1, [r2, #24]
 800d4ea:	68ba      	ldr	r2, [r7, #8]
 800d4ec:	6912      	ldr	r2, [r2, #16]
 800d4ee:	430a      	orrs	r2, r1
 800d4f0:	619a      	str	r2, [r3, #24]
    }
    break;
 800d4f2:	e062      	b.n	800d5ba <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	68b9      	ldr	r1, [r7, #8]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f000 fffa 	bl	800e4f4 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	6812      	ldr	r2, [r2, #0]
 800d508:	6992      	ldr	r2, [r2, #24]
 800d50a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d50e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	6812      	ldr	r2, [r2, #0]
 800d518:	6992      	ldr	r2, [r2, #24]
 800d51a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d51e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	6812      	ldr	r2, [r2, #0]
 800d528:	6991      	ldr	r1, [r2, #24]
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	6912      	ldr	r2, [r2, #16]
 800d52e:	0212      	lsls	r2, r2, #8
 800d530:	430a      	orrs	r2, r1
 800d532:	619a      	str	r2, [r3, #24]
    }
    break;
 800d534:	e041      	b.n	800d5ba <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	68b9      	ldr	r1, [r7, #8]
 800d53c:	4618      	mov	r0, r3
 800d53e:	f001 f98d 	bl	800e85c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	6812      	ldr	r2, [r2, #0]
 800d54a:	69d2      	ldr	r2, [r2, #28]
 800d54c:	f042 0208 	orr.w	r2, r2, #8
 800d550:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	6812      	ldr	r2, [r2, #0]
 800d55a:	69d2      	ldr	r2, [r2, #28]
 800d55c:	f022 0204 	bic.w	r2, r2, #4
 800d560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	68fa      	ldr	r2, [r7, #12]
 800d568:	6812      	ldr	r2, [r2, #0]
 800d56a:	69d1      	ldr	r1, [r2, #28]
 800d56c:	68ba      	ldr	r2, [r7, #8]
 800d56e:	6912      	ldr	r2, [r2, #16]
 800d570:	430a      	orrs	r2, r1
 800d572:	61da      	str	r2, [r3, #28]
    }
    break;
 800d574:	e021      	b.n	800d5ba <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	68b9      	ldr	r1, [r7, #8]
 800d57c:	4618      	mov	r0, r3
 800d57e:	f001 f9e5 	bl	800e94c <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	6812      	ldr	r2, [r2, #0]
 800d58a:	69d2      	ldr	r2, [r2, #28]
 800d58c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d590:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	6812      	ldr	r2, [r2, #0]
 800d59a:	69d2      	ldr	r2, [r2, #28]
 800d59c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	6812      	ldr	r2, [r2, #0]
 800d5aa:	69d1      	ldr	r1, [r2, #28]
 800d5ac:	68ba      	ldr	r2, [r7, #8]
 800d5ae:	6912      	ldr	r2, [r2, #16]
 800d5b0:	0212      	lsls	r2, r2, #8
 800d5b2:	430a      	orrs	r2, r1
 800d5b4:	61da      	str	r2, [r3, #28]
    }
    break;
 800d5b6:	e000      	b.n	800d5ba <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 800d5b8:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800d5ca:	2300      	movs	r3, #0
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <HAL_TIM_OnePulse_ConfigChannel>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel,  uint32_t InputChannel)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b08c      	sub	sp, #48	; 0x30
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
 800d5e0:	603b      	str	r3, [r7, #0]
  
  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if(OutputChannel != InputChannel)  
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	f000 80af 	beq.w	800d74a <HAL_TIM_OnePulse_ConfigChannel+0x176>
  {
    __HAL_LOCK(htim);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d101      	bne.n	800d5fa <HAL_TIM_OnePulse_ConfigChannel+0x26>
 800d5f6:	2302      	movs	r3, #2
 800d5f8:	e0a8      	b.n	800d74c <HAL_TIM_OnePulse_ConfigChannel+0x178>
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
    htim->State = HAL_TIM_STATE_BUSY;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2202      	movs	r2, #2
 800d606:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Extract the Output compare configuration from sConfig structure */  
    temp1.OCMode = sConfig->OCMode;
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	617b      	str	r3, [r7, #20]
    temp1.Pulse = sConfig->Pulse;
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	61bb      	str	r3, [r7, #24]
    temp1.OCPolarity = sConfig->OCPolarity;
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	61fb      	str	r3, [r7, #28]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	623b      	str	r3, [r7, #32]
    temp1.OCIdleState = sConfig->OCIdleState;
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	62bb      	str	r3, [r7, #40]	; 0x28
    temp1.OCNIdleState = sConfig->OCNIdleState; 
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	695b      	ldr	r3, [r3, #20]
 800d62c:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    switch (OutputChannel)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d002      	beq.n	800d63a <HAL_TIM_OnePulse_ConfigChannel+0x66>
 800d634:	2b04      	cmp	r3, #4
 800d636:	d009      	beq.n	800d64c <HAL_TIM_OnePulse_ConfigChannel+0x78>
      
        TIM_OC2_SetConfig(htim->Instance, &temp1);
      }
      break;
      default:
      break;  
 800d638:	e011      	b.n	800d65e <HAL_TIM_OnePulse_ConfigChannel+0x8a>
        TIM_OC1_SetConfig(htim->Instance, &temp1); 
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f107 0214 	add.w	r2, r7, #20
 800d642:	4611      	mov	r1, r2
 800d644:	4618      	mov	r0, r3
 800d646:	f001 f896 	bl	800e776 <TIM_OC1_SetConfig>
      break;
 800d64a:	e008      	b.n	800d65e <HAL_TIM_OnePulse_ConfigChannel+0x8a>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f107 0214 	add.w	r2, r7, #20
 800d654:	4611      	mov	r1, r2
 800d656:	4618      	mov	r0, r3
 800d658:	f000 ff4c 	bl	800e4f4 <TIM_OC2_SetConfig>
      break;
 800d65c:	bf00      	nop
    } 
    switch (InputChannel)
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d002      	beq.n	800d66a <HAL_TIM_OnePulse_ConfigChannel+0x96>
 800d664:	2b04      	cmp	r3, #4
 800d666:	d033      	beq.n	800d6d0 <HAL_TIM_OnePulse_ConfigChannel+0xfc>
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
      }
      break;
    
      default:
      break;  
 800d668:	e065      	b.n	800d736 <HAL_TIM_OnePulse_ConfigChannel+0x162>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6818      	ldr	r0, [r3, #0]
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	6999      	ldr	r1, [r3, #24]
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	69da      	ldr	r2, [r3, #28]
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	f000 febf 	bl	800e3fc <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	6812      	ldr	r2, [r2, #0]
 800d686:	6992      	ldr	r2, [r2, #24]
 800d688:	f022 020c 	bic.w	r2, r2, #12
 800d68c:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	6812      	ldr	r2, [r2, #0]
 800d696:	6892      	ldr	r2, [r2, #8]
 800d698:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d69c:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	68fa      	ldr	r2, [r7, #12]
 800d6a4:	6812      	ldr	r2, [r2, #0]
 800d6a6:	6892      	ldr	r2, [r2, #8]
 800d6a8:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800d6ac:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	6812      	ldr	r2, [r2, #0]
 800d6b6:	6892      	ldr	r2, [r2, #8]
 800d6b8:	f022 0207 	bic.w	r2, r2, #7
 800d6bc:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	68fa      	ldr	r2, [r7, #12]
 800d6c4:	6812      	ldr	r2, [r2, #0]
 800d6c6:	6892      	ldr	r2, [r2, #8]
 800d6c8:	f042 0206 	orr.w	r2, r2, #6
 800d6cc:	609a      	str	r2, [r3, #8]
      break;
 800d6ce:	e032      	b.n	800d736 <HAL_TIM_OnePulse_ConfigChannel+0x162>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6818      	ldr	r0, [r3, #0]
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	6999      	ldr	r1, [r3, #24]
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	69da      	ldr	r2, [r3, #28]
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	6a1b      	ldr	r3, [r3, #32]
 800d6e0:	f001 fa52 	bl	800eb88 <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	68fa      	ldr	r2, [r7, #12]
 800d6ea:	6812      	ldr	r2, [r2, #0]
 800d6ec:	6992      	ldr	r2, [r2, #24]
 800d6ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d6f2:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	6812      	ldr	r2, [r2, #0]
 800d6fc:	6892      	ldr	r2, [r2, #8]
 800d6fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d702:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	6812      	ldr	r2, [r2, #0]
 800d70c:	6892      	ldr	r2, [r2, #8]
 800d70e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800d712:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	68fa      	ldr	r2, [r7, #12]
 800d71a:	6812      	ldr	r2, [r2, #0]
 800d71c:	6892      	ldr	r2, [r2, #8]
 800d71e:	f022 0207 	bic.w	r2, r2, #7
 800d722:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	6812      	ldr	r2, [r2, #0]
 800d72c:	6892      	ldr	r2, [r2, #8]
 800d72e:	f042 0206 	orr.w	r2, r2, #6
 800d732:	609a      	str	r2, [r3, #8]
      break;
 800d734:	bf00      	nop
    }
  
    htim->State = HAL_TIM_STATE_READY;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2201      	movs	r2, #1
 800d73a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    __HAL_UNLOCK(htim);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
    return HAL_OK;
 800d746:	2300      	movs	r3, #0
 800d748:	e000      	b.n	800d74c <HAL_TIM_OnePulse_ConfigChannel+0x178>
  }
  else
  {
    return HAL_ERROR;
 800d74a:	2301      	movs	r3, #1
  }
} 
 800d74c:	4618      	mov	r0, r3
 800d74e:	3730      	adds	r7, #48	; 0x30
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <HAL_TIM_DMABurst_WriteStart>:
  *         between TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                              uint32_t* BurstBuffer, uint32_t  BurstLength)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	2b02      	cmp	r3, #2
 800d76c:	d101      	bne.n	800d772 <HAL_TIM_DMABurst_WriteStart+0x1e>
  {
     return HAL_BUSY;
 800d76e:	2302      	movs	r3, #2
 800d770:	e0d3      	b.n	800d91a <HAL_TIM_DMABurst_WriteStart+0x1c6>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d10b      	bne.n	800d796 <HAL_TIM_DMABurst_WriteStart+0x42>
  {
    if((BurstBuffer == 0U) && (BurstLength > 0U)) 
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d104      	bne.n	800d78e <HAL_TIM_DMABurst_WriteStart+0x3a>
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d001      	beq.n	800d78e <HAL_TIM_DMABurst_WriteStart+0x3a>
    {
      return HAL_ERROR;                                    
 800d78a:	2301      	movs	r3, #1
 800d78c:	e0c5      	b.n	800d91a <HAL_TIM_DMABurst_WriteStart+0x1c6>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2202      	movs	r2, #2
 800d792:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  switch(BurstRequestSrc)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d79c:	d056      	beq.n	800d84c <HAL_TIM_DMABurst_WriteStart+0xf8>
 800d79e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7a2:	d809      	bhi.n	800d7b8 <HAL_TIM_DMABurst_WriteStart+0x64>
 800d7a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7a8:	d026      	beq.n	800d7f8 <HAL_TIM_DMABurst_WriteStart+0xa4>
 800d7aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7ae:	d038      	beq.n	800d822 <HAL_TIM_DMABurst_WriteStart+0xce>
 800d7b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7b4:	d00b      	beq.n	800d7ce <HAL_TIM_DMABurst_WriteStart+0x7a>
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
    }
    break;
    default:
    break;  
 800d7b6:	e09d      	b.n	800d8f4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
  switch(BurstRequestSrc)
 800d7b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d7bc:	d070      	beq.n	800d8a0 <HAL_TIM_DMABurst_WriteStart+0x14c>
 800d7be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d7c2:	f000 8082 	beq.w	800d8ca <HAL_TIM_DMABurst_WriteStart+0x176>
 800d7c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7ca:	d054      	beq.n	800d876 <HAL_TIM_DMABurst_WriteStart+0x122>
    break;  
 800d7cc:	e092      	b.n	800d8f4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	69db      	ldr	r3, [r3, #28]
 800d7d2:	4a54      	ldr	r2, [pc, #336]	; (800d924 <HAL_TIM_DMABurst_WriteStart+0x1d0>)
 800d7d4:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	69db      	ldr	r3, [r3, #28]
 800d7da:	4a53      	ldr	r2, [pc, #332]	; (800d928 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800d7dc:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U); 
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	69d8      	ldr	r0, [r3, #28]
 800d7e2:	6839      	ldr	r1, [r7, #0]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	334c      	adds	r3, #76	; 0x4c
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	0a1b      	lsrs	r3, r3, #8
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	f7f4 fc3a 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800d7f6:	e07d      	b.n	800d8f4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6a1b      	ldr	r3, [r3, #32]
 800d7fc:	4a4b      	ldr	r2, [pc, #300]	; (800d92c <HAL_TIM_DMABurst_WriteStart+0x1d8>)
 800d7fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	4a48      	ldr	r2, [pc, #288]	; (800d928 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800d806:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6a18      	ldr	r0, [r3, #32]
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	334c      	adds	r3, #76	; 0x4c
 800d814:	461a      	mov	r2, r3
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	0a1b      	lsrs	r3, r3, #8
 800d81a:	3301      	adds	r3, #1
 800d81c:	f7f4 fc25 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800d820:	e068      	b.n	800d8f4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d826:	4a41      	ldr	r2, [pc, #260]	; (800d92c <HAL_TIM_DMABurst_WriteStart+0x1d8>)
 800d828:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82e:	4a3e      	ldr	r2, [pc, #248]	; (800d928 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800d830:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d836:	6839      	ldr	r1, [r7, #0]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	334c      	adds	r3, #76	; 0x4c
 800d83e:	461a      	mov	r2, r3
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	0a1b      	lsrs	r3, r3, #8
 800d844:	3301      	adds	r3, #1
 800d846:	f7f4 fc10 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800d84a:	e053      	b.n	800d8f4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d850:	4a36      	ldr	r2, [pc, #216]	; (800d92c <HAL_TIM_DMABurst_WriteStart+0x1d8>)
 800d852:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d858:	4a33      	ldr	r2, [pc, #204]	; (800d928 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800d85a:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d860:	6839      	ldr	r1, [r7, #0]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	334c      	adds	r3, #76	; 0x4c
 800d868:	461a      	mov	r2, r3
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	0a1b      	lsrs	r3, r3, #8
 800d86e:	3301      	adds	r3, #1
 800d870:	f7f4 fbfb 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800d874:	e03e      	b.n	800d8f4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87a:	4a2c      	ldr	r2, [pc, #176]	; (800d92c <HAL_TIM_DMABurst_WriteStart+0x1d8>)
 800d87c:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d882:	4a29      	ldr	r2, [pc, #164]	; (800d928 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800d884:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d88a:	6839      	ldr	r1, [r7, #0]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	334c      	adds	r3, #76	; 0x4c
 800d892:	461a      	mov	r2, r3
 800d894:	69bb      	ldr	r3, [r7, #24]
 800d896:	0a1b      	lsrs	r3, r3, #8
 800d898:	3301      	adds	r3, #1
 800d89a:	f7f4 fbe6 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800d89e:	e029      	b.n	800d8f4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8a4:	4a22      	ldr	r2, [pc, #136]	; (800d930 <HAL_TIM_DMABurst_WriteStart+0x1dc>)
 800d8a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ac:	4a1e      	ldr	r2, [pc, #120]	; (800d928 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800d8ae:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d8b4:	6839      	ldr	r1, [r7, #0]
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	334c      	adds	r3, #76	; 0x4c
 800d8bc:	461a      	mov	r2, r3
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	0a1b      	lsrs	r3, r3, #8
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	f7f4 fbd1 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800d8c8:	e014      	b.n	800d8f4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ce:	4a19      	ldr	r2, [pc, #100]	; (800d934 <HAL_TIM_DMABurst_WriteStart+0x1e0>)
 800d8d0:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d6:	4a14      	ldr	r2, [pc, #80]	; (800d928 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800d8d8:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d8de:	6839      	ldr	r1, [r7, #0]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	334c      	adds	r3, #76	; 0x4c
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	0a1b      	lsrs	r3, r3, #8
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	f7f4 fbbc 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800d8f2:	bf00      	nop
  }
   /* configure the DMA Burst Mode */
   htim->Instance->DCR = BurstBaseAddress | BurstLength;  
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68b9      	ldr	r1, [r7, #8]
 800d8fa:	69ba      	ldr	r2, [r7, #24]
 800d8fc:	430a      	orrs	r2, r1
 800d8fe:	649a      	str	r2, [r3, #72]	; 0x48
   
   /* Enable the TIM DMA Request */
   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);  
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	6812      	ldr	r2, [r2, #0]
 800d908:	68d1      	ldr	r1, [r2, #12]
 800d90a:	687a      	ldr	r2, [r7, #4]
 800d90c:	430a      	orrs	r2, r1
 800d90e:	60da      	str	r2, [r3, #12]
   
   htim->State = HAL_TIM_STATE_READY;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2201      	movs	r2, #1
 800d914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	0800e72f 	.word	0x0800e72f
 800d928:	0800e655 	.word	0x0800e655
 800d92c:	0800e5e5 	.word	0x0800e5e5
 800d930:	0801024f 	.word	0x0801024f
 800d934:	0800e753 	.word	0x0800e753

0800d938 <HAL_TIM_DMABurst_WriteStop>:
  *                the configuration information for TIM module.
  * @param  BurstRequestSrc TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  
  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d948:	d028      	beq.n	800d99c <HAL_TIM_DMABurst_WriteStop+0x64>
 800d94a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d94e:	d809      	bhi.n	800d964 <HAL_TIM_DMABurst_WriteStop+0x2c>
 800d950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d954:	d016      	beq.n	800d984 <HAL_TIM_DMABurst_WriteStop+0x4c>
 800d956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d95a:	d019      	beq.n	800d990 <HAL_TIM_DMABurst_WriteStop+0x58>
 800d95c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d960:	d00a      	beq.n	800d978 <HAL_TIM_DMABurst_WriteStop+0x40>
    {  
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
    }
    break;
    default:
    break;
 800d962:	e033      	b.n	800d9cc <HAL_TIM_DMABurst_WriteStop+0x94>
  switch(BurstRequestSrc)
 800d964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d968:	d024      	beq.n	800d9b4 <HAL_TIM_DMABurst_WriteStop+0x7c>
 800d96a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d96e:	d027      	beq.n	800d9c0 <HAL_TIM_DMABurst_WriteStop+0x88>
 800d970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d974:	d018      	beq.n	800d9a8 <HAL_TIM_DMABurst_WriteStop+0x70>
    break;
 800d976:	e029      	b.n	800d9cc <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	69db      	ldr	r3, [r3, #28]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7f4 fbd4 	bl	800212a <HAL_DMA_Abort>
    break;
 800d982:	e023      	b.n	800d9cc <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6a1b      	ldr	r3, [r3, #32]
 800d988:	4618      	mov	r0, r3
 800d98a:	f7f4 fbce 	bl	800212a <HAL_DMA_Abort>
    break;
 800d98e:	e01d      	b.n	800d9cc <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d994:	4618      	mov	r0, r3
 800d996:	f7f4 fbc8 	bl	800212a <HAL_DMA_Abort>
    break;
 800d99a:	e017      	b.n	800d9cc <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7f4 fbc2 	bl	800212a <HAL_DMA_Abort>
    break;
 800d9a6:	e011      	b.n	800d9cc <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7f4 fbbc 	bl	800212a <HAL_DMA_Abort>
    break;
 800d9b2:	e00b      	b.n	800d9cc <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7f4 fbb6 	bl	800212a <HAL_DMA_Abort>
    break;
 800d9be:	e005      	b.n	800d9cc <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7f4 fbb0 	bl	800212a <HAL_DMA_Abort>
    break;
 800d9ca:	bf00      	nop
  }

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	6812      	ldr	r2, [r2, #0]
 800d9d4:	68d1      	ldr	r1, [r2, #12]
 800d9d6:	683a      	ldr	r2, [r7, #0]
 800d9d8:	43d2      	mvns	r2, r2
 800d9da:	400a      	ands	r2, r1
 800d9dc:	60da      	str	r2, [r3, #12]
      
  /* Return function status */
  return HAL_OK;  
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3708      	adds	r7, #8
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <HAL_TIM_DMABurst_ReadStart>:
  *         between TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                             uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d101      	bne.n	800da06 <HAL_TIM_DMABurst_ReadStart+0x1e>
  {
     return HAL_BUSY;
 800da02:	2302      	movs	r3, #2
 800da04:	e0d3      	b.n	800dbae <HAL_TIM_DMABurst_ReadStart+0x1c6>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d10b      	bne.n	800da2a <HAL_TIM_DMABurst_ReadStart+0x42>
  {
    if((BurstBuffer == 0U) && (BurstLength > 0U)) 
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d104      	bne.n	800da22 <HAL_TIM_DMABurst_ReadStart+0x3a>
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d001      	beq.n	800da22 <HAL_TIM_DMABurst_ReadStart+0x3a>
    {
      return HAL_ERROR;                                    
 800da1e:	2301      	movs	r3, #1
 800da20:	e0c5      	b.n	800dbae <HAL_TIM_DMABurst_ReadStart+0x1c6>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2202      	movs	r2, #2
 800da26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }  
  switch(BurstRequestSrc)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da30:	d056      	beq.n	800dae0 <HAL_TIM_DMABurst_ReadStart+0xf8>
 800da32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da36:	d809      	bhi.n	800da4c <HAL_TIM_DMABurst_ReadStart+0x64>
 800da38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da3c:	d026      	beq.n	800da8c <HAL_TIM_DMABurst_ReadStart+0xa4>
 800da3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da42:	d038      	beq.n	800dab6 <HAL_TIM_DMABurst_ReadStart+0xce>
 800da44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da48:	d00b      	beq.n	800da62 <HAL_TIM_DMABurst_ReadStart+0x7a>
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1);      
    }
    break;
    default:
    break;  
 800da4a:	e09d      	b.n	800db88 <HAL_TIM_DMABurst_ReadStart+0x1a0>
  switch(BurstRequestSrc)
 800da4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da50:	d070      	beq.n	800db34 <HAL_TIM_DMABurst_ReadStart+0x14c>
 800da52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da56:	f000 8082 	beq.w	800db5e <HAL_TIM_DMABurst_ReadStart+0x176>
 800da5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da5e:	d054      	beq.n	800db0a <HAL_TIM_DMABurst_ReadStart+0x122>
    break;  
 800da60:	e092      	b.n	800db88 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	69db      	ldr	r3, [r3, #28]
 800da66:	4a54      	ldr	r2, [pc, #336]	; (800dbb8 <HAL_TIM_DMABurst_ReadStart+0x1d0>)
 800da68:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	69db      	ldr	r3, [r3, #28]
 800da6e:	4a53      	ldr	r2, [pc, #332]	; (800dbbc <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800da70:	64da      	str	r2, [r3, #76]	; 0x4c
       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);     
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	69d8      	ldr	r0, [r3, #28]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	334c      	adds	r3, #76	; 0x4c
 800da7c:	4619      	mov	r1, r3
 800da7e:	683a      	ldr	r2, [r7, #0]
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	0a1b      	lsrs	r3, r3, #8
 800da84:	3301      	adds	r3, #1
 800da86:	f7f4 faf0 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800da8a:	e07d      	b.n	800db88 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6a1b      	ldr	r3, [r3, #32]
 800da90:	4a4b      	ldr	r2, [pc, #300]	; (800dbc0 <HAL_TIM_DMABurst_ReadStart+0x1d8>)
 800da92:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	6a1b      	ldr	r3, [r3, #32]
 800da98:	4a48      	ldr	r2, [pc, #288]	; (800dbbc <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800da9a:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6a18      	ldr	r0, [r3, #32]
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	334c      	adds	r3, #76	; 0x4c
 800daa6:	4619      	mov	r1, r3
 800daa8:	683a      	ldr	r2, [r7, #0]
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	0a1b      	lsrs	r3, r3, #8
 800daae:	3301      	adds	r3, #1
 800dab0:	f7f4 fadb 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800dab4:	e068      	b.n	800db88 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daba:	4a41      	ldr	r2, [pc, #260]	; (800dbc0 <HAL_TIM_DMABurst_ReadStart+0x1d8>)
 800dabc:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac2:	4a3e      	ldr	r2, [pc, #248]	; (800dbbc <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800dac4:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);     
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	334c      	adds	r3, #76	; 0x4c
 800dad0:	4619      	mov	r1, r3
 800dad2:	683a      	ldr	r2, [r7, #0]
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	0a1b      	lsrs	r3, r3, #8
 800dad8:	3301      	adds	r3, #1
 800dada:	f7f4 fac6 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800dade:	e053      	b.n	800db88 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dae4:	4a36      	ldr	r2, [pc, #216]	; (800dbc0 <HAL_TIM_DMABurst_ReadStart+0x1d8>)
 800dae6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daec:	4a33      	ldr	r2, [pc, #204]	; (800dbbc <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800daee:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	334c      	adds	r3, #76	; 0x4c
 800dafa:	4619      	mov	r1, r3
 800dafc:	683a      	ldr	r2, [r7, #0]
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	0a1b      	lsrs	r3, r3, #8
 800db02:	3301      	adds	r3, #1
 800db04:	f7f4 fab1 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800db08:	e03e      	b.n	800db88 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0e:	4a2c      	ldr	r2, [pc, #176]	; (800dbc0 <HAL_TIM_DMABurst_ReadStart+0x1d8>)
 800db10:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db16:	4a29      	ldr	r2, [pc, #164]	; (800dbbc <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800db18:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	334c      	adds	r3, #76	; 0x4c
 800db24:	4619      	mov	r1, r3
 800db26:	683a      	ldr	r2, [r7, #0]
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	0a1b      	lsrs	r3, r3, #8
 800db2c:	3301      	adds	r3, #1
 800db2e:	f7f4 fa9c 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800db32:	e029      	b.n	800db88 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db38:	4a22      	ldr	r2, [pc, #136]	; (800dbc4 <HAL_TIM_DMABurst_ReadStart+0x1dc>)
 800db3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db40:	4a1e      	ldr	r2, [pc, #120]	; (800dbbc <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800db42:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	334c      	adds	r3, #76	; 0x4c
 800db4e:	4619      	mov	r1, r3
 800db50:	683a      	ldr	r2, [r7, #0]
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	0a1b      	lsrs	r3, r3, #8
 800db56:	3301      	adds	r3, #1
 800db58:	f7f4 fa87 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800db5c:	e014      	b.n	800db88 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db62:	4a19      	ldr	r2, [pc, #100]	; (800dbc8 <HAL_TIM_DMABurst_ReadStart+0x1e0>)
 800db64:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db6a:	4a14      	ldr	r2, [pc, #80]	; (800dbbc <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800db6c:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1);      
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	334c      	adds	r3, #76	; 0x4c
 800db78:	4619      	mov	r1, r3
 800db7a:	683a      	ldr	r2, [r7, #0]
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	0a1b      	lsrs	r3, r3, #8
 800db80:	3301      	adds	r3, #1
 800db82:	f7f4 fa72 	bl	800206a <HAL_DMA_Start_IT>
    break;
 800db86:	bf00      	nop
  }

  /* configure the DMA Burst Mode */
  htim->Instance->DCR = BurstBaseAddress | BurstLength;  
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	68b9      	ldr	r1, [r7, #8]
 800db8e:	69ba      	ldr	r2, [r7, #24]
 800db90:	430a      	orrs	r2, r1
 800db92:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	6812      	ldr	r2, [r2, #0]
 800db9c:	68d1      	ldr	r1, [r2, #12]
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	430a      	orrs	r2, r1
 800dba2:	60da      	str	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2201      	movs	r2, #1
 800dba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	0800e72f 	.word	0x0800e72f
 800dbbc:	0800e655 	.word	0x0800e655
 800dbc0:	0800e679 	.word	0x0800e679
 800dbc4:	0801024f 	.word	0x0801024f
 800dbc8:	0800e753 	.word	0x0800e753

0800dbcc <HAL_TIM_DMABurst_ReadStop>:
  *                the configuration information for TIM module.
  * @param  BurstRequestSrc TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  
  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbdc:	d028      	beq.n	800dc30 <HAL_TIM_DMABurst_ReadStop+0x64>
 800dbde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbe2:	d809      	bhi.n	800dbf8 <HAL_TIM_DMABurst_ReadStop+0x2c>
 800dbe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbe8:	d016      	beq.n	800dc18 <HAL_TIM_DMABurst_ReadStop+0x4c>
 800dbea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbee:	d019      	beq.n	800dc24 <HAL_TIM_DMABurst_ReadStop+0x58>
 800dbf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbf4:	d00a      	beq.n	800dc0c <HAL_TIM_DMABurst_ReadStop+0x40>
    {  
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
    }
    break;
    default:
    break;  
 800dbf6:	e033      	b.n	800dc60 <HAL_TIM_DMABurst_ReadStop+0x94>
  switch(BurstRequestSrc)
 800dbf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbfc:	d024      	beq.n	800dc48 <HAL_TIM_DMABurst_ReadStop+0x7c>
 800dbfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc02:	d027      	beq.n	800dc54 <HAL_TIM_DMABurst_ReadStop+0x88>
 800dc04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc08:	d018      	beq.n	800dc3c <HAL_TIM_DMABurst_ReadStop+0x70>
    break;  
 800dc0a:	e029      	b.n	800dc60 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	69db      	ldr	r3, [r3, #28]
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7f4 fa8a 	bl	800212a <HAL_DMA_Abort>
    break;
 800dc16:	e023      	b.n	800dc60 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a1b      	ldr	r3, [r3, #32]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7f4 fa84 	bl	800212a <HAL_DMA_Abort>
    break;
 800dc22:	e01d      	b.n	800dc60 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7f4 fa7e 	bl	800212a <HAL_DMA_Abort>
    break;
 800dc2e:	e017      	b.n	800dc60 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7f4 fa78 	bl	800212a <HAL_DMA_Abort>
    break;
 800dc3a:	e011      	b.n	800dc60 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7f4 fa72 	bl	800212a <HAL_DMA_Abort>
    break;
 800dc46:	e00b      	b.n	800dc60 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7f4 fa6c 	bl	800212a <HAL_DMA_Abort>
    break;
 800dc52:	e005      	b.n	800dc60 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7f4 fa66 	bl	800212a <HAL_DMA_Abort>
    break;
 800dc5e:	bf00      	nop
  }
  
  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	6812      	ldr	r2, [r2, #0]
 800dc68:	68d1      	ldr	r1, [r2, #12]
 800dc6a:	683a      	ldr	r2, [r7, #0]
 800dc6c:	43d2      	mvns	r2, r2
 800dc6e:	400a      	ands	r2, r1
 800dc70:	60da      	str	r2, [r3, #12]
      
  /* Return function status */
  return HAL_OK;  
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <HAL_TIM_GenerateEvent>:
  * @note   TIM_EVENTSOURCE_COM and TIM_EVENTSOURCE_BREAK are used only with TIM1 and TIM8.
  * @retval HAL status
  */ 

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
  
  /* Process Locked */
  __HAL_LOCK(htim);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d101      	bne.n	800dc94 <HAL_TIM_GenerateEvent+0x18>
 800dc90:	2302      	movs	r3, #2
 800dc92:	e014      	b.n	800dcbe <HAL_TIM_GenerateEvent+0x42>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2201      	movs	r2, #1
 800dc98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2202      	movs	r2, #2
 800dca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	683a      	ldr	r2, [r7, #0]
 800dcaa:	615a      	str	r2, [r3, #20]
  
  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Return function status */
  return HAL_OK;  
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	370c      	adds	r7, #12
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr

0800dcca <HAL_TIM_ConfigOCrefClear>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef * sClearInputConfig, uint32_t Channel)
{ 
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b084      	sub	sp, #16
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	60f8      	str	r0, [r7, #12]
 800dcd2:	60b9      	str	r1, [r7, #8]
 800dcd4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
  assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
  assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
   
  /* Process Locked */
  __HAL_LOCK(htim);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d101      	bne.n	800dce4 <HAL_TIM_ConfigOCrefClear+0x1a>
 800dce0:	2302      	movs	r3, #2
 800dce2:	e097      	b.n	800de14 <HAL_TIM_ConfigOCrefClear+0x14a>
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2202      	movs	r2, #2
 800dcf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  if(sClearInputConfig->ClearInputSource == TIM_CLEARINPUTSOURCE_ETR)
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d109      	bne.n	800dd10 <HAL_TIM_ConfigOCrefClear+0x46>
  {
    TIM_ETR_SetConfig(htim->Instance, 
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	6818      	ldr	r0, [r3, #0]
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	68d9      	ldr	r1, [r3, #12]
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	689a      	ldr	r2, [r3, #8]
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	691b      	ldr	r3, [r3, #16]
 800dd0c:	f001 f852 	bl	800edb4 <TIM_ETR_SetConfig>
                      sClearInputConfig->ClearInputPrescaler,
                      sClearInputConfig->ClearInputPolarity,
                      sClearInputConfig->ClearInputFilter);
  }
  
  switch (Channel)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b0c      	cmp	r3, #12
 800dd14:	d874      	bhi.n	800de00 <HAL_TIM_ConfigOCrefClear+0x136>
 800dd16:	a201      	add	r2, pc, #4	; (adr r2, 800dd1c <HAL_TIM_ConfigOCrefClear+0x52>)
 800dd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd1c:	0800dd51 	.word	0x0800dd51
 800dd20:	0800de01 	.word	0x0800de01
 800dd24:	0800de01 	.word	0x0800de01
 800dd28:	0800de01 	.word	0x0800de01
 800dd2c:	0800dd7d 	.word	0x0800dd7d
 800dd30:	0800de01 	.word	0x0800de01
 800dd34:	0800de01 	.word	0x0800de01
 800dd38:	0800de01 	.word	0x0800de01
 800dd3c:	0800dda9 	.word	0x0800dda9
 800dd40:	0800de01 	.word	0x0800de01
 800dd44:	0800de01 	.word	0x0800de01
 800dd48:	0800de01 	.word	0x0800de01
 800dd4c:	0800ddd5 	.word	0x0800ddd5
  {
    case TIM_CHANNEL_1:
    {        
      if(sClearInputConfig->ClearInputState != RESET)  
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d008      	beq.n	800dd6a <HAL_TIM_ConfigOCrefClear+0xa0>
      {
        /* Enable the Ocref clear feature for Channel 1 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	6812      	ldr	r2, [r2, #0]
 800dd60:	6992      	ldr	r2, [r2, #24]
 800dd62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dd66:	619a      	str	r2, [r3, #24]
      {
        /* Disable the Ocref clear feature for Channel 1 */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
      }
    }    
    break;
 800dd68:	e04b      	b.n	800de02 <HAL_TIM_ConfigOCrefClear+0x138>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	6812      	ldr	r2, [r2, #0]
 800dd72:	6992      	ldr	r2, [r2, #24]
 800dd74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd78:	619a      	str	r2, [r3, #24]
    break;
 800dd7a:	e042      	b.n	800de02 <HAL_TIM_ConfigOCrefClear+0x138>
    case TIM_CHANNEL_2:    
    { 
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      if(sClearInputConfig->ClearInputState != RESET)  
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d008      	beq.n	800dd96 <HAL_TIM_ConfigOCrefClear+0xcc>
      {
        /* Enable the Ocref clear feature for Channel 2 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	6812      	ldr	r2, [r2, #0]
 800dd8c:	6992      	ldr	r2, [r2, #24]
 800dd8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dd92:	619a      	str	r2, [r3, #24]
      {
        /* Disable the Ocref clear feature for Channel 2 */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
      }
    } 
    break;
 800dd94:	e035      	b.n	800de02 <HAL_TIM_ConfigOCrefClear+0x138>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	68fa      	ldr	r2, [r7, #12]
 800dd9c:	6812      	ldr	r2, [r2, #0]
 800dd9e:	6992      	ldr	r2, [r2, #24]
 800dda0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dda4:	619a      	str	r2, [r3, #24]
    break;
 800dda6:	e02c      	b.n	800de02 <HAL_TIM_ConfigOCrefClear+0x138>
    case TIM_CHANNEL_3:   
    {  
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      if(sClearInputConfig->ClearInputState != RESET)  
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d008      	beq.n	800ddc2 <HAL_TIM_ConfigOCrefClear+0xf8>
      {
        /* Enable the Ocref clear feature for Channel 3 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	6812      	ldr	r2, [r2, #0]
 800ddb8:	69d2      	ldr	r2, [r2, #28]
 800ddba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ddbe:	61da      	str	r2, [r3, #28]
      {
        /* Disable the Ocref clear feature for Channel 3 */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
      }
    } 
    break;
 800ddc0:	e01f      	b.n	800de02 <HAL_TIM_ConfigOCrefClear+0x138>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	68fa      	ldr	r2, [r7, #12]
 800ddc8:	6812      	ldr	r2, [r2, #0]
 800ddca:	69d2      	ldr	r2, [r2, #28]
 800ddcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ddd0:	61da      	str	r2, [r3, #28]
    break;
 800ddd2:	e016      	b.n	800de02 <HAL_TIM_ConfigOCrefClear+0x138>
    case TIM_CHANNEL_4:    
    {  
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      if(sClearInputConfig->ClearInputState != RESET)  
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d008      	beq.n	800ddee <HAL_TIM_ConfigOCrefClear+0x124>
      {
        /* Enable the Ocref clear feature for Channel 4 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	6812      	ldr	r2, [r2, #0]
 800dde4:	69d2      	ldr	r2, [r2, #28]
 800dde6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ddea:	61da      	str	r2, [r3, #28]
      {
        /* Disable the Ocref clear feature for Channel 4 */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
      }
    } 
    break;
 800ddec:	e009      	b.n	800de02 <HAL_TIM_ConfigOCrefClear+0x138>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	6812      	ldr	r2, [r2, #0]
 800ddf6:	69d2      	ldr	r2, [r2, #28]
 800ddf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ddfc:	61da      	str	r2, [r3, #28]
    break;
 800ddfe:	e000      	b.n	800de02 <HAL_TIM_ConfigOCrefClear+0x138>
    default:  
    break;
 800de00:	bf00      	nop
  } 

  htim->State = HAL_TIM_STATE_READY;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2201      	movs	r2, #1
 800de06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2200      	movs	r2, #0
 800de0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;  
 800de12:	2300      	movs	r3, #0
}  
 800de14:	4618      	mov	r0, r3
 800de16:	3710      	adds	r7, #16
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800de26:	2300      	movs	r3, #0
 800de28:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de30:	2b01      	cmp	r3, #1
 800de32:	d101      	bne.n	800de38 <HAL_TIM_ConfigClockSource+0x1c>
 800de34:	2302      	movs	r3, #2
 800de36:	e0c8      	b.n	800dfca <HAL_TIM_ConfigClockSource+0x1ae>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2201      	movs	r2, #1
 800de3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2202      	movs	r2, #2
 800de44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800de56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800de5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b40      	cmp	r3, #64	; 0x40
 800de6e:	d077      	beq.n	800df60 <HAL_TIM_ConfigClockSource+0x144>
 800de70:	2b40      	cmp	r3, #64	; 0x40
 800de72:	d80e      	bhi.n	800de92 <HAL_TIM_ConfigClockSource+0x76>
 800de74:	2b10      	cmp	r3, #16
 800de76:	f000 808a 	beq.w	800df8e <HAL_TIM_ConfigClockSource+0x172>
 800de7a:	2b10      	cmp	r3, #16
 800de7c:	d802      	bhi.n	800de84 <HAL_TIM_ConfigClockSource+0x68>
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d07e      	beq.n	800df80 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 800de82:	e099      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800de84:	2b20      	cmp	r3, #32
 800de86:	f000 8089 	beq.w	800df9c <HAL_TIM_ConfigClockSource+0x180>
 800de8a:	2b30      	cmp	r3, #48	; 0x30
 800de8c:	f000 808d 	beq.w	800dfaa <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 800de90:	e092      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800de92:	2b70      	cmp	r3, #112	; 0x70
 800de94:	d016      	beq.n	800dec4 <HAL_TIM_ConfigClockSource+0xa8>
 800de96:	2b70      	cmp	r3, #112	; 0x70
 800de98:	d804      	bhi.n	800dea4 <HAL_TIM_ConfigClockSource+0x88>
 800de9a:	2b50      	cmp	r3, #80	; 0x50
 800de9c:	d040      	beq.n	800df20 <HAL_TIM_ConfigClockSource+0x104>
 800de9e:	2b60      	cmp	r3, #96	; 0x60
 800dea0:	d04e      	beq.n	800df40 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 800dea2:	e089      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800dea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dea8:	d003      	beq.n	800deb2 <HAL_TIM_ConfigClockSource+0x96>
 800deaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800deae:	d024      	beq.n	800defa <HAL_TIM_ConfigClockSource+0xde>
    break;    
 800deb0:	e082      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	6812      	ldr	r2, [r2, #0]
 800deba:	6892      	ldr	r2, [r2, #8]
 800debc:	f022 0207 	bic.w	r2, r2, #7
 800dec0:	609a      	str	r2, [r3, #8]
    break;
 800dec2:	e079      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6818      	ldr	r0, [r3, #0]
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	6899      	ldr	r1, [r3, #8]
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	685a      	ldr	r2, [r3, #4]
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	f000 ff6e 	bl	800edb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800dee6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800deee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	609a      	str	r2, [r3, #8]
    break;
 800def8:	e05e      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6818      	ldr	r0, [r3, #0]
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	6899      	ldr	r1, [r3, #8]
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	685a      	ldr	r2, [r3, #4]
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	f000 ff53 	bl	800edb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	6812      	ldr	r2, [r2, #0]
 800df16:	6892      	ldr	r2, [r2, #8]
 800df18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800df1c:	609a      	str	r2, [r3, #8]
    break;
 800df1e:	e04b      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6818      	ldr	r0, [r3, #0]
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	6859      	ldr	r1, [r3, #4]
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	461a      	mov	r2, r3
 800df2e:	f000 fdf8 	bl	800eb22 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2150      	movs	r1, #80	; 0x50
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 ff1b 	bl	800ed74 <TIM_ITRx_SetConfig>
    break;
 800df3e:	e03b      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6818      	ldr	r0, [r3, #0]
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	6859      	ldr	r1, [r3, #4]
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	461a      	mov	r2, r3
 800df4e:	f000 fe5c 	bl	800ec0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2160      	movs	r1, #96	; 0x60
 800df58:	4618      	mov	r0, r3
 800df5a:	f000 ff0b 	bl	800ed74 <TIM_ITRx_SetConfig>
    break;
 800df5e:	e02b      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6818      	ldr	r0, [r3, #0]
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	6859      	ldr	r1, [r3, #4]
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	461a      	mov	r2, r3
 800df6e:	f000 fdd8 	bl	800eb22 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2140      	movs	r1, #64	; 0x40
 800df78:	4618      	mov	r0, r3
 800df7a:	f000 fefb 	bl	800ed74 <TIM_ITRx_SetConfig>
    break;
 800df7e:	e01b      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2100      	movs	r1, #0
 800df86:	4618      	mov	r0, r3
 800df88:	f000 fef4 	bl	800ed74 <TIM_ITRx_SetConfig>
    break;
 800df8c:	e014      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2110      	movs	r1, #16
 800df94:	4618      	mov	r0, r3
 800df96:	f000 feed 	bl	800ed74 <TIM_ITRx_SetConfig>
    break;
 800df9a:	e00d      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2120      	movs	r1, #32
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f000 fee6 	bl	800ed74 <TIM_ITRx_SetConfig>
    break;
 800dfa8:	e006      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2130      	movs	r1, #48	; 0x30
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f000 fedf 	bl	800ed74 <TIM_ITRx_SetConfig>
    break;
 800dfb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800dfc8:	2300      	movs	r3, #0
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 800dfd2:	b480      	push	{r7}
 800dfd4:	b085      	sub	sp, #20
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2 = 0U;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfee:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	4313      	orrs	r3, r2
 800dff6:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	3714      	adds	r7, #20
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr

0800e00e <HAL_TIM_SlaveConfigSynchronization>:
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1). 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b082      	sub	sp, #8
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
 800e016:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
   
  __HAL_LOCK(htim);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d101      	bne.n	800e026 <HAL_TIM_SlaveConfigSynchronization+0x18>
 800e022:	2302      	movs	r3, #2
 800e024:	e024      	b.n	800e070 <HAL_TIM_SlaveConfigSynchronization+0x62>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2201      	movs	r2, #1
 800e02a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2202      	movs	r2, #2
 800e032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800e036:	6839      	ldr	r1, [r7, #0]
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 fce7 	bl	800ea0c <TIM_SlaveTimer_SetConfig>
  
  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	6812      	ldr	r2, [r2, #0]
 800e046:	68d2      	ldr	r2, [r2, #12]
 800e048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e04c:	60da      	str	r2, [r3, #12]
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	6812      	ldr	r2, [r2, #0]
 800e056:	68d2      	ldr	r2, [r2, #12]
 800e058:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e05c:	60da      	str	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2201      	movs	r2, #1
 800e062:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     
  __HAL_UNLOCK(htim);  
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2200      	movs	r2, #0
 800e06a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800e06e:	2300      	movs	r3, #0
} 
 800e070:	4618      	mov	r0, r3
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <HAL_TIM_SlaveConfigSynchronization_IT>:
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1). 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim, 
                                                        TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
  
  __HAL_LOCK(htim);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d101      	bne.n	800e090 <HAL_TIM_SlaveConfigSynchronization_IT+0x18>
 800e08c:	2302      	movs	r3, #2
 800e08e:	e024      	b.n	800e0da <HAL_TIM_SlaveConfigSynchronization_IT+0x62>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2201      	movs	r2, #1
 800e094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2202      	movs	r2, #2
 800e09c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 fcb2 	bl	800ea0c <TIM_SlaveTimer_SetConfig>
  
  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	6812      	ldr	r2, [r2, #0]
 800e0b0:	68d2      	ldr	r2, [r2, #12]
 800e0b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e0b6:	60da      	str	r2, [r3, #12]
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	6812      	ldr	r2, [r2, #0]
 800e0c0:	68d2      	ldr	r2, [r2, #12]
 800e0c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e0c6:	60da      	str	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     
  __HAL_UNLOCK(htim);  
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e0e2:	b480      	push	{r7}
 800e0e4:	b085      	sub	sp, #20
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
 800e0ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	60fb      	str	r3, [r7, #12]
  
  __HAL_LOCK(htim);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d101      	bne.n	800e0fe <HAL_TIM_ReadCapturedValue+0x1c>
 800e0fa:	2302      	movs	r3, #2
 800e0fc:	e03e      	b.n	800e17c <HAL_TIM_ReadCapturedValue+0x9a>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2201      	movs	r2, #1
 800e102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  switch (Channel)
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	2b0c      	cmp	r3, #12
 800e10a:	d831      	bhi.n	800e170 <HAL_TIM_ReadCapturedValue+0x8e>
 800e10c:	a201      	add	r2, pc, #4	; (adr r2, 800e114 <HAL_TIM_ReadCapturedValue+0x32>)
 800e10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e112:	bf00      	nop
 800e114:	0800e149 	.word	0x0800e149
 800e118:	0800e171 	.word	0x0800e171
 800e11c:	0800e171 	.word	0x0800e171
 800e120:	0800e171 	.word	0x0800e171
 800e124:	0800e153 	.word	0x0800e153
 800e128:	0800e171 	.word	0x0800e171
 800e12c:	0800e171 	.word	0x0800e171
 800e130:	0800e171 	.word	0x0800e171
 800e134:	0800e15d 	.word	0x0800e15d
 800e138:	0800e171 	.word	0x0800e171
 800e13c:	0800e171 	.word	0x0800e171
 800e140:	0800e171 	.word	0x0800e171
 800e144:	0800e167 	.word	0x0800e167
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      
      /* Return the capture 1 value */
      tmpreg = htim->Instance->CCR1;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e14e:	60fb      	str	r3, [r7, #12]
      
      break;
 800e150:	e00f      	b.n	800e172 <HAL_TIM_ReadCapturedValue+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      
      /* Return the capture 2 value */
      tmpreg = htim->Instance->CCR2;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e158:	60fb      	str	r3, [r7, #12]
      
      break;
 800e15a:	e00a      	b.n	800e172 <HAL_TIM_ReadCapturedValue+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      
      /* Return the capture 3 value */
      tmpreg = htim->Instance->CCR3;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e162:	60fb      	str	r3, [r7, #12]
      
      break;
 800e164:	e005      	b.n	800e172 <HAL_TIM_ReadCapturedValue+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      
      /* Return the capture 4 value */
      tmpreg = htim->Instance->CCR4;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e16c:	60fb      	str	r3, [r7, #12]
      
      break;
 800e16e:	e000      	b.n	800e172 <HAL_TIM_ReadCapturedValue+0x90>
    }
    
    default:
    break;  
 800e170:	bf00      	nop
  }
     
  __HAL_UNLOCK(htim);  
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return tmpreg;
 800e17a:	68fb      	ldr	r3, [r7, #12]
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3714      	adds	r7, #20
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e190:	bf00      	nop
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e1a4:	bf00      	nop
 800e1a6:	370c      	adds	r7, #12
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e1b8:	bf00      	nop
 800e1ba:	370c      	adds	r7, #12
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e1cc:	bf00      	nop
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e1e0:	bf00      	nop
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <HAL_TIM_ErrorCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e1f4:	bf00      	nop
 800e1f6:	370c      	adds	r7, #12
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <HAL_TIM_Base_GetState>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  return htim->State;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e20e:	b2db      	uxtb	r3, r3
}
 800e210:	4618      	mov	r0, r3
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr

0800e21c <HAL_TIM_OC_GetState>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  return htim->State;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e22a:	b2db      	uxtb	r3, r3
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	370c      	adds	r7, #12
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <HAL_TIM_PWM_GetState>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  return htim->State;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e246:	b2db      	uxtb	r3, r3
}
 800e248:	4618      	mov	r0, r3
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <HAL_TIM_IC_GetState>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
{
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  return htim->State;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e262:	b2db      	uxtb	r3, r3
}
 800e264:	4618      	mov	r0, r3
 800e266:	370c      	adds	r7, #12
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr

0800e270 <HAL_TIM_OnePulse_GetState>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
{
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  return htim->State;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e27e:	b2db      	uxtb	r3, r3
}
 800e280:	4618      	mov	r0, r3
 800e282:	370c      	adds	r7, #12
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr

0800e28c <HAL_TIM_Encoder_GetState>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  return htim->State;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e29a:	b2db      	uxtb	r3, r3
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4a44      	ldr	r2, [pc, #272]	; (800e3d0 <TIM_Base_SetConfig+0x128>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d013      	beq.n	800e2ec <TIM_Base_SetConfig+0x44>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ca:	d00f      	beq.n	800e2ec <TIM_Base_SetConfig+0x44>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	4a41      	ldr	r2, [pc, #260]	; (800e3d4 <TIM_Base_SetConfig+0x12c>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d00b      	beq.n	800e2ec <TIM_Base_SetConfig+0x44>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	4a40      	ldr	r2, [pc, #256]	; (800e3d8 <TIM_Base_SetConfig+0x130>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d007      	beq.n	800e2ec <TIM_Base_SetConfig+0x44>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4a3f      	ldr	r2, [pc, #252]	; (800e3dc <TIM_Base_SetConfig+0x134>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d003      	beq.n	800e2ec <TIM_Base_SetConfig+0x44>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	4a3e      	ldr	r2, [pc, #248]	; (800e3e0 <TIM_Base_SetConfig+0x138>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d101      	bne.n	800e2f0 <TIM_Base_SetConfig+0x48>
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e000      	b.n	800e2f2 <TIM_Base_SetConfig+0x4a>
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d008      	beq.n	800e308 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	68fa      	ldr	r2, [r7, #12]
 800e304:	4313      	orrs	r3, r2
 800e306:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	4a31      	ldr	r2, [pc, #196]	; (800e3d0 <TIM_Base_SetConfig+0x128>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d02b      	beq.n	800e368 <TIM_Base_SetConfig+0xc0>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e316:	d027      	beq.n	800e368 <TIM_Base_SetConfig+0xc0>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	4a2e      	ldr	r2, [pc, #184]	; (800e3d4 <TIM_Base_SetConfig+0x12c>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d023      	beq.n	800e368 <TIM_Base_SetConfig+0xc0>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	4a2d      	ldr	r2, [pc, #180]	; (800e3d8 <TIM_Base_SetConfig+0x130>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d01f      	beq.n	800e368 <TIM_Base_SetConfig+0xc0>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	4a2c      	ldr	r2, [pc, #176]	; (800e3dc <TIM_Base_SetConfig+0x134>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d01b      	beq.n	800e368 <TIM_Base_SetConfig+0xc0>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	4a2b      	ldr	r2, [pc, #172]	; (800e3e0 <TIM_Base_SetConfig+0x138>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d017      	beq.n	800e368 <TIM_Base_SetConfig+0xc0>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	4a2a      	ldr	r2, [pc, #168]	; (800e3e4 <TIM_Base_SetConfig+0x13c>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d013      	beq.n	800e368 <TIM_Base_SetConfig+0xc0>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	4a29      	ldr	r2, [pc, #164]	; (800e3e8 <TIM_Base_SetConfig+0x140>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d00f      	beq.n	800e368 <TIM_Base_SetConfig+0xc0>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	4a28      	ldr	r2, [pc, #160]	; (800e3ec <TIM_Base_SetConfig+0x144>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d00b      	beq.n	800e368 <TIM_Base_SetConfig+0xc0>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4a27      	ldr	r2, [pc, #156]	; (800e3f0 <TIM_Base_SetConfig+0x148>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d007      	beq.n	800e368 <TIM_Base_SetConfig+0xc0>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	4a26      	ldr	r2, [pc, #152]	; (800e3f4 <TIM_Base_SetConfig+0x14c>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d003      	beq.n	800e368 <TIM_Base_SetConfig+0xc0>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a25      	ldr	r2, [pc, #148]	; (800e3f8 <TIM_Base_SetConfig+0x150>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d101      	bne.n	800e36c <TIM_Base_SetConfig+0xc4>
 800e368:	2301      	movs	r3, #1
 800e36a:	e000      	b.n	800e36e <TIM_Base_SetConfig+0xc6>
 800e36c:	2300      	movs	r3, #0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d008      	beq.n	800e384 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	68fa      	ldr	r2, [r7, #12]
 800e380:	4313      	orrs	r3, r2
 800e382:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	689a      	ldr	r2, [r3, #8]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4a0c      	ldr	r2, [pc, #48]	; (800e3d0 <TIM_Base_SetConfig+0x128>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d003      	beq.n	800e3aa <TIM_Base_SetConfig+0x102>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	4a0e      	ldr	r2, [pc, #56]	; (800e3e0 <TIM_Base_SetConfig+0x138>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d101      	bne.n	800e3ae <TIM_Base_SetConfig+0x106>
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e000      	b.n	800e3b0 <TIM_Base_SetConfig+0x108>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d003      	beq.n	800e3bc <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	691a      	ldr	r2, [r3, #16]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	615a      	str	r2, [r3, #20]
}
 800e3c2:	bf00      	nop
 800e3c4:	3714      	adds	r7, #20
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop
 800e3d0:	40010000 	.word	0x40010000
 800e3d4:	40000400 	.word	0x40000400
 800e3d8:	40000800 	.word	0x40000800
 800e3dc:	40000c00 	.word	0x40000c00
 800e3e0:	40010400 	.word	0x40010400
 800e3e4:	40014000 	.word	0x40014000
 800e3e8:	40014400 	.word	0x40014400
 800e3ec:	40014800 	.word	0x40014800
 800e3f0:	40001800 	.word	0x40001800
 800e3f4:	40001c00 	.word	0x40001c00
 800e3f8:	40002000 	.word	0x40002000

0800e3fc <TIM_TI1_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b087      	sub	sp, #28
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
 800e408:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800e40a:	2300      	movs	r3, #0
 800e40c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800e40e:	2300      	movs	r3, #0
 800e410:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	6a1b      	ldr	r3, [r3, #32]
 800e416:	f023 0201 	bic.w	r2, r3, #1
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	699b      	ldr	r3, [r3, #24]
 800e422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	6a1b      	ldr	r3, [r3, #32]
 800e428:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	4a2a      	ldr	r2, [pc, #168]	; (800e4d8 <TIM_TI1_SetConfig+0xdc>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d01b      	beq.n	800e46a <TIM_TI1_SetConfig+0x6e>
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e438:	d017      	beq.n	800e46a <TIM_TI1_SetConfig+0x6e>
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	4a27      	ldr	r2, [pc, #156]	; (800e4dc <TIM_TI1_SetConfig+0xe0>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d013      	beq.n	800e46a <TIM_TI1_SetConfig+0x6e>
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	4a26      	ldr	r2, [pc, #152]	; (800e4e0 <TIM_TI1_SetConfig+0xe4>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d00f      	beq.n	800e46a <TIM_TI1_SetConfig+0x6e>
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	4a25      	ldr	r2, [pc, #148]	; (800e4e4 <TIM_TI1_SetConfig+0xe8>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d00b      	beq.n	800e46a <TIM_TI1_SetConfig+0x6e>
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	4a24      	ldr	r2, [pc, #144]	; (800e4e8 <TIM_TI1_SetConfig+0xec>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d007      	beq.n	800e46a <TIM_TI1_SetConfig+0x6e>
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	4a23      	ldr	r2, [pc, #140]	; (800e4ec <TIM_TI1_SetConfig+0xf0>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d003      	beq.n	800e46a <TIM_TI1_SetConfig+0x6e>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	4a22      	ldr	r2, [pc, #136]	; (800e4f0 <TIM_TI1_SetConfig+0xf4>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d101      	bne.n	800e46e <TIM_TI1_SetConfig+0x72>
 800e46a:	2301      	movs	r3, #1
 800e46c:	e000      	b.n	800e470 <TIM_TI1_SetConfig+0x74>
 800e46e:	2300      	movs	r3, #0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d008      	beq.n	800e486 <TIM_TI1_SetConfig+0x8a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	f023 0303 	bic.w	r3, r3, #3
 800e47a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e47c:	697a      	ldr	r2, [r7, #20]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	4313      	orrs	r3, r2
 800e482:	617b      	str	r3, [r7, #20]
 800e484:	e007      	b.n	800e496 <TIM_TI1_SetConfig+0x9a>
  } 
  else
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	f023 0303 	bic.w	r3, r3, #3
 800e48c:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	f043 0301 	orr.w	r3, r3, #1
 800e494:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e49c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	011b      	lsls	r3, r3, #4
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	697a      	ldr	r2, [r7, #20]
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	f023 030a 	bic.w	r3, r3, #10
 800e4b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	f003 030a 	and.w	r3, r3, #10
 800e4b8:	693a      	ldr	r2, [r7, #16]
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	697a      	ldr	r2, [r7, #20]
 800e4c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	693a      	ldr	r2, [r7, #16]
 800e4c8:	621a      	str	r2, [r3, #32]
}
 800e4ca:	bf00      	nop
 800e4cc:	371c      	adds	r7, #28
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	40010000 	.word	0x40010000
 800e4dc:	40000400 	.word	0x40000400
 800e4e0:	40000800 	.word	0x40000800
 800e4e4:	40000c00 	.word	0x40000c00
 800e4e8:	40010400 	.word	0x40010400
 800e4ec:	40014000 	.word	0x40014000
 800e4f0:	40001800 	.word	0x40001800

0800e4f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b087      	sub	sp, #28
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800e4fe:	2300      	movs	r3, #0
 800e500:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800e502:	2300      	movs	r3, #0
 800e504:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800e506:	2300      	movs	r3, #0
 800e508:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6a1b      	ldr	r3, [r3, #32]
 800e50e:	f023 0210 	bic.w	r2, r3, #16
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6a1b      	ldr	r3, [r3, #32]
 800e51a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	699b      	ldr	r3, [r3, #24]
 800e526:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e52e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e536:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	021b      	lsls	r3, r3, #8
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	4313      	orrs	r3, r2
 800e542:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	f023 0320 	bic.w	r3, r3, #32
 800e54a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	689b      	ldr	r3, [r3, #8]
 800e550:	011b      	lsls	r3, r3, #4
 800e552:	697a      	ldr	r2, [r7, #20]
 800e554:	4313      	orrs	r3, r2
 800e556:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	4a20      	ldr	r2, [pc, #128]	; (800e5dc <TIM_OC2_SetConfig+0xe8>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d003      	beq.n	800e568 <TIM_OC2_SetConfig+0x74>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4a1f      	ldr	r2, [pc, #124]	; (800e5e0 <TIM_OC2_SetConfig+0xec>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d101      	bne.n	800e56c <TIM_OC2_SetConfig+0x78>
 800e568:	2301      	movs	r3, #1
 800e56a:	e000      	b.n	800e56e <TIM_OC2_SetConfig+0x7a>
 800e56c:	2300      	movs	r3, #0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d021      	beq.n	800e5b6 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	011b      	lsls	r3, r3, #4
 800e580:	697a      	ldr	r2, [r7, #20]
 800e582:	4313      	orrs	r3, r2
 800e584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e58c:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e59c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	695b      	ldr	r3, [r3, #20]
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	693a      	ldr	r2, [r7, #16]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	699b      	ldr	r3, [r3, #24]
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	693a      	ldr	r2, [r7, #16]
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	693a      	ldr	r2, [r7, #16]
 800e5ba:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	697a      	ldr	r2, [r7, #20]
 800e5ce:	621a      	str	r2, [r3, #32]
}
 800e5d0:	bf00      	nop
 800e5d2:	371c      	adds	r7, #28
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr
 800e5dc:	40010000 	.word	0x40010000
 800e5e0:	40010400 	.word	0x40010400

0800e5e4 <TIM_DMADelayPulseCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5f0:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY; 
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	6a1a      	ldr	r2, [r3, #32]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	429a      	cmp	r2, r3
 800e602:	d103      	bne.n	800e60c <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2201      	movs	r2, #1
 800e608:	761a      	strb	r2, [r3, #24]
 800e60a:	e019      	b.n	800e640 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	429a      	cmp	r2, r3
 800e614:	d103      	bne.n	800e61e <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2202      	movs	r2, #2
 800e61a:	761a      	strb	r2, [r3, #24]
 800e61c:	e010      	b.n	800e640 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	429a      	cmp	r2, r3
 800e626:	d103      	bne.n	800e630 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2204      	movs	r2, #4
 800e62c:	761a      	strb	r2, [r3, #24]
 800e62e:	e007      	b.n	800e640 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	429a      	cmp	r2, r3
 800e638:	d102      	bne.n	800e640 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2208      	movs	r2, #8
 800e63e:	761a      	strb	r2, [r3, #24]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f7ff fdbf 	bl	800e1c4 <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;  
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2200      	movs	r2, #0
 800e64a:	761a      	strb	r2, [r3, #24]
}
 800e64c:	bf00      	nop
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <TIM_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e660:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2201      	movs	r2, #1
 800e666:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   
  HAL_TIM_ErrorCallback(htim);
 800e66a:	68f8      	ldr	r0, [r7, #12]
 800e66c:	f7ff fdbe 	bl	800e1ec <HAL_TIM_ErrorCallback>
}
 800e670:	bf00      	nop
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <TIM_DMACaptureCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e684:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2201      	movs	r2, #1
 800e68a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	6a1a      	ldr	r2, [r3, #32]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	429a      	cmp	r2, r3
 800e696:	d103      	bne.n	800e6a0 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2201      	movs	r2, #1
 800e69c:	761a      	strb	r2, [r3, #24]
 800e69e:	e019      	b.n	800e6d4 <TIM_DMACaptureCplt+0x5c>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d103      	bne.n	800e6b2 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2202      	movs	r2, #2
 800e6ae:	761a      	strb	r2, [r3, #24]
 800e6b0:	e010      	b.n	800e6d4 <TIM_DMACaptureCplt+0x5c>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d103      	bne.n	800e6c4 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2204      	movs	r2, #4
 800e6c0:	761a      	strb	r2, [r3, #24]
 800e6c2:	e007      	b.n	800e6d4 <TIM_DMACaptureCplt+0x5c>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d102      	bne.n	800e6d4 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2208      	movs	r2, #8
 800e6d2:	761a      	strb	r2, [r3, #24]
  }
  
  HAL_TIM_IC_CaptureCallback(htim); 
 800e6d4:	68f8      	ldr	r0, [r7, #12]
 800e6d6:	f7ff fd6b 	bl	800e1b0 <HAL_TIM_IC_CaptureCallback>
  
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	761a      	strb	r2, [r3, #24]
}
 800e6e0:	bf00      	nop
 800e6e2:	3710      	adds	r7, #16
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b087      	sub	sp, #28
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	60f8      	str	r0, [r7, #12]
 800e6f0:	60b9      	str	r1, [r7, #8]
 800e6f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e700:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	6a1a      	ldr	r2, [r3, #32]
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	43db      	mvns	r3, r3
 800e70a:	401a      	ands	r2, r3
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	6a1a      	ldr	r2, [r3, #32]
 800e714:	6879      	ldr	r1, [r7, #4]
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	fa01 f303 	lsl.w	r3, r1, r3
 800e71c:	431a      	orrs	r2, r3
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	621a      	str	r2, [r3, #32]
}
 800e722:	bf00      	nop
 800e724:	371c      	adds	r7, #28
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr

0800e72e <TIM_DMAPeriodElapsedCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b084      	sub	sp, #16
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e73a:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2201      	movs	r2, #1
 800e740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  HAL_TIM_PeriodElapsedCallback(htim);
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f005 fc05 	bl	8013f54 <HAL_TIM_PeriodElapsedCallback>
}
 800e74a:	bf00      	nop
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <TIM_DMATriggerCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b084      	sub	sp, #16
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;  
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e75e:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY; 
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2201      	movs	r2, #1
 800e764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  HAL_TIM_TriggerCallback(htim);
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f7ff fd35 	bl	800e1d8 <HAL_TIM_TriggerCallback>
}
 800e76e:	bf00      	nop
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e776:	b480      	push	{r7}
 800e778:	b087      	sub	sp, #28
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
 800e77e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800e780:	2300      	movs	r3, #0
 800e782:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800e784:	2300      	movs	r3, #0
 800e786:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 800e788:	2300      	movs	r3, #0
 800e78a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6a1b      	ldr	r3, [r3, #32]
 800e790:	f023 0201 	bic.w	r2, r3, #1
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6a1b      	ldr	r3, [r3, #32]
 800e79c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	699b      	ldr	r3, [r3, #24]
 800e7a8:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f023 0303 	bic.w	r3, r3, #3
 800e7b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	68fa      	ldr	r2, [r7, #12]
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	f023 0302 	bic.w	r3, r3, #2
 800e7ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	697a      	ldr	r2, [r7, #20]
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a1e      	ldr	r2, [pc, #120]	; (800e854 <TIM_OC1_SetConfig+0xde>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d003      	beq.n	800e7e6 <TIM_OC1_SetConfig+0x70>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a1d      	ldr	r2, [pc, #116]	; (800e858 <TIM_OC1_SetConfig+0xe2>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d101      	bne.n	800e7ea <TIM_OC1_SetConfig+0x74>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	e000      	b.n	800e7ec <TIM_OC1_SetConfig+0x76>
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d01e      	beq.n	800e82e <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	f023 0308 	bic.w	r3, r3, #8
 800e7f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	697a      	ldr	r2, [r7, #20]
 800e7fe:	4313      	orrs	r3, r2
 800e800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	f023 0304 	bic.w	r3, r3, #4
 800e808:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	695b      	ldr	r3, [r3, #20]
 800e81e:	693a      	ldr	r2, [r7, #16]
 800e820:	4313      	orrs	r3, r2
 800e822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	699b      	ldr	r3, [r3, #24]
 800e828:	693a      	ldr	r2, [r7, #16]
 800e82a:	4313      	orrs	r3, r2
 800e82c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	693a      	ldr	r2, [r7, #16]
 800e832:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	68fa      	ldr	r2, [r7, #12]
 800e838:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	685a      	ldr	r2, [r3, #4]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	697a      	ldr	r2, [r7, #20]
 800e846:	621a      	str	r2, [r3, #32]
} 
 800e848:	bf00      	nop
 800e84a:	371c      	adds	r7, #28
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr
 800e854:	40010000 	.word	0x40010000
 800e858:	40010400 	.word	0x40010400

0800e85c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b087      	sub	sp, #28
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800e866:	2300      	movs	r3, #0
 800e868:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800e86a:	2300      	movs	r3, #0
 800e86c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 800e86e:	2300      	movs	r3, #0
 800e870:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6a1b      	ldr	r3, [r3, #32]
 800e876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a1b      	ldr	r3, [r3, #32]
 800e882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	69db      	ldr	r3, [r3, #28]
 800e88e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f023 0303 	bic.w	r3, r3, #3
 800e89e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e8b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	021b      	lsls	r3, r3, #8
 800e8b8:	697a      	ldr	r2, [r7, #20]
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	4a20      	ldr	r2, [pc, #128]	; (800e944 <TIM_OC3_SetConfig+0xe8>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d003      	beq.n	800e8ce <TIM_OC3_SetConfig+0x72>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	4a1f      	ldr	r2, [pc, #124]	; (800e948 <TIM_OC3_SetConfig+0xec>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d101      	bne.n	800e8d2 <TIM_OC3_SetConfig+0x76>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	e000      	b.n	800e8d4 <TIM_OC3_SetConfig+0x78>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d021      	beq.n	800e91c <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e8de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	021b      	lsls	r3, r3, #8
 800e8e6:	697a      	ldr	r2, [r7, #20]
 800e8e8:	4313      	orrs	r3, r2
 800e8ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e8f2:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e902:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	695b      	ldr	r3, [r3, #20]
 800e908:	011b      	lsls	r3, r3, #4
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	4313      	orrs	r3, r2
 800e90e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	699b      	ldr	r3, [r3, #24]
 800e914:	011b      	lsls	r3, r3, #4
 800e916:	693a      	ldr	r2, [r7, #16]
 800e918:	4313      	orrs	r3, r2
 800e91a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	693a      	ldr	r2, [r7, #16]
 800e920:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	68fa      	ldr	r2, [r7, #12]
 800e926:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	685a      	ldr	r2, [r3, #4]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	697a      	ldr	r2, [r7, #20]
 800e934:	621a      	str	r2, [r3, #32]
}
 800e936:	bf00      	nop
 800e938:	371c      	adds	r7, #28
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr
 800e942:	bf00      	nop
 800e944:	40010000 	.word	0x40010000
 800e948:	40010400 	.word	0x40010400

0800e94c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b087      	sub	sp, #28
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800e956:	2300      	movs	r3, #0
 800e958:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800e95a:	2300      	movs	r3, #0
 800e95c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800e95e:	2300      	movs	r3, #0
 800e960:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6a1b      	ldr	r3, [r3, #32]
 800e966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6a1b      	ldr	r3, [r3, #32]
 800e972:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	69db      	ldr	r3, [r3, #28]
 800e97e:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e986:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e98e:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	021b      	lsls	r3, r3, #8
 800e996:	693a      	ldr	r2, [r7, #16]
 800e998:	4313      	orrs	r3, r2
 800e99a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e9a2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	031b      	lsls	r3, r3, #12
 800e9aa:	68fa      	ldr	r2, [r7, #12]
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	4a14      	ldr	r2, [pc, #80]	; (800ea04 <TIM_OC4_SetConfig+0xb8>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d003      	beq.n	800e9c0 <TIM_OC4_SetConfig+0x74>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	4a13      	ldr	r2, [pc, #76]	; (800ea08 <TIM_OC4_SetConfig+0xbc>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d101      	bne.n	800e9c4 <TIM_OC4_SetConfig+0x78>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e000      	b.n	800e9c6 <TIM_OC4_SetConfig+0x7a>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d009      	beq.n	800e9de <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e9d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	695b      	ldr	r3, [r3, #20]
 800e9d6:	019b      	lsls	r3, r3, #6
 800e9d8:	697a      	ldr	r2, [r7, #20]
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	697a      	ldr	r2, [r7, #20]
 800e9e2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	693a      	ldr	r2, [r7, #16]
 800e9e8:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	685a      	ldr	r2, [r3, #4]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	621a      	str	r2, [r3, #32]
}
 800e9f8:	bf00      	nop
 800e9fa:	371c      	adds	r7, #28
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr
 800ea04:	40010000 	.word	0x40010000
 800ea08:	40010400 	.word	0x40010400

0800ea0c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig The slave configuration structure
  * @retval None
  */
static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b086      	sub	sp, #24
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800ea16:	2300      	movs	r3, #0
 800ea18:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	60fb      	str	r3, [r7, #12]

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea30:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	697a      	ldr	r2, [r7, #20]
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	f023 0307 	bic.w	r3, r3, #7
 800ea42:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	697a      	ldr	r2, [r7, #20]
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	697a      	ldr	r2, [r7, #20]
 800ea54:	609a      	str	r2, [r3, #8]
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	2b30      	cmp	r3, #48	; 0x30
 800ea5c:	d056      	beq.n	800eb0c <TIM_SlaveTimer_SetConfig+0x100>
 800ea5e:	2b30      	cmp	r3, #48	; 0x30
 800ea60:	d806      	bhi.n	800ea70 <TIM_SlaveTimer_SetConfig+0x64>
 800ea62:	2b10      	cmp	r3, #16
 800ea64:	d054      	beq.n	800eb10 <TIM_SlaveTimer_SetConfig+0x104>
 800ea66:	2b20      	cmp	r3, #32
 800ea68:	d054      	beq.n	800eb14 <TIM_SlaveTimer_SetConfig+0x108>
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d054      	beq.n	800eb18 <TIM_SlaveTimer_SetConfig+0x10c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;
       
  default:
    break;
 800ea6e:	e054      	b.n	800eb1a <TIM_SlaveTimer_SetConfig+0x10e>
  switch (sSlaveConfig->InputTrigger)
 800ea70:	2b50      	cmp	r3, #80	; 0x50
 800ea72:	d037      	beq.n	800eae4 <TIM_SlaveTimer_SetConfig+0xd8>
 800ea74:	2b50      	cmp	r3, #80	; 0x50
 800ea76:	d802      	bhi.n	800ea7e <TIM_SlaveTimer_SetConfig+0x72>
 800ea78:	2b40      	cmp	r3, #64	; 0x40
 800ea7a:	d010      	beq.n	800ea9e <TIM_SlaveTimer_SetConfig+0x92>
    break;
 800ea7c:	e04d      	b.n	800eb1a <TIM_SlaveTimer_SetConfig+0x10e>
  switch (sSlaveConfig->InputTrigger)
 800ea7e:	2b60      	cmp	r3, #96	; 0x60
 800ea80:	d03a      	beq.n	800eaf8 <TIM_SlaveTimer_SetConfig+0xec>
 800ea82:	2b70      	cmp	r3, #112	; 0x70
 800ea84:	d000      	beq.n	800ea88 <TIM_SlaveTimer_SetConfig+0x7c>
    break;
 800ea86:	e048      	b.n	800eb1a <TIM_SlaveTimer_SetConfig+0x10e>
      TIM_ETR_SetConfig(htim->Instance, 
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6818      	ldr	r0, [r3, #0]
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	68d9      	ldr	r1, [r3, #12]
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	689a      	ldr	r2, [r3, #8]
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	691b      	ldr	r3, [r3, #16]
 800ea98:	f000 f98c 	bl	800edb4 <TIM_ETR_SetConfig>
    break;
 800ea9c:	e03d      	b.n	800eb1a <TIM_SlaveTimer_SetConfig+0x10e>
      tmpccer = htim->Instance->CCER;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	6a1b      	ldr	r3, [r3, #32]
 800eaa4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	6812      	ldr	r2, [r2, #0]
 800eaae:	6a12      	ldr	r2, [r2, #32]
 800eab0:	f022 0201 	bic.w	r2, r2, #1
 800eab4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	613b      	str	r3, [r7, #16]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eac4:	613b      	str	r3, [r7, #16]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	011b      	lsls	r3, r3, #4
 800eacc:	693a      	ldr	r2, [r7, #16]
 800eace:	4313      	orrs	r3, r2
 800ead0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCMR1 = tmpccmr1;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	693a      	ldr	r2, [r7, #16]
 800ead8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	68fa      	ldr	r2, [r7, #12]
 800eae0:	621a      	str	r2, [r3, #32]
    break;
 800eae2:	e01a      	b.n	800eb1a <TIM_SlaveTimer_SetConfig+0x10e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6818      	ldr	r0, [r3, #0]
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	6899      	ldr	r1, [r3, #8]
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	691b      	ldr	r3, [r3, #16]
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	f000 f816 	bl	800eb22 <TIM_TI1_ConfigInputStage>
    break;
 800eaf6:	e010      	b.n	800eb1a <TIM_SlaveTimer_SetConfig+0x10e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6818      	ldr	r0, [r3, #0]
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	6899      	ldr	r1, [r3, #8]
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	691b      	ldr	r3, [r3, #16]
 800eb04:	461a      	mov	r2, r3
 800eb06:	f000 f880 	bl	800ec0a <TIM_TI2_ConfigInputStage>
    break;
 800eb0a:	e006      	b.n	800eb1a <TIM_SlaveTimer_SetConfig+0x10e>
    break;
 800eb0c:	bf00      	nop
 800eb0e:	e004      	b.n	800eb1a <TIM_SlaveTimer_SetConfig+0x10e>
    break;
 800eb10:	bf00      	nop
 800eb12:	e002      	b.n	800eb1a <TIM_SlaveTimer_SetConfig+0x10e>
    break;
 800eb14:	bf00      	nop
 800eb16:	e000      	b.n	800eb1a <TIM_SlaveTimer_SetConfig+0x10e>
    break;
 800eb18:	bf00      	nop
  }
}
 800eb1a:	bf00      	nop
 800eb1c:	3718      	adds	r7, #24
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eb22:	b480      	push	{r7}
 800eb24:	b087      	sub	sp, #28
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	60f8      	str	r0, [r7, #12]
 800eb2a:	60b9      	str	r1, [r7, #8]
 800eb2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800eb32:	2300      	movs	r3, #0
 800eb34:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	6a1b      	ldr	r3, [r3, #32]
 800eb3a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	6a1b      	ldr	r3, [r3, #32]
 800eb40:	f023 0201 	bic.w	r2, r3, #1
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	699b      	ldr	r3, [r3, #24]
 800eb4c:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eb54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	011b      	lsls	r3, r3, #4
 800eb5a:	697a      	ldr	r2, [r7, #20]
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	f023 030a 	bic.w	r3, r3, #10
 800eb66:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800eb68:	693a      	ldr	r2, [r7, #16]
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	697a      	ldr	r2, [r7, #20]
 800eb74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	693a      	ldr	r2, [r7, #16]
 800eb7a:	621a      	str	r2, [r3, #32]
}
 800eb7c:	bf00      	nop
 800eb7e:	371c      	adds	r7, #28
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <TIM_TI2_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b087      	sub	sp, #28
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800eb96:	2300      	movs	r3, #0
 800eb98:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6a1b      	ldr	r3, [r3, #32]
 800eba2:	f023 0210 	bic.w	r2, r3, #16
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	699b      	ldr	r3, [r3, #24]
 800ebae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	6a1b      	ldr	r3, [r3, #32]
 800ebb4:	613b      	str	r3, [r7, #16]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ebbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	021b      	lsls	r3, r3, #8
 800ebc2:	697a      	ldr	r2, [r7, #20]
 800ebc4:	4313      	orrs	r3, r2
 800ebc6:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ebce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	031b      	lsls	r3, r3, #12
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	697a      	ldr	r2, [r7, #20]
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ebe2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	011b      	lsls	r3, r3, #4
 800ebe8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ebec:	693a      	ldr	r2, [r7, #16]
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	697a      	ldr	r2, [r7, #20]
 800ebf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	621a      	str	r2, [r3, #32]
}
 800ebfe:	bf00      	nop
 800ec00:	371c      	adds	r7, #28
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr

0800ec0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec0a:	b480      	push	{r7}
 800ec0c:	b087      	sub	sp, #28
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	60f8      	str	r0, [r7, #12]
 800ec12:	60b9      	str	r1, [r7, #8]
 800ec14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800ec16:	2300      	movs	r3, #0
 800ec18:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	f023 0210 	bic.w	r2, r3, #16
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	699b      	ldr	r3, [r3, #24]
 800ec2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6a1b      	ldr	r3, [r3, #32]
 800ec34:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ec3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	031b      	lsls	r3, r3, #12
 800ec42:	697a      	ldr	r2, [r7, #20]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ec4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	011b      	lsls	r3, r3, #4
 800ec54:	693a      	ldr	r2, [r7, #16]
 800ec56:	4313      	orrs	r3, r2
 800ec58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	697a      	ldr	r2, [r7, #20]
 800ec5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	693a      	ldr	r2, [r7, #16]
 800ec64:	621a      	str	r2, [r3, #32]
}
 800ec66:	bf00      	nop
 800ec68:	371c      	adds	r7, #28
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr

0800ec72 <TIM_TI3_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ec72:	b480      	push	{r7}
 800ec74:	b087      	sub	sp, #28
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	60f8      	str	r0, [r7, #12]
 800ec7a:	60b9      	str	r1, [r7, #8]
 800ec7c:	607a      	str	r2, [r7, #4]
 800ec7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800ec80:	2300      	movs	r3, #0
 800ec82:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800ec84:	2300      	movs	r3, #0
 800ec86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6a1b      	ldr	r3, [r3, #32]
 800ec8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	69db      	ldr	r3, [r3, #28]
 800ec98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	6a1b      	ldr	r3, [r3, #32]
 800ec9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	f023 0303 	bic.w	r3, r3, #3
 800eca6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800eca8:	697a      	ldr	r2, [r7, #20]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4313      	orrs	r3, r2
 800ecae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ecb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	011b      	lsls	r3, r3, #4
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	697a      	ldr	r2, [r7, #20]
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ecca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	021b      	lsls	r3, r3, #8
 800ecd0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ecd4:	693a      	ldr	r2, [r7, #16]
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	697a      	ldr	r2, [r7, #20]
 800ecde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	693a      	ldr	r2, [r7, #16]
 800ece4:	621a      	str	r2, [r3, #32]
}
 800ece6:	bf00      	nop
 800ece8:	371c      	adds	r7, #28
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr

0800ecf2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ecf2:	b480      	push	{r7}
 800ecf4:	b087      	sub	sp, #28
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	60f8      	str	r0, [r7, #12]
 800ecfa:	60b9      	str	r1, [r7, #8]
 800ecfc:	607a      	str	r2, [r7, #4]
 800ecfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800ed00:	2300      	movs	r3, #0
 800ed02:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800ed04:	2300      	movs	r3, #0
 800ed06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6a1b      	ldr	r3, [r3, #32]
 800ed0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	69db      	ldr	r3, [r3, #28]
 800ed18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6a1b      	ldr	r3, [r3, #32]
 800ed1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	021b      	lsls	r3, r3, #8
 800ed2c:	697a      	ldr	r2, [r7, #20]
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ed38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	031b      	lsls	r3, r3, #12
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	697a      	ldr	r2, [r7, #20]
 800ed42:	4313      	orrs	r3, r2
 800ed44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ed4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	031b      	lsls	r3, r3, #12
 800ed52:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ed56:	693a      	ldr	r2, [r7, #16]
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	697a      	ldr	r2, [r7, #20]
 800ed60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	693a      	ldr	r2, [r7, #16]
 800ed66:	621a      	str	r2, [r3, #32]
}
 800ed68:	bf00      	nop
 800ed6a:	371c      	adds	r7, #28
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b085      	sub	sp, #20
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800ed80:	2300      	movs	r3, #0
 800ed82:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed90:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800ed92:	887b      	ldrh	r3, [r7, #2]
 800ed94:	f043 0307 	orr.w	r3, r3, #7
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	609a      	str	r2, [r3, #8]
}
 800eda8:	bf00      	nop
 800edaa:	3714      	adds	r7, #20
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b087      	sub	sp, #28
 800edb8:	af00      	add	r7, sp, #0
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	60b9      	str	r1, [r7, #8]
 800edbe:	607a      	str	r2, [r7, #4]
 800edc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800edc2:	2300      	movs	r3, #0
 800edc4:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800edd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	021a      	lsls	r2, r3, #8
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	431a      	orrs	r2, r3
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	4313      	orrs	r3, r2
 800ede0:	697a      	ldr	r2, [r7, #20]
 800ede2:	4313      	orrs	r3, r2
 800ede4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	697a      	ldr	r2, [r7, #20]
 800edea:	609a      	str	r2, [r3, #8]
} 
 800edec:	bf00      	nop
 800edee:	371c      	adds	r7, #28
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <HAL_TIMEx_HallSensor_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b08a      	sub	sp, #40	; 0x28
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d101      	bne.n	800ee0c <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	e07c      	b.n	800ef06 <HAL_TIMEx_HallSensor_Init+0x10e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2202      	movs	r2, #2
 800ee10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
  HAL_TIMEx_HallSensor_MspInit(htim);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 f8aa 	bl	800ef6e <HAL_TIMEx_HallSensor_MspInit>
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	3304      	adds	r3, #4
 800ee22:	4619      	mov	r1, r3
 800ee24:	4610      	mov	r0, r2
 800ee26:	f7ff fa3f 	bl	800e2a8 <TIM_Base_SetConfig>
  
  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6818      	ldr	r0, [r3, #0]
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	6819      	ldr	r1, [r3, #0]
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	2203      	movs	r2, #3
 800ee38:	f7ff fae0 	bl	800e3fc <TIM_TI1_SetConfig>
  
  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	6812      	ldr	r2, [r2, #0]
 800ee44:	6992      	ldr	r2, [r2, #24]
 800ee46:	f022 020c 	bic.w	r2, r2, #12
 800ee4a:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	6812      	ldr	r2, [r2, #0]
 800ee54:	6991      	ldr	r1, [r2, #24]
 800ee56:	683a      	ldr	r2, [r7, #0]
 800ee58:	6852      	ldr	r2, [r2, #4]
 800ee5a:	430a      	orrs	r2, r1
 800ee5c:	619a      	str	r2, [r3, #24]
  
  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	6812      	ldr	r2, [r2, #0]
 800ee66:	6852      	ldr	r2, [r2, #4]
 800ee68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ee6c:	605a      	str	r2, [r3, #4]
  
  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	6812      	ldr	r2, [r2, #0]
 800ee76:	6892      	ldr	r2, [r2, #8]
 800ee78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ee7c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	6812      	ldr	r2, [r2, #0]
 800ee86:	6892      	ldr	r2, [r2, #8]
 800ee88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ee8c:	609a      	str	r2, [r3, #8]
  
  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */  
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	6812      	ldr	r2, [r2, #0]
 800ee96:	6892      	ldr	r2, [r2, #8]
 800ee98:	f022 0207 	bic.w	r2, r2, #7
 800ee9c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	6812      	ldr	r2, [r2, #0]
 800eea6:	6892      	ldr	r2, [r2, #8]
 800eea8:	f042 0204 	orr.w	r2, r2, #4
 800eeac:	609a      	str	r2, [r3, #8]
  
  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800eeb6:	2370      	movs	r3, #112	; 0x70
 800eeb8:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800eeba:	2300      	movs	r3, #0
 800eebc:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800eebe:	2300      	movs	r3, #0
 800eec0:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800eec2:	2300      	movs	r3, #0
 800eec4:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay; 
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	68db      	ldr	r3, [r3, #12]
 800eeca:	613b      	str	r3, [r7, #16]
    
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f107 020c 	add.w	r2, r7, #12
 800eed4:	4611      	mov	r1, r2
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7ff fb0c 	bl	800e4f4 <TIM_OC2_SetConfig>
  
  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	6812      	ldr	r2, [r2, #0]
 800eee4:	6852      	ldr	r2, [r2, #4]
 800eee6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800eeea:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	6812      	ldr	r2, [r2, #0]
 800eef4:	6852      	ldr	r2, [r2, #4]
 800eef6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800eefa:	605a      	str	r2, [r3, #4]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2201      	movs	r2, #1
 800ef00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3728      	adds	r7, #40	; 0x28
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <HAL_TIMEx_HallSensor_DeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b082      	sub	sp, #8
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2202      	movs	r2, #2
 800ef1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	6a1a      	ldr	r2, [r3, #32]
 800ef24:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef28:	4013      	ands	r3, r2
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d10f      	bne.n	800ef4e <HAL_TIMEx_HallSensor_DeInit+0x40>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	6a1a      	ldr	r2, [r3, #32]
 800ef34:	f240 4344 	movw	r3, #1092	; 0x444
 800ef38:	4013      	ands	r3, r2
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d107      	bne.n	800ef4e <HAL_TIMEx_HallSensor_DeInit+0x40>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	6812      	ldr	r2, [r2, #0]
 800ef46:	6812      	ldr	r2, [r2, #0]
 800ef48:	f022 0201 	bic.w	r2, r2, #1
 800ef4c:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 f817 	bl	800ef82 <HAL_TIMEx_HallSensor_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2200      	movs	r2, #0
 800ef58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ef64:	2300      	movs	r3, #0
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3708      	adds	r7, #8
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <HAL_TIMEx_HallSensor_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800ef6e:	b480      	push	{r7}
 800ef70:	b083      	sub	sp, #12
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800ef76:	bf00      	nop
 800ef78:	370c      	adds	r7, #12
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr

0800ef82 <HAL_TIMEx_HallSensor_MspDeInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
{
 800ef82:	b480      	push	{r7}
 800ef84:	b083      	sub	sp, #12
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */
}
 800ef8a:	bf00      	nop
 800ef8c:	370c      	adds	r7, #12
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr

0800ef96 <HAL_TIMEx_HallSensor_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b082      	sub	sp, #8
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	2201      	movs	r2, #1
 800efa4:	2100      	movs	r1, #0
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7ff fb9e 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	687a      	ldr	r2, [r7, #4]
 800efb2:	6812      	ldr	r2, [r2, #0]
 800efb4:	6812      	ldr	r2, [r2, #0]
 800efb6:	f042 0201 	orr.w	r2, r2, #1
 800efba:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3708      	adds	r7, #8
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <HAL_TIMEx_HallSensor_Stop>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b082      	sub	sp, #8
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1, 2 and 3
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2200      	movs	r2, #0
 800efd4:	2100      	movs	r1, #0
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7ff fb86 	bl	800e6e8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	6a1a      	ldr	r2, [r3, #32]
 800efe2:	f241 1311 	movw	r3, #4369	; 0x1111
 800efe6:	4013      	ands	r3, r2
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d10f      	bne.n	800f00c <HAL_TIMEx_HallSensor_Stop+0x46>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	6a1a      	ldr	r2, [r3, #32]
 800eff2:	f240 4344 	movw	r3, #1092	; 0x444
 800eff6:	4013      	ands	r3, r2
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d107      	bne.n	800f00c <HAL_TIMEx_HallSensor_Stop+0x46>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	6812      	ldr	r2, [r2, #0]
 800f004:	6812      	ldr	r2, [r2, #0]
 800f006:	f022 0201 	bic.w	r2, r2, #1
 800f00a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <HAL_TIMEx_HallSensor_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{ 
 800f016:	b580      	push	{r7, lr}
 800f018:	b082      	sub	sp, #8
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	6812      	ldr	r2, [r2, #0]
 800f026:	68d2      	ldr	r2, [r2, #12]
 800f028:	f042 0202 	orr.w	r2, r2, #2
 800f02c:	60da      	str	r2, [r3, #12]
  
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);  
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	2201      	movs	r2, #1
 800f034:	2100      	movs	r1, #0
 800f036:	4618      	mov	r0, r3
 800f038:	f7ff fb56 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	6812      	ldr	r2, [r2, #0]
 800f044:	6812      	ldr	r2, [r2, #0]
 800f046:	f042 0201 	orr.w	r2, r2, #1
 800f04a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f04c:	2300      	movs	r3, #0
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3708      	adds	r7, #8
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <HAL_TIMEx_HallSensor_Stop_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f056:	b580      	push	{r7, lr}
 800f058:	b082      	sub	sp, #8
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2200      	movs	r2, #0
 800f064:	2100      	movs	r1, #0
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff fb3e 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	6812      	ldr	r2, [r2, #0]
 800f074:	68d2      	ldr	r2, [r2, #12]
 800f076:	f022 0202 	bic.w	r2, r2, #2
 800f07a:	60da      	str	r2, [r3, #12]
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6a1a      	ldr	r2, [r3, #32]
 800f082:	f241 1311 	movw	r3, #4369	; 0x1111
 800f086:	4013      	ands	r3, r2
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10f      	bne.n	800f0ac <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	6a1a      	ldr	r2, [r3, #32]
 800f092:	f240 4344 	movw	r3, #1092	; 0x444
 800f096:	4013      	ands	r3, r2
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d107      	bne.n	800f0ac <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	6812      	ldr	r2, [r2, #0]
 800f0a4:	6812      	ldr	r2, [r2, #0]
 800f0a6:	f022 0201 	bic.w	r2, r2, #1
 800f0aa:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f0ac:	2300      	movs	r3, #0
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b084      	sub	sp, #16
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	60f8      	str	r0, [r7, #12]
 800f0be:	60b9      	str	r1, [r7, #8]
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
   if((htim->State == HAL_TIM_STATE_BUSY))
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f0ca:	b2db      	uxtb	r3, r3
 800f0cc:	2b02      	cmp	r3, #2
 800f0ce:	d101      	bne.n	800f0d4 <HAL_TIMEx_HallSensor_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800f0d0:	2302      	movs	r3, #2
 800f0d2:	e03b      	b.n	800f14c <HAL_TIMEx_HallSensor_Start_DMA+0x96>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d10b      	bne.n	800f0f8 <HAL_TIMEx_HallSensor_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0)) 
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d104      	bne.n	800f0f0 <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
 800f0e6:	88fb      	ldrh	r3, [r7, #6]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d001      	beq.n	800f0f0 <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	e02d      	b.n	800f14c <HAL_TIMEx_HallSensor_Start_DMA+0x96>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2202      	movs	r2, #2
 800f0f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	2100      	movs	r1, #0
 800f100:	4618      	mov	r0, r3
 800f102:	f7ff faf1 	bl	800e6e8 <TIM_CCxChannelCmd>
  
  /* Set the DMA Input Capture 1 Callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;     
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	6a1b      	ldr	r3, [r3, #32]
 800f10a:	4a12      	ldr	r2, [pc, #72]	; (800f154 <HAL_TIMEx_HallSensor_Start_DMA+0x9e>)
 800f10c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	6a1b      	ldr	r3, [r3, #32]
 800f112:	4a11      	ldr	r2, [pc, #68]	; (800f158 <HAL_TIMEx_HallSensor_Start_DMA+0xa2>)
 800f114:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Enable the DMA Stream for Capture 1*/
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	6a18      	ldr	r0, [r3, #32]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	3334      	adds	r3, #52	; 0x34
 800f120:	4619      	mov	r1, r3
 800f122:	68ba      	ldr	r2, [r7, #8]
 800f124:	88fb      	ldrh	r3, [r7, #6]
 800f126:	f7f2 ffa0 	bl	800206a <HAL_DMA_Start_IT>
  
  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	68fa      	ldr	r2, [r7, #12]
 800f130:	6812      	ldr	r2, [r2, #0]
 800f132:	68d2      	ldr	r2, [r2, #12]
 800f134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f138:	60da      	str	r2, [r3, #12]
 
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	68fa      	ldr	r2, [r7, #12]
 800f140:	6812      	ldr	r2, [r2, #0]
 800f142:	6812      	ldr	r2, [r2, #0]
 800f144:	f042 0201 	orr.w	r2, r2, #1
 800f148:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f14a:	2300      	movs	r3, #0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	0800e679 	.word	0x0800e679
 800f158:	0800e655 	.word	0x0800e655

0800f15c <HAL_TIMEx_HallSensor_Stop_DMA>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2200      	movs	r2, #0
 800f16a:	2100      	movs	r1, #0
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7ff fabb 	bl	800e6e8 <TIM_CCxChannelCmd>
 
  
  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	6812      	ldr	r2, [r2, #0]
 800f17a:	68d2      	ldr	r2, [r2, #12]
 800f17c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f180:	60da      	str	r2, [r3, #12]
 
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	6a1a      	ldr	r2, [r3, #32]
 800f188:	f241 1311 	movw	r3, #4369	; 0x1111
 800f18c:	4013      	ands	r3, r2
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d10f      	bne.n	800f1b2 <HAL_TIMEx_HallSensor_Stop_DMA+0x56>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	6a1a      	ldr	r2, [r3, #32]
 800f198:	f240 4344 	movw	r3, #1092	; 0x444
 800f19c:	4013      	ands	r3, r2
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d107      	bne.n	800f1b2 <HAL_TIMEx_HallSensor_Stop_DMA+0x56>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	6812      	ldr	r2, [r2, #0]
 800f1aa:	6812      	ldr	r2, [r2, #0]
 800f1ac:	f022 0201 	bic.w	r2, r2, #1
 800f1b0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f1b2:	2300      	movs	r3, #0
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3708      	adds	r7, #8
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
     /* Enable the Capture compare channel N */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	2204      	movs	r2, #4
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f001 f84f 	bl	8010272 <TIM_CCxNChannelCmd>
    
  /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	6812      	ldr	r2, [r2, #0]
 800f1dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f1de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f1e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	687a      	ldr	r2, [r7, #4]
 800f1ea:	6812      	ldr	r2, [r2, #0]
 800f1ec:	6812      	ldr	r2, [r2, #0]
 800f1ee:	f042 0201 	orr.w	r2, r2, #1
 800f1f2:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f1f4:	2300      	movs	r3, #0
} 
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b082      	sub	sp, #8
 800f202:	af00      	add	r7, sp, #0
 800f204:	6078      	str	r0, [r7, #4]
 800f206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
    /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2200      	movs	r2, #0
 800f20e:	6839      	ldr	r1, [r7, #0]
 800f210:	4618      	mov	r0, r3
 800f212:	f001 f82e 	bl	8010272 <TIM_CCxNChannelCmd>
    
  /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	6a1a      	ldr	r2, [r3, #32]
 800f21c:	f241 1311 	movw	r3, #4369	; 0x1111
 800f220:	4013      	ands	r3, r2
 800f222:	2b00      	cmp	r3, #0
 800f224:	d10f      	bne.n	800f246 <HAL_TIMEx_OCN_Stop+0x48>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	6a1a      	ldr	r2, [r3, #32]
 800f22c:	f240 4344 	movw	r3, #1092	; 0x444
 800f230:	4013      	ands	r3, r2
 800f232:	2b00      	cmp	r3, #0
 800f234:	d107      	bne.n	800f246 <HAL_TIMEx_OCN_Stop+0x48>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	6812      	ldr	r2, [r2, #0]
 800f23e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f244:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	6a1a      	ldr	r2, [r3, #32]
 800f24c:	f241 1311 	movw	r3, #4369	; 0x1111
 800f250:	4013      	ands	r3, r2
 800f252:	2b00      	cmp	r3, #0
 800f254:	d10f      	bne.n	800f276 <HAL_TIMEx_OCN_Stop+0x78>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	6a1a      	ldr	r2, [r3, #32]
 800f25c:	f240 4344 	movw	r3, #1092	; 0x444
 800f260:	4013      	ands	r3, r2
 800f262:	2b00      	cmp	r3, #0
 800f264:	d107      	bne.n	800f276 <HAL_TIMEx_OCN_Stop+0x78>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	6812      	ldr	r2, [r2, #0]
 800f26e:	6812      	ldr	r2, [r2, #0]
 800f270:	f022 0201 	bic.w	r2, r2, #1
 800f274:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f276:	2300      	movs	r3, #0
} 
 800f278:	4618      	mov	r0, r3
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  switch (Channel)
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	2b0c      	cmp	r3, #12
 800f28e:	d841      	bhi.n	800f314 <HAL_TIMEx_OCN_Start_IT+0x94>
 800f290:	a201      	add	r2, pc, #4	; (adr r2, 800f298 <HAL_TIMEx_OCN_Start_IT+0x18>)
 800f292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f296:	bf00      	nop
 800f298:	0800f2cd 	.word	0x0800f2cd
 800f29c:	0800f315 	.word	0x0800f315
 800f2a0:	0800f315 	.word	0x0800f315
 800f2a4:	0800f315 	.word	0x0800f315
 800f2a8:	0800f2df 	.word	0x0800f2df
 800f2ac:	0800f315 	.word	0x0800f315
 800f2b0:	0800f315 	.word	0x0800f315
 800f2b4:	0800f315 	.word	0x0800f315
 800f2b8:	0800f2f1 	.word	0x0800f2f1
 800f2bc:	0800f315 	.word	0x0800f315
 800f2c0:	0800f315 	.word	0x0800f315
 800f2c4:	0800f315 	.word	0x0800f315
 800f2c8:	0800f303 	.word	0x0800f303
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	6812      	ldr	r2, [r2, #0]
 800f2d4:	68d2      	ldr	r2, [r2, #12]
 800f2d6:	f042 0202 	orr.w	r2, r2, #2
 800f2da:	60da      	str	r2, [r3, #12]
    }
    break;
 800f2dc:	e01b      	b.n	800f316 <HAL_TIMEx_OCN_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	6812      	ldr	r2, [r2, #0]
 800f2e6:	68d2      	ldr	r2, [r2, #12]
 800f2e8:	f042 0204 	orr.w	r2, r2, #4
 800f2ec:	60da      	str	r2, [r3, #12]
    }
    break;
 800f2ee:	e012      	b.n	800f316 <HAL_TIMEx_OCN_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	687a      	ldr	r2, [r7, #4]
 800f2f6:	6812      	ldr	r2, [r2, #0]
 800f2f8:	68d2      	ldr	r2, [r2, #12]
 800f2fa:	f042 0208 	orr.w	r2, r2, #8
 800f2fe:	60da      	str	r2, [r3, #12]
    }
    break;
 800f300:	e009      	b.n	800f316 <HAL_TIMEx_OCN_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	6812      	ldr	r2, [r2, #0]
 800f30a:	68d2      	ldr	r2, [r2, #12]
 800f30c:	f042 0210 	orr.w	r2, r2, #16
 800f310:	60da      	str	r2, [r3, #12]
    }
    break;
 800f312:	e000      	b.n	800f316 <HAL_TIMEx_OCN_Start_IT+0x96>
    
    default:
    break;
 800f314:	bf00      	nop
  } 
  
  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	6812      	ldr	r2, [r2, #0]
 800f31e:	68d2      	ldr	r2, [r2, #12]
 800f320:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f324:	60da      	str	r2, [r3, #12]
  
  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2204      	movs	r2, #4
 800f32c:	6839      	ldr	r1, [r7, #0]
 800f32e:	4618      	mov	r0, r3
 800f330:	f000 ff9f 	bl	8010272 <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	687a      	ldr	r2, [r7, #4]
 800f33a:	6812      	ldr	r2, [r2, #0]
 800f33c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f33e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f342:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	6812      	ldr	r2, [r2, #0]
 800f34c:	6812      	ldr	r2, [r2, #0]
 800f34e:	f042 0201 	orr.w	r2, r2, #1
 800f352:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f354:	2300      	movs	r3, #0
} 
 800f356:	4618      	mov	r0, r3
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b082      	sub	sp, #8
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
 800f366:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  switch (Channel)
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	2b0c      	cmp	r3, #12
 800f36c:	d840      	bhi.n	800f3f0 <HAL_TIMEx_OCN_Stop_IT+0x92>
 800f36e:	a201      	add	r2, pc, #4	; (adr r2, 800f374 <HAL_TIMEx_OCN_Stop_IT+0x16>)
 800f370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f374:	0800f3a9 	.word	0x0800f3a9
 800f378:	0800f3f1 	.word	0x0800f3f1
 800f37c:	0800f3f1 	.word	0x0800f3f1
 800f380:	0800f3f1 	.word	0x0800f3f1
 800f384:	0800f3bb 	.word	0x0800f3bb
 800f388:	0800f3f1 	.word	0x0800f3f1
 800f38c:	0800f3f1 	.word	0x0800f3f1
 800f390:	0800f3f1 	.word	0x0800f3f1
 800f394:	0800f3cd 	.word	0x0800f3cd
 800f398:	0800f3f1 	.word	0x0800f3f1
 800f39c:	0800f3f1 	.word	0x0800f3f1
 800f3a0:	0800f3f1 	.word	0x0800f3f1
 800f3a4:	0800f3df 	.word	0x0800f3df
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	6812      	ldr	r2, [r2, #0]
 800f3b0:	68d2      	ldr	r2, [r2, #12]
 800f3b2:	f022 0202 	bic.w	r2, r2, #2
 800f3b6:	60da      	str	r2, [r3, #12]
    }
    break;
 800f3b8:	e01b      	b.n	800f3f2 <HAL_TIMEx_OCN_Stop_IT+0x94>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	687a      	ldr	r2, [r7, #4]
 800f3c0:	6812      	ldr	r2, [r2, #0]
 800f3c2:	68d2      	ldr	r2, [r2, #12]
 800f3c4:	f022 0204 	bic.w	r2, r2, #4
 800f3c8:	60da      	str	r2, [r3, #12]
    }
    break;
 800f3ca:	e012      	b.n	800f3f2 <HAL_TIMEx_OCN_Stop_IT+0x94>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	6812      	ldr	r2, [r2, #0]
 800f3d4:	68d2      	ldr	r2, [r2, #12]
 800f3d6:	f022 0208 	bic.w	r2, r2, #8
 800f3da:	60da      	str	r2, [r3, #12]
    }
    break;
 800f3dc:	e009      	b.n	800f3f2 <HAL_TIMEx_OCN_Stop_IT+0x94>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	6812      	ldr	r2, [r2, #0]
 800f3e6:	68d2      	ldr	r2, [r2, #12]
 800f3e8:	f022 0210 	bic.w	r2, r2, #16
 800f3ec:	60da      	str	r2, [r3, #12]
    }
    break;
 800f3ee:	e000      	b.n	800f3f2 <HAL_TIMEx_OCN_Stop_IT+0x94>
    
    default:
    break; 
 800f3f0:	bf00      	nop
  }
  
  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	6839      	ldr	r1, [r7, #0]
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f000 ff39 	bl	8010272 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  if((READ_REG(htim->Instance->CCER) & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	6a1a      	ldr	r2, [r3, #32]
 800f406:	f240 4344 	movw	r3, #1092	; 0x444
 800f40a:	4013      	ands	r3, r2
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d107      	bne.n	800f420 <HAL_TIMEx_OCN_Stop_IT+0xc2>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	6812      	ldr	r2, [r2, #0]
 800f418:	68d2      	ldr	r2, [r2, #12]
 800f41a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f41e:	60da      	str	r2, [r3, #12]
  }
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6a1a      	ldr	r2, [r3, #32]
 800f426:	f241 1311 	movw	r3, #4369	; 0x1111
 800f42a:	4013      	ands	r3, r2
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d10f      	bne.n	800f450 <HAL_TIMEx_OCN_Stop_IT+0xf2>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	6a1a      	ldr	r2, [r3, #32]
 800f436:	f240 4344 	movw	r3, #1092	; 0x444
 800f43a:	4013      	ands	r3, r2
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d107      	bne.n	800f450 <HAL_TIMEx_OCN_Stop_IT+0xf2>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	6812      	ldr	r2, [r2, #0]
 800f448:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f44a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f44e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	6a1a      	ldr	r2, [r3, #32]
 800f456:	f241 1311 	movw	r3, #4369	; 0x1111
 800f45a:	4013      	ands	r3, r2
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d10f      	bne.n	800f480 <HAL_TIMEx_OCN_Stop_IT+0x122>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	6a1a      	ldr	r2, [r3, #32]
 800f466:	f240 4344 	movw	r3, #1092	; 0x444
 800f46a:	4013      	ands	r3, r2
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d107      	bne.n	800f480 <HAL_TIMEx_OCN_Stop_IT+0x122>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	6812      	ldr	r2, [r2, #0]
 800f478:	6812      	ldr	r2, [r2, #0]
 800f47a:	f022 0201 	bic.w	r2, r2, #1
 800f47e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f480:	2300      	movs	r3, #0
} 
 800f482:	4618      	mov	r0, r3
 800f484:	3708      	adds	r7, #8
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}

0800f48a <HAL_TIMEx_OCN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800f48a:	b580      	push	{r7, lr}
 800f48c:	b084      	sub	sp, #16
 800f48e:	af00      	add	r7, sp, #0
 800f490:	60f8      	str	r0, [r7, #12]
 800f492:	60b9      	str	r1, [r7, #8]
 800f494:	607a      	str	r2, [r7, #4]
 800f496:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	d101      	bne.n	800f4a8 <HAL_TIMEx_OCN_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800f4a4:	2302      	movs	r3, #2
 800f4a6:	e0b8      	b.n	800f61a <HAL_TIMEx_OCN_Start_DMA+0x190>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	d10b      	bne.n	800f4cc <HAL_TIMEx_OCN_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0)) 
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d104      	bne.n	800f4c4 <HAL_TIMEx_OCN_Start_DMA+0x3a>
 800f4ba:	887b      	ldrh	r3, [r7, #2]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d001      	beq.n	800f4c4 <HAL_TIMEx_OCN_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	e0aa      	b.n	800f61a <HAL_TIMEx_OCN_Start_DMA+0x190>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2202      	movs	r2, #2
 800f4c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }    
  switch (Channel)
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	2b0c      	cmp	r3, #12
 800f4d0:	f200 808a 	bhi.w	800f5e8 <HAL_TIMEx_OCN_Start_DMA+0x15e>
 800f4d4:	a201      	add	r2, pc, #4	; (adr r2, 800f4dc <HAL_TIMEx_OCN_Start_DMA+0x52>)
 800f4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4da:	bf00      	nop
 800f4dc:	0800f511 	.word	0x0800f511
 800f4e0:	0800f5e9 	.word	0x0800f5e9
 800f4e4:	0800f5e9 	.word	0x0800f5e9
 800f4e8:	0800f5e9 	.word	0x0800f5e9
 800f4ec:	0800f547 	.word	0x0800f547
 800f4f0:	0800f5e9 	.word	0x0800f5e9
 800f4f4:	0800f5e9 	.word	0x0800f5e9
 800f4f8:	0800f5e9 	.word	0x0800f5e9
 800f4fc:	0800f57d 	.word	0x0800f57d
 800f500:	0800f5e9 	.word	0x0800f5e9
 800f504:	0800f5e9 	.word	0x0800f5e9
 800f508:	0800f5e9 	.word	0x0800f5e9
 800f50c:	0800f5b3 	.word	0x0800f5b3
  {
    case TIM_CHANNEL_1:
    {      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	6a1b      	ldr	r3, [r3, #32]
 800f514:	4a43      	ldr	r2, [pc, #268]	; (800f624 <HAL_TIMEx_OCN_Start_DMA+0x19a>)
 800f516:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6a1b      	ldr	r3, [r3, #32]
 800f51c:	4a42      	ldr	r2, [pc, #264]	; (800f628 <HAL_TIMEx_OCN_Start_DMA+0x19e>)
 800f51e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	6a18      	ldr	r0, [r3, #32]
 800f524:	6879      	ldr	r1, [r7, #4]
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	3334      	adds	r3, #52	; 0x34
 800f52c:	461a      	mov	r2, r3
 800f52e:	887b      	ldrh	r3, [r7, #2]
 800f530:	f7f2 fd9b 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	6812      	ldr	r2, [r2, #0]
 800f53c:	68d2      	ldr	r2, [r2, #12]
 800f53e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f542:	60da      	str	r2, [r3, #12]
    }
    break;
 800f544:	e051      	b.n	800f5ea <HAL_TIMEx_OCN_Start_DMA+0x160>
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f54a:	4a36      	ldr	r2, [pc, #216]	; (800f624 <HAL_TIMEx_OCN_Start_DMA+0x19a>)
 800f54c:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f552:	4a35      	ldr	r2, [pc, #212]	; (800f628 <HAL_TIMEx_OCN_Start_DMA+0x19e>)
 800f554:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f55a:	6879      	ldr	r1, [r7, #4]
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	3338      	adds	r3, #56	; 0x38
 800f562:	461a      	mov	r2, r3
 800f564:	887b      	ldrh	r3, [r7, #2]
 800f566:	f7f2 fd80 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	6812      	ldr	r2, [r2, #0]
 800f572:	68d2      	ldr	r2, [r2, #12]
 800f574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f578:	60da      	str	r2, [r3, #12]
    }
    break;
 800f57a:	e036      	b.n	800f5ea <HAL_TIMEx_OCN_Start_DMA+0x160>
    
    case TIM_CHANNEL_3:
{
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f580:	4a28      	ldr	r2, [pc, #160]	; (800f624 <HAL_TIMEx_OCN_Start_DMA+0x19a>)
 800f582:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f588:	4a27      	ldr	r2, [pc, #156]	; (800f628 <HAL_TIMEx_OCN_Start_DMA+0x19e>)
 800f58a:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f590:	6879      	ldr	r1, [r7, #4]
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	333c      	adds	r3, #60	; 0x3c
 800f598:	461a      	mov	r2, r3
 800f59a:	887b      	ldrh	r3, [r7, #2]
 800f59c:	f7f2 fd65 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	68fa      	ldr	r2, [r7, #12]
 800f5a6:	6812      	ldr	r2, [r2, #0]
 800f5a8:	68d2      	ldr	r2, [r2, #12]
 800f5aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5ae:	60da      	str	r2, [r3, #12]
    }
    break;
 800f5b0:	e01b      	b.n	800f5ea <HAL_TIMEx_OCN_Start_DMA+0x160>
    
    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b6:	4a1b      	ldr	r2, [pc, #108]	; (800f624 <HAL_TIMEx_OCN_Start_DMA+0x19a>)
 800f5b8:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5be:	4a1a      	ldr	r2, [pc, #104]	; (800f628 <HAL_TIMEx_OCN_Start_DMA+0x19e>)
 800f5c0:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f5c6:	6879      	ldr	r1, [r7, #4]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3340      	adds	r3, #64	; 0x40
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	887b      	ldrh	r3, [r7, #2]
 800f5d2:	f7f2 fd4a 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	68fa      	ldr	r2, [r7, #12]
 800f5dc:	6812      	ldr	r2, [r2, #0]
 800f5de:	68d2      	ldr	r2, [r2, #12]
 800f5e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f5e4:	60da      	str	r2, [r3, #12]
    }
    break;
 800f5e6:	e000      	b.n	800f5ea <HAL_TIMEx_OCN_Start_DMA+0x160>
    
    default:
    break;
 800f5e8:	bf00      	nop
  }

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2204      	movs	r2, #4
 800f5f0:	68b9      	ldr	r1, [r7, #8]
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f000 fe3d 	bl	8010272 <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	6812      	ldr	r2, [r2, #0]
 800f600:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f606:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	68fa      	ldr	r2, [r7, #12]
 800f60e:	6812      	ldr	r2, [r2, #0]
 800f610:	6812      	ldr	r2, [r2, #0]
 800f612:	f042 0201 	orr.w	r2, r2, #1
 800f616:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f618:	2300      	movs	r3, #0
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3710      	adds	r7, #16
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	0800e5e5 	.word	0x0800e5e5
 800f628:	0800e655 	.word	0x0800e655

0800f62c <HAL_TIMEx_OCN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  switch (Channel)
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	2b0c      	cmp	r3, #12
 800f63a:	d841      	bhi.n	800f6c0 <HAL_TIMEx_OCN_Stop_DMA+0x94>
 800f63c:	a201      	add	r2, pc, #4	; (adr r2, 800f644 <HAL_TIMEx_OCN_Stop_DMA+0x18>)
 800f63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f642:	bf00      	nop
 800f644:	0800f679 	.word	0x0800f679
 800f648:	0800f6c1 	.word	0x0800f6c1
 800f64c:	0800f6c1 	.word	0x0800f6c1
 800f650:	0800f6c1 	.word	0x0800f6c1
 800f654:	0800f68b 	.word	0x0800f68b
 800f658:	0800f6c1 	.word	0x0800f6c1
 800f65c:	0800f6c1 	.word	0x0800f6c1
 800f660:	0800f6c1 	.word	0x0800f6c1
 800f664:	0800f69d 	.word	0x0800f69d
 800f668:	0800f6c1 	.word	0x0800f6c1
 800f66c:	0800f6c1 	.word	0x0800f6c1
 800f670:	0800f6c1 	.word	0x0800f6c1
 800f674:	0800f6af 	.word	0x0800f6af
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	6812      	ldr	r2, [r2, #0]
 800f680:	68d2      	ldr	r2, [r2, #12]
 800f682:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f686:	60da      	str	r2, [r3, #12]
    }
    break;
 800f688:	e01b      	b.n	800f6c2 <HAL_TIMEx_OCN_Stop_DMA+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	6812      	ldr	r2, [r2, #0]
 800f692:	68d2      	ldr	r2, [r2, #12]
 800f694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f698:	60da      	str	r2, [r3, #12]
    }
    break;
 800f69a:	e012      	b.n	800f6c2 <HAL_TIMEx_OCN_Stop_DMA+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	6812      	ldr	r2, [r2, #0]
 800f6a4:	68d2      	ldr	r2, [r2, #12]
 800f6a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f6aa:	60da      	str	r2, [r3, #12]
    }
    break;
 800f6ac:	e009      	b.n	800f6c2 <HAL_TIMEx_OCN_Stop_DMA+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	6812      	ldr	r2, [r2, #0]
 800f6b6:	68d2      	ldr	r2, [r2, #12]
 800f6b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f6bc:	60da      	str	r2, [r3, #12]
    }
    break;
 800f6be:	e000      	b.n	800f6c2 <HAL_TIMEx_OCN_Stop_DMA+0x96>
    
    default:
    break;
 800f6c0:	bf00      	nop
  } 
  
  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	6839      	ldr	r1, [r7, #0]
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f000 fdd1 	bl	8010272 <TIM_CCxNChannelCmd>
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	6a1a      	ldr	r2, [r3, #32]
 800f6d6:	f241 1311 	movw	r3, #4369	; 0x1111
 800f6da:	4013      	ands	r3, r2
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d10f      	bne.n	800f700 <HAL_TIMEx_OCN_Stop_DMA+0xd4>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	6a1a      	ldr	r2, [r3, #32]
 800f6e6:	f240 4344 	movw	r3, #1092	; 0x444
 800f6ea:	4013      	ands	r3, r2
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d107      	bne.n	800f700 <HAL_TIMEx_OCN_Stop_DMA+0xd4>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	6812      	ldr	r2, [r2, #0]
 800f6f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f6fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f6fe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	6a1a      	ldr	r2, [r3, #32]
 800f706:	f241 1311 	movw	r3, #4369	; 0x1111
 800f70a:	4013      	ands	r3, r2
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d10f      	bne.n	800f730 <HAL_TIMEx_OCN_Stop_DMA+0x104>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	6a1a      	ldr	r2, [r3, #32]
 800f716:	f240 4344 	movw	r3, #1092	; 0x444
 800f71a:	4013      	ands	r3, r2
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d107      	bne.n	800f730 <HAL_TIMEx_OCN_Stop_DMA+0x104>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	6812      	ldr	r2, [r2, #0]
 800f728:	6812      	ldr	r2, [r2, #0]
 800f72a:	f022 0201 	bic.w	r2, r2, #1
 800f72e:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2201      	movs	r2, #1
 800f734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800f738:	2300      	movs	r3, #0
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3708      	adds	r7, #8
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}

0800f742 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f742:	b580      	push	{r7, lr}
 800f744:	b082      	sub	sp, #8
 800f746:	af00      	add	r7, sp, #0
 800f748:	6078      	str	r0, [r7, #4]
 800f74a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	2204      	movs	r2, #4
 800f752:	6839      	ldr	r1, [r7, #0]
 800f754:	4618      	mov	r0, r3
 800f756:	f000 fd8c 	bl	8010272 <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	6812      	ldr	r2, [r2, #0]
 800f762:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f764:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f768:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	6812      	ldr	r2, [r2, #0]
 800f772:	6812      	ldr	r2, [r2, #0]
 800f774:	f042 0201 	orr.w	r2, r2, #1
 800f778:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f77a:	2300      	movs	r3, #0
} 
 800f77c:	4618      	mov	r0, r3
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);  
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	2200      	movs	r2, #0
 800f794:	6839      	ldr	r1, [r7, #0]
 800f796:	4618      	mov	r0, r3
 800f798:	f000 fd6b 	bl	8010272 <TIM_CCxNChannelCmd>
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	6a1a      	ldr	r2, [r3, #32]
 800f7a2:	f241 1311 	movw	r3, #4369	; 0x1111
 800f7a6:	4013      	ands	r3, r2
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d10f      	bne.n	800f7cc <HAL_TIMEx_PWMN_Stop+0x48>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	6a1a      	ldr	r2, [r3, #32]
 800f7b2:	f240 4344 	movw	r3, #1092	; 0x444
 800f7b6:	4013      	ands	r3, r2
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d107      	bne.n	800f7cc <HAL_TIMEx_PWMN_Stop+0x48>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	6812      	ldr	r2, [r2, #0]
 800f7c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f7c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f7ca:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	6a1a      	ldr	r2, [r3, #32]
 800f7d2:	f241 1311 	movw	r3, #4369	; 0x1111
 800f7d6:	4013      	ands	r3, r2
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d10f      	bne.n	800f7fc <HAL_TIMEx_PWMN_Stop+0x78>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	6a1a      	ldr	r2, [r3, #32]
 800f7e2:	f240 4344 	movw	r3, #1092	; 0x444
 800f7e6:	4013      	ands	r3, r2
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d107      	bne.n	800f7fc <HAL_TIMEx_PWMN_Stop+0x78>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	6812      	ldr	r2, [r2, #0]
 800f7f4:	6812      	ldr	r2, [r2, #0]
 800f7f6:	f022 0201 	bic.w	r2, r2, #1
 800f7fa:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f7fc:	2300      	movs	r3, #0
} 
 800f7fe:	4618      	mov	r0, r3
 800f800:	3708      	adds	r7, #8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}

0800f806 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f806:	b580      	push	{r7, lr}
 800f808:	b082      	sub	sp, #8
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
 800f80e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  switch (Channel)
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	2b0c      	cmp	r3, #12
 800f814:	d840      	bhi.n	800f898 <HAL_TIMEx_PWMN_Start_IT+0x92>
 800f816:	a201      	add	r2, pc, #4	; (adr r2, 800f81c <HAL_TIMEx_PWMN_Start_IT+0x16>)
 800f818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f81c:	0800f851 	.word	0x0800f851
 800f820:	0800f899 	.word	0x0800f899
 800f824:	0800f899 	.word	0x0800f899
 800f828:	0800f899 	.word	0x0800f899
 800f82c:	0800f863 	.word	0x0800f863
 800f830:	0800f899 	.word	0x0800f899
 800f834:	0800f899 	.word	0x0800f899
 800f838:	0800f899 	.word	0x0800f899
 800f83c:	0800f875 	.word	0x0800f875
 800f840:	0800f899 	.word	0x0800f899
 800f844:	0800f899 	.word	0x0800f899
 800f848:	0800f899 	.word	0x0800f899
 800f84c:	0800f887 	.word	0x0800f887
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	6812      	ldr	r2, [r2, #0]
 800f858:	68d2      	ldr	r2, [r2, #12]
 800f85a:	f042 0202 	orr.w	r2, r2, #2
 800f85e:	60da      	str	r2, [r3, #12]
    }
    break;
 800f860:	e01b      	b.n	800f89a <HAL_TIMEx_PWMN_Start_IT+0x94>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	687a      	ldr	r2, [r7, #4]
 800f868:	6812      	ldr	r2, [r2, #0]
 800f86a:	68d2      	ldr	r2, [r2, #12]
 800f86c:	f042 0204 	orr.w	r2, r2, #4
 800f870:	60da      	str	r2, [r3, #12]
    }
    break;
 800f872:	e012      	b.n	800f89a <HAL_TIMEx_PWMN_Start_IT+0x94>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	6812      	ldr	r2, [r2, #0]
 800f87c:	68d2      	ldr	r2, [r2, #12]
 800f87e:	f042 0208 	orr.w	r2, r2, #8
 800f882:	60da      	str	r2, [r3, #12]
    }
    break;
 800f884:	e009      	b.n	800f89a <HAL_TIMEx_PWMN_Start_IT+0x94>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	6812      	ldr	r2, [r2, #0]
 800f88e:	68d2      	ldr	r2, [r2, #12]
 800f890:	f042 0210 	orr.w	r2, r2, #16
 800f894:	60da      	str	r2, [r3, #12]
    }
    break;
 800f896:	e000      	b.n	800f89a <HAL_TIMEx_PWMN_Start_IT+0x94>
    
    default:
    break;
 800f898:	bf00      	nop
  } 
  
  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	6812      	ldr	r2, [r2, #0]
 800f8a2:	68d2      	ldr	r2, [r2, #12]
 800f8a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f8a8:	60da      	str	r2, [r3, #12]
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2204      	movs	r2, #4
 800f8b0:	6839      	ldr	r1, [r7, #0]
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f000 fcdd 	bl	8010272 <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	687a      	ldr	r2, [r7, #4]
 800f8be:	6812      	ldr	r2, [r2, #0]
 800f8c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f8c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f8c6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	6812      	ldr	r2, [r2, #0]
 800f8d0:	6812      	ldr	r2, [r2, #0]
 800f8d2:	f042 0201 	orr.w	r2, r2, #1
 800f8d6:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800f8d8:	2300      	movs	r3, #0
} 
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3708      	adds	r7, #8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}

0800f8e2 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b082      	sub	sp, #8
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
 800f8ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 

  switch (Channel)
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	2b0c      	cmp	r3, #12
 800f8f0:	d840      	bhi.n	800f974 <HAL_TIMEx_PWMN_Stop_IT+0x92>
 800f8f2:	a201      	add	r2, pc, #4	; (adr r2, 800f8f8 <HAL_TIMEx_PWMN_Stop_IT+0x16>)
 800f8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f8:	0800f92d 	.word	0x0800f92d
 800f8fc:	0800f975 	.word	0x0800f975
 800f900:	0800f975 	.word	0x0800f975
 800f904:	0800f975 	.word	0x0800f975
 800f908:	0800f93f 	.word	0x0800f93f
 800f90c:	0800f975 	.word	0x0800f975
 800f910:	0800f975 	.word	0x0800f975
 800f914:	0800f975 	.word	0x0800f975
 800f918:	0800f951 	.word	0x0800f951
 800f91c:	0800f975 	.word	0x0800f975
 800f920:	0800f975 	.word	0x0800f975
 800f924:	0800f975 	.word	0x0800f975
 800f928:	0800f963 	.word	0x0800f963
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	6812      	ldr	r2, [r2, #0]
 800f934:	68d2      	ldr	r2, [r2, #12]
 800f936:	f022 0202 	bic.w	r2, r2, #2
 800f93a:	60da      	str	r2, [r3, #12]
    }
    break;
 800f93c:	e01b      	b.n	800f976 <HAL_TIMEx_PWMN_Stop_IT+0x94>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	687a      	ldr	r2, [r7, #4]
 800f944:	6812      	ldr	r2, [r2, #0]
 800f946:	68d2      	ldr	r2, [r2, #12]
 800f948:	f022 0204 	bic.w	r2, r2, #4
 800f94c:	60da      	str	r2, [r3, #12]
    }
    break;
 800f94e:	e012      	b.n	800f976 <HAL_TIMEx_PWMN_Stop_IT+0x94>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	687a      	ldr	r2, [r7, #4]
 800f956:	6812      	ldr	r2, [r2, #0]
 800f958:	68d2      	ldr	r2, [r2, #12]
 800f95a:	f022 0208 	bic.w	r2, r2, #8
 800f95e:	60da      	str	r2, [r3, #12]
    }
    break;
 800f960:	e009      	b.n	800f976 <HAL_TIMEx_PWMN_Stop_IT+0x94>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	6812      	ldr	r2, [r2, #0]
 800f96a:	68d2      	ldr	r2, [r2, #12]
 800f96c:	f022 0210 	bic.w	r2, r2, #16
 800f970:	60da      	str	r2, [r3, #12]
    }
    break;
 800f972:	e000      	b.n	800f976 <HAL_TIMEx_PWMN_Stop_IT+0x94>
    
    default:
    break; 
 800f974:	bf00      	nop
  }
  
  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2200      	movs	r2, #0
 800f97c:	6839      	ldr	r1, [r7, #0]
 800f97e:	4618      	mov	r0, r3
 800f980:	f000 fc77 	bl	8010272 <TIM_CCxNChannelCmd>
  
  /* Disable the TIM Break interrupt (only if no more channel is active) */
  if((READ_REG(htim->Instance->CCER) & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	6a1a      	ldr	r2, [r3, #32]
 800f98a:	f240 4344 	movw	r3, #1092	; 0x444
 800f98e:	4013      	ands	r3, r2
 800f990:	2b00      	cmp	r3, #0
 800f992:	d107      	bne.n	800f9a4 <HAL_TIMEx_PWMN_Stop_IT+0xc2>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	6812      	ldr	r2, [r2, #0]
 800f99c:	68d2      	ldr	r2, [r2, #12]
 800f99e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f9a2:	60da      	str	r2, [r3, #12]
  }
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	6a1a      	ldr	r2, [r3, #32]
 800f9aa:	f241 1311 	movw	r3, #4369	; 0x1111
 800f9ae:	4013      	ands	r3, r2
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d10f      	bne.n	800f9d4 <HAL_TIMEx_PWMN_Stop_IT+0xf2>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	6a1a      	ldr	r2, [r3, #32]
 800f9ba:	f240 4344 	movw	r3, #1092	; 0x444
 800f9be:	4013      	ands	r3, r2
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d107      	bne.n	800f9d4 <HAL_TIMEx_PWMN_Stop_IT+0xf2>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	6812      	ldr	r2, [r2, #0]
 800f9cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f9ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f9d2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	6a1a      	ldr	r2, [r3, #32]
 800f9da:	f241 1311 	movw	r3, #4369	; 0x1111
 800f9de:	4013      	ands	r3, r2
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d10f      	bne.n	800fa04 <HAL_TIMEx_PWMN_Stop_IT+0x122>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	6a1a      	ldr	r2, [r3, #32]
 800f9ea:	f240 4344 	movw	r3, #1092	; 0x444
 800f9ee:	4013      	ands	r3, r2
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d107      	bne.n	800fa04 <HAL_TIMEx_PWMN_Stop_IT+0x122>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	687a      	ldr	r2, [r7, #4]
 800f9fa:	6812      	ldr	r2, [r2, #0]
 800f9fc:	6812      	ldr	r2, [r2, #0]
 800f9fe:	f022 0201 	bic.w	r2, r2, #1
 800fa02:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800fa04:	2300      	movs	r3, #0
} 
 800fa06:	4618      	mov	r0, r3
 800fa08:	3708      	adds	r7, #8
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}

0800fa0e <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800fa0e:	b580      	push	{r7, lr}
 800fa10:	b084      	sub	sp, #16
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	60f8      	str	r0, [r7, #12]
 800fa16:	60b9      	str	r1, [r7, #8]
 800fa18:	607a      	str	r2, [r7, #4]
 800fa1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	2b02      	cmp	r3, #2
 800fa26:	d101      	bne.n	800fa2c <HAL_TIMEx_PWMN_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800fa28:	2302      	movs	r3, #2
 800fa2a:	e0b8      	b.n	800fb9e <HAL_TIMEx_PWMN_Start_DMA+0x190>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d10b      	bne.n	800fa50 <HAL_TIMEx_PWMN_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0)) 
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d104      	bne.n	800fa48 <HAL_TIMEx_PWMN_Start_DMA+0x3a>
 800fa3e:	887b      	ldrh	r3, [r7, #2]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d001      	beq.n	800fa48 <HAL_TIMEx_PWMN_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 800fa44:	2301      	movs	r3, #1
 800fa46:	e0aa      	b.n	800fb9e <HAL_TIMEx_PWMN_Start_DMA+0x190>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2202      	movs	r2, #2
 800fa4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }    
  switch (Channel)
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	2b0c      	cmp	r3, #12
 800fa54:	f200 808a 	bhi.w	800fb6c <HAL_TIMEx_PWMN_Start_DMA+0x15e>
 800fa58:	a201      	add	r2, pc, #4	; (adr r2, 800fa60 <HAL_TIMEx_PWMN_Start_DMA+0x52>)
 800fa5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa5e:	bf00      	nop
 800fa60:	0800fa95 	.word	0x0800fa95
 800fa64:	0800fb6d 	.word	0x0800fb6d
 800fa68:	0800fb6d 	.word	0x0800fb6d
 800fa6c:	0800fb6d 	.word	0x0800fb6d
 800fa70:	0800facb 	.word	0x0800facb
 800fa74:	0800fb6d 	.word	0x0800fb6d
 800fa78:	0800fb6d 	.word	0x0800fb6d
 800fa7c:	0800fb6d 	.word	0x0800fb6d
 800fa80:	0800fb01 	.word	0x0800fb01
 800fa84:	0800fb6d 	.word	0x0800fb6d
 800fa88:	0800fb6d 	.word	0x0800fb6d
 800fa8c:	0800fb6d 	.word	0x0800fb6d
 800fa90:	0800fb37 	.word	0x0800fb37
  {
    case TIM_CHANNEL_1:
    {      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6a1b      	ldr	r3, [r3, #32]
 800fa98:	4a43      	ldr	r2, [pc, #268]	; (800fba8 <HAL_TIMEx_PWMN_Start_DMA+0x19a>)
 800fa9a:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6a1b      	ldr	r3, [r3, #32]
 800faa0:	4a42      	ldr	r2, [pc, #264]	; (800fbac <HAL_TIMEx_PWMN_Start_DMA+0x19e>)
 800faa2:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	6a18      	ldr	r0, [r3, #32]
 800faa8:	6879      	ldr	r1, [r7, #4]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	3334      	adds	r3, #52	; 0x34
 800fab0:	461a      	mov	r2, r3
 800fab2:	887b      	ldrh	r3, [r7, #2]
 800fab4:	f7f2 fad9 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	6812      	ldr	r2, [r2, #0]
 800fac0:	68d2      	ldr	r2, [r2, #12]
 800fac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fac6:	60da      	str	r2, [r3, #12]
    }
    break;
 800fac8:	e051      	b.n	800fb6e <HAL_TIMEx_PWMN_Start_DMA+0x160>
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800face:	4a36      	ldr	r2, [pc, #216]	; (800fba8 <HAL_TIMEx_PWMN_Start_DMA+0x19a>)
 800fad0:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad6:	4a35      	ldr	r2, [pc, #212]	; (800fbac <HAL_TIMEx_PWMN_Start_DMA+0x19e>)
 800fad8:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fade:	6879      	ldr	r1, [r7, #4]
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	3338      	adds	r3, #56	; 0x38
 800fae6:	461a      	mov	r2, r3
 800fae8:	887b      	ldrh	r3, [r7, #2]
 800faea:	f7f2 fabe 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	6812      	ldr	r2, [r2, #0]
 800faf6:	68d2      	ldr	r2, [r2, #12]
 800faf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fafc:	60da      	str	r2, [r3, #12]
    }
    break;
 800fafe:	e036      	b.n	800fb6e <HAL_TIMEx_PWMN_Start_DMA+0x160>
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb04:	4a28      	ldr	r2, [pc, #160]	; (800fba8 <HAL_TIMEx_PWMN_Start_DMA+0x19a>)
 800fb06:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb0c:	4a27      	ldr	r2, [pc, #156]	; (800fbac <HAL_TIMEx_PWMN_Start_DMA+0x19e>)
 800fb0e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fb14:	6879      	ldr	r1, [r7, #4]
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	333c      	adds	r3, #60	; 0x3c
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	887b      	ldrh	r3, [r7, #2]
 800fb20:	f7f2 faa3 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	68fa      	ldr	r2, [r7, #12]
 800fb2a:	6812      	ldr	r2, [r2, #0]
 800fb2c:	68d2      	ldr	r2, [r2, #12]
 800fb2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb32:	60da      	str	r2, [r3, #12]
    }
    break;
 800fb34:	e01b      	b.n	800fb6e <HAL_TIMEx_PWMN_Start_DMA+0x160>
    
    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb3a:	4a1b      	ldr	r2, [pc, #108]	; (800fba8 <HAL_TIMEx_PWMN_Start_DMA+0x19a>)
 800fb3c:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb42:	4a1a      	ldr	r2, [pc, #104]	; (800fbac <HAL_TIMEx_PWMN_Start_DMA+0x19e>)
 800fb44:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fb4a:	6879      	ldr	r1, [r7, #4]
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	3340      	adds	r3, #64	; 0x40
 800fb52:	461a      	mov	r2, r3
 800fb54:	887b      	ldrh	r3, [r7, #2]
 800fb56:	f7f2 fa88 	bl	800206a <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	68fa      	ldr	r2, [r7, #12]
 800fb60:	6812      	ldr	r2, [r2, #0]
 800fb62:	68d2      	ldr	r2, [r2, #12]
 800fb64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fb68:	60da      	str	r2, [r3, #12]
    }
    break;
 800fb6a:	e000      	b.n	800fb6e <HAL_TIMEx_PWMN_Start_DMA+0x160>
    
    default:
    break;
 800fb6c:	bf00      	nop
  }

  /* Enable the complementary PWM output  */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2204      	movs	r2, #4
 800fb74:	68b9      	ldr	r1, [r7, #8]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f000 fb7b 	bl	8010272 <TIM_CCxNChannelCmd>
    
  /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	68fa      	ldr	r2, [r7, #12]
 800fb82:	6812      	ldr	r2, [r2, #0]
 800fb84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800fb86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fb8a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	68fa      	ldr	r2, [r7, #12]
 800fb92:	6812      	ldr	r2, [r2, #0]
 800fb94:	6812      	ldr	r2, [r2, #0]
 800fb96:	f042 0201 	orr.w	r2, r2, #1
 800fb9a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800fb9c:	2300      	movs	r3, #0
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	0800e5e5 	.word	0x0800e5e5
 800fbac:	0800e655 	.word	0x0800e655

0800fbb0 <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  switch (Channel)
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	2b0c      	cmp	r3, #12
 800fbbe:	d841      	bhi.n	800fc44 <HAL_TIMEx_PWMN_Stop_DMA+0x94>
 800fbc0:	a201      	add	r2, pc, #4	; (adr r2, 800fbc8 <HAL_TIMEx_PWMN_Stop_DMA+0x18>)
 800fbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc6:	bf00      	nop
 800fbc8:	0800fbfd 	.word	0x0800fbfd
 800fbcc:	0800fc45 	.word	0x0800fc45
 800fbd0:	0800fc45 	.word	0x0800fc45
 800fbd4:	0800fc45 	.word	0x0800fc45
 800fbd8:	0800fc0f 	.word	0x0800fc0f
 800fbdc:	0800fc45 	.word	0x0800fc45
 800fbe0:	0800fc45 	.word	0x0800fc45
 800fbe4:	0800fc45 	.word	0x0800fc45
 800fbe8:	0800fc21 	.word	0x0800fc21
 800fbec:	0800fc45 	.word	0x0800fc45
 800fbf0:	0800fc45 	.word	0x0800fc45
 800fbf4:	0800fc45 	.word	0x0800fc45
 800fbf8:	0800fc33 	.word	0x0800fc33
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	6812      	ldr	r2, [r2, #0]
 800fc04:	68d2      	ldr	r2, [r2, #12]
 800fc06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800fc0a:	60da      	str	r2, [r3, #12]
    }
    break;
 800fc0c:	e01b      	b.n	800fc46 <HAL_TIMEx_PWMN_Stop_DMA+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	6812      	ldr	r2, [r2, #0]
 800fc16:	68d2      	ldr	r2, [r2, #12]
 800fc18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc1c:	60da      	str	r2, [r3, #12]
    }
    break;
 800fc1e:	e012      	b.n	800fc46 <HAL_TIMEx_PWMN_Stop_DMA+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	6812      	ldr	r2, [r2, #0]
 800fc28:	68d2      	ldr	r2, [r2, #12]
 800fc2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fc2e:	60da      	str	r2, [r3, #12]
    }
    break;
 800fc30:	e009      	b.n	800fc46 <HAL_TIMEx_PWMN_Stop_DMA+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	6812      	ldr	r2, [r2, #0]
 800fc3a:	68d2      	ldr	r2, [r2, #12]
 800fc3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fc40:	60da      	str	r2, [r3, #12]
    }
    break;
 800fc42:	e000      	b.n	800fc46 <HAL_TIMEx_PWMN_Stop_DMA+0x96>
    
    default:
    break;
 800fc44:	bf00      	nop
  } 
  
  /* Disable the complementary PWM output */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	6839      	ldr	r1, [r7, #0]
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f000 fb0f 	bl	8010272 <TIM_CCxNChannelCmd>
     
  /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	6a1a      	ldr	r2, [r3, #32]
 800fc5a:	f241 1311 	movw	r3, #4369	; 0x1111
 800fc5e:	4013      	ands	r3, r2
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d10f      	bne.n	800fc84 <HAL_TIMEx_PWMN_Stop_DMA+0xd4>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	6a1a      	ldr	r2, [r3, #32]
 800fc6a:	f240 4344 	movw	r3, #1092	; 0x444
 800fc6e:	4013      	ands	r3, r2
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d107      	bne.n	800fc84 <HAL_TIMEx_PWMN_Stop_DMA+0xd4>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	6812      	ldr	r2, [r2, #0]
 800fc7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800fc7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fc82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	6a1a      	ldr	r2, [r3, #32]
 800fc8a:	f241 1311 	movw	r3, #4369	; 0x1111
 800fc8e:	4013      	ands	r3, r2
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d10f      	bne.n	800fcb4 <HAL_TIMEx_PWMN_Stop_DMA+0x104>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	6a1a      	ldr	r2, [r3, #32]
 800fc9a:	f240 4344 	movw	r3, #1092	; 0x444
 800fc9e:	4013      	ands	r3, r2
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d107      	bne.n	800fcb4 <HAL_TIMEx_PWMN_Stop_DMA+0x104>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	6812      	ldr	r2, [r2, #0]
 800fcac:	6812      	ldr	r2, [r2, #0]
 800fcae:	f022 0201 	bic.w	r2, r2, #1
 800fcb2:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800fcbc:	2300      	movs	r3, #0
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}

0800fcc6 <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
  {
 800fcc6:	b580      	push	{r7, lr}
 800fcc8:	b082      	sub	sp, #8
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
 800fcce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
  
  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	2204      	movs	r2, #4
 800fcd6:	6839      	ldr	r1, [r7, #0]
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f000 faca 	bl	8010272 <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	687a      	ldr	r2, [r7, #4]
 800fce4:	6812      	ldr	r2, [r2, #0]
 800fce6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800fce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fcec:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800fcee:	2300      	movs	r3, #0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 

  /* Disable the complementary One Pulse output */
    TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2200      	movs	r2, #0
 800fd08:	6839      	ldr	r1, [r7, #0]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f000 fab1 	bl	8010272 <TIM_CCxNChannelCmd>
  
  /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	6a1a      	ldr	r2, [r3, #32]
 800fd16:	f241 1311 	movw	r3, #4369	; 0x1111
 800fd1a:	4013      	ands	r3, r2
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d10f      	bne.n	800fd40 <HAL_TIMEx_OnePulseN_Stop+0x48>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	6a1a      	ldr	r2, [r3, #32]
 800fd26:	f240 4344 	movw	r3, #1092	; 0x444
 800fd2a:	4013      	ands	r3, r2
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d107      	bne.n	800fd40 <HAL_TIMEx_OnePulseN_Stop+0x48>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	6812      	ldr	r2, [r2, #0]
 800fd38:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800fd3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fd3e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	6a1a      	ldr	r2, [r3, #32]
 800fd46:	f241 1311 	movw	r3, #4369	; 0x1111
 800fd4a:	4013      	ands	r3, r2
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d10f      	bne.n	800fd70 <HAL_TIMEx_OnePulseN_Stop+0x78>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	6a1a      	ldr	r2, [r3, #32]
 800fd56:	f240 4344 	movw	r3, #1092	; 0x444
 800fd5a:	4013      	ands	r3, r2
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d107      	bne.n	800fd70 <HAL_TIMEx_OnePulseN_Stop+0x78>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	6812      	ldr	r2, [r2, #0]
 800fd68:	6812      	ldr	r2, [r2, #0]
 800fd6a:	f022 0201 	bic.w	r2, r2, #1
 800fd6e:	601a      	str	r2, [r3, #0]
   
  /* Return function status */
  return HAL_OK;
 800fd70:	2300      	movs	r3, #0
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3708      	adds	r7, #8
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <HAL_TIMEx_OnePulseN_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b082      	sub	sp, #8
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
 800fd82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	6812      	ldr	r2, [r2, #0]
 800fd8c:	68d2      	ldr	r2, [r2, #12]
 800fd8e:	f042 0202 	orr.w	r2, r2, #2
 800fd92:	60da      	str	r2, [r3, #12]
  
  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	6812      	ldr	r2, [r2, #0]
 800fd9c:	68d2      	ldr	r2, [r2, #12]
 800fd9e:	f042 0204 	orr.w	r2, r2, #4
 800fda2:	60da      	str	r2, [r3, #12]
  
  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2204      	movs	r2, #4
 800fdaa:	6839      	ldr	r1, [r7, #0]
 800fdac:	4618      	mov	r0, r3
 800fdae:	f000 fa60 	bl	8010272 <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	6812      	ldr	r2, [r2, #0]
 800fdba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800fdbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fdc0:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800fdc2:	2300      	movs	r3, #0
  } 
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3708      	adds	r7, #8
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}

0800fdcc <HAL_TIMEx_OnePulseN_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	6812      	ldr	r2, [r2, #0]
 800fdde:	68d2      	ldr	r2, [r2, #12]
 800fde0:	f022 0202 	bic.w	r2, r2, #2
 800fde4:	60da      	str	r2, [r3, #12]
  
  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	6812      	ldr	r2, [r2, #0]
 800fdee:	68d2      	ldr	r2, [r2, #12]
 800fdf0:	f022 0204 	bic.w	r2, r2, #4
 800fdf4:	60da      	str	r2, [r3, #12]
  
  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	6839      	ldr	r1, [r7, #0]
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f000 fa37 	bl	8010272 <TIM_CCxNChannelCmd>
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	6a1a      	ldr	r2, [r3, #32]
 800fe0a:	f241 1311 	movw	r3, #4369	; 0x1111
 800fe0e:	4013      	ands	r3, r2
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d10f      	bne.n	800fe34 <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	6a1a      	ldr	r2, [r3, #32]
 800fe1a:	f240 4344 	movw	r3, #1092	; 0x444
 800fe1e:	4013      	ands	r3, r2
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d107      	bne.n	800fe34 <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	6812      	ldr	r2, [r2, #0]
 800fe2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800fe2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fe32:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
   __HAL_TIM_DISABLE(htim);  
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	6a1a      	ldr	r2, [r3, #32]
 800fe3a:	f241 1311 	movw	r3, #4369	; 0x1111
 800fe3e:	4013      	ands	r3, r2
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d10f      	bne.n	800fe64 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	6a1a      	ldr	r2, [r3, #32]
 800fe4a:	f240 4344 	movw	r3, #1092	; 0x444
 800fe4e:	4013      	ands	r3, r2
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d107      	bne.n	800fe64 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	6812      	ldr	r2, [r2, #0]
 800fe5c:	6812      	ldr	r2, [r2, #0]
 800fe5e:	f022 0201 	bic.w	r2, r2, #1
 800fe62:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800fe64:	2300      	movs	r3, #0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}

0800fe6e <HAL_TIMEx_ConfigCommutationEvent>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800fe6e:	b480      	push	{r7}
 800fe70:	b085      	sub	sp, #20
 800fe72:	af00      	add	r7, sp, #0
 800fe74:	60f8      	str	r0, [r7, #12]
 800fe76:	60b9      	str	r1, [r7, #8]
 800fe78:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d101      	bne.n	800fe88 <HAL_TIMEx_ConfigCommutationEvent+0x1a>
 800fe84:	2302      	movs	r3, #2
 800fe86:	e03c      	b.n	800ff02 <HAL_TIMEx_ConfigCommutationEvent+0x94>
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d008      	beq.n	800fea8 <HAL_TIMEx_ConfigCommutationEvent+0x3a>
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	2b10      	cmp	r3, #16
 800fe9a:	d005      	beq.n	800fea8 <HAL_TIMEx_ConfigCommutationEvent+0x3a>
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	2b20      	cmp	r3, #32
 800fea0:	d002      	beq.n	800fea8 <HAL_TIMEx_ConfigCommutationEvent+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	2b30      	cmp	r3, #48	; 0x30
 800fea6:	d10f      	bne.n	800fec8 <HAL_TIMEx_ConfigCommutationEvent+0x5a>
  {    
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	68fa      	ldr	r2, [r7, #12]
 800feae:	6812      	ldr	r2, [r2, #0]
 800feb0:	6892      	ldr	r2, [r2, #8]
 800feb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800feb6:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	68fa      	ldr	r2, [r7, #12]
 800febe:	6812      	ldr	r2, [r2, #0]
 800fec0:	6891      	ldr	r1, [r2, #8]
 800fec2:	68ba      	ldr	r2, [r7, #8]
 800fec4:	430a      	orrs	r2, r1
 800fec6:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	68fa      	ldr	r2, [r7, #12]
 800fece:	6812      	ldr	r2, [r2, #0]
 800fed0:	6852      	ldr	r2, [r2, #4]
 800fed2:	f042 0201 	orr.w	r2, r2, #1
 800fed6:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	6812      	ldr	r2, [r2, #0]
 800fee0:	6852      	ldr	r2, [r2, #4]
 800fee2:	f022 0204 	bic.w	r2, r2, #4
 800fee6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	6812      	ldr	r2, [r2, #0]
 800fef0:	6851      	ldr	r1, [r2, #4]
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	430a      	orrs	r2, r1
 800fef6:	605a      	str	r2, [r3, #4]
    
  __HAL_UNLOCK(htim);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2200      	movs	r2, #0
 800fefc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800ff00:	2300      	movs	r3, #0
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3714      	adds	r7, #20
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr

0800ff0e <HAL_TIMEx_ConfigCommutationEvent_IT>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800ff0e:	b480      	push	{r7}
 800ff10:	b085      	sub	sp, #20
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	60f8      	str	r0, [r7, #12]
 800ff16:	60b9      	str	r1, [r7, #8]
 800ff18:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d101      	bne.n	800ff28 <HAL_TIMEx_ConfigCommutationEvent_IT+0x1a>
 800ff24:	2302      	movs	r3, #2
 800ff26:	e044      	b.n	800ffb2 <HAL_TIMEx_ConfigCommutationEvent_IT+0xa4>
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d008      	beq.n	800ff48 <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	2b10      	cmp	r3, #16
 800ff3a:	d005      	beq.n	800ff48 <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	2b20      	cmp	r3, #32
 800ff40:	d002      	beq.n	800ff48 <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	2b30      	cmp	r3, #48	; 0x30
 800ff46:	d10f      	bne.n	800ff68 <HAL_TIMEx_ConfigCommutationEvent_IT+0x5a>
  {    
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	68fa      	ldr	r2, [r7, #12]
 800ff4e:	6812      	ldr	r2, [r2, #0]
 800ff50:	6892      	ldr	r2, [r2, #8]
 800ff52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ff56:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	6812      	ldr	r2, [r2, #0]
 800ff60:	6891      	ldr	r1, [r2, #8]
 800ff62:	68ba      	ldr	r2, [r7, #8]
 800ff64:	430a      	orrs	r2, r1
 800ff66:	609a      	str	r2, [r3, #8]
  }
  
  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	68fa      	ldr	r2, [r7, #12]
 800ff6e:	6812      	ldr	r2, [r2, #0]
 800ff70:	6852      	ldr	r2, [r2, #4]
 800ff72:	f042 0201 	orr.w	r2, r2, #1
 800ff76:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	6812      	ldr	r2, [r2, #0]
 800ff80:	6852      	ldr	r2, [r2, #4]
 800ff82:	f022 0204 	bic.w	r2, r2, #4
 800ff86:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	68fa      	ldr	r2, [r7, #12]
 800ff8e:	6812      	ldr	r2, [r2, #0]
 800ff90:	6851      	ldr	r1, [r2, #4]
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	430a      	orrs	r2, r1
 800ff96:	605a      	str	r2, [r3, #4]
    
  /* Enable the Commutation Interrupt Request */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	68fa      	ldr	r2, [r7, #12]
 800ff9e:	6812      	ldr	r2, [r2, #0]
 800ffa0:	68d2      	ldr	r2, [r2, #12]
 800ffa2:	f042 0220 	orr.w	r2, r2, #32
 800ffa6:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800ffb0:	2300      	movs	r3, #0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3714      	adds	r7, #20
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr

0800ffbe <HAL_TIMEx_ConfigCommutationEvent_DMA>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800ffbe:	b480      	push	{r7}
 800ffc0:	b085      	sub	sp, #20
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	60f8      	str	r0, [r7, #12]
 800ffc6:	60b9      	str	r1, [r7, #8]
 800ffc8:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d101      	bne.n	800ffd8 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x1a>
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	e04c      	b.n	8010072 <HAL_TIMEx_ConfigCommutationEvent_DMA+0xb4>
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2201      	movs	r2, #1
 800ffdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d008      	beq.n	800fff8 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	2b10      	cmp	r3, #16
 800ffea:	d005      	beq.n	800fff8 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	2b20      	cmp	r3, #32
 800fff0:	d002      	beq.n	800fff8 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	2b30      	cmp	r3, #48	; 0x30
 800fff6:	d10f      	bne.n	8010018 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x5a>
  {    
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	68fa      	ldr	r2, [r7, #12]
 800fffe:	6812      	ldr	r2, [r2, #0]
 8010000:	6892      	ldr	r2, [r2, #8]
 8010002:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8010006:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	68fa      	ldr	r2, [r7, #12]
 801000e:	6812      	ldr	r2, [r2, #0]
 8010010:	6891      	ldr	r1, [r2, #8]
 8010012:	68ba      	ldr	r2, [r7, #8]
 8010014:	430a      	orrs	r2, r1
 8010016:	609a      	str	r2, [r3, #8]
  }
  
  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	68fa      	ldr	r2, [r7, #12]
 801001e:	6812      	ldr	r2, [r2, #0]
 8010020:	6852      	ldr	r2, [r2, #4]
 8010022:	f042 0201 	orr.w	r2, r2, #1
 8010026:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	68fa      	ldr	r2, [r7, #12]
 801002e:	6812      	ldr	r2, [r2, #0]
 8010030:	6852      	ldr	r2, [r2, #4]
 8010032:	f022 0204 	bic.w	r2, r2, #4
 8010036:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	6812      	ldr	r2, [r2, #0]
 8010040:	6851      	ldr	r1, [r2, #4]
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	430a      	orrs	r2, r1
 8010046:	605a      	str	r2, [r3, #4]
  
  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;     
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801004c:	4a0c      	ldr	r2, [pc, #48]	; (8010080 <HAL_TIMEx_ConfigCommutationEvent_DMA+0xc2>)
 801004e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010054:	4a0b      	ldr	r2, [pc, #44]	; (8010084 <HAL_TIMEx_ConfigCommutationEvent_DMA+0xc6>)
 8010056:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	68fa      	ldr	r2, [r7, #12]
 801005e:	6812      	ldr	r2, [r2, #0]
 8010060:	68d2      	ldr	r2, [r2, #12]
 8010062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010066:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2200      	movs	r2, #0
 801006c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8010070:	2300      	movs	r3, #0
}
 8010072:	4618      	mov	r0, r3
 8010074:	3714      	adds	r7, #20
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop
 8010080:	0801024f 	.word	0x0801024f
 8010084:	0800e655 	.word	0x0800e655

08010088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010098:	2b01      	cmp	r3, #1
 801009a:	d101      	bne.n	80100a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801009c:	2302      	movs	r3, #2
 801009e:	e032      	b.n	8010106 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2201      	movs	r2, #1
 80100a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2202      	movs	r2, #2
 80100ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	6812      	ldr	r2, [r2, #0]
 80100b8:	6852      	ldr	r2, [r2, #4]
 80100ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80100be:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	687a      	ldr	r2, [r7, #4]
 80100c6:	6812      	ldr	r2, [r2, #0]
 80100c8:	6851      	ldr	r1, [r2, #4]
 80100ca:	683a      	ldr	r2, [r7, #0]
 80100cc:	6812      	ldr	r2, [r2, #0]
 80100ce:	430a      	orrs	r2, r1
 80100d0:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	6812      	ldr	r2, [r2, #0]
 80100da:	6892      	ldr	r2, [r2, #8]
 80100dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80100e0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	6812      	ldr	r2, [r2, #0]
 80100ea:	6891      	ldr	r1, [r2, #8]
 80100ec:	683a      	ldr	r2, [r7, #0]
 80100ee:	6852      	ldr	r2, [r2, #4]
 80100f0:	430a      	orrs	r2, r1
 80100f2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2201      	movs	r2, #1
 80100f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8010104:	2300      	movs	r3, #0
} 
 8010106:	4618      	mov	r0, r3
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr

08010112 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8010112:	b480      	push	{r7}
 8010114:	b085      	sub	sp, #20
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
 801011a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 801011c:	2300      	movs	r3, #0
 801011e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010126:	2b01      	cmp	r3, #1
 8010128:	d101      	bne.n	801012e <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801012a:	2302      	movs	r3, #2
 801012c:	e044      	b.n	80101b8 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2201      	movs	r2, #1
 8010132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	4313      	orrs	r3, r2
 8010142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	689b      	ldr	r3, [r3, #8]
 801014e:	4313      	orrs	r3, r2
 8010150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	4313      	orrs	r3, r2
 801015e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4313      	orrs	r3, r2
 801016c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	691b      	ldr	r3, [r3, #16]
 8010178:	4313      	orrs	r3, r2
 801017a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	695b      	ldr	r3, [r3, #20]
 8010186:	4313      	orrs	r3, r2
 8010188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	699b      	ldr	r3, [r3, #24]
 8010194:	4313      	orrs	r3, r2
 8010196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	699b      	ldr	r3, [r3, #24]
 80101a2:	4313      	orrs	r3, r2
 80101a4:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	68fa      	ldr	r2, [r7, #12]
 80101ac:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2200      	movs	r2, #0
 80101b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80101b6:	2300      	movs	r3, #0
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3714      	adds	r7, #20
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr

080101c4 <HAL_TIMEx_RemapConfig>:
  *            @arg TIM_TIM1_TIM3_TRGO: TIM1 ITR2 input is connected to TIM3 Trigger output(default)
  *            @arg TIM_TIM1_LPTIM:     TIM1 ITR2 input is connected to LPTIM.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b083      	sub	sp, #12
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	d101      	bne.n	80101dc <HAL_TIMEx_RemapConfig+0x18>
 80101d8:	2302      	movs	r3, #2
 80101da:	e010      	b.n	80101fe <HAL_TIMEx_RemapConfig+0x3a>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2201      	movs	r2, #1
 80101e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Set the Timer remapping configuration */
    htim->Instance->OR = Remap;
  }
#else
  /* Set the Timer remapping configuration */
  htim->Instance->OR = Remap;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	683a      	ldr	r2, [r7, #0]
 80101ea:	651a      	str	r2, [r3, #80]	; 0x50
#endif
  htim->State = HAL_TIM_STATE_READY;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2201      	movs	r2, #1
 80101f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);  
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	370c      	adds	r7, #12
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr

0801020a <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 801020a:	b480      	push	{r7}
 801020c:	b083      	sub	sp, #12
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8010212:	bf00      	nop
 8010214:	370c      	adds	r7, #12
 8010216:	46bd      	mov	sp, r7
 8010218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021c:	4770      	bx	lr

0801021e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801021e:	b480      	push	{r7}
 8010220:	b083      	sub	sp, #12
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010226:	bf00      	nop
 8010228:	370c      	adds	r7, #12
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr

08010232 <HAL_TIMEx_HallSensor_GetState>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
{
 8010232:	b480      	push	{r7}
 8010234:	b083      	sub	sp, #12
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
  return htim->State;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010240:	b2db      	uxtb	r3, r3
}
 8010242:	4618      	mov	r0, r3
 8010244:	370c      	adds	r7, #12
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <TIMEx_DMACommutationCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b084      	sub	sp, #16
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801025a:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2201      	movs	r2, #1
 8010260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_TIMEx_CommutationCallback(htim); 
 8010264:	68f8      	ldr	r0, [r7, #12]
 8010266:	f7ff ffd0 	bl	801020a <HAL_TIMEx_CommutationCallback>
}
 801026a:	bf00      	nop
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}

08010272 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable. 
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8010272:	b480      	push	{r7}
 8010274:	b087      	sub	sp, #28
 8010276:	af00      	add	r7, sp, #0
 8010278:	60f8      	str	r0, [r7, #12]
 801027a:	60b9      	str	r1, [r7, #8]
 801027c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801027e:	2300      	movs	r3, #0
 8010280:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 8010282:	2204      	movs	r2, #4
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	fa02 f303 	lsl.w	r3, r2, r3
 801028a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	6a1a      	ldr	r2, [r3, #32]
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	43db      	mvns	r3, r3
 8010294:	401a      	ands	r2, r3
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	6a1a      	ldr	r2, [r3, #32]
 801029e:	6879      	ldr	r1, [r7, #4]
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	fa01 f303 	lsl.w	r3, r1, r3
 80102a6:	431a      	orrs	r2, r3
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	621a      	str	r2, [r3, #32]
}
 80102ac:	bf00      	nop
 80102ae:	371c      	adds	r7, #28
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d101      	bne.n	80102ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80102c6:	2301      	movs	r3, #1
 80102c8:	e03f      	b.n	801034a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d106      	bne.n	80102e4 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2200      	movs	r2, #0
 80102da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f004 f8e0 	bl	80144a4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2224      	movs	r2, #36	; 0x24
 80102e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	6812      	ldr	r2, [r2, #0]
 80102f4:	68d2      	ldr	r2, [r2, #12]
 80102f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80102fa:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f001 fc90 	bl	8011c22 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	6812      	ldr	r2, [r2, #0]
 801030a:	6912      	ldr	r2, [r2, #16]
 801030c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	6812      	ldr	r2, [r2, #0]
 801031a:	6952      	ldr	r2, [r2, #20]
 801031c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010320:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	6812      	ldr	r2, [r2, #0]
 801032a:	68d2      	ldr	r2, [r2, #12]
 801032c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010330:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2200      	movs	r2, #0
 8010336:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2220      	movs	r2, #32
 801033c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2220      	movs	r2, #32
 8010344:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8010348:	2300      	movs	r3, #0
}
 801034a:	4618      	mov	r0, r3
 801034c:	3708      	adds	r7, #8
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <HAL_HalfDuplex_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8010352:	b580      	push	{r7, lr}
 8010354:	b082      	sub	sp, #8
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d101      	bne.n	8010364 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8010360:	2301      	movs	r3, #1
 8010362:	e047      	b.n	80103f4 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */ 
  assert_param(IS_UART_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801036a:	b2db      	uxtb	r3, r3
 801036c:	2b00      	cmp	r3, #0
 801036e:	d106      	bne.n	801037e <HAL_HalfDuplex_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2200      	movs	r2, #0
 8010374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f004 f893 	bl	80144a4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2224      	movs	r2, #36	; 0x24
 8010382:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	6812      	ldr	r2, [r2, #0]
 801038e:	68d2      	ldr	r2, [r2, #12]
 8010390:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010394:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f001 fc43 	bl	8011c22 <UART_SetConfig>
  
  /* In half-duplex mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	6812      	ldr	r2, [r2, #0]
 80103a4:	6912      	ldr	r2, [r2, #16]
 80103a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80103aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	687a      	ldr	r2, [r7, #4]
 80103b2:	6812      	ldr	r2, [r2, #0]
 80103b4:	6952      	ldr	r2, [r2, #20]
 80103b6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80103ba:	615a      	str	r2, [r3, #20]
  
  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	6812      	ldr	r2, [r2, #0]
 80103c4:	6952      	ldr	r2, [r2, #20]
 80103c6:	f042 0208 	orr.w	r2, r2, #8
 80103ca:	615a      	str	r2, [r3, #20]
 
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	6812      	ldr	r2, [r2, #0]
 80103d4:	68d2      	ldr	r2, [r2, #12]
 80103d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80103da:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2200      	movs	r2, #0
 80103e0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2220      	movs	r2, #32
 80103e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2220      	movs	r2, #32
 80103ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80103f2:	2300      	movs	r3, #0
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d101      	bne.n	8010410 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 801040c:	2301      	movs	r3, #1
 801040e:	e057      	b.n	80104c0 <HAL_LIN_Init+0xc4>
  assert_param(IS_UART_INSTANCE(huart->Instance));
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010416:	b2db      	uxtb	r3, r3
 8010418:	2b00      	cmp	r3, #0
 801041a:	d106      	bne.n	801042a <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2200      	movs	r2, #0
 8010420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f004 f83d 	bl	80144a4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2224      	movs	r2, #36	; 0x24
 801042e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	687a      	ldr	r2, [r7, #4]
 8010438:	6812      	ldr	r2, [r2, #0]
 801043a:	68d2      	ldr	r2, [r2, #12]
 801043c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010440:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f001 fbed 	bl	8011c22 <UART_SetConfig>
  
  /* In LIN mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	6812      	ldr	r2, [r2, #0]
 8010450:	6912      	ldr	r2, [r2, #16]
 8010452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010456:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	687a      	ldr	r2, [r7, #4]
 801045e:	6812      	ldr	r2, [r2, #0]
 8010460:	6952      	ldr	r2, [r2, #20]
 8010462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010466:	615a      	str	r2, [r3, #20]
  
  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	6812      	ldr	r2, [r2, #0]
 8010470:	6912      	ldr	r2, [r2, #16]
 8010472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010476:	611a      	str	r2, [r3, #16]
  
  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	687a      	ldr	r2, [r7, #4]
 801047e:	6812      	ldr	r2, [r2, #0]
 8010480:	6912      	ldr	r2, [r2, #16]
 8010482:	f022 0220 	bic.w	r2, r2, #32
 8010486:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	687a      	ldr	r2, [r7, #4]
 801048e:	6812      	ldr	r2, [r2, #0]
 8010490:	6911      	ldr	r1, [r2, #16]
 8010492:	683a      	ldr	r2, [r7, #0]
 8010494:	430a      	orrs	r2, r1
 8010496:	611a      	str	r2, [r3, #16]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	687a      	ldr	r2, [r7, #4]
 801049e:	6812      	ldr	r2, [r2, #0]
 80104a0:	68d2      	ldr	r2, [r2, #12]
 80104a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80104a6:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2220      	movs	r2, #32
 80104b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2220      	movs	r2, #32
 80104ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80104be:	2300      	movs	r3, #0
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3708      	adds	r7, #8
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	460b      	mov	r3, r1
 80104d2:	607a      	str	r2, [r7, #4]
 80104d4:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d101      	bne.n	80104e0 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80104dc:	2301      	movs	r3, #1
 80104de:	e05f      	b.n	80105a0 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d106      	bne.n	80104fa <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2200      	movs	r2, #0
 80104f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f003 ffd5 	bl	80144a4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2224      	movs	r2, #36	; 0x24
 80104fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	68fa      	ldr	r2, [r7, #12]
 8010508:	6812      	ldr	r2, [r2, #0]
 801050a:	68d2      	ldr	r2, [r2, #12]
 801050c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010510:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010512:	68f8      	ldr	r0, [r7, #12]
 8010514:	f001 fb85 	bl	8011c22 <UART_SetConfig>
  
  /* In Multi-Processor mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	68fa      	ldr	r2, [r7, #12]
 801051e:	6812      	ldr	r2, [r2, #0]
 8010520:	6912      	ldr	r2, [r2, #16]
 8010522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010526:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	68fa      	ldr	r2, [r7, #12]
 801052e:	6812      	ldr	r2, [r2, #0]
 8010530:	6952      	ldr	r2, [r2, #20]
 8010532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010536:	615a      	str	r2, [r3, #20]
  
  /* Clear the USART address */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	6812      	ldr	r2, [r2, #0]
 8010540:	6912      	ldr	r2, [r2, #16]
 8010542:	f022 020f 	bic.w	r2, r2, #15
 8010546:	611a      	str	r2, [r3, #16]
  /* Set the USART address node */
  SET_BIT(huart->Instance->CR2, Address);
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	6812      	ldr	r2, [r2, #0]
 8010550:	6911      	ldr	r1, [r2, #16]
 8010552:	7afa      	ldrb	r2, [r7, #11]
 8010554:	430a      	orrs	r2, r1
 8010556:	611a      	str	r2, [r3, #16]
  
  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	6812      	ldr	r2, [r2, #0]
 8010560:	68d2      	ldr	r2, [r2, #12]
 8010562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010566:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	6812      	ldr	r2, [r2, #0]
 8010570:	68d1      	ldr	r1, [r2, #12]
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	430a      	orrs	r2, r1
 8010576:	60da      	str	r2, [r3, #12]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	68fa      	ldr	r2, [r7, #12]
 801057e:	6812      	ldr	r2, [r2, #0]
 8010580:	68d2      	ldr	r2, [r2, #12]
 8010582:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010586:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2200      	movs	r2, #0
 801058c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2220      	movs	r2, #32
 8010592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2220      	movs	r2, #32
 801059a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 801059e:	2300      	movs	r3, #0
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3710      	adds	r7, #16
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <HAL_UART_DeInit>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d101      	bne.n	80105ba <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80105b6:	2301      	movs	r3, #1
 80105b8:	e016      	b.n	80105e8 <HAL_UART_DeInit+0x40>
  }
  
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2224      	movs	r2, #36	; 0x24
 80105be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f004 f888 	bl	80146d8 <HAL_UART_MspDeInit>
  
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2200      	movs	r2, #0
 80105cc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2200      	movs	r2, #0
 80105d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2200      	movs	r2, #0
 80105da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Lock */
  __HAL_UNLOCK(huart);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2200      	movs	r2, #0
 80105e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80105e6:	2300      	movs	r3, #0
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3708      	adds	r7, #8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
   /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */ 
}
 80105f8:	bf00      	nop
 80105fa:	370c      	adds	r7, #12
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8010604:	b480      	push	{r7}
 8010606:	b083      	sub	sp, #12
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */ 
}
 801060c:	bf00      	nop
 801060e:	370c      	adds	r7, #12
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr

08010618 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b088      	sub	sp, #32
 801061c:	af02      	add	r7, sp, #8
 801061e:	60f8      	str	r0, [r7, #12]
 8010620:	60b9      	str	r1, [r7, #8]
 8010622:	603b      	str	r3, [r7, #0]
 8010624:	4613      	mov	r3, r2
 8010626:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8010628:	2300      	movs	r3, #0
 801062a:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010632:	b2db      	uxtb	r3, r3
 8010634:	2b20      	cmp	r3, #32
 8010636:	f040 8082 	bne.w	801073e <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d002      	beq.n	8010646 <HAL_UART_Transmit+0x2e>
 8010640:	88fb      	ldrh	r3, [r7, #6]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d101      	bne.n	801064a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010646:	2301      	movs	r3, #1
 8010648:	e07a      	b.n	8010740 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010650:	2b01      	cmp	r3, #1
 8010652:	d101      	bne.n	8010658 <HAL_UART_Transmit+0x40>
 8010654:	2302      	movs	r3, #2
 8010656:	e073      	b.n	8010740 <HAL_UART_Transmit+0x128>
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	2201      	movs	r2, #1
 801065c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2200      	movs	r2, #0
 8010664:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2221      	movs	r2, #33	; 0x21
 801066a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801066e:	f7ef fe5f 	bl	8000330 <HAL_GetTick>
 8010672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	88fa      	ldrh	r2, [r7, #6]
 8010678:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	88fa      	ldrh	r2, [r7, #6]
 801067e:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8010680:	e041      	b.n	8010706 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010686:	b29b      	uxth	r3, r3
 8010688:	3b01      	subs	r3, #1
 801068a:	b29a      	uxth	r2, r3
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	689b      	ldr	r3, [r3, #8]
 8010694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010698:	d121      	bne.n	80106de <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	2200      	movs	r2, #0
 80106a2:	2180      	movs	r1, #128	; 0x80
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f001 f8c0 	bl	801182a <UART_WaitOnFlagUntilTimeout>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d001      	beq.n	80106b4 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80106b0:	2303      	movs	r3, #3
 80106b2:	e045      	b.n	8010740 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	693a      	ldr	r2, [r7, #16]
 80106be:	8812      	ldrh	r2, [r2, #0]
 80106c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80106c4:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	691b      	ldr	r3, [r3, #16]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d103      	bne.n	80106d6 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	3302      	adds	r3, #2
 80106d2:	60bb      	str	r3, [r7, #8]
 80106d4:	e017      	b.n	8010706 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	3301      	adds	r3, #1
 80106da:	60bb      	str	r3, [r7, #8]
 80106dc:	e013      	b.n	8010706 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	9300      	str	r3, [sp, #0]
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	2200      	movs	r2, #0
 80106e6:	2180      	movs	r1, #128	; 0x80
 80106e8:	68f8      	ldr	r0, [r7, #12]
 80106ea:	f001 f89e 	bl	801182a <UART_WaitOnFlagUntilTimeout>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d001      	beq.n	80106f8 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80106f4:	2303      	movs	r3, #3
 80106f6:	e023      	b.n	8010740 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	681a      	ldr	r2, [r3, #0]
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	1c59      	adds	r1, r3, #1
 8010700:	60b9      	str	r1, [r7, #8]
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801070a:	b29b      	uxth	r3, r3
 801070c:	2b00      	cmp	r3, #0
 801070e:	d1b8      	bne.n	8010682 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	2200      	movs	r2, #0
 8010718:	2140      	movs	r1, #64	; 0x40
 801071a:	68f8      	ldr	r0, [r7, #12]
 801071c:	f001 f885 	bl	801182a <UART_WaitOnFlagUntilTimeout>
 8010720:	4603      	mov	r3, r0
 8010722:	2b00      	cmp	r3, #0
 8010724:	d001      	beq.n	801072a <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8010726:	2303      	movs	r3, #3
 8010728:	e00a      	b.n	8010740 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2220      	movs	r2, #32
 801072e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2200      	movs	r2, #0
 8010736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 801073a:	2300      	movs	r3, #0
 801073c:	e000      	b.n	8010740 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 801073e:	2302      	movs	r3, #2
  }
}
 8010740:	4618      	mov	r0, r3
 8010742:	3718      	adds	r7, #24
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}

08010748 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{ 
 8010748:	b580      	push	{r7, lr}
 801074a:	b088      	sub	sp, #32
 801074c:	af02      	add	r7, sp, #8
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	603b      	str	r3, [r7, #0]
 8010754:	4613      	mov	r3, r2
 8010756:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8010758:	2300      	movs	r3, #0
 801075a:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010762:	b2db      	uxtb	r3, r3
 8010764:	2b20      	cmp	r3, #32
 8010766:	f040 8090 	bne.w	801088a <HAL_UART_Receive+0x142>
  { 
    if((pData == NULL ) || (Size == 0)) 
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d002      	beq.n	8010776 <HAL_UART_Receive+0x2e>
 8010770:	88fb      	ldrh	r3, [r7, #6]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d101      	bne.n	801077a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8010776:	2301      	movs	r3, #1
 8010778:	e088      	b.n	801088c <HAL_UART_Receive+0x144>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010780:	2b01      	cmp	r3, #1
 8010782:	d101      	bne.n	8010788 <HAL_UART_Receive+0x40>
 8010784:	2302      	movs	r3, #2
 8010786:	e081      	b.n	801088c <HAL_UART_Receive+0x144>
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2201      	movs	r2, #1
 801078c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2200      	movs	r2, #0
 8010794:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2222      	movs	r2, #34	; 0x22
 801079a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801079e:	f7ef fdc7 	bl	8000330 <HAL_GetTick>
 80107a2:	6178      	str	r0, [r7, #20]
        
    huart->RxXferSize = Size; 
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	88fa      	ldrh	r2, [r7, #6]
 80107a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	88fa      	ldrh	r2, [r7, #6]
 80107ae:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 80107b0:	e05c      	b.n	801086c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	3b01      	subs	r3, #1
 80107ba:	b29a      	uxth	r2, r3
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	689b      	ldr	r3, [r3, #8]
 80107c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107c8:	d12b      	bne.n	8010822 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	2200      	movs	r2, #0
 80107d2:	2120      	movs	r1, #32
 80107d4:	68f8      	ldr	r0, [r7, #12]
 80107d6:	f001 f828 	bl	801182a <UART_WaitOnFlagUntilTimeout>
 80107da:	4603      	mov	r3, r0
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d001      	beq.n	80107e4 <HAL_UART_Receive+0x9c>
        { 
          return HAL_TIMEOUT;
 80107e0:	2303      	movs	r3, #3
 80107e2:	e053      	b.n	801088c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*) pData;
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	691b      	ldr	r3, [r3, #16]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d10c      	bne.n	801080a <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	685b      	ldr	r3, [r3, #4]
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	3302      	adds	r3, #2
 8010806:	60bb      	str	r3, [r7, #8]
 8010808:	e030      	b.n	801086c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	b29b      	uxth	r3, r3
 8010812:	b2db      	uxtb	r3, r3
 8010814:	b29a      	uxth	r2, r3
 8010816:	693b      	ldr	r3, [r7, #16]
 8010818:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	3301      	adds	r3, #1
 801081e:	60bb      	str	r3, [r7, #8]
 8010820:	e024      	b.n	801086c <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	9300      	str	r3, [sp, #0]
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	2200      	movs	r2, #0
 801082a:	2120      	movs	r1, #32
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	f000 fffc 	bl	801182a <UART_WaitOnFlagUntilTimeout>
 8010832:	4603      	mov	r3, r0
 8010834:	2b00      	cmp	r3, #0
 8010836:	d001      	beq.n	801083c <HAL_UART_Receive+0xf4>
        { 
          return HAL_TIMEOUT;
 8010838:	2303      	movs	r3, #3
 801083a:	e027      	b.n	801088c <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	691b      	ldr	r3, [r3, #16]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d108      	bne.n	8010856 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	1c5a      	adds	r2, r3, #1
 8010848:	60ba      	str	r2, [r7, #8]
 801084a:	68fa      	ldr	r2, [r7, #12]
 801084c:	6812      	ldr	r2, [r2, #0]
 801084e:	6852      	ldr	r2, [r2, #4]
 8010850:	b2d2      	uxtb	r2, r2
 8010852:	701a      	strb	r2, [r3, #0]
 8010854:	e00a      	b.n	801086c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	1c5a      	adds	r2, r3, #1
 801085a:	60ba      	str	r2, [r7, #8]
 801085c:	68fa      	ldr	r2, [r7, #12]
 801085e:	6812      	ldr	r2, [r2, #0]
 8010860:	6852      	ldr	r2, [r2, #4]
 8010862:	b2d2      	uxtb	r2, r2
 8010864:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010868:	b2d2      	uxtb	r2, r2
 801086a:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010870:	b29b      	uxth	r3, r3
 8010872:	2b00      	cmp	r3, #0
 8010874:	d19d      	bne.n	80107b2 <HAL_UART_Receive+0x6a>
        
      }
    }
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2220      	movs	r2, #32
 801087a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2200      	movs	r2, #0
 8010882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8010886:	2300      	movs	r3, #0
 8010888:	e000      	b.n	801088c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;   
 801088a:	2302      	movs	r3, #2
  }
}
 801088c:	4618      	mov	r0, r3
 801088e:	3718      	adds	r7, #24
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010894:	b480      	push	{r7}
 8010896:	b085      	sub	sp, #20
 8010898:	af00      	add	r7, sp, #0
 801089a:	60f8      	str	r0, [r7, #12]
 801089c:	60b9      	str	r1, [r7, #8]
 801089e:	4613      	mov	r3, r2
 80108a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	2b20      	cmp	r3, #32
 80108ac:	d130      	bne.n	8010910 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL ) || (Size == 0)) 
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d002      	beq.n	80108ba <HAL_UART_Transmit_IT+0x26>
 80108b4:	88fb      	ldrh	r3, [r7, #6]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d101      	bne.n	80108be <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80108ba:	2301      	movs	r3, #1
 80108bc:	e029      	b.n	8010912 <HAL_UART_Transmit_IT+0x7e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80108c4:	2b01      	cmp	r3, #1
 80108c6:	d101      	bne.n	80108cc <HAL_UART_Transmit_IT+0x38>
 80108c8:	2302      	movs	r3, #2
 80108ca:	e022      	b.n	8010912 <HAL_UART_Transmit_IT+0x7e>
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2201      	movs	r2, #1
 80108d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	68ba      	ldr	r2, [r7, #8]
 80108d8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	88fa      	ldrh	r2, [r7, #6]
 80108de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	88fa      	ldrh	r2, [r7, #6]
 80108e4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2200      	movs	r2, #0
 80108ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2221      	movs	r2, #33	; 0x21
 80108f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2200      	movs	r2, #0
 80108f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68fa      	ldr	r2, [r7, #12]
 8010902:	6812      	ldr	r2, [r2, #0]
 8010904:	68d2      	ldr	r2, [r2, #12]
 8010906:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801090a:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 801090c:	2300      	movs	r3, #0
 801090e:	e000      	b.n	8010912 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;   
 8010910:	2302      	movs	r3, #2
  }
}
 8010912:	4618      	mov	r0, r3
 8010914:	3714      	adds	r7, #20
 8010916:	46bd      	mov	sp, r7
 8010918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091c:	4770      	bx	lr

0801091e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801091e:	b480      	push	{r7}
 8010920:	b085      	sub	sp, #20
 8010922:	af00      	add	r7, sp, #0
 8010924:	60f8      	str	r0, [r7, #12]
 8010926:	60b9      	str	r1, [r7, #8]
 8010928:	4613      	mov	r3, r2
 801092a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010932:	b2db      	uxtb	r3, r3
 8010934:	2b20      	cmp	r3, #32
 8010936:	d138      	bne.n	80109aa <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d002      	beq.n	8010944 <HAL_UART_Receive_IT+0x26>
 801093e:	88fb      	ldrh	r3, [r7, #6]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d101      	bne.n	8010948 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010944:	2301      	movs	r3, #1
 8010946:	e031      	b.n	80109ac <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801094e:	2b01      	cmp	r3, #1
 8010950:	d101      	bne.n	8010956 <HAL_UART_Receive_IT+0x38>
 8010952:	2302      	movs	r3, #2
 8010954:	e02a      	b.n	80109ac <HAL_UART_Receive_IT+0x8e>
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2201      	movs	r2, #1
 801095a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	68ba      	ldr	r2, [r7, #8]
 8010962:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	88fa      	ldrh	r2, [r7, #6]
 8010968:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	88fa      	ldrh	r2, [r7, #6]
 801096e:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2200      	movs	r2, #0
 8010974:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	2222      	movs	r2, #34	; 0x22
 801097a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2200      	movs	r2, #0
 8010982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	68fa      	ldr	r2, [r7, #12]
 801098c:	6812      	ldr	r2, [r2, #0]
 801098e:	6952      	ldr	r2, [r2, #20]
 8010990:	f042 0201 	orr.w	r2, r2, #1
 8010994:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	68fa      	ldr	r2, [r7, #12]
 801099c:	6812      	ldr	r2, [r2, #0]
 801099e:	68d2      	ldr	r2, [r2, #12]
 80109a0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80109a4:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 80109a6:	2300      	movs	r3, #0
 80109a8:	e000      	b.n	80109ac <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 80109aa:	2302      	movs	r3, #2
  }
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3714      	adds	r7, #20
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr

080109b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b086      	sub	sp, #24
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	4613      	mov	r3, r2
 80109c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80109cc:	b2db      	uxtb	r3, r3
 80109ce:	2b20      	cmp	r3, #32
 80109d0:	d153      	bne.n	8010a7a <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d002      	beq.n	80109de <HAL_UART_Transmit_DMA+0x26>
 80109d8:	88fb      	ldrh	r3, [r7, #6]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d101      	bne.n	80109e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80109de:	2301      	movs	r3, #1
 80109e0:	e04c      	b.n	8010a7c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d101      	bne.n	80109f0 <HAL_UART_Transmit_DMA+0x38>
 80109ec:	2302      	movs	r3, #2
 80109ee:	e045      	b.n	8010a7c <HAL_UART_Transmit_DMA+0xc4>
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2201      	movs	r2, #1
 80109f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80109f8:	68ba      	ldr	r2, [r7, #8]
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	88fa      	ldrh	r2, [r7, #6]
 8010a02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	88fa      	ldrh	r2, [r7, #6]
 8010a08:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	2221      	movs	r2, #33	; 0x21
 8010a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a1c:	4a19      	ldr	r2, [pc, #100]	; (8010a84 <HAL_UART_Transmit_DMA+0xcc>)
 8010a1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a24:	4a18      	ldr	r2, [pc, #96]	; (8010a88 <HAL_UART_Transmit_DMA+0xd0>)
 8010a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a2c:	4a17      	ldr	r2, [pc, #92]	; (8010a8c <HAL_UART_Transmit_DMA+0xd4>)
 8010a2e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a34:	2200      	movs	r2, #0
 8010a36:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 8010a38:	f107 0308 	add.w	r3, r7, #8
 8010a3c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	6819      	ldr	r1, [r3, #0]
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	3304      	adds	r3, #4
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	88fb      	ldrh	r3, [r7, #6]
 8010a50:	f7f1 fb0b 	bl	800206a <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010a5c:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	2200      	movs	r2, #0
 8010a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	68fa      	ldr	r2, [r7, #12]
 8010a6c:	6812      	ldr	r2, [r2, #0]
 8010a6e:	6952      	ldr	r2, [r2, #20]
 8010a70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010a74:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8010a76:	2300      	movs	r3, #0
 8010a78:	e000      	b.n	8010a7c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8010a7a:	2302      	movs	r3, #2
  }
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3718      	adds	r7, #24
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	080116a5 	.word	0x080116a5
 8010a88:	080116f7 	.word	0x080116f7
 8010a8c:	08011797 	.word	0x08011797

08010a90 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b086      	sub	sp, #24
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	4613      	mov	r3, r2
 8010a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010aa4:	b2db      	uxtb	r3, r3
 8010aa6:	2b20      	cmp	r3, #32
 8010aa8:	d166      	bne.n	8010b78 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d002      	beq.n	8010ab6 <HAL_UART_Receive_DMA+0x26>
 8010ab0:	88fb      	ldrh	r3, [r7, #6]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d101      	bne.n	8010aba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	e05f      	b.n	8010b7a <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	d101      	bne.n	8010ac8 <HAL_UART_Receive_DMA+0x38>
 8010ac4:	2302      	movs	r3, #2
 8010ac6:	e058      	b.n	8010b7a <HAL_UART_Receive_DMA+0xea>
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2201      	movs	r2, #1
 8010acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8010ad0:	68ba      	ldr	r2, [r7, #8]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	88fa      	ldrh	r2, [r7, #6]
 8010ada:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2222      	movs	r2, #34	; 0x22
 8010ae6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aee:	4a25      	ldr	r2, [pc, #148]	; (8010b84 <HAL_UART_Receive_DMA+0xf4>)
 8010af0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010af6:	4a24      	ldr	r2, [pc, #144]	; (8010b88 <HAL_UART_Receive_DMA+0xf8>)
 8010af8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010afe:	4a23      	ldr	r2, [pc, #140]	; (8010b8c <HAL_UART_Receive_DMA+0xfc>)
 8010b00:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b06:	2200      	movs	r2, #0
 8010b08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 8010b0a:	f107 0308 	add.w	r3, r7, #8
 8010b0e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	3304      	adds	r3, #4
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	88fb      	ldrh	r3, [r7, #6]
 8010b22:	f7f1 faa2 	bl	800206a <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8010b26:	2300      	movs	r3, #0
 8010b28:	613b      	str	r3, [r7, #16]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	613b      	str	r3, [r7, #16]
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	685b      	ldr	r3, [r3, #4]
 8010b38:	613b      	str	r3, [r7, #16]
 8010b3a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	68fa      	ldr	r2, [r7, #12]
 8010b4a:	6812      	ldr	r2, [r2, #0]
 8010b4c:	68d2      	ldr	r2, [r2, #12]
 8010b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010b52:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	68fa      	ldr	r2, [r7, #12]
 8010b5a:	6812      	ldr	r2, [r2, #0]
 8010b5c:	6952      	ldr	r2, [r2, #20]
 8010b5e:	f042 0201 	orr.w	r2, r2, #1
 8010b62:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	6812      	ldr	r2, [r2, #0]
 8010b6c:	6952      	ldr	r2, [r2, #20]
 8010b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010b72:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8010b74:	2300      	movs	r3, #0
 8010b76:	e000      	b.n	8010b7a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8010b78:	2302      	movs	r3, #2
  }
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3718      	adds	r7, #24
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	08011713 	.word	0x08011713
 8010b88:	0801177b 	.word	0x0801177b
 8010b8c:	08011797 	.word	0x08011797

08010b90 <HAL_UART_DMAPause>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8010b90:	b480      	push	{r7}
 8010b92:	b085      	sub	sp, #20
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
   uint32_t dmarequest = 0x00U;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	d101      	bne.n	8010baa <HAL_UART_DMAPause+0x1a>
 8010ba6:	2302      	movs	r3, #2
 8010ba8:	e050      	b.n	8010c4c <HAL_UART_DMAPause+0xbc>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2201      	movs	r2, #1
 8010bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	695b      	ldr	r3, [r3, #20]
 8010bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	bf14      	ite	ne
 8010bc0:	2301      	movne	r3, #1
 8010bc2:	2300      	moveq	r3, #0
 8010bc4:	b2db      	uxtb	r3, r3
 8010bc6:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	2b21      	cmp	r3, #33	; 0x21
 8010bd2:	d10a      	bne.n	8010bea <HAL_UART_DMAPause+0x5a>
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d007      	beq.n	8010bea <HAL_UART_DMAPause+0x5a>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	6812      	ldr	r2, [r2, #0]
 8010be2:	6952      	ldr	r2, [r2, #20]
 8010be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010be8:	615a      	str	r2, [r3, #20]
  }
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	695b      	ldr	r3, [r3, #20]
 8010bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	bf14      	ite	ne
 8010bf8:	2301      	movne	r3, #1
 8010bfa:	2300      	moveq	r3, #0
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	2b22      	cmp	r3, #34	; 0x22
 8010c0a:	d11a      	bne.n	8010c42 <HAL_UART_DMAPause+0xb2>
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d017      	beq.n	8010c42 <HAL_UART_DMAPause+0xb2>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	6812      	ldr	r2, [r2, #0]
 8010c1a:	68d2      	ldr	r2, [r2, #12]
 8010c1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010c20:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	687a      	ldr	r2, [r7, #4]
 8010c28:	6812      	ldr	r2, [r2, #0]
 8010c2a:	6952      	ldr	r2, [r2, #20]
 8010c2c:	f022 0201 	bic.w	r2, r2, #1
 8010c30:	615a      	str	r2, [r3, #20]
    
    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	6812      	ldr	r2, [r2, #0]
 8010c3a:	6952      	ldr	r2, [r2, #20]
 8010c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c40:	615a      	str	r2, [r3, #20]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2200      	movs	r2, #0
 8010c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 8010c4a:	2300      	movs	r3, #0
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3714      	adds	r7, #20
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr

08010c58 <HAL_UART_DMAResume>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b085      	sub	sp, #20
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d101      	bne.n	8010c6e <HAL_UART_DMAResume+0x16>
 8010c6a:	2302      	movs	r3, #2
 8010c6c:	e03f      	b.n	8010cee <HAL_UART_DMAResume+0x96>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2201      	movs	r2, #1
 8010c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010c7c:	b2db      	uxtb	r3, r3
 8010c7e:	2b21      	cmp	r3, #33	; 0x21
 8010c80:	d107      	bne.n	8010c92 <HAL_UART_DMAResume+0x3a>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	6812      	ldr	r2, [r2, #0]
 8010c8a:	6952      	ldr	r2, [r2, #20]
 8010c8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010c90:	615a      	str	r2, [r3, #20]
  }
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	2b22      	cmp	r3, #34	; 0x22
 8010c9c:	d122      	bne.n	8010ce4 <HAL_UART_DMAResume+0x8c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	60fb      	str	r3, [r7, #12]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	60fb      	str	r3, [r7, #12]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	60fb      	str	r3, [r7, #12]
 8010cb2:	68fb      	ldr	r3, [r7, #12]
    
    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	687a      	ldr	r2, [r7, #4]
 8010cba:	6812      	ldr	r2, [r2, #0]
 8010cbc:	68d2      	ldr	r2, [r2, #12]
 8010cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010cc2:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	687a      	ldr	r2, [r7, #4]
 8010cca:	6812      	ldr	r2, [r2, #0]
 8010ccc:	6952      	ldr	r2, [r2, #20]
 8010cce:	f042 0201 	orr.w	r2, r2, #1
 8010cd2:	615a      	str	r2, [r3, #20]
    
    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	6812      	ldr	r2, [r2, #0]
 8010cdc:	6952      	ldr	r2, [r2, #20]
 8010cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010ce2:	615a      	str	r2, [r3, #20]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8010cec:	2300      	movs	r3, #0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3714      	adds	r7, #20
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr

08010cfa <HAL_UART_DMAStop>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b084      	sub	sp, #16
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010d02:	2300      	movs	r3, #0
 8010d04:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */
  
  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	695b      	ldr	r3, [r3, #20]
 8010d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	bf14      	ite	ne
 8010d14:	2301      	movne	r3, #1
 8010d16:	2300      	moveq	r3, #0
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	2b21      	cmp	r3, #33	; 0x21
 8010d26:	d116      	bne.n	8010d56 <HAL_UART_DMAStop+0x5c>
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d013      	beq.n	8010d56 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	687a      	ldr	r2, [r7, #4]
 8010d34:	6812      	ldr	r2, [r2, #0]
 8010d36:	6952      	ldr	r2, [r2, #20]
 8010d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010d3c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if(huart->hdmatx != NULL)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d004      	beq.n	8010d50 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7f1 f9ed 	bl	800212a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 fdb4 	bl	80118be <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	695b      	ldr	r3, [r3, #20]
 8010d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	bf14      	ite	ne
 8010d64:	2301      	movne	r3, #1
 8010d66:	2300      	moveq	r3, #0
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010d72:	b2db      	uxtb	r3, r3
 8010d74:	2b22      	cmp	r3, #34	; 0x22
 8010d76:	d116      	bne.n	8010da6 <HAL_UART_DMAStop+0xac>
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d013      	beq.n	8010da6 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	687a      	ldr	r2, [r7, #4]
 8010d84:	6812      	ldr	r2, [r2, #0]
 8010d86:	6952      	ldr	r2, [r2, #20]
 8010d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d8c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if(huart->hdmarx != NULL)
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d004      	beq.n	8010da0 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7f1 f9c5 	bl	800212a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f000 fda2 	bl	80118ea <UART_EndRxTransfer>
  }

  return HAL_OK;
 8010da6:	2300      	movs	r3, #0
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3710      	adds	r7, #16
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b082      	sub	sp, #8
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	687a      	ldr	r2, [r7, #4]
 8010dbe:	6812      	ldr	r2, [r2, #0]
 8010dc0:	68d2      	ldr	r2, [r2, #12]
 8010dc2:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8010dc6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	6812      	ldr	r2, [r2, #0]
 8010dd0:	6952      	ldr	r2, [r2, #20]
 8010dd2:	f022 0201 	bic.w	r2, r2, #1
 8010dd6:	615a      	str	r2, [r3, #20]
  
  /* Disable the UART DMA Tx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	695b      	ldr	r3, [r3, #20]
 8010dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d014      	beq.n	8010e10 <HAL_UART_Abort+0x60>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	687a      	ldr	r2, [r7, #4]
 8010dec:	6812      	ldr	r2, [r2, #0]
 8010dee:	6952      	ldr	r2, [r2, #20]
 8010df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010df4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if(huart->hdmatx != NULL)
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d008      	beq.n	8010e10 <HAL_UART_Abort+0x60>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e02:	2200      	movs	r2, #0
 8010e04:	651a      	str	r2, [r3, #80]	; 0x50

      HAL_DMA_Abort(huart->hdmatx);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7f1 f98d 	bl	800212a <HAL_DMA_Abort>
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	695b      	ldr	r3, [r3, #20]
 8010e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d014      	beq.n	8010e48 <HAL_UART_Abort+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	687a      	ldr	r2, [r7, #4]
 8010e24:	6812      	ldr	r2, [r2, #0]
 8010e26:	6952      	ldr	r2, [r2, #20]
 8010e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e2c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d008      	beq.n	8010e48 <HAL_UART_Abort+0x98>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	651a      	str	r2, [r3, #80]	; 0x50

      HAL_DMA_Abort(huart->hdmarx);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7f1 f971 	bl	800212a <HAL_DMA_Abort>
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2200      	movs	r2, #0
 8010e52:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2200      	movs	r2, #0
 8010e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2220      	movs	r2, #32
 8010e5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2220      	movs	r2, #32
 8010e66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8010e6a:	2300      	movs	r3, #0
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3708      	adds	r7, #8
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b082      	sub	sp, #8
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	687a      	ldr	r2, [r7, #4]
 8010e82:	6812      	ldr	r2, [r2, #0]
 8010e84:	68d2      	ldr	r2, [r2, #12]
 8010e86:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010e8a:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	695b      	ldr	r3, [r3, #20]
 8010e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d014      	beq.n	8010ec4 <HAL_UART_AbortTransmit+0x50>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	6812      	ldr	r2, [r2, #0]
 8010ea2:	6952      	ldr	r2, [r2, #20]
 8010ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010ea8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmatx != NULL)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d008      	beq.n	8010ec4 <HAL_UART_AbortTransmit+0x50>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	651a      	str	r2, [r3, #80]	; 0x50

      HAL_DMA_Abort(huart->hdmatx);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7f1 f933 	bl	800212a <HAL_DMA_Abort>
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2220      	movs	r2, #32
 8010ece:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8010ed2:	2300      	movs	r3, #0
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3708      	adds	r7, #8
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b082      	sub	sp, #8
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	6812      	ldr	r2, [r2, #0]
 8010eec:	68d2      	ldr	r2, [r2, #12]
 8010eee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010ef2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	687a      	ldr	r2, [r7, #4]
 8010efa:	6812      	ldr	r2, [r2, #0]
 8010efc:	6952      	ldr	r2, [r2, #20]
 8010efe:	f022 0201 	bic.w	r2, r2, #1
 8010f02:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	695b      	ldr	r3, [r3, #20]
 8010f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d014      	beq.n	8010f3c <HAL_UART_AbortReceive+0x60>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	6812      	ldr	r2, [r2, #0]
 8010f1a:	6952      	ldr	r2, [r2, #20]
 8010f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f20:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d008      	beq.n	8010f3c <HAL_UART_AbortReceive+0x60>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f2e:	2200      	movs	r2, #0
 8010f30:	651a      	str	r2, [r3, #80]	; 0x50

      HAL_DMA_Abort(huart->hdmarx);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7f1 f8f7 	bl	800212a <HAL_DMA_Abort>
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2220      	movs	r2, #32
 8010f46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010f4a:	2300      	movs	r3, #0
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	6812      	ldr	r2, [r2, #0]
 8010f68:	68d2      	ldr	r2, [r2, #12]
 8010f6a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8010f6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	6812      	ldr	r2, [r2, #0]
 8010f78:	6952      	ldr	r2, [r2, #20]
 8010f7a:	f022 0201 	bic.w	r2, r2, #1
 8010f7e:	615a      	str	r2, [r3, #20]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if(huart->hdmatx != NULL)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d00f      	beq.n	8010fa8 <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	695b      	ldr	r3, [r3, #20]
 8010f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d004      	beq.n	8010fa0 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f9a:	4a3e      	ldr	r2, [pc, #248]	; (8011094 <HAL_UART_Abort_IT+0x140>)
 8010f9c:	651a      	str	r2, [r3, #80]	; 0x50
 8010f9e:	e003      	b.n	8010fa8 <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if(huart->hdmarx != NULL)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d00f      	beq.n	8010fd0 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	695b      	ldr	r3, [r3, #20]
 8010fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d004      	beq.n	8010fc8 <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fc2:	4a35      	ldr	r2, [pc, #212]	; (8011098 <HAL_UART_Abort_IT+0x144>)
 8010fc4:	651a      	str	r2, [r3, #80]	; 0x50
 8010fc6:	e003      	b.n	8010fd0 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fcc:	2200      	movs	r2, #0
 8010fce:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	695b      	ldr	r3, [r3, #20]
 8010fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d01a      	beq.n	8011014 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	6812      	ldr	r2, [r2, #0]
 8010fe6:	6952      	ldr	r2, [r2, #20]
 8010fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010fec:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if(huart->hdmatx != NULL)
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d00e      	beq.n	8011014 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7f1 f905 	bl	800220a <HAL_DMA_Abort_IT>
 8011000:	4603      	mov	r3, r0
 8011002:	2b00      	cmp	r3, #0
 8011004:	d004      	beq.n	8011010 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801100a:	2200      	movs	r2, #0
 801100c:	651a      	str	r2, [r3, #80]	; 0x50
 801100e:	e001      	b.n	8011014 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        AbortCplt = 0x00U;
 8011010:	2300      	movs	r3, #0
 8011012:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	695b      	ldr	r3, [r3, #20]
 801101a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801101e:	2b00      	cmp	r3, #0
 8011020:	d01c      	beq.n	801105c <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	687a      	ldr	r2, [r7, #4]
 8011028:	6812      	ldr	r2, [r2, #0]
 801102a:	6952      	ldr	r2, [r2, #20]
 801102c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011030:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if(huart->hdmarx != NULL)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011036:	2b00      	cmp	r3, #0
 8011038:	d010      	beq.n	801105c <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801103e:	4618      	mov	r0, r3
 8011040:	f7f1 f8e3 	bl	800220a <HAL_DMA_Abort_IT>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	d006      	beq.n	8011058 <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801104e:	2200      	movs	r2, #0
 8011050:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8011052:	2301      	movs	r3, #1
 8011054:	60fb      	str	r3, [r7, #12]
 8011056:	e001      	b.n	801105c <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        AbortCplt = 0x00U;
 8011058:	2300      	movs	r3, #0
 801105a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if(AbortCplt == 0x01U)
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	2b01      	cmp	r3, #1
 8011060:	d113      	bne.n	801108a <HAL_UART_Abort_IT+0x136>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U; 
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2200      	movs	r2, #0
 8011066:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2200      	movs	r2, #0
 8011072:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2220      	movs	r2, #32
 8011078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2220      	movs	r2, #32
 8011080:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f000 f9df 	bl	8011448 <HAL_UART_AbortCpltCallback>
  }

  return HAL_OK;
 801108a:	2300      	movs	r3, #0
}
 801108c:	4618      	mov	r0, r3
 801108e:	3710      	adds	r7, #16
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	0801194f 	.word	0x0801194f
 8011098:	080119a9 	.word	0x080119a9

0801109c <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	6812      	ldr	r2, [r2, #0]
 80110ac:	68d2      	ldr	r2, [r2, #12]
 80110ae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80110b2:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	695b      	ldr	r3, [r3, #20]
 80110ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d02a      	beq.n	8011118 <HAL_UART_AbortTransmit_IT+0x7c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	687a      	ldr	r2, [r7, #4]
 80110c8:	6812      	ldr	r2, [r2, #0]
 80110ca:	6952      	ldr	r2, [r2, #20]
 80110cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80110d0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmatx != NULL)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d013      	beq.n	8011102 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110de:	4a16      	ldr	r2, [pc, #88]	; (8011138 <HAL_UART_AbortTransmit_IT+0x9c>)
 80110e0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7f1 f88f 	bl	800220a <HAL_DMA_Abort_IT>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d01c      	beq.n	801112c <HAL_UART_AbortTransmit_IT+0x90>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110f8:	687a      	ldr	r2, [r7, #4]
 80110fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80110fc:	4610      	mov	r0, r2
 80110fe:	4798      	blx	r3
 8011100:	e014      	b.n	801112c <HAL_UART_AbortTransmit_IT+0x90>
      }
    }
    else
    {      
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2200      	movs	r2, #0
 8011106:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2220      	movs	r2, #32
 801110c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* As no DMA to be aborted, call directly user Abort complete callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f000 f9a3 	bl	801145c <HAL_UART_AbortTransmitCpltCallback>
 8011116:	e009      	b.n	801112c <HAL_UART_AbortTransmit_IT+0x90>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2200      	movs	r2, #0
 801111c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2220      	movs	r2, #32
 8011122:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f000 f998 	bl	801145c <HAL_UART_AbortTransmitCpltCallback>
  }

  return HAL_OK;
 801112c:	2300      	movs	r3, #0
}
 801112e:	4618      	mov	r0, r3
 8011130:	3708      	adds	r7, #8
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	08011a03 	.word	0x08011a03

0801113c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	687a      	ldr	r2, [r7, #4]
 801114a:	6812      	ldr	r2, [r2, #0]
 801114c:	68d2      	ldr	r2, [r2, #12]
 801114e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011152:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	6812      	ldr	r2, [r2, #0]
 801115c:	6952      	ldr	r2, [r2, #20]
 801115e:	f022 0201 	bic.w	r2, r2, #1
 8011162:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	695b      	ldr	r3, [r3, #20]
 801116a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801116e:	2b00      	cmp	r3, #0
 8011170:	d02a      	beq.n	80111c8 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	687a      	ldr	r2, [r7, #4]
 8011178:	6812      	ldr	r2, [r2, #0]
 801117a:	6952      	ldr	r2, [r2, #20]
 801117c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011180:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011186:	2b00      	cmp	r3, #0
 8011188:	d013      	beq.n	80111b2 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801118e:	4a16      	ldr	r2, [pc, #88]	; (80111e8 <HAL_UART_AbortReceive_IT+0xac>)
 8011190:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011196:	4618      	mov	r0, r3
 8011198:	f7f1 f837 	bl	800220a <HAL_DMA_Abort_IT>
 801119c:	4603      	mov	r3, r0
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d01c      	beq.n	80111dc <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111a8:	687a      	ldr	r2, [r7, #4]
 80111aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80111ac:	4610      	mov	r0, r2
 80111ae:	4798      	blx	r3
 80111b0:	e014      	b.n	80111dc <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U; 
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2200      	movs	r2, #0
 80111b6:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2220      	movs	r2, #32
 80111bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      /* As no DMA to be aborted, call directly user Abort complete callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f000 f955 	bl	8011470 <HAL_UART_AbortReceiveCpltCallback>
 80111c6:	e009      	b.n	80111dc <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U; 
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2200      	movs	r2, #0
 80111cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2220      	movs	r2, #32
 80111d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f000 f94a 	bl	8011470 <HAL_UART_AbortReceiveCpltCallback>
  }

  return HAL_OK;
 80111dc:	2300      	movs	r3, #0
}
 80111de:	4618      	mov	r0, r3
 80111e0:	3708      	adds	r7, #8
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
 80111e6:	bf00      	nop
 80111e8:	08011a2d 	.word	0x08011a2d

080111ec <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b088      	sub	sp, #32
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	695b      	ldr	r3, [r3, #20]
 801120a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 801120c:	2300      	movs	r3, #0
 801120e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8011210:	2300      	movs	r3, #0
 8011212:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	f003 030f 	and.w	r3, r3, #15
 801121a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d10d      	bne.n	801123e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	f003 0320 	and.w	r3, r3, #32
 8011228:	2b00      	cmp	r3, #0
 801122a:	d008      	beq.n	801123e <HAL_UART_IRQHandler+0x52>
 801122c:	69bb      	ldr	r3, [r7, #24]
 801122e:	f003 0320 	and.w	r3, r3, #32
 8011232:	2b00      	cmp	r3, #0
 8011234:	d003      	beq.n	801123e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f000 fc7a 	bl	8011b30 <UART_Receive_IT>
      return;
 801123c:	e0cc      	b.n	80113d8 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	2b00      	cmp	r3, #0
 8011242:	f000 80ab 	beq.w	801139c <HAL_UART_IRQHandler+0x1b0>
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	f003 0301 	and.w	r3, r3, #1
 801124c:	2b00      	cmp	r3, #0
 801124e:	d105      	bne.n	801125c <HAL_UART_IRQHandler+0x70>
 8011250:	69bb      	ldr	r3, [r7, #24]
 8011252:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8011256:	2b00      	cmp	r3, #0
 8011258:	f000 80a0 	beq.w	801139c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801125c:	69fb      	ldr	r3, [r7, #28]
 801125e:	f003 0301 	and.w	r3, r3, #1
 8011262:	2b00      	cmp	r3, #0
 8011264:	d00a      	beq.n	801127c <HAL_UART_IRQHandler+0x90>
 8011266:	69bb      	ldr	r3, [r7, #24]
 8011268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801126c:	2b00      	cmp	r3, #0
 801126e:	d005      	beq.n	801127c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011274:	f043 0201 	orr.w	r2, r3, #1
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801127c:	69fb      	ldr	r3, [r7, #28]
 801127e:	f003 0304 	and.w	r3, r3, #4
 8011282:	2b00      	cmp	r3, #0
 8011284:	d00a      	beq.n	801129c <HAL_UART_IRQHandler+0xb0>
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	f003 0301 	and.w	r3, r3, #1
 801128c:	2b00      	cmp	r3, #0
 801128e:	d005      	beq.n	801129c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011294:	f043 0202 	orr.w	r2, r3, #2
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	f003 0302 	and.w	r3, r3, #2
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d00a      	beq.n	80112bc <HAL_UART_IRQHandler+0xd0>
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	f003 0301 	and.w	r3, r3, #1
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d005      	beq.n	80112bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112b4:	f043 0204 	orr.w	r2, r3, #4
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	f003 0308 	and.w	r3, r3, #8
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d00a      	beq.n	80112dc <HAL_UART_IRQHandler+0xf0>
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	f003 0301 	and.w	r3, r3, #1
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d005      	beq.n	80112dc <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112d4:	f043 0208 	orr.w	r2, r3, #8
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d078      	beq.n	80113d6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	f003 0320 	and.w	r3, r3, #32
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d007      	beq.n	80112fe <HAL_UART_IRQHandler+0x112>
 80112ee:	69bb      	ldr	r3, [r7, #24]
 80112f0:	f003 0320 	and.w	r3, r3, #32
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d002      	beq.n	80112fe <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f000 fc19 	bl	8011b30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	695b      	ldr	r3, [r3, #20]
 8011304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011308:	2b00      	cmp	r3, #0
 801130a:	bf14      	ite	ne
 801130c:	2301      	movne	r3, #1
 801130e:	2300      	moveq	r3, #0
 8011310:	b2db      	uxtb	r3, r3
 8011312:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011318:	f003 0308 	and.w	r3, r3, #8
 801131c:	2b00      	cmp	r3, #0
 801131e:	d102      	bne.n	8011326 <HAL_UART_IRQHandler+0x13a>
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d031      	beq.n	801138a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f000 fadf 	bl	80118ea <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	695b      	ldr	r3, [r3, #20]
 8011332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011336:	2b00      	cmp	r3, #0
 8011338:	d023      	beq.n	8011382 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	6812      	ldr	r2, [r2, #0]
 8011342:	6952      	ldr	r2, [r2, #20]
 8011344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011348:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801134e:	2b00      	cmp	r3, #0
 8011350:	d013      	beq.n	801137a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011356:	4a22      	ldr	r2, [pc, #136]	; (80113e0 <HAL_UART_IRQHandler+0x1f4>)
 8011358:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801135e:	4618      	mov	r0, r3
 8011360:	f7f0 ff53 	bl	800220a <HAL_DMA_Abort_IT>
 8011364:	4603      	mov	r3, r0
 8011366:	2b00      	cmp	r3, #0
 8011368:	d016      	beq.n	8011398 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801136e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011374:	4610      	mov	r0, r2
 8011376:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011378:	e00e      	b.n	8011398 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f000 f85a 	bl	8011434 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011380:	e00a      	b.n	8011398 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f000 f856 	bl	8011434 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011388:	e006      	b.n	8011398 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f000 f852 	bl	8011434 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2200      	movs	r2, #0
 8011394:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8011396:	e01e      	b.n	80113d6 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011398:	bf00      	nop
    return;
 801139a:	e01c      	b.n	80113d6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801139c:	69fb      	ldr	r3, [r7, #28]
 801139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d008      	beq.n	80113b8 <HAL_UART_IRQHandler+0x1cc>
 80113a6:	69bb      	ldr	r3, [r7, #24]
 80113a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d003      	beq.n	80113b8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f000 fb50 	bl	8011a56 <UART_Transmit_IT>
    return;
 80113b6:	e00f      	b.n	80113d8 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80113b8:	69fb      	ldr	r3, [r7, #28]
 80113ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d00a      	beq.n	80113d8 <HAL_UART_IRQHandler+0x1ec>
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d005      	beq.n	80113d8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f000 fb97 	bl	8011b00 <UART_EndTransmit_IT>
    return;
 80113d2:	bf00      	nop
 80113d4:	e000      	b.n	80113d8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80113d6:	bf00      	nop
  }
}
 80113d8:	3720      	adds	r7, #32
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
 80113de:	bf00      	nop
 80113e0:	08011927 	.word	0x08011927
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80113ec:	bf00      	nop
 80113ee:	370c      	adds	r7, #12
 80113f0:	46bd      	mov	sp, r7
 80113f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f6:	4770      	bx	lr

080113f8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b083      	sub	sp, #12
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8011400:	bf00      	nop
 8011402:	370c      	adds	r7, #12
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801140c:	b480      	push	{r7}
 801140e:	b083      	sub	sp, #12
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011414:	bf00      	nop
 8011416:	370c      	adds	r7, #12
 8011418:	46bd      	mov	sp, r7
 801141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141e:	4770      	bx	lr

08011420 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011420:	b480      	push	{r7}
 8011422:	b083      	sub	sp, #12
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011428:	bf00      	nop
 801142a:	370c      	adds	r7, #12
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr

08011434 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011434:	b480      	push	{r7}
 8011436:	b083      	sub	sp, #12
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 801143c:	bf00      	nop
 801143e:	370c      	adds	r7, #12
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr

08011448 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback (UART_HandleTypeDef *huart)
{
 8011448:	b480      	push	{r7}
 801144a:	b083      	sub	sp, #12
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8011450:	bf00      	nop
 8011452:	370c      	adds	r7, #12
 8011454:	46bd      	mov	sp, r7
 8011456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145a:	4770      	bx	lr

0801145c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback (UART_HandleTypeDef *huart)
{
 801145c:	b480      	push	{r7}
 801145e:	b083      	sub	sp, #12
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8011464:	bf00      	nop
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr

08011470 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart)
{
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8011478:	bf00      	nop
 801147a:	370c      	adds	r7, #12
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr

08011484 <HAL_LIN_SendBreak>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011492:	2b01      	cmp	r3, #1
 8011494:	d101      	bne.n	801149a <HAL_LIN_SendBreak+0x16>
 8011496:	2302      	movs	r3, #2
 8011498:	e018      	b.n	80114cc <HAL_LIN_SendBreak+0x48>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2201      	movs	r2, #1
 801149e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2224      	movs	r2, #36	; 0x24
 80114a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Send break characters */
  SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	6812      	ldr	r2, [r2, #0]
 80114b2:	68d2      	ldr	r2, [r2, #12]
 80114b4:	f042 0201 	orr.w	r2, r2, #1
 80114b8:	60da      	str	r2, [r3, #12]
 
  huart->gState = HAL_UART_STATE_READY;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2220      	movs	r2, #32
 80114be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2200      	movs	r2, #0
 80114c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 80114ca:	2300      	movs	r3, #0
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	370c      	adds	r7, #12
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr

080114d8 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 80114d8:	b480      	push	{r7}
 80114da:	b083      	sub	sp, #12
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80114e6:	2b01      	cmp	r3, #1
 80114e8:	d101      	bne.n	80114ee <HAL_MultiProcessor_EnterMuteMode+0x16>
 80114ea:	2302      	movs	r3, #2
 80114ec:	e018      	b.n	8011520 <HAL_MultiProcessor_EnterMuteMode+0x48>
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2201      	movs	r2, #1
 80114f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2224      	movs	r2, #36	; 0x24
 80114fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	687a      	ldr	r2, [r7, #4]
 8011504:	6812      	ldr	r2, [r2, #0]
 8011506:	68d2      	ldr	r2, [r2, #12]
 8011508:	f042 0202 	orr.w	r2, r2, #2
 801150c:	60da      	str	r2, [r3, #12]
  
  huart->gState = HAL_UART_STATE_READY;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2220      	movs	r2, #32
 8011512:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2200      	movs	r2, #0
 801151a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 801151e:	2300      	movs	r3, #0
}
 8011520:	4618      	mov	r0, r3
 8011522:	370c      	adds	r7, #12
 8011524:	46bd      	mov	sp, r7
 8011526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152a:	4770      	bx	lr

0801152c <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 801152c:	b480      	push	{r7}
 801152e:	b083      	sub	sp, #12
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801153a:	2b01      	cmp	r3, #1
 801153c:	d101      	bne.n	8011542 <HAL_MultiProcessor_ExitMuteMode+0x16>
 801153e:	2302      	movs	r3, #2
 8011540:	e018      	b.n	8011574 <HAL_MultiProcessor_ExitMuteMode+0x48>
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	2201      	movs	r2, #1
 8011546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2224      	movs	r2, #36	; 0x24
 801154e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	687a      	ldr	r2, [r7, #4]
 8011558:	6812      	ldr	r2, [r2, #0]
 801155a:	68d2      	ldr	r2, [r2, #12]
 801155c:	f022 0202 	bic.w	r2, r2, #2
 8011560:	60da      	str	r2, [r3, #12]
  
  huart->gState = HAL_UART_STATE_READY;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2220      	movs	r2, #32
 8011566:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2200      	movs	r2, #0
 801156e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 8011572:	2300      	movs	r3, #0
}
 8011574:	4618      	mov	r0, r3
 8011576:	370c      	adds	r7, #12
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr

08011580 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8011580:	b480      	push	{r7}
 8011582:	b085      	sub	sp, #20
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8011588:	2300      	movs	r3, #0
 801158a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011592:	2b01      	cmp	r3, #1
 8011594:	d101      	bne.n	801159a <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8011596:	2302      	movs	r3, #2
 8011598:	e020      	b.n	80115dc <HAL_HalfDuplex_EnableTransmitter+0x5c>
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2201      	movs	r2, #1
 801159e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2224      	movs	r2, #36	; 0x24
 80115a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	60fb      	str	r3, [r7, #12]
  
  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	f023 030c 	bic.w	r3, r3, #12
 80115b8:	60fb      	str	r3, [r7, #12]
  
  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	f043 0308 	orr.w	r3, r3, #8
 80115c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	68fa      	ldr	r2, [r7, #12]
 80115c8:	60da      	str	r2, [r3, #12]
 
  huart->gState = HAL_UART_STATE_READY;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	2220      	movs	r2, #32
 80115ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2200      	movs	r2, #0
 80115d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 80115da:	2300      	movs	r3, #0
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3714      	adds	r7, #20
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr

080115e8 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80115e8:	b480      	push	{r7}
 80115ea:	b085      	sub	sp, #20
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80115f0:	2300      	movs	r3, #0
 80115f2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d101      	bne.n	8011602 <HAL_HalfDuplex_EnableReceiver+0x1a>
 80115fe:	2302      	movs	r3, #2
 8011600:	e020      	b.n	8011644 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2201      	movs	r2, #1
 8011606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2224      	movs	r2, #36	; 0x24
 801160e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	68db      	ldr	r3, [r3, #12]
 8011618:	60fb      	str	r3, [r7, #12]
  
  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	f023 030c 	bic.w	r3, r3, #12
 8011620:	60fb      	str	r3, [r7, #12]
  
  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	f043 0304 	orr.w	r3, r3, #4
 8011628:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	68fa      	ldr	r2, [r7, #12]
 8011630:	60da      	str	r2, [r3, #12]
  
  huart->gState = HAL_UART_STATE_READY;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2220      	movs	r2, #32
 8011636:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2200      	movs	r2, #0
 801163e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 8011642:	2300      	movs	r3, #0
}
 8011644:	4618      	mov	r0, r3
 8011646:	3714      	adds	r7, #20
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <HAL_UART_GetState>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8011650:	b480      	push	{r7}
 8011652:	b085      	sub	sp, #20
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  uint32_t temp1= 0x00U, temp2 = 0x00U;
 8011658:	2300      	movs	r3, #0
 801165a:	60fb      	str	r3, [r7, #12]
 801165c:	2300      	movs	r3, #0
 801165e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011666:	b2db      	uxtb	r3, r3
 8011668:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011670:	b2db      	uxtb	r3, r3
 8011672:	60bb      	str	r3, [r7, #8]
  
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	b2da      	uxtb	r2, r3
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	b2db      	uxtb	r3, r3
 801167c:	4313      	orrs	r3, r2
 801167e:	b2db      	uxtb	r3, r3
}
 8011680:	4618      	mov	r0, r3
 8011682:	3714      	adds	r7, #20
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr

0801168c <HAL_UART_GetError>:
  * @param  huart  pointer to a UART_HandleTypeDef structure that contains
  *              the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 801168c:	b480      	push	{r7}
 801168e:	b083      	sub	sp, #12
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8011698:	4618      	mov	r0, r3
 801169a:	370c      	adds	r7, #12
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr

080116a4 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b084      	sub	sp, #16
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116b0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d113      	bne.n	80116e8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	2200      	movs	r2, #0
 80116c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	68fa      	ldr	r2, [r7, #12]
 80116cc:	6812      	ldr	r2, [r2, #0]
 80116ce:	6952      	ldr	r2, [r2, #20]
 80116d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80116d4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	68fa      	ldr	r2, [r7, #12]
 80116dc:	6812      	ldr	r2, [r2, #0]
 80116de:	68d2      	ldr	r2, [r2, #12]
 80116e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80116e4:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 80116e6:	e002      	b.n	80116ee <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80116e8:	68f8      	ldr	r0, [r7, #12]
 80116ea:	f002 fc6d 	bl	8013fc8 <HAL_UART_TxCpltCallback>
}
 80116ee:	bf00      	nop
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <UART_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b084      	sub	sp, #16
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011702:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8011704:	68f8      	ldr	r0, [r7, #12]
 8011706:	f7ff fe77 	bl	80113f8 <HAL_UART_TxHalfCpltCallback>
}
 801170a:	bf00      	nop
 801170c:	3710      	adds	r7, #16
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}

08011712 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011712:	b580      	push	{r7, lr}
 8011714:	b084      	sub	sp, #16
 8011716:	af00      	add	r7, sp, #0
 8011718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801171e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801172a:	2b00      	cmp	r3, #0
 801172c:	d11e      	bne.n	801176c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2200      	movs	r2, #0
 8011732:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	68fa      	ldr	r2, [r7, #12]
 801173a:	6812      	ldr	r2, [r2, #0]
 801173c:	68d2      	ldr	r2, [r2, #12]
 801173e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011742:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	68fa      	ldr	r2, [r7, #12]
 801174a:	6812      	ldr	r2, [r2, #0]
 801174c:	6952      	ldr	r2, [r2, #20]
 801174e:	f022 0201 	bic.w	r2, r2, #1
 8011752:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	68fa      	ldr	r2, [r7, #12]
 801175a:	6812      	ldr	r2, [r2, #0]
 801175c:	6952      	ldr	r2, [r2, #20]
 801175e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011762:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	2220      	movs	r2, #32
 8011768:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 801176c:	68f8      	ldr	r0, [r7, #12]
 801176e:	f001 fe2f 	bl	80133d0 <HAL_UART_RxCpltCallback>
}
 8011772:	bf00      	nop
 8011774:	3710      	adds	r7, #16
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}

0801177a <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801177a:	b580      	push	{r7, lr}
 801177c:	b084      	sub	sp, #16
 801177e:	af00      	add	r7, sp, #0
 8011780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011786:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 8011788:	68f8      	ldr	r0, [r7, #12]
 801178a:	f7ff fe49 	bl	8011420 <HAL_UART_RxHalfCpltCallback>
}
 801178e:	bf00      	nop
 8011790:	3710      	adds	r7, #16
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}

08011796 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011796:	b580      	push	{r7, lr}
 8011798:	b084      	sub	sp, #16
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801179e:	2300      	movs	r3, #0
 80117a0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117a6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	695b      	ldr	r3, [r3, #20]
 80117ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	bf14      	ite	ne
 80117b6:	2301      	movne	r3, #1
 80117b8:	2300      	moveq	r3, #0
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	2b21      	cmp	r3, #33	; 0x21
 80117c8:	d108      	bne.n	80117dc <UART_DMAError+0x46>
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d005      	beq.n	80117dc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	2200      	movs	r2, #0
 80117d4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80117d6:	68b8      	ldr	r0, [r7, #8]
 80117d8:	f000 f871 	bl	80118be <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	695b      	ldr	r3, [r3, #20]
 80117e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	bf14      	ite	ne
 80117ea:	2301      	movne	r3, #1
 80117ec:	2300      	moveq	r3, #0
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	2b22      	cmp	r3, #34	; 0x22
 80117fc:	d108      	bne.n	8011810 <UART_DMAError+0x7a>
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d005      	beq.n	8011810 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8011804:	68bb      	ldr	r3, [r7, #8]
 8011806:	2200      	movs	r2, #0
 8011808:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801180a:	68b8      	ldr	r0, [r7, #8]
 801180c:	f000 f86d 	bl	80118ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011814:	f043 0210 	orr.w	r2, r3, #16
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 801181c:	68b8      	ldr	r0, [r7, #8]
 801181e:	f7ff fe09 	bl	8011434 <HAL_UART_ErrorCallback>
}
 8011822:	bf00      	nop
 8011824:	3710      	adds	r7, #16
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}

0801182a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801182a:	b580      	push	{r7, lr}
 801182c:	b084      	sub	sp, #16
 801182e:	af00      	add	r7, sp, #0
 8011830:	60f8      	str	r0, [r7, #12]
 8011832:	60b9      	str	r1, [r7, #8]
 8011834:	603b      	str	r3, [r7, #0]
 8011836:	4613      	mov	r3, r2
 8011838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 801183a:	e02c      	b.n	8011896 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 801183c:	69bb      	ldr	r3, [r7, #24]
 801183e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011842:	d028      	beq.n	8011896 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8011844:	69bb      	ldr	r3, [r7, #24]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d007      	beq.n	801185a <UART_WaitOnFlagUntilTimeout+0x30>
 801184a:	f7ee fd71 	bl	8000330 <HAL_GetTick>
 801184e:	4602      	mov	r2, r0
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	1ad2      	subs	r2, r2, r3
 8011854:	69bb      	ldr	r3, [r7, #24]
 8011856:	429a      	cmp	r2, r3
 8011858:	d91d      	bls.n	8011896 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	68fa      	ldr	r2, [r7, #12]
 8011860:	6812      	ldr	r2, [r2, #0]
 8011862:	68d2      	ldr	r2, [r2, #12]
 8011864:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011868:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	68fa      	ldr	r2, [r7, #12]
 8011870:	6812      	ldr	r2, [r2, #0]
 8011872:	6952      	ldr	r2, [r2, #20]
 8011874:	f022 0201 	bic.w	r2, r2, #1
 8011878:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2220      	movs	r2, #32
 801187e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	2220      	movs	r2, #32
 8011886:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	2200      	movs	r2, #0
 801188e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8011892:	2303      	movs	r3, #3
 8011894:	e00f      	b.n	80118b6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	401a      	ands	r2, r3
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	bf0c      	ite	eq
 80118a6:	2301      	moveq	r3, #1
 80118a8:	2300      	movne	r3, #0
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	461a      	mov	r2, r3
 80118ae:	79fb      	ldrb	r3, [r7, #7]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d0c3      	beq.n	801183c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80118b4:	2300      	movs	r3, #0
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3710      	adds	r7, #16
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}

080118be <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80118be:	b480      	push	{r7}
 80118c0:	b083      	sub	sp, #12
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	687a      	ldr	r2, [r7, #4]
 80118cc:	6812      	ldr	r2, [r2, #0]
 80118ce:	68d2      	ldr	r2, [r2, #12]
 80118d0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80118d4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2220      	movs	r2, #32
 80118da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80118de:	bf00      	nop
 80118e0:	370c      	adds	r7, #12
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr

080118ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80118ea:	b480      	push	{r7}
 80118ec:	b083      	sub	sp, #12
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	6812      	ldr	r2, [r2, #0]
 80118fa:	68d2      	ldr	r2, [r2, #12]
 80118fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011900:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	687a      	ldr	r2, [r7, #4]
 8011908:	6812      	ldr	r2, [r2, #0]
 801190a:	6952      	ldr	r2, [r2, #20]
 801190c:	f022 0201 	bic.w	r2, r2, #1
 8011910:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2220      	movs	r2, #32
 8011916:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 801191a:	bf00      	nop
 801191c:	370c      	adds	r7, #12
 801191e:	46bd      	mov	sp, r7
 8011920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011924:	4770      	bx	lr

08011926 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011926:	b580      	push	{r7, lr}
 8011928:	b084      	sub	sp, #16
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011932:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	2200      	movs	r2, #0
 8011938:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	2200      	movs	r2, #0
 801193e:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8011940:	68f8      	ldr	r0, [r7, #12]
 8011942:	f7ff fd77 	bl	8011434 <HAL_UART_ErrorCallback>
}
 8011946:	bf00      	nop
 8011948:	3710      	adds	r7, #16
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}

0801194e <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801194e:	b580      	push	{r7, lr}
 8011950:	b084      	sub	sp, #16
 8011952:	af00      	add	r7, sp, #0
 8011954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801195a:	60fb      	str	r3, [r7, #12]
  
  huart->hdmatx->XferAbortCallback = NULL;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011960:	2200      	movs	r2, #0
 8011962:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if(huart->hdmarx != NULL)
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011968:	2b00      	cmp	r3, #0
 801196a:	d004      	beq.n	8011976 <UART_DMATxAbortCallback+0x28>
  {
    if(huart->hdmarx->XferAbortCallback != NULL)
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011972:	2b00      	cmp	r3, #0
 8011974:	d114      	bne.n	80119a0 <UART_DMATxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	2200      	movs	r2, #0
 801197a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	2200      	movs	r2, #0
 8011980:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	2200      	movs	r2, #0
 8011986:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	2220      	movs	r2, #32
 801198c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2220      	movs	r2, #32
 8011994:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Call user Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011998:	68f8      	ldr	r0, [r7, #12]
 801199a:	f7ff fd55 	bl	8011448 <HAL_UART_AbortCpltCallback>
 801199e:	e000      	b.n	80119a2 <UART_DMATxAbortCallback+0x54>
      return;
 80119a0:	bf00      	nop
}
 80119a2:	3710      	adds	r7, #16
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}

080119a8 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b084      	sub	sp, #16
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119b4:	60fb      	str	r3, [r7, #12]
  
  huart->hdmarx->XferAbortCallback = NULL;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119ba:	2200      	movs	r2, #0
 80119bc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if(huart->hdmatx != NULL)
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d004      	beq.n	80119d0 <UART_DMARxAbortCallback+0x28>
  {
    if(huart->hdmatx->XferAbortCallback != NULL)
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d114      	bne.n	80119fa <UART_DMARxAbortCallback+0x52>
      return;
    }
  }
  
  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2200      	movs	r2, #0
 80119d4:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	2200      	movs	r2, #0
 80119da:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2200      	movs	r2, #0
 80119e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2220      	movs	r2, #32
 80119e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	2220      	movs	r2, #32
 80119ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Call user Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80119f2:	68f8      	ldr	r0, [r7, #12]
 80119f4:	f7ff fd28 	bl	8011448 <HAL_UART_AbortCpltCallback>
 80119f8:	e000      	b.n	80119fc <UART_DMARxAbortCallback+0x54>
      return;
 80119fa:	bf00      	nop
}
 80119fc:	3710      	adds	r7, #16
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}

08011a02 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011a02:	b580      	push	{r7, lr}
 8011a04:	b084      	sub	sp, #16
 8011a06:	af00      	add	r7, sp, #0
 8011a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a0e:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	2200      	movs	r2, #0
 8011a14:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	2220      	movs	r2, #32
 8011a1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Call user Abort complete callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8011a1e:	68f8      	ldr	r0, [r7, #12]
 8011a20:	f7ff fd1c 	bl	801145c <HAL_UART_AbortTransmitCpltCallback>
}
 8011a24:	bf00      	nop
 8011a26:	3710      	adds	r7, #16
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b084      	sub	sp, #16
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a38:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2220      	movs	r2, #32
 8011a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Call user Abort complete callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8011a48:	68f8      	ldr	r0, [r7, #12]
 8011a4a:	f7ff fd11 	bl	8011470 <HAL_UART_AbortReceiveCpltCallback>
}
 8011a4e:	bf00      	nop
 8011a50:	3710      	adds	r7, #16
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011a56:	b480      	push	{r7}
 8011a58:	b085      	sub	sp, #20
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	2b21      	cmp	r3, #33	; 0x21
 8011a68:	d143      	bne.n	8011af2 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	689b      	ldr	r3, [r3, #8]
 8011a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a72:	d119      	bne.n	8011aa8 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6a1b      	ldr	r3, [r3, #32]
 8011a78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	68fa      	ldr	r2, [r7, #12]
 8011a80:	8812      	ldrh	r2, [r2, #0]
 8011a82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011a86:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	691b      	ldr	r3, [r3, #16]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d105      	bne.n	8011a9c <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6a1b      	ldr	r3, [r3, #32]
 8011a94:	1c9a      	adds	r2, r3, #2
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	621a      	str	r2, [r3, #32]
 8011a9a:	e00e      	b.n	8011aba <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6a1b      	ldr	r3, [r3, #32]
 8011aa0:	1c5a      	adds	r2, r3, #1
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	621a      	str	r2, [r3, #32]
 8011aa6:	e008      	b.n	8011aba <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681a      	ldr	r2, [r3, #0]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6a1b      	ldr	r3, [r3, #32]
 8011ab0:	1c58      	adds	r0, r3, #1
 8011ab2:	6879      	ldr	r1, [r7, #4]
 8011ab4:	6208      	str	r0, [r1, #32]
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	3b01      	subs	r3, #1
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	4619      	mov	r1, r3
 8011ac8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d10f      	bne.n	8011aee <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	687a      	ldr	r2, [r7, #4]
 8011ad4:	6812      	ldr	r2, [r2, #0]
 8011ad6:	68d2      	ldr	r2, [r2, #12]
 8011ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011adc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	6812      	ldr	r2, [r2, #0]
 8011ae6:	68d2      	ldr	r2, [r2, #12]
 8011ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011aec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011aee:	2300      	movs	r3, #0
 8011af0:	e000      	b.n	8011af4 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8011af2:	2302      	movs	r3, #2
  }
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3714      	adds	r7, #20
 8011af8:	46bd      	mov	sp, r7
 8011afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afe:	4770      	bx	lr

08011b00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b082      	sub	sp, #8
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	687a      	ldr	r2, [r7, #4]
 8011b0e:	6812      	ldr	r2, [r2, #0]
 8011b10:	68d2      	ldr	r2, [r2, #12]
 8011b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011b16:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2220      	movs	r2, #32
 8011b1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f002 fa51 	bl	8013fc8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8011b26:	2300      	movs	r3, #0
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3708      	adds	r7, #8
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	2b22      	cmp	r3, #34	; 0x22
 8011b42:	d169      	bne.n	8011c18 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	689b      	ldr	r3, [r3, #8]
 8011b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b4c:	d123      	bne.n	8011b96 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b52:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	691b      	ldr	r3, [r3, #16]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d10e      	bne.n	8011b7a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	685b      	ldr	r3, [r3, #4]
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b68:	b29a      	uxth	r2, r3
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b72:	1c9a      	adds	r2, r3, #2
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	629a      	str	r2, [r3, #40]	; 0x28
 8011b78:	e029      	b.n	8011bce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	b29b      	uxth	r3, r3
 8011b82:	b2db      	uxtb	r3, r3
 8011b84:	b29a      	uxth	r2, r3
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b8e:	1c5a      	adds	r2, r3, #1
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	629a      	str	r2, [r3, #40]	; 0x28
 8011b94:	e01b      	b.n	8011bce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	691b      	ldr	r3, [r3, #16]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d10a      	bne.n	8011bb4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ba2:	1c59      	adds	r1, r3, #1
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	6291      	str	r1, [r2, #40]	; 0x28
 8011ba8:	687a      	ldr	r2, [r7, #4]
 8011baa:	6812      	ldr	r2, [r2, #0]
 8011bac:	6852      	ldr	r2, [r2, #4]
 8011bae:	b2d2      	uxtb	r2, r2
 8011bb0:	701a      	strb	r2, [r3, #0]
 8011bb2:	e00c      	b.n	8011bce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bb8:	1c59      	adds	r1, r3, #1
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	6291      	str	r1, [r2, #40]	; 0x28
 8011bbe:	687a      	ldr	r2, [r7, #4]
 8011bc0:	6812      	ldr	r2, [r2, #0]
 8011bc2:	6852      	ldr	r2, [r2, #4]
 8011bc4:	b2d2      	uxtb	r2, r2
 8011bc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011bca:	b2d2      	uxtb	r2, r2
 8011bcc:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	3b01      	subs	r3, #1
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	4619      	mov	r1, r3
 8011bdc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d118      	bne.n	8011c14 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	6812      	ldr	r2, [r2, #0]
 8011bea:	68d2      	ldr	r2, [r2, #12]
 8011bec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011bf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	687a      	ldr	r2, [r7, #4]
 8011bf8:	6812      	ldr	r2, [r2, #0]
 8011bfa:	6952      	ldr	r2, [r2, #20]
 8011bfc:	f022 0201 	bic.w	r2, r2, #1
 8011c00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2220      	movs	r2, #32
 8011c06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f001 fbe0 	bl	80133d0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8011c10:	2300      	movs	r3, #0
 8011c12:	e002      	b.n	8011c1a <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8011c14:	2300      	movs	r3, #0
 8011c16:	e000      	b.n	8011c1a <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8011c18:	2302      	movs	r3, #2
  }
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3710      	adds	r7, #16
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}

08011c22 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c24:	b085      	sub	sp, #20
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	691b      	ldr	r3, [r3, #16]
 8011c34:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8011c3c:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	68db      	ldr	r3, [r3, #12]
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	4313      	orrs	r3, r2
 8011c46:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	68db      	ldr	r3, [r3, #12]
 8011c56:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8011c5e:	f023 030c 	bic.w	r3, r3, #12
 8011c62:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	689a      	ldr	r2, [r3, #8]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	691b      	ldr	r3, [r3, #16]
 8011c6c:	431a      	orrs	r2, r3
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	695b      	ldr	r3, [r3, #20]
 8011c72:	431a      	orrs	r2, r3
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	69db      	ldr	r3, [r3, #28]
 8011c78:	4313      	orrs	r3, r2
 8011c7a:	68fa      	ldr	r2, [r7, #12]
 8011c7c:	4313      	orrs	r3, r2
 8011c7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	68fa      	ldr	r2, [r7, #12]
 8011c86:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	695b      	ldr	r3, [r3, #20]
 8011c8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011c96:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	699b      	ldr	r3, [r3, #24]
 8011c9c:	68fa      	ldr	r2, [r7, #12]
 8011c9e:	4313      	orrs	r3, r2
 8011ca0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	68fa      	ldr	r2, [r7, #12]
 8011ca8:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	69db      	ldr	r3, [r3, #28]
 8011cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011cb2:	f040 80e4 	bne.w	8011e7e <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	4aac      	ldr	r2, [pc, #688]	; (8011f6c <UART_SetConfig+0x34a>)
 8011cbc:	4293      	cmp	r3, r2
 8011cbe:	d004      	beq.n	8011cca <UART_SetConfig+0xa8>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	4aaa      	ldr	r2, [pc, #680]	; (8011f70 <UART_SetConfig+0x34e>)
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d16c      	bne.n	8011da4 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681c      	ldr	r4, [r3, #0]
 8011cce:	f7f6 ff95 	bl	8008bfc <HAL_RCC_GetPCLK2Freq>
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	4613      	mov	r3, r2
 8011cd6:	009b      	lsls	r3, r3, #2
 8011cd8:	4413      	add	r3, r2
 8011cda:	009a      	lsls	r2, r3, #2
 8011cdc:	441a      	add	r2, r3
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	005b      	lsls	r3, r3, #1
 8011ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ce8:	4aa2      	ldr	r2, [pc, #648]	; (8011f74 <UART_SetConfig+0x352>)
 8011cea:	fba2 2303 	umull	r2, r3, r2, r3
 8011cee:	095b      	lsrs	r3, r3, #5
 8011cf0:	011d      	lsls	r5, r3, #4
 8011cf2:	f7f6 ff83 	bl	8008bfc <HAL_RCC_GetPCLK2Freq>
 8011cf6:	4602      	mov	r2, r0
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	009b      	lsls	r3, r3, #2
 8011cfc:	4413      	add	r3, r2
 8011cfe:	009a      	lsls	r2, r3, #2
 8011d00:	441a      	add	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	005b      	lsls	r3, r3, #1
 8011d08:	fbb2 f6f3 	udiv	r6, r2, r3
 8011d0c:	f7f6 ff76 	bl	8008bfc <HAL_RCC_GetPCLK2Freq>
 8011d10:	4602      	mov	r2, r0
 8011d12:	4613      	mov	r3, r2
 8011d14:	009b      	lsls	r3, r3, #2
 8011d16:	4413      	add	r3, r2
 8011d18:	009a      	lsls	r2, r3, #2
 8011d1a:	441a      	add	r2, r3
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	005b      	lsls	r3, r3, #1
 8011d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d26:	4a93      	ldr	r2, [pc, #588]	; (8011f74 <UART_SetConfig+0x352>)
 8011d28:	fba2 2303 	umull	r2, r3, r2, r3
 8011d2c:	095b      	lsrs	r3, r3, #5
 8011d2e:	2264      	movs	r2, #100	; 0x64
 8011d30:	fb02 f303 	mul.w	r3, r2, r3
 8011d34:	1af3      	subs	r3, r6, r3
 8011d36:	00db      	lsls	r3, r3, #3
 8011d38:	3332      	adds	r3, #50	; 0x32
 8011d3a:	4a8e      	ldr	r2, [pc, #568]	; (8011f74 <UART_SetConfig+0x352>)
 8011d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8011d40:	095b      	lsrs	r3, r3, #5
 8011d42:	005b      	lsls	r3, r3, #1
 8011d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011d48:	441d      	add	r5, r3
 8011d4a:	f7f6 ff57 	bl	8008bfc <HAL_RCC_GetPCLK2Freq>
 8011d4e:	4602      	mov	r2, r0
 8011d50:	4613      	mov	r3, r2
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	4413      	add	r3, r2
 8011d56:	009a      	lsls	r2, r3, #2
 8011d58:	441a      	add	r2, r3
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	005b      	lsls	r3, r3, #1
 8011d60:	fbb2 f6f3 	udiv	r6, r2, r3
 8011d64:	f7f6 ff4a 	bl	8008bfc <HAL_RCC_GetPCLK2Freq>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	4613      	mov	r3, r2
 8011d6c:	009b      	lsls	r3, r3, #2
 8011d6e:	4413      	add	r3, r2
 8011d70:	009a      	lsls	r2, r3, #2
 8011d72:	441a      	add	r2, r3
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	685b      	ldr	r3, [r3, #4]
 8011d78:	005b      	lsls	r3, r3, #1
 8011d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d7e:	4a7d      	ldr	r2, [pc, #500]	; (8011f74 <UART_SetConfig+0x352>)
 8011d80:	fba2 2303 	umull	r2, r3, r2, r3
 8011d84:	095b      	lsrs	r3, r3, #5
 8011d86:	2264      	movs	r2, #100	; 0x64
 8011d88:	fb02 f303 	mul.w	r3, r2, r3
 8011d8c:	1af3      	subs	r3, r6, r3
 8011d8e:	00db      	lsls	r3, r3, #3
 8011d90:	3332      	adds	r3, #50	; 0x32
 8011d92:	4a78      	ldr	r2, [pc, #480]	; (8011f74 <UART_SetConfig+0x352>)
 8011d94:	fba2 2303 	umull	r2, r3, r2, r3
 8011d98:	095b      	lsrs	r3, r3, #5
 8011d9a:	f003 0307 	and.w	r3, r3, #7
 8011d9e:	442b      	add	r3, r5
 8011da0:	60a3      	str	r3, [r4, #8]
 8011da2:	e155      	b.n	8012050 <UART_SetConfig+0x42e>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681c      	ldr	r4, [r3, #0]
 8011da8:	f7f6 ff14 	bl	8008bd4 <HAL_RCC_GetPCLK1Freq>
 8011dac:	4602      	mov	r2, r0
 8011dae:	4613      	mov	r3, r2
 8011db0:	009b      	lsls	r3, r3, #2
 8011db2:	4413      	add	r3, r2
 8011db4:	009a      	lsls	r2, r3, #2
 8011db6:	441a      	add	r2, r3
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	685b      	ldr	r3, [r3, #4]
 8011dbc:	005b      	lsls	r3, r3, #1
 8011dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8011dc2:	4a6c      	ldr	r2, [pc, #432]	; (8011f74 <UART_SetConfig+0x352>)
 8011dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8011dc8:	095b      	lsrs	r3, r3, #5
 8011dca:	011d      	lsls	r5, r3, #4
 8011dcc:	f7f6 ff02 	bl	8008bd4 <HAL_RCC_GetPCLK1Freq>
 8011dd0:	4602      	mov	r2, r0
 8011dd2:	4613      	mov	r3, r2
 8011dd4:	009b      	lsls	r3, r3, #2
 8011dd6:	4413      	add	r3, r2
 8011dd8:	009a      	lsls	r2, r3, #2
 8011dda:	441a      	add	r2, r3
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	005b      	lsls	r3, r3, #1
 8011de2:	fbb2 f6f3 	udiv	r6, r2, r3
 8011de6:	f7f6 fef5 	bl	8008bd4 <HAL_RCC_GetPCLK1Freq>
 8011dea:	4602      	mov	r2, r0
 8011dec:	4613      	mov	r3, r2
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	4413      	add	r3, r2
 8011df2:	009a      	lsls	r2, r3, #2
 8011df4:	441a      	add	r2, r3
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	005b      	lsls	r3, r3, #1
 8011dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e00:	4a5c      	ldr	r2, [pc, #368]	; (8011f74 <UART_SetConfig+0x352>)
 8011e02:	fba2 2303 	umull	r2, r3, r2, r3
 8011e06:	095b      	lsrs	r3, r3, #5
 8011e08:	2264      	movs	r2, #100	; 0x64
 8011e0a:	fb02 f303 	mul.w	r3, r2, r3
 8011e0e:	1af3      	subs	r3, r6, r3
 8011e10:	00db      	lsls	r3, r3, #3
 8011e12:	3332      	adds	r3, #50	; 0x32
 8011e14:	4a57      	ldr	r2, [pc, #348]	; (8011f74 <UART_SetConfig+0x352>)
 8011e16:	fba2 2303 	umull	r2, r3, r2, r3
 8011e1a:	095b      	lsrs	r3, r3, #5
 8011e1c:	005b      	lsls	r3, r3, #1
 8011e1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011e22:	441d      	add	r5, r3
 8011e24:	f7f6 fed6 	bl	8008bd4 <HAL_RCC_GetPCLK1Freq>
 8011e28:	4602      	mov	r2, r0
 8011e2a:	4613      	mov	r3, r2
 8011e2c:	009b      	lsls	r3, r3, #2
 8011e2e:	4413      	add	r3, r2
 8011e30:	009a      	lsls	r2, r3, #2
 8011e32:	441a      	add	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	685b      	ldr	r3, [r3, #4]
 8011e38:	005b      	lsls	r3, r3, #1
 8011e3a:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e3e:	f7f6 fec9 	bl	8008bd4 <HAL_RCC_GetPCLK1Freq>
 8011e42:	4602      	mov	r2, r0
 8011e44:	4613      	mov	r3, r2
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	4413      	add	r3, r2
 8011e4a:	009a      	lsls	r2, r3, #2
 8011e4c:	441a      	add	r2, r3
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	005b      	lsls	r3, r3, #1
 8011e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e58:	4a46      	ldr	r2, [pc, #280]	; (8011f74 <UART_SetConfig+0x352>)
 8011e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8011e5e:	095b      	lsrs	r3, r3, #5
 8011e60:	2264      	movs	r2, #100	; 0x64
 8011e62:	fb02 f303 	mul.w	r3, r2, r3
 8011e66:	1af3      	subs	r3, r6, r3
 8011e68:	00db      	lsls	r3, r3, #3
 8011e6a:	3332      	adds	r3, #50	; 0x32
 8011e6c:	4a41      	ldr	r2, [pc, #260]	; (8011f74 <UART_SetConfig+0x352>)
 8011e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8011e72:	095b      	lsrs	r3, r3, #5
 8011e74:	f003 0307 	and.w	r3, r3, #7
 8011e78:	442b      	add	r3, r5
 8011e7a:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8011e7c:	e0e8      	b.n	8012050 <UART_SetConfig+0x42e>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	4a3a      	ldr	r2, [pc, #232]	; (8011f6c <UART_SetConfig+0x34a>)
 8011e84:	4293      	cmp	r3, r2
 8011e86:	d004      	beq.n	8011e92 <UART_SetConfig+0x270>
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	4a38      	ldr	r2, [pc, #224]	; (8011f70 <UART_SetConfig+0x34e>)
 8011e8e:	4293      	cmp	r3, r2
 8011e90:	d172      	bne.n	8011f78 <UART_SetConfig+0x356>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681c      	ldr	r4, [r3, #0]
 8011e96:	f7f6 feb1 	bl	8008bfc <HAL_RCC_GetPCLK2Freq>
 8011e9a:	4602      	mov	r2, r0
 8011e9c:	4613      	mov	r3, r2
 8011e9e:	009b      	lsls	r3, r3, #2
 8011ea0:	4413      	add	r3, r2
 8011ea2:	009a      	lsls	r2, r3, #2
 8011ea4:	441a      	add	r2, r3
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	685b      	ldr	r3, [r3, #4]
 8011eaa:	009b      	lsls	r3, r3, #2
 8011eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8011eb0:	4a30      	ldr	r2, [pc, #192]	; (8011f74 <UART_SetConfig+0x352>)
 8011eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8011eb6:	095b      	lsrs	r3, r3, #5
 8011eb8:	011d      	lsls	r5, r3, #4
 8011eba:	f7f6 fe9f 	bl	8008bfc <HAL_RCC_GetPCLK2Freq>
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	4613      	mov	r3, r2
 8011ec2:	009b      	lsls	r3, r3, #2
 8011ec4:	4413      	add	r3, r2
 8011ec6:	009a      	lsls	r2, r3, #2
 8011ec8:	441a      	add	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ed4:	f7f6 fe92 	bl	8008bfc <HAL_RCC_GetPCLK2Freq>
 8011ed8:	4602      	mov	r2, r0
 8011eda:	4613      	mov	r3, r2
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	4413      	add	r3, r2
 8011ee0:	009a      	lsls	r2, r3, #2
 8011ee2:	441a      	add	r2, r3
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	009b      	lsls	r3, r3, #2
 8011eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8011eee:	4a21      	ldr	r2, [pc, #132]	; (8011f74 <UART_SetConfig+0x352>)
 8011ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8011ef4:	095b      	lsrs	r3, r3, #5
 8011ef6:	2264      	movs	r2, #100	; 0x64
 8011ef8:	fb02 f303 	mul.w	r3, r2, r3
 8011efc:	1af3      	subs	r3, r6, r3
 8011efe:	011b      	lsls	r3, r3, #4
 8011f00:	3332      	adds	r3, #50	; 0x32
 8011f02:	4a1c      	ldr	r2, [pc, #112]	; (8011f74 <UART_SetConfig+0x352>)
 8011f04:	fba2 2303 	umull	r2, r3, r2, r3
 8011f08:	095b      	lsrs	r3, r3, #5
 8011f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f0e:	441d      	add	r5, r3
 8011f10:	f7f6 fe74 	bl	8008bfc <HAL_RCC_GetPCLK2Freq>
 8011f14:	4602      	mov	r2, r0
 8011f16:	4613      	mov	r3, r2
 8011f18:	009b      	lsls	r3, r3, #2
 8011f1a:	4413      	add	r3, r2
 8011f1c:	009a      	lsls	r2, r3, #2
 8011f1e:	441a      	add	r2, r3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	009b      	lsls	r3, r3, #2
 8011f26:	fbb2 f6f3 	udiv	r6, r2, r3
 8011f2a:	f7f6 fe67 	bl	8008bfc <HAL_RCC_GetPCLK2Freq>
 8011f2e:	4602      	mov	r2, r0
 8011f30:	4613      	mov	r3, r2
 8011f32:	009b      	lsls	r3, r3, #2
 8011f34:	4413      	add	r3, r2
 8011f36:	009a      	lsls	r2, r3, #2
 8011f38:	441a      	add	r2, r3
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	009b      	lsls	r3, r3, #2
 8011f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f44:	4a0b      	ldr	r2, [pc, #44]	; (8011f74 <UART_SetConfig+0x352>)
 8011f46:	fba2 2303 	umull	r2, r3, r2, r3
 8011f4a:	095b      	lsrs	r3, r3, #5
 8011f4c:	2264      	movs	r2, #100	; 0x64
 8011f4e:	fb02 f303 	mul.w	r3, r2, r3
 8011f52:	1af3      	subs	r3, r6, r3
 8011f54:	011b      	lsls	r3, r3, #4
 8011f56:	3332      	adds	r3, #50	; 0x32
 8011f58:	4a06      	ldr	r2, [pc, #24]	; (8011f74 <UART_SetConfig+0x352>)
 8011f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8011f5e:	095b      	lsrs	r3, r3, #5
 8011f60:	f003 030f 	and.w	r3, r3, #15
 8011f64:	442b      	add	r3, r5
 8011f66:	60a3      	str	r3, [r4, #8]
 8011f68:	e072      	b.n	8012050 <UART_SetConfig+0x42e>
 8011f6a:	bf00      	nop
 8011f6c:	40011000 	.word	0x40011000
 8011f70:	40011400 	.word	0x40011400
 8011f74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681c      	ldr	r4, [r3, #0]
 8011f7c:	f7f6 fe2a 	bl	8008bd4 <HAL_RCC_GetPCLK1Freq>
 8011f80:	4602      	mov	r2, r0
 8011f82:	4613      	mov	r3, r2
 8011f84:	009b      	lsls	r3, r3, #2
 8011f86:	4413      	add	r3, r2
 8011f88:	009a      	lsls	r2, r3, #2
 8011f8a:	441a      	add	r2, r3
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	685b      	ldr	r3, [r3, #4]
 8011f90:	009b      	lsls	r3, r3, #2
 8011f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f96:	4a30      	ldr	r2, [pc, #192]	; (8012058 <UART_SetConfig+0x436>)
 8011f98:	fba2 2303 	umull	r2, r3, r2, r3
 8011f9c:	095b      	lsrs	r3, r3, #5
 8011f9e:	011d      	lsls	r5, r3, #4
 8011fa0:	f7f6 fe18 	bl	8008bd4 <HAL_RCC_GetPCLK1Freq>
 8011fa4:	4602      	mov	r2, r0
 8011fa6:	4613      	mov	r3, r2
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	4413      	add	r3, r2
 8011fac:	009a      	lsls	r2, r3, #2
 8011fae:	441a      	add	r2, r3
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	009b      	lsls	r3, r3, #2
 8011fb6:	fbb2 f6f3 	udiv	r6, r2, r3
 8011fba:	f7f6 fe0b 	bl	8008bd4 <HAL_RCC_GetPCLK1Freq>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	4613      	mov	r3, r2
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	4413      	add	r3, r2
 8011fc6:	009a      	lsls	r2, r3, #2
 8011fc8:	441a      	add	r2, r3
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	009b      	lsls	r3, r3, #2
 8011fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011fd4:	4a20      	ldr	r2, [pc, #128]	; (8012058 <UART_SetConfig+0x436>)
 8011fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8011fda:	095b      	lsrs	r3, r3, #5
 8011fdc:	2264      	movs	r2, #100	; 0x64
 8011fde:	fb02 f303 	mul.w	r3, r2, r3
 8011fe2:	1af3      	subs	r3, r6, r3
 8011fe4:	011b      	lsls	r3, r3, #4
 8011fe6:	3332      	adds	r3, #50	; 0x32
 8011fe8:	4a1b      	ldr	r2, [pc, #108]	; (8012058 <UART_SetConfig+0x436>)
 8011fea:	fba2 2303 	umull	r2, r3, r2, r3
 8011fee:	095b      	lsrs	r3, r3, #5
 8011ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ff4:	441d      	add	r5, r3
 8011ff6:	f7f6 fded 	bl	8008bd4 <HAL_RCC_GetPCLK1Freq>
 8011ffa:	4602      	mov	r2, r0
 8011ffc:	4613      	mov	r3, r2
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	4413      	add	r3, r2
 8012002:	009a      	lsls	r2, r3, #2
 8012004:	441a      	add	r2, r3
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	685b      	ldr	r3, [r3, #4]
 801200a:	009b      	lsls	r3, r3, #2
 801200c:	fbb2 f6f3 	udiv	r6, r2, r3
 8012010:	f7f6 fde0 	bl	8008bd4 <HAL_RCC_GetPCLK1Freq>
 8012014:	4602      	mov	r2, r0
 8012016:	4613      	mov	r3, r2
 8012018:	009b      	lsls	r3, r3, #2
 801201a:	4413      	add	r3, r2
 801201c:	009a      	lsls	r2, r3, #2
 801201e:	441a      	add	r2, r3
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	009b      	lsls	r3, r3, #2
 8012026:	fbb2 f3f3 	udiv	r3, r2, r3
 801202a:	4a0b      	ldr	r2, [pc, #44]	; (8012058 <UART_SetConfig+0x436>)
 801202c:	fba2 2303 	umull	r2, r3, r2, r3
 8012030:	095b      	lsrs	r3, r3, #5
 8012032:	2264      	movs	r2, #100	; 0x64
 8012034:	fb02 f303 	mul.w	r3, r2, r3
 8012038:	1af3      	subs	r3, r6, r3
 801203a:	011b      	lsls	r3, r3, #4
 801203c:	3332      	adds	r3, #50	; 0x32
 801203e:	4a06      	ldr	r2, [pc, #24]	; (8012058 <UART_SetConfig+0x436>)
 8012040:	fba2 2303 	umull	r2, r3, r2, r3
 8012044:	095b      	lsrs	r3, r3, #5
 8012046:	f003 030f 	and.w	r3, r3, #15
 801204a:	442b      	add	r3, r5
 801204c:	60a3      	str	r3, [r4, #8]
}
 801204e:	e7ff      	b.n	8012050 <UART_SetConfig+0x42e>
 8012050:	bf00      	nop
 8012052:	3714      	adds	r7, #20
 8012054:	46bd      	mov	sp, r7
 8012056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012058:	51eb851f 	.word	0x51eb851f

0801205c <handleResp>:
static void MX_TIM1_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void handleResp(uint8_t res) {
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	4603      	mov	r3, r0
 8012064:	71fb      	strb	r3, [r7, #7]
	switch (res) {
 8012066:	79fb      	ldrb	r3, [r7, #7]
 8012068:	2b06      	cmp	r3, #6
 801206a:	d82d      	bhi.n	80120c8 <handleResp+0x6c>
 801206c:	a201      	add	r2, pc, #4	; (adr r2, 8012074 <handleResp+0x18>)
 801206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012072:	bf00      	nop
 8012074:	08012091 	.word	0x08012091
 8012078:	08012099 	.word	0x08012099
 801207c:	080120a1 	.word	0x080120a1
 8012080:	080120a9 	.word	0x080120a9
 8012084:	080120b1 	.word	0x080120b1
 8012088:	080120b9 	.word	0x080120b9
 801208c:	080120c1 	.word	0x080120c1
	case LORA_OK:
		vypis("[LoRa] OK\r\n");
 8012090:	4813      	ldr	r0, [pc, #76]	; (80120e0 <handleResp+0x84>)
 8012092:	f001 fb05 	bl	80136a0 <vypis>
		break;
 8012096:	e01e      	b.n	80120d6 <handleResp+0x7a>
	case LORA_CRC_ERROR:
		vypis("[LoRa] CRC Error\r\n");
 8012098:	4812      	ldr	r0, [pc, #72]	; (80120e4 <handleResp+0x88>)
 801209a:	f001 fb01 	bl	80136a0 <vypis>
		break;
 801209e:	e01a      	b.n	80120d6 <handleResp+0x7a>
	case LORA_TIMEOUT:
		vypis("[LoRa] Timeout\r\n");
 80120a0:	4811      	ldr	r0, [pc, #68]	; (80120e8 <handleResp+0x8c>)
 80120a2:	f001 fafd 	bl	80136a0 <vypis>
		break;
 80120a6:	e016      	b.n	80120d6 <handleResp+0x7a>
	case LORA_INVALID_HEADER:
		vypis("[LoRa] Invalid header\r\n");
 80120a8:	4810      	ldr	r0, [pc, #64]	; (80120ec <handleResp+0x90>)
 80120aa:	f001 faf9 	bl	80136a0 <vypis>
		break;
 80120ae:	e012      	b.n	80120d6 <handleResp+0x7a>
	case LORA_ERROR:
		vypis("[LoRa] Error\r\n");
 80120b0:	480f      	ldr	r0, [pc, #60]	; (80120f0 <handleResp+0x94>)
 80120b2:	f001 faf5 	bl	80136a0 <vypis>
		break;
 80120b6:	e00e      	b.n	80120d6 <handleResp+0x7a>
	case LORA_BUSY:
		vypis("[LoRa] Busy\r\n");
 80120b8:	480e      	ldr	r0, [pc, #56]	; (80120f4 <handleResp+0x98>)
 80120ba:	f001 faf1 	bl	80136a0 <vypis>
		break;
 80120be:	e00a      	b.n	80120d6 <handleResp+0x7a>
	case LORA_EMPTY:
		vypis("[LoRa] Empty\r\n");
 80120c0:	480d      	ldr	r0, [pc, #52]	; (80120f8 <handleResp+0x9c>)
 80120c2:	f001 faed 	bl	80136a0 <vypis>
		break;
 80120c6:	e006      	b.n	80120d6 <handleResp+0x7a>
	default:
		vypis("[LoRa] Unknown response: " + res);
 80120c8:	79fb      	ldrb	r3, [r7, #7]
 80120ca:	4a0c      	ldr	r2, [pc, #48]	; (80120fc <handleResp+0xa0>)
 80120cc:	4413      	add	r3, r2
 80120ce:	4618      	mov	r0, r3
 80120d0:	f001 fae6 	bl	80136a0 <vypis>
		break;
 80120d4:	bf00      	nop
	}

}
 80120d6:	bf00      	nop
 80120d8:	3708      	adds	r7, #8
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
 80120de:	bf00      	nop
 80120e0:	08015ab4 	.word	0x08015ab4
 80120e4:	08015ac0 	.word	0x08015ac0
 80120e8:	08015ad4 	.word	0x08015ad4
 80120ec:	08015ae8 	.word	0x08015ae8
 80120f0:	08015b00 	.word	0x08015b00
 80120f4:	08015b10 	.word	0x08015b10
 80120f8:	08015b20 	.word	0x08015b20
 80120fc:	08015b30 	.word	0x08015b30

08012100 <addToMsg>:

char * addToMsg(char dst[], const char src[]) {
 8012100:	b590      	push	{r4, r7, lr}
 8012102:	b085      	sub	sp, #20
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	6039      	str	r1, [r7, #0]
	int sizeNewArray = strlen(dst) + strlen(src) + 1;
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f002 fe5e 	bl	8014dcc <strlen>
 8012110:	4604      	mov	r4, r0
 8012112:	6838      	ldr	r0, [r7, #0]
 8012114:	f002 fe5a 	bl	8014dcc <strlen>
 8012118:	4603      	mov	r3, r0
 801211a:	4423      	add	r3, r4
 801211c:	3301      	adds	r3, #1
 801211e:	60fb      	str	r3, [r7, #12]
	char * newJSON = (char *) malloc(sizeNewArray);
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	4618      	mov	r0, r3
 8012124:	f003 f882 	bl	801522c <malloc>
 8012128:	4603      	mov	r3, r0
 801212a:	60bb      	str	r3, [r7, #8]
	strcpy(newJSON, dst);
 801212c:	6879      	ldr	r1, [r7, #4]
 801212e:	68b8      	ldr	r0, [r7, #8]
 8012130:	f003 f96c 	bl	801540c <strcpy>
	strcpy(newJSON + strlen(dst), src);
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f002 fe49 	bl	8014dcc <strlen>
 801213a:	4602      	mov	r2, r0
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	4413      	add	r3, r2
 8012140:	6839      	ldr	r1, [r7, #0]
 8012142:	4618      	mov	r0, r3
 8012144:	f003 f962 	bl	801540c <strcpy>
	free(dst);	// free old memory
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f003 f877 	bl	801523c <free>
	return newJSON;
 801214e:	68bb      	ldr	r3, [r7, #8]
}
 8012150:	4618      	mov	r0, r3
 8012152:	3714      	adds	r7, #20
 8012154:	46bd      	mov	sp, r7
 8012156:	bd90      	pop	{r4, r7, pc}

08012158 <getCharCount>:

uint16_t getCharCount(uint8_t *msg, uint8_t *msg_len, uint8_t ch) {
 8012158:	b480      	push	{r7}
 801215a:	b087      	sub	sp, #28
 801215c:	af00      	add	r7, sp, #0
 801215e:	60f8      	str	r0, [r7, #12]
 8012160:	60b9      	str	r1, [r7, #8]
 8012162:	4613      	mov	r3, r2
 8012164:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8012166:	2300      	movs	r3, #0
 8012168:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < *msg_len; i++) {
 801216a:	2300      	movs	r3, #0
 801216c:	613b      	str	r3, [r7, #16]
 801216e:	e00c      	b.n	801218a <getCharCount+0x32>
		if (*(msg + i) == ch) {
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	68fa      	ldr	r2, [r7, #12]
 8012174:	4413      	add	r3, r2
 8012176:	781b      	ldrb	r3, [r3, #0]
 8012178:	79fa      	ldrb	r2, [r7, #7]
 801217a:	429a      	cmp	r2, r3
 801217c:	d102      	bne.n	8012184 <getCharCount+0x2c>
			count++;
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	3301      	adds	r3, #1
 8012182:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < *msg_len; i++) {
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	3301      	adds	r3, #1
 8012188:	613b      	str	r3, [r7, #16]
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	461a      	mov	r2, r3
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	429a      	cmp	r2, r3
 8012194:	dcec      	bgt.n	8012170 <getCharCount+0x18>
		}
	}
	return count;
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	b29b      	uxth	r3, r3
}
 801219a:	4618      	mov	r0, r3
 801219c:	371c      	adds	r7, #28
 801219e:	46bd      	mov	sp, r7
 80121a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a4:	4770      	bx	lr

080121a6 <removeDoubles>:

uint8_t * removeDoubles(uint8_t *msg, uint16_t *msg_len) {
 80121a6:	b590      	push	{r4, r7, lr}
 80121a8:	b087      	sub	sp, #28
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
 80121ae:	6039      	str	r1, [r7, #0]
	uint16_t specCharCount = getCharCount(msg, msg_len, 0xfe)
 80121b0:	22fe      	movs	r2, #254	; 0xfe
 80121b2:	6839      	ldr	r1, [r7, #0]
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7ff ffcf 	bl	8012158 <getCharCount>
 80121ba:	4603      	mov	r3, r0
 80121bc:	461c      	mov	r4, r3
			+ getCharCount(msg, msg_len, 0xff);
 80121be:	22ff      	movs	r2, #255	; 0xff
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f7ff ffc8 	bl	8012158 <getCharCount>
 80121c8:	4603      	mov	r3, r0
	uint16_t specCharCount = getCharCount(msg, msg_len, 0xfe)
 80121ca:	4423      	add	r3, r4
 80121cc:	827b      	strh	r3, [r7, #18]
	uint16_t new_msg_size = (*msg_len) - 6 - ((specCharCount - 2) / 2);	// old size - 2 border chars - doubled
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	881a      	ldrh	r2, [r3, #0]
 80121d2:	8a7b      	ldrh	r3, [r7, #18]
 80121d4:	3b02      	subs	r3, #2
 80121d6:	0fd9      	lsrs	r1, r3, #31
 80121d8:	440b      	add	r3, r1
 80121da:	105b      	asrs	r3, r3, #1
 80121dc:	425b      	negs	r3, r3
 80121de:	b29b      	uxth	r3, r3
 80121e0:	4413      	add	r3, r2
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	3b06      	subs	r3, #6
 80121e6:	823b      	strh	r3, [r7, #16]
	uint8_t * new_msg = (uint8_t *) malloc(new_msg_size);
 80121e8:	8a3b      	ldrh	r3, [r7, #16]
 80121ea:	4618      	mov	r0, r3
 80121ec:	f003 f81e 	bl	801522c <malloc>
 80121f0:	4603      	mov	r3, r0
 80121f2:	60fb      	str	r3, [r7, #12]
	uint16_t newIndex = 0;
 80121f4:	2300      	movs	r3, #0
 80121f6:	82fb      	strh	r3, [r7, #22]
	uint16_t oldIndex = 0;
 80121f8:	2300      	movs	r3, #0
 80121fa:	82bb      	strh	r3, [r7, #20]
	if ((*(msg) == 0x00) && (*(msg + 1) == 0xfe) && (*(msg + 2) == 0x00)) {
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d159      	bne.n	80122b8 <removeDoubles+0x112>
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	3301      	adds	r3, #1
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	2bfe      	cmp	r3, #254	; 0xfe
 801220c:	d154      	bne.n	80122b8 <removeDoubles+0x112>
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	3302      	adds	r3, #2
 8012212:	781b      	ldrb	r3, [r3, #0]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d14f      	bne.n	80122b8 <removeDoubles+0x112>
		oldIndex = 3;
 8012218:	2303      	movs	r3, #3
 801221a:	82bb      	strh	r3, [r7, #20]
		while (oldIndex < (*msg_len) - 3) {
 801221c:	e045      	b.n	80122aa <removeDoubles+0x104>
			if ((*(msg + oldIndex) == 0xff)
 801221e:	8abb      	ldrh	r3, [r7, #20]
 8012220:	687a      	ldr	r2, [r7, #4]
 8012222:	4413      	add	r3, r2
 8012224:	781b      	ldrb	r3, [r3, #0]
 8012226:	2bff      	cmp	r3, #255	; 0xff
 8012228:	d115      	bne.n	8012256 <removeDoubles+0xb0>
					&& (*(msg + oldIndex + 1) == 0xff)) {
 801222a:	8abb      	ldrh	r3, [r7, #20]
 801222c:	3301      	adds	r3, #1
 801222e:	687a      	ldr	r2, [r7, #4]
 8012230:	4413      	add	r3, r2
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	2bff      	cmp	r3, #255	; 0xff
 8012236:	d10e      	bne.n	8012256 <removeDoubles+0xb0>
				new_msg[newIndex++] = *(msg + oldIndex);
 8012238:	8afb      	ldrh	r3, [r7, #22]
 801223a:	1c5a      	adds	r2, r3, #1
 801223c:	82fa      	strh	r2, [r7, #22]
 801223e:	461a      	mov	r2, r3
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	4413      	add	r3, r2
 8012244:	8aba      	ldrh	r2, [r7, #20]
 8012246:	6879      	ldr	r1, [r7, #4]
 8012248:	440a      	add	r2, r1
 801224a:	7812      	ldrb	r2, [r2, #0]
 801224c:	701a      	strb	r2, [r3, #0]
				oldIndex += 2;
 801224e:	8abb      	ldrh	r3, [r7, #20]
 8012250:	3302      	adds	r3, #2
 8012252:	82bb      	strh	r3, [r7, #20]
 8012254:	e029      	b.n	80122aa <removeDoubles+0x104>
			} else if ((*(msg + oldIndex) == 0xfe)
 8012256:	8abb      	ldrh	r3, [r7, #20]
 8012258:	687a      	ldr	r2, [r7, #4]
 801225a:	4413      	add	r3, r2
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	2bfe      	cmp	r3, #254	; 0xfe
 8012260:	d115      	bne.n	801228e <removeDoubles+0xe8>
					&& (*(msg + oldIndex + 1) == 0xfe)) {
 8012262:	8abb      	ldrh	r3, [r7, #20]
 8012264:	3301      	adds	r3, #1
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	4413      	add	r3, r2
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	2bfe      	cmp	r3, #254	; 0xfe
 801226e:	d10e      	bne.n	801228e <removeDoubles+0xe8>
				new_msg[newIndex++] = *(msg + oldIndex);
 8012270:	8afb      	ldrh	r3, [r7, #22]
 8012272:	1c5a      	adds	r2, r3, #1
 8012274:	82fa      	strh	r2, [r7, #22]
 8012276:	461a      	mov	r2, r3
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	4413      	add	r3, r2
 801227c:	8aba      	ldrh	r2, [r7, #20]
 801227e:	6879      	ldr	r1, [r7, #4]
 8012280:	440a      	add	r2, r1
 8012282:	7812      	ldrb	r2, [r2, #0]
 8012284:	701a      	strb	r2, [r3, #0]
				oldIndex += 2;
 8012286:	8abb      	ldrh	r3, [r7, #20]
 8012288:	3302      	adds	r3, #2
 801228a:	82bb      	strh	r3, [r7, #20]
 801228c:	e00d      	b.n	80122aa <removeDoubles+0x104>
			} else {
				new_msg[newIndex++] = *(msg + oldIndex);
 801228e:	8afb      	ldrh	r3, [r7, #22]
 8012290:	1c5a      	adds	r2, r3, #1
 8012292:	82fa      	strh	r2, [r7, #22]
 8012294:	461a      	mov	r2, r3
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	4413      	add	r3, r2
 801229a:	8aba      	ldrh	r2, [r7, #20]
 801229c:	6879      	ldr	r1, [r7, #4]
 801229e:	440a      	add	r2, r1
 80122a0:	7812      	ldrb	r2, [r2, #0]
 80122a2:	701a      	strb	r2, [r3, #0]
				oldIndex++;
 80122a4:	8abb      	ldrh	r3, [r7, #20]
 80122a6:	3301      	adds	r3, #1
 80122a8:	82bb      	strh	r3, [r7, #20]
		while (oldIndex < (*msg_len) - 3) {
 80122aa:	8aba      	ldrh	r2, [r7, #20]
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	881b      	ldrh	r3, [r3, #0]
 80122b0:	3b03      	subs	r3, #3
 80122b2:	429a      	cmp	r2, r3
 80122b4:	dbb3      	blt.n	801221e <removeDoubles+0x78>
	if ((*(msg) == 0x00) && (*(msg + 1) == 0xfe) && (*(msg + 2) == 0x00)) {
 80122b6:	e001      	b.n	80122bc <removeDoubles+0x116>
	} else {
		//TODO: Initial chars are missing
		//nevypisuj nic + skonci skladanie JSONa
		// dorobit JSON ak nastala chyba pri skladani JSONa
		//vypis("Missing Init characters of packet\r\n");
		return msg;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	e003      	b.n	80122c4 <removeDoubles+0x11e>
	}

	*msg_len = new_msg_size;
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	8a3a      	ldrh	r2, [r7, #16]
 80122c0:	801a      	strh	r2, [r3, #0]
	// TODO: free ??
	//free(msg);	// do not free msg, bcs its global variable
	return new_msg;
 80122c2:	68fb      	ldr	r3, [r7, #12]
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	371c      	adds	r7, #28
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd90      	pop	{r4, r7, pc}

080122cc <parseMessage>:

char* parseMessage(uint8_t *msg, uint16_t *msg_len) {
 80122cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122d0:	b0e0      	sub	sp, #384	; 0x180
 80122d2:	af0c      	add	r7, sp, #48	; 0x30
 80122d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80122d8:	6018      	str	r0, [r3, #0]
 80122da:	f107 0320 	add.w	r3, r7, #32
 80122de:	6019      	str	r1, [r3, #0]
	// TODO: msg is global variable and removeDoubles realloc this variable. Use local variable or do not reallocate
	hcSentenceProcessing = 1;
 80122e0:	4b9b      	ldr	r3, [pc, #620]	; (8012550 <parseMessage+0x284>)
 80122e2:	2201      	movs	r2, #1
 80122e4:	701a      	strb	r2, [r3, #0]
	 sprintf(buff2, "|%d|", msg[i]);
	 vypis(buff2);
	 }
	 vypis("\r\n");
	 */
	uint16_t oldSize = *msg_len;
 80122e6:	f107 0320 	add.w	r3, r7, #32
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	881b      	ldrh	r3, [r3, #0]
 80122ee:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	msg = removeDoubles(msg, msg_len);
 80122f2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80122f6:	f107 0220 	add.w	r2, r7, #32
 80122fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80122fe:	6811      	ldr	r1, [r2, #0]
 8012300:	6818      	ldr	r0, [r3, #0]
 8012302:	f7ff ff50 	bl	80121a6 <removeDoubles>
 8012306:	6020      	str	r0, [r4, #0]
	if (oldSize == *msg_len) {
 8012308:	f107 0320 	add.w	r3, r7, #32
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	881b      	ldrh	r3, [r3, #0]
 8012310:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8012314:	429a      	cmp	r2, r3
 8012316:	d10a      	bne.n	801232e <parseMessage+0x62>
		// TODO: dorobit

		HAL_UART_Transmit(&huart2, (uint8_t*) "{\"Id\":-1}\r\n", 11, 10);
 8012318:	230a      	movs	r3, #10
 801231a:	220b      	movs	r2, #11
 801231c:	498d      	ldr	r1, [pc, #564]	; (8012554 <parseMessage+0x288>)
 801231e:	488e      	ldr	r0, [pc, #568]	; (8012558 <parseMessage+0x28c>)
 8012320:	f7fe f97a 	bl	8010618 <HAL_UART_Transmit>
		hcSentenceProcessing = 0;
 8012324:	4b8a      	ldr	r3, [pc, #552]	; (8012550 <parseMessage+0x284>)
 8012326:	2200      	movs	r2, #0
 8012328:	701a      	strb	r2, [r3, #0]
 801232a:	f001 b841 	b.w	80133b0 <parseMessage+0x10e4>
	 char buff2[5] = { '\0', '\0', '\0', '\0', '\0' };
	 sprintf(buff2, "|%d|", msg[i]);
	 vypis(buff2);
	 }
	 */
	uint16_t index = 2;	// first 2 bytes are packet ID
 801232e:	2302      	movs	r3, #2
 8012330:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
	uint16_t ramecID = ((uint16_t) *(msg + 1) << 8) | *(msg);	// packet ID
 8012334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	3301      	adds	r3, #1
 801233c:	781b      	ldrb	r3, [r3, #0]
 801233e:	021b      	lsls	r3, r3, #8
 8012340:	b21a      	sxth	r2, r3
 8012342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	b21b      	sxth	r3, r3
 801234c:	4313      	orrs	r3, r2
 801234e:	b21b      	sxth	r3, r3
 8012350:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140

	char buff[260];	// buffer for internal JSON - { } - appended tu main JSON - [ { \"%d\":[ -
	char* JSON = malloc(sizeof(char));// final JSON to be printed to monitoring station
 8012354:	2001      	movs	r0, #1
 8012356:	f002 ff69 	bl	801522c <malloc>
 801235a:	4603      	mov	r3, r0
 801235c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	JSON[0] = 0;
 8012360:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012364:	2200      	movs	r2, #0
 8012366:	701a      	strb	r2, [r3, #0]
	uint16_t JSON_len = 0;		// count of sub data { }
 8012368:	2300      	movs	r3, #0
 801236a:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

	// start main JSON with [ { \"%d\":[
	char buffer[13];
	sprintf(buffer, "{\"Id\":%d,\"Data\":{", ramecID); // new [{\"Id\":%d,\"Data\":[ 		old: [{\"%d\":[
 801236e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8012372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012376:	4979      	ldr	r1, [pc, #484]	; (801255c <parseMessage+0x290>)
 8012378:	4618      	mov	r0, r3
 801237a:	f003 f823 	bl	80153c4 <siprintf>
	JSON = addToMsg(JSON, buffer);
 801237e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012382:	4619      	mov	r1, r3
 8012384:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012388:	f7ff feba 	bl	8012100 <addToMsg>
 801238c:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
	uint8_t switchError = 0; // error if key is out of CAN ID values / BAD PARSING
 8012390:	2300      	movs	r3, #0
 8012392:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145

	while ((index < *msg_len) && (switchError == 0)) {
 8012396:	f000 bfe4 	b.w	8013362 <parseMessage+0x1096>
		uint16_t key = ((uint16_t) *(msg + index + 1) << 8) | *(msg + index);
 801239a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801239e:	3301      	adds	r3, #1
 80123a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80123a4:	6812      	ldr	r2, [r2, #0]
 80123a6:	4413      	add	r3, r2
 80123a8:	781b      	ldrb	r3, [r3, #0]
 80123aa:	021b      	lsls	r3, r3, #8
 80123ac:	b21a      	sxth	r2, r3
 80123ae:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80123b2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80123b6:	6809      	ldr	r1, [r1, #0]
 80123b8:	440b      	add	r3, r1
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	b21b      	sxth	r3, r3
 80123be:	4313      	orrs	r3, r2
 80123c0:	b21b      	sxth	r3, r3
 80123c2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
		index++;
 80123c6:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80123ca:	3301      	adds	r3, #1
 80123cc:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
		switch (key) {
 80123d0:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80123d4:	3b05      	subs	r3, #5
 80123d6:	2b5a      	cmp	r3, #90	; 0x5a
 80123d8:	f200 87c0 	bhi.w	801335c <parseMessage+0x1090>
 80123dc:	a201      	add	r2, pc, #4	; (adr r2, 80123e4 <parseMessage+0x118>)
 80123de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123e2:	bf00      	nop
 80123e4:	08012561 	.word	0x08012561
 80123e8:	0801335d 	.word	0x0801335d
 80123ec:	0801335d 	.word	0x0801335d
 80123f0:	0801335d 	.word	0x0801335d
 80123f4:	0801335d 	.word	0x0801335d
 80123f8:	08012767 	.word	0x08012767
 80123fc:	0801335d 	.word	0x0801335d
 8012400:	0801335d 	.word	0x0801335d
 8012404:	0801335d 	.word	0x0801335d
 8012408:	0801335d 	.word	0x0801335d
 801240c:	08012835 	.word	0x08012835
 8012410:	0801335d 	.word	0x0801335d
 8012414:	0801335d 	.word	0x0801335d
 8012418:	0801335d 	.word	0x0801335d
 801241c:	0801335d 	.word	0x0801335d
 8012420:	0801291b 	.word	0x0801291b
 8012424:	0801335d 	.word	0x0801335d
 8012428:	0801335d 	.word	0x0801335d
 801242c:	0801335d 	.word	0x0801335d
 8012430:	0801335d 	.word	0x0801335d
 8012434:	08012ad9 	.word	0x08012ad9
 8012438:	0801335d 	.word	0x0801335d
 801243c:	0801335d 	.word	0x0801335d
 8012440:	0801335d 	.word	0x0801335d
 8012444:	0801335d 	.word	0x0801335d
 8012448:	08012b97 	.word	0x08012b97
 801244c:	0801335d 	.word	0x0801335d
 8012450:	0801335d 	.word	0x0801335d
 8012454:	0801335d 	.word	0x0801335d
 8012458:	0801335d 	.word	0x0801335d
 801245c:	0801335d 	.word	0x0801335d
 8012460:	0801335d 	.word	0x0801335d
 8012464:	0801335d 	.word	0x0801335d
 8012468:	0801335d 	.word	0x0801335d
 801246c:	0801335d 	.word	0x0801335d
 8012470:	08012c0d 	.word	0x08012c0d
 8012474:	0801335d 	.word	0x0801335d
 8012478:	0801335d 	.word	0x0801335d
 801247c:	0801335d 	.word	0x0801335d
 8012480:	0801335d 	.word	0x0801335d
 8012484:	0801335d 	.word	0x0801335d
 8012488:	0801335d 	.word	0x0801335d
 801248c:	0801335d 	.word	0x0801335d
 8012490:	0801335d 	.word	0x0801335d
 8012494:	0801335d 	.word	0x0801335d
 8012498:	08012ccb 	.word	0x08012ccb
 801249c:	0801335d 	.word	0x0801335d
 80124a0:	0801335d 	.word	0x0801335d
 80124a4:	0801335d 	.word	0x0801335d
 80124a8:	0801335d 	.word	0x0801335d
 80124ac:	0801335d 	.word	0x0801335d
 80124b0:	0801335d 	.word	0x0801335d
 80124b4:	0801335d 	.word	0x0801335d
 80124b8:	0801335d 	.word	0x0801335d
 80124bc:	0801335d 	.word	0x0801335d
 80124c0:	08012dc9 	.word	0x08012dc9
 80124c4:	0801335d 	.word	0x0801335d
 80124c8:	0801335d 	.word	0x0801335d
 80124cc:	0801335d 	.word	0x0801335d
 80124d0:	0801335d 	.word	0x0801335d
 80124d4:	0801335d 	.word	0x0801335d
 80124d8:	0801335d 	.word	0x0801335d
 80124dc:	0801335d 	.word	0x0801335d
 80124e0:	0801335d 	.word	0x0801335d
 80124e4:	0801335d 	.word	0x0801335d
 80124e8:	08012eb1 	.word	0x08012eb1
 80124ec:	0801335d 	.word	0x0801335d
 80124f0:	0801335d 	.word	0x0801335d
 80124f4:	0801335d 	.word	0x0801335d
 80124f8:	0801335d 	.word	0x0801335d
 80124fc:	0801335d 	.word	0x0801335d
 8012500:	0801335d 	.word	0x0801335d
 8012504:	0801335d 	.word	0x0801335d
 8012508:	0801335d 	.word	0x0801335d
 801250c:	0801335d 	.word	0x0801335d
 8012510:	08012ff9 	.word	0x08012ff9
 8012514:	0801335d 	.word	0x0801335d
 8012518:	0801335d 	.word	0x0801335d
 801251c:	0801335d 	.word	0x0801335d
 8012520:	0801335d 	.word	0x0801335d
 8012524:	0801335d 	.word	0x0801335d
 8012528:	0801335d 	.word	0x0801335d
 801252c:	0801335d 	.word	0x0801335d
 8012530:	0801335d 	.word	0x0801335d
 8012534:	0801335d 	.word	0x0801335d
 8012538:	08013181 	.word	0x08013181
 801253c:	0801335d 	.word	0x0801335d
 8012540:	0801335d 	.word	0x0801335d
 8012544:	0801335d 	.word	0x0801335d
 8012548:	0801335d 	.word	0x0801335d
 801254c:	08013275 	.word	0x08013275
 8012550:	2000008e 	.word	0x2000008e
 8012554:	08015b4c 	.word	0x08015b4c
 8012558:	20000ad8 	.word	0x20000ad8
 801255c:	08015b58 	.word	0x08015b58
		case 5:
			// GPS data
			if (JSON_len > 0) {
 8012560:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012564:	2b00      	cmp	r3, #0
 8012566:	d006      	beq.n	8012576 <parseMessage+0x2aa>
				JSON = addToMsg(JSON, ",\0");
 8012568:	49af      	ldr	r1, [pc, #700]	; (8012828 <parseMessage+0x55c>)
 801256a:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 801256e:	f7ff fdc7 	bl	8012100 <addToMsg>
 8012572:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff,
					"\"GPS_data\":{\"latitude\":%u,\"latitude_char\":\"%c\",\"longitude\":%u,\"longitude_char\":\"%c\",\"speed\":%u,\"course\":%u,\"altitude\":%ld}",
					(uint32_t) (*(msg + index + 1) << 24)
 8012576:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801257a:	3301      	adds	r3, #1
 801257c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012580:	6812      	ldr	r2, [r2, #0]
 8012582:	4413      	add	r3, r2
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	061b      	lsls	r3, r3, #24
 8012588:	4619      	mov	r1, r3
							| (uint32_t) (*(msg + index + 2) << 16)
 801258a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801258e:	3302      	adds	r3, #2
 8012590:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012594:	6812      	ldr	r2, [r2, #0]
 8012596:	4413      	add	r3, r2
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	041b      	lsls	r3, r3, #16
 801259c:	430b      	orrs	r3, r1
							| (uint32_t) (*(msg + index + 3) << 8)
 801259e:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 80125a2:	3203      	adds	r2, #3
 80125a4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80125a8:	6809      	ldr	r1, [r1, #0]
 80125aa:	440a      	add	r2, r1
 80125ac:	7812      	ldrb	r2, [r2, #0]
 80125ae:	0212      	lsls	r2, r2, #8
 80125b0:	4313      	orrs	r3, r2
							| (uint32_t) (*(msg + index + 4)),
 80125b2:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 80125b6:	3204      	adds	r2, #4
 80125b8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80125bc:	6809      	ldr	r1, [r1, #0]
 80125be:	440a      	add	r2, r1
 80125c0:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 80125c2:	ea43 0602 	orr.w	r6, r3, r2
					*(msg + index + 5),
 80125c6:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80125ca:	3305      	adds	r3, #5
 80125cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80125d0:	6812      	ldr	r2, [r2, #0]
 80125d2:	4413      	add	r3, r2
 80125d4:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 80125d6:	469e      	mov	lr, r3
					(uint32_t) (*(msg + index + 6) << 24)
 80125d8:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80125dc:	3306      	adds	r3, #6
 80125de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80125e2:	6812      	ldr	r2, [r2, #0]
 80125e4:	4413      	add	r3, r2
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	061b      	lsls	r3, r3, #24
 80125ea:	4619      	mov	r1, r3
							| (uint32_t) (*(msg + index + 7) << 16)
 80125ec:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80125f0:	3307      	adds	r3, #7
 80125f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80125f6:	6812      	ldr	r2, [r2, #0]
 80125f8:	4413      	add	r3, r2
 80125fa:	781b      	ldrb	r3, [r3, #0]
 80125fc:	041b      	lsls	r3, r3, #16
 80125fe:	430b      	orrs	r3, r1
							| (uint32_t) (*(msg + index + 8) << 8)
 8012600:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012604:	3208      	adds	r2, #8
 8012606:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801260a:	6809      	ldr	r1, [r1, #0]
 801260c:	440a      	add	r2, r1
 801260e:	7812      	ldrb	r2, [r2, #0]
 8012610:	0212      	lsls	r2, r2, #8
 8012612:	4313      	orrs	r3, r2
							| (uint32_t) (*(msg + index + 9)),
 8012614:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012618:	3209      	adds	r2, #9
 801261a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801261e:	6809      	ldr	r1, [r1, #0]
 8012620:	440a      	add	r2, r1
 8012622:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 8012624:	4313      	orrs	r3, r2
					*(msg + index + 10),
 8012626:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 801262a:	320a      	adds	r2, #10
 801262c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012630:	6809      	ldr	r1, [r1, #0]
 8012632:	440a      	add	r2, r1
 8012634:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 8012636:	61fa      	str	r2, [r7, #28]
					(uint32_t) (*(msg + index + 11) << 24)
 8012638:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 801263c:	320b      	adds	r2, #11
 801263e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012642:	6809      	ldr	r1, [r1, #0]
 8012644:	440a      	add	r2, r1
 8012646:	7812      	ldrb	r2, [r2, #0]
 8012648:	0612      	lsls	r2, r2, #24
 801264a:	4610      	mov	r0, r2
							| (uint32_t) (*(msg + index + 12) << 16)
 801264c:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012650:	320c      	adds	r2, #12
 8012652:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012656:	6809      	ldr	r1, [r1, #0]
 8012658:	440a      	add	r2, r1
 801265a:	7812      	ldrb	r2, [r2, #0]
 801265c:	0412      	lsls	r2, r2, #16
 801265e:	4302      	orrs	r2, r0
							| (uint32_t) (*(msg + index + 13) << 8)
 8012660:	f8b7 114e 	ldrh.w	r1, [r7, #334]	; 0x14e
 8012664:	310d      	adds	r1, #13
 8012666:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801266a:	6800      	ldr	r0, [r0, #0]
 801266c:	4401      	add	r1, r0
 801266e:	7809      	ldrb	r1, [r1, #0]
 8012670:	0209      	lsls	r1, r1, #8
 8012672:	430a      	orrs	r2, r1
							| (uint32_t) (*(msg + index + 15)),
 8012674:	f8b7 114e 	ldrh.w	r1, [r7, #334]	; 0x14e
 8012678:	310f      	adds	r1, #15
 801267a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801267e:	6800      	ldr	r0, [r0, #0]
 8012680:	4401      	add	r1, r0
 8012682:	7809      	ldrb	r1, [r1, #0]
			sprintf(buff,
 8012684:	430a      	orrs	r2, r1
					(uint32_t) (*(msg + index + 15) << 24)
 8012686:	f8b7 114e 	ldrh.w	r1, [r7, #334]	; 0x14e
 801268a:	310f      	adds	r1, #15
 801268c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012690:	6800      	ldr	r0, [r0, #0]
 8012692:	4401      	add	r1, r0
 8012694:	7809      	ldrb	r1, [r1, #0]
 8012696:	0609      	lsls	r1, r1, #24
 8012698:	460c      	mov	r4, r1
							| (uint32_t) (*(msg + index + 16) << 16)
 801269a:	f8b7 114e 	ldrh.w	r1, [r7, #334]	; 0x14e
 801269e:	3110      	adds	r1, #16
 80126a0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80126a4:	6800      	ldr	r0, [r0, #0]
 80126a6:	4401      	add	r1, r0
 80126a8:	7809      	ldrb	r1, [r1, #0]
 80126aa:	0409      	lsls	r1, r1, #16
 80126ac:	4321      	orrs	r1, r4
							| (uint32_t) (*(msg + index + 17) << 8)
 80126ae:	f8b7 014e 	ldrh.w	r0, [r7, #334]	; 0x14e
 80126b2:	3011      	adds	r0, #17
 80126b4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80126b8:	6824      	ldr	r4, [r4, #0]
 80126ba:	4420      	add	r0, r4
 80126bc:	7800      	ldrb	r0, [r0, #0]
 80126be:	0200      	lsls	r0, r0, #8
 80126c0:	4301      	orrs	r1, r0
							| (uint32_t) (*(msg + index + 18)),
 80126c2:	f8b7 014e 	ldrh.w	r0, [r7, #334]	; 0x14e
 80126c6:	3012      	adds	r0, #18
 80126c8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80126cc:	6824      	ldr	r4, [r4, #0]
 80126ce:	4420      	add	r0, r4
 80126d0:	7800      	ldrb	r0, [r0, #0]
			sprintf(buff,
 80126d2:	4301      	orrs	r1, r0
					(int32_t) (*(msg + index + 19) << 24)
 80126d4:	f8b7 014e 	ldrh.w	r0, [r7, #334]	; 0x14e
 80126d8:	3013      	adds	r0, #19
 80126da:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80126de:	6824      	ldr	r4, [r4, #0]
 80126e0:	4420      	add	r0, r4
 80126e2:	7800      	ldrb	r0, [r0, #0]
 80126e4:	0604      	lsls	r4, r0, #24
							| (int32_t) (*(msg + index + 20) << 16)
 80126e6:	f8b7 014e 	ldrh.w	r0, [r7, #334]	; 0x14e
 80126ea:	3014      	adds	r0, #20
 80126ec:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80126f0:	682d      	ldr	r5, [r5, #0]
 80126f2:	4428      	add	r0, r5
 80126f4:	7800      	ldrb	r0, [r0, #0]
 80126f6:	0400      	lsls	r0, r0, #16
 80126f8:	4304      	orrs	r4, r0
							| (int32_t) (*(msg + index + 21) << 8)
 80126fa:	f8b7 014e 	ldrh.w	r0, [r7, #334]	; 0x14e
 80126fe:	3015      	adds	r0, #21
 8012700:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8012704:	682d      	ldr	r5, [r5, #0]
 8012706:	4428      	add	r0, r5
 8012708:	7800      	ldrb	r0, [r0, #0]
 801270a:	0200      	lsls	r0, r0, #8
 801270c:	4320      	orrs	r0, r4
							| (int32_t) (*(msg + index + 22)));
 801270e:	f8b7 414e 	ldrh.w	r4, [r7, #334]	; 0x14e
 8012712:	3416      	adds	r4, #22
 8012714:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8012718:	682d      	ldr	r5, [r5, #0]
 801271a:	442c      	add	r4, r5
 801271c:	7824      	ldrb	r4, [r4, #0]
			sprintf(buff,
 801271e:	4320      	orrs	r0, r4
 8012720:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8012724:	9004      	str	r0, [sp, #16]
 8012726:	9103      	str	r1, [sp, #12]
 8012728:	9202      	str	r2, [sp, #8]
 801272a:	69fa      	ldr	r2, [r7, #28]
 801272c:	9201      	str	r2, [sp, #4]
 801272e:	9300      	str	r3, [sp, #0]
 8012730:	4673      	mov	r3, lr
 8012732:	4632      	mov	r2, r6
 8012734:	493d      	ldr	r1, [pc, #244]	; (801282c <parseMessage+0x560>)
 8012736:	4620      	mov	r0, r4
 8012738:	f002 fe44 	bl	80153c4 <siprintf>
			JSON = addToMsg(JSON, buff);
 801273c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012740:	4619      	mov	r1, r3
 8012742:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012746:	f7ff fcdb 	bl	8012100 <addToMsg>
 801274a:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 801274e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012752:	3301      	adds	r3, #1
 8012754:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
			index = index + 23;
 8012758:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801275c:	3317      	adds	r3, #23
 801275e:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 8012762:	f000 bdfe 	b.w	8013362 <parseMessage+0x1096>
		case 10:
			// BBOX_power_data
			if (JSON_len > 0) {
 8012766:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 801276a:	2b00      	cmp	r3, #0
 801276c:	d006      	beq.n	801277c <parseMessage+0x4b0>
				JSON = addToMsg(JSON, ",\0");
 801276e:	492e      	ldr	r1, [pc, #184]	; (8012828 <parseMessage+0x55c>)
 8012770:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012774:	f7ff fcc4 	bl	8012100 <addToMsg>
 8012778:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff,
					"\"BBOX_power\":{\"power\":%d,\"current\":%d,\"voltage\":%d}",
					((int16_t) *(msg + index + 2) << 8) | *(msg + index + 1),
 801277c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012780:	3302      	adds	r3, #2
 8012782:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012786:	6812      	ldr	r2, [r2, #0]
 8012788:	4413      	add	r3, r2
 801278a:	781b      	ldrb	r3, [r3, #0]
 801278c:	021b      	lsls	r3, r3, #8
 801278e:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012792:	3201      	adds	r2, #1
 8012794:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012798:	6809      	ldr	r1, [r1, #0]
 801279a:	440a      	add	r2, r1
 801279c:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 801279e:	ea43 0402 	orr.w	r4, r3, r2
					((int16_t) *(msg + index + 4) << 8) | *(msg + index + 3),
 80127a2:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80127a6:	3304      	adds	r3, #4
 80127a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80127ac:	6812      	ldr	r2, [r2, #0]
 80127ae:	4413      	add	r3, r2
 80127b0:	781b      	ldrb	r3, [r3, #0]
 80127b2:	021b      	lsls	r3, r3, #8
 80127b4:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 80127b8:	3203      	adds	r2, #3
 80127ba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80127be:	6809      	ldr	r1, [r1, #0]
 80127c0:	440a      	add	r2, r1
 80127c2:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 80127c4:	ea43 0502 	orr.w	r5, r3, r2
					((uint16_t) *(msg + index + 6) << 8) | *(msg + index + 5));
 80127c8:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80127cc:	3306      	adds	r3, #6
 80127ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80127d2:	6812      	ldr	r2, [r2, #0]
 80127d4:	4413      	add	r3, r2
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	021b      	lsls	r3, r3, #8
 80127da:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 80127de:	3205      	adds	r2, #5
 80127e0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80127e4:	6809      	ldr	r1, [r1, #0]
 80127e6:	440a      	add	r2, r1
 80127e8:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 80127ea:	4313      	orrs	r3, r2
 80127ec:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80127f0:	9300      	str	r3, [sp, #0]
 80127f2:	462b      	mov	r3, r5
 80127f4:	4622      	mov	r2, r4
 80127f6:	490e      	ldr	r1, [pc, #56]	; (8012830 <parseMessage+0x564>)
 80127f8:	f002 fde4 	bl	80153c4 <siprintf>
			JSON = addToMsg(JSON, buff);
 80127fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012800:	4619      	mov	r1, r3
 8012802:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012806:	f7ff fc7b 	bl	8012100 <addToMsg>
 801280a:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 801280e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012812:	3301      	adds	r3, #1
 8012814:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
			index = index + 7;
 8012818:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801281c:	3307      	adds	r3, #7
 801281e:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 8012822:	f000 bd9e 	b.w	8013362 <parseMessage+0x1096>
 8012826:	bf00      	nop
 8012828:	08015b6c 	.word	0x08015b6c
 801282c:	08015b70 	.word	0x08015b70
 8012830:	08015bec 	.word	0x08015bec
		case 15:
			// wheel RPM
			if (JSON_len > 0) {
 8012834:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012838:	2b00      	cmp	r3, #0
 801283a:	d006      	beq.n	801284a <parseMessage+0x57e>
				JSON = addToMsg(JSON, ",\0");
 801283c:	49a3      	ldr	r1, [pc, #652]	; (8012acc <parseMessage+0x800>)
 801283e:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012842:	f7ff fc5d 	bl	8012100 <addToMsg>
 8012846:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff,
					"\"wheel_RPM\":{\"front_right\":%d,\"front_left\":%d,\"rear_right\":%d,\"rear_left\":%d}",
					((uint16_t) *(msg + index + 2) << 8) | *(msg + index + 1),
 801284a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801284e:	3302      	adds	r3, #2
 8012850:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012854:	6812      	ldr	r2, [r2, #0]
 8012856:	4413      	add	r3, r2
 8012858:	781b      	ldrb	r3, [r3, #0]
 801285a:	021b      	lsls	r3, r3, #8
 801285c:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012860:	3201      	adds	r2, #1
 8012862:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012866:	6809      	ldr	r1, [r1, #0]
 8012868:	440a      	add	r2, r1
 801286a:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 801286c:	ea43 0402 	orr.w	r4, r3, r2
					((uint16_t) *(msg + index + 4) << 8) | *(msg + index + 3),
 8012870:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012874:	3304      	adds	r3, #4
 8012876:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801287a:	6812      	ldr	r2, [r2, #0]
 801287c:	4413      	add	r3, r2
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	021b      	lsls	r3, r3, #8
 8012882:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012886:	3203      	adds	r2, #3
 8012888:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801288c:	6809      	ldr	r1, [r1, #0]
 801288e:	440a      	add	r2, r1
 8012890:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 8012892:	ea43 0502 	orr.w	r5, r3, r2
					((uint16_t) *(msg + index + 6) << 8) | *(msg + index + 5),
 8012896:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801289a:	3306      	adds	r3, #6
 801289c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80128a0:	6812      	ldr	r2, [r2, #0]
 80128a2:	4413      	add	r3, r2
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	021b      	lsls	r3, r3, #8
 80128a8:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 80128ac:	3205      	adds	r2, #5
 80128ae:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80128b2:	6809      	ldr	r1, [r1, #0]
 80128b4:	440a      	add	r2, r1
 80128b6:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 80128b8:	4313      	orrs	r3, r2
					((uint16_t) *(msg + index + 8) << 8) | *(msg + index + 7));
 80128ba:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 80128be:	3208      	adds	r2, #8
 80128c0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80128c4:	6809      	ldr	r1, [r1, #0]
 80128c6:	440a      	add	r2, r1
 80128c8:	7812      	ldrb	r2, [r2, #0]
 80128ca:	0212      	lsls	r2, r2, #8
 80128cc:	f8b7 114e 	ldrh.w	r1, [r7, #334]	; 0x14e
 80128d0:	3107      	adds	r1, #7
 80128d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80128d6:	6800      	ldr	r0, [r0, #0]
 80128d8:	4401      	add	r1, r0
 80128da:	7809      	ldrb	r1, [r1, #0]
			sprintf(buff,
 80128dc:	430a      	orrs	r2, r1
 80128de:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80128e2:	9201      	str	r2, [sp, #4]
 80128e4:	9300      	str	r3, [sp, #0]
 80128e6:	462b      	mov	r3, r5
 80128e8:	4622      	mov	r2, r4
 80128ea:	4979      	ldr	r1, [pc, #484]	; (8012ad0 <parseMessage+0x804>)
 80128ec:	f002 fd6a 	bl	80153c4 <siprintf>
			JSON = addToMsg(JSON, buff);
 80128f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80128f4:	4619      	mov	r1, r3
 80128f6:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 80128fa:	f7ff fc01 	bl	8012100 <addToMsg>
 80128fe:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 8012902:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012906:	3301      	adds	r3, #1
 8012908:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
			index = index + 9;
 801290c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012910:	3309      	adds	r3, #9
 8012912:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 8012916:	f000 bd24 	b.w	8013362 <parseMessage+0x1096>
		case 20:
			// BBOX status data
			if (JSON_len > 0) {
 801291a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 801291e:	2b00      	cmp	r3, #0
 8012920:	d006      	beq.n	8012930 <parseMessage+0x664>
				JSON = addToMsg(JSON, ",\0");
 8012922:	496a      	ldr	r1, [pc, #424]	; (8012acc <parseMessage+0x800>)
 8012924:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012928:	f7ff fbea 	bl	8012100 <addToMsg>
 801292c:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff,
					"\"BBOX_status\":{\"SHD_IN\":%d,\"SHD_OUT\":%d,\"TSMS\":%d,\"AIR_N\":%d,\"AIR_P\":%d,\"PRECH_60V\":%d,\"IMD_OK\":%d,\"BMS_OK\":%d,\"SIGNAL_ERROR\":%d,\"SHD_RESET\":%d,\"SHD_EN\":%d,\"POLARITY\":%d,\"FANS\":%d,\"STM_temp\":%d}",
					(uint8_t) (*(msg + index + 2) & 0b10000000) >> 7,
 8012930:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012934:	3302      	adds	r3, #2
 8012936:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801293a:	6812      	ldr	r2, [r2, #0]
 801293c:	4413      	add	r3, r2
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	09db      	lsrs	r3, r3, #7
 8012942:	b2db      	uxtb	r3, r3
			sprintf(buff,
 8012944:	469c      	mov	ip, r3
					(uint8_t) (*(msg + index + 2) & 0b01000000) >> 6,
 8012946:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801294a:	3302      	adds	r3, #2
 801294c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012950:	6812      	ldr	r2, [r2, #0]
 8012952:	4413      	add	r3, r2
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	119b      	asrs	r3, r3, #6
			sprintf(buff,
 8012958:	f003 0e01 	and.w	lr, r3, #1
					(uint8_t) (*(msg + index + 2) & 0b00001000) >> 3,
 801295c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012960:	3302      	adds	r3, #2
 8012962:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012966:	6812      	ldr	r2, [r2, #0]
 8012968:	4413      	add	r3, r2
 801296a:	781b      	ldrb	r3, [r3, #0]
 801296c:	10db      	asrs	r3, r3, #3
			sprintf(buff,
 801296e:	f003 0401 	and.w	r4, r3, #1
					(uint8_t) (*(msg + index + 1) & 0b10000000) >> 7,
 8012972:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012976:	3301      	adds	r3, #1
 8012978:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801297c:	6812      	ldr	r2, [r2, #0]
 801297e:	4413      	add	r3, r2
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	09db      	lsrs	r3, r3, #7
 8012984:	b2db      	uxtb	r3, r3
			sprintf(buff,
 8012986:	61fb      	str	r3, [r7, #28]
					(uint8_t) (*(msg + index + 1) & 0b01000000) >> 6,
 8012988:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801298c:	3301      	adds	r3, #1
 801298e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012992:	6812      	ldr	r2, [r2, #0]
 8012994:	4413      	add	r3, r2
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	119b      	asrs	r3, r3, #6
			sprintf(buff,
 801299a:	f003 0501 	and.w	r5, r3, #1
					(uint8_t) (*(msg + index + 1) & 0b00000010) >> 1,
 801299e:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80129a2:	3301      	adds	r3, #1
 80129a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80129a8:	6812      	ldr	r2, [r2, #0]
 80129aa:	4413      	add	r3, r2
 80129ac:	781b      	ldrb	r3, [r3, #0]
 80129ae:	105b      	asrs	r3, r3, #1
			sprintf(buff,
 80129b0:	f003 0601 	and.w	r6, r3, #1
					(uint8_t) (*(msg + index + 1) & 0b00001000) >> 3,
 80129b4:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80129b8:	3301      	adds	r3, #1
 80129ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80129be:	6812      	ldr	r2, [r2, #0]
 80129c0:	4413      	add	r3, r2
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	10db      	asrs	r3, r3, #3
			sprintf(buff,
 80129c6:	f003 0201 	and.w	r2, r3, #1
 80129ca:	61ba      	str	r2, [r7, #24]
					(uint8_t) (*(msg + index + 1) & 0b00100000) >> 5,
 80129cc:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80129d0:	3301      	adds	r3, #1
 80129d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80129d6:	6812      	ldr	r2, [r2, #0]
 80129d8:	4413      	add	r3, r2
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	115b      	asrs	r3, r3, #5
			sprintf(buff,
 80129de:	f003 0101 	and.w	r1, r3, #1
 80129e2:	6179      	str	r1, [r7, #20]
					(uint8_t) (*(msg + index + 2) & 0b00010000) >> 4,
 80129e4:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80129e8:	3302      	adds	r3, #2
 80129ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80129ee:	6812      	ldr	r2, [r2, #0]
 80129f0:	4413      	add	r3, r2
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	111b      	asrs	r3, r3, #4
			sprintf(buff,
 80129f6:	f003 0001 	and.w	r0, r3, #1
 80129fa:	6138      	str	r0, [r7, #16]
					(uint8_t) (*(msg + index + 2) & 0b00100000) >> 5,
 80129fc:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012a00:	3302      	adds	r3, #2
 8012a02:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012a06:	6812      	ldr	r2, [r2, #0]
 8012a08:	4413      	add	r3, r2
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	115b      	asrs	r3, r3, #5
			sprintf(buff,
 8012a0e:	f003 0001 	and.w	r0, r3, #1
 8012a12:	60f8      	str	r0, [r7, #12]
					(uint8_t) (*(msg + index + 1) & 0b00000001) >> 0,
 8012a14:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012a18:	3301      	adds	r3, #1
 8012a1a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012a1e:	6812      	ldr	r2, [r2, #0]
 8012a20:	4413      	add	r3, r2
 8012a22:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012a24:	f003 0801 	and.w	r8, r3, #1
 8012a28:	4642      	mov	r2, r8
 8012a2a:	60ba      	str	r2, [r7, #8]
					(uint8_t) (*(msg + index + 1) & 0b00000100) >> 2,
 8012a2c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012a30:	3301      	adds	r3, #1
 8012a32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012a36:	6812      	ldr	r2, [r2, #0]
 8012a38:	4413      	add	r3, r2
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	109b      	asrs	r3, r3, #2
			sprintf(buff,
 8012a3e:	f003 0801 	and.w	r8, r3, #1
 8012a42:	4641      	mov	r1, r8
 8012a44:	6079      	str	r1, [r7, #4]
					(uint8_t) (*(msg + index + 1) & 0b00010000) >> 4,
 8012a46:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012a4a:	1c5a      	adds	r2, r3, #1
 8012a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	4413      	add	r3, r2
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	111b      	asrs	r3, r3, #4
			sprintf(buff,
 8012a58:	f003 0101 	and.w	r1, r3, #1
					(int8_t) *(msg + index + 3));
 8012a5c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012a60:	1cda      	adds	r2, r3, #3
 8012a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	4413      	add	r3, r2
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	b25b      	sxtb	r3, r3
			sprintf(buff,
 8012a6e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8012a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a74:	910a      	str	r1, [sp, #40]	; 0x28
 8012a76:	6879      	ldr	r1, [r7, #4]
 8012a78:	9109      	str	r1, [sp, #36]	; 0x24
 8012a7a:	68ba      	ldr	r2, [r7, #8]
 8012a7c:	9208      	str	r2, [sp, #32]
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	9307      	str	r3, [sp, #28]
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	9306      	str	r3, [sp, #24]
 8012a86:	6979      	ldr	r1, [r7, #20]
 8012a88:	9105      	str	r1, [sp, #20]
 8012a8a:	69ba      	ldr	r2, [r7, #24]
 8012a8c:	9204      	str	r2, [sp, #16]
 8012a8e:	9603      	str	r6, [sp, #12]
 8012a90:	9502      	str	r5, [sp, #8]
 8012a92:	69fb      	ldr	r3, [r7, #28]
 8012a94:	9301      	str	r3, [sp, #4]
 8012a96:	9400      	str	r4, [sp, #0]
 8012a98:	4673      	mov	r3, lr
 8012a9a:	4662      	mov	r2, ip
 8012a9c:	490d      	ldr	r1, [pc, #52]	; (8012ad4 <parseMessage+0x808>)
 8012a9e:	f002 fc91 	bl	80153c4 <siprintf>
			JSON = addToMsg(JSON, buff);
 8012aa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012aa6:	4619      	mov	r1, r3
 8012aa8:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012aac:	f7ff fb28 	bl	8012100 <addToMsg>
 8012ab0:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 8012ab4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012ab8:	3301      	adds	r3, #1
 8012aba:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

			index = index + 4;
 8012abe:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012ac2:	3304      	adds	r3, #4
 8012ac4:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 8012ac8:	f000 bc4b 	b.w	8013362 <parseMessage+0x1096>
 8012acc:	08015b6c 	.word	0x08015b6c
 8012ad0:	08015c20 	.word	0x08015c20
 8012ad4:	08015c70 	.word	0x08015c70
		case 25:
			// FU_Values_1
			if (JSON_len > 0) {
 8012ad8:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d006      	beq.n	8012aee <parseMessage+0x822>
				JSON = addToMsg(JSON, ",\0");
 8012ae0:	49b4      	ldr	r1, [pc, #720]	; (8012db4 <parseMessage+0xae8>)
 8012ae2:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012ae6:	f7ff fb0b 	bl	8012100 <addToMsg>
 8012aea:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff,
					"\"FU_Values_1\":{\"apps1\":%d,\"apps2\":%d,\"brake1\":%d,\"brake2\":%d,\"error\":%d}",
					(uint8_t) *(msg + index + 1), (uint8_t) *(msg + index + 2),
 8012aee:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012af2:	3301      	adds	r3, #1
 8012af4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012af8:	6812      	ldr	r2, [r2, #0]
 8012afa:	4413      	add	r3, r2
 8012afc:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012afe:	461e      	mov	r6, r3
					(uint8_t) *(msg + index + 1), (uint8_t) *(msg + index + 2),
 8012b00:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012b04:	3302      	adds	r3, #2
 8012b06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012b0a:	6812      	ldr	r2, [r2, #0]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012b10:	469e      	mov	lr, r3
					(uint8_t) *(msg + index + 3), (uint8_t) *(msg + index + 4),
 8012b12:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012b16:	3303      	adds	r3, #3
 8012b18:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012b1c:	6812      	ldr	r2, [r2, #0]
 8012b1e:	4413      	add	r3, r2
 8012b20:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012b22:	461c      	mov	r4, r3
					(uint8_t) *(msg + index + 3), (uint8_t) *(msg + index + 4),
 8012b24:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012b28:	3304      	adds	r3, #4
 8012b2a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012b2e:	6812      	ldr	r2, [r2, #0]
 8012b30:	4413      	add	r3, r2
 8012b32:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012b34:	461d      	mov	r5, r3
					((uint16_t) *(msg + index + 6) << 8) | *(msg + index + 5)
 8012b36:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012b3a:	3306      	adds	r3, #6
 8012b3c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012b40:	6812      	ldr	r2, [r2, #0]
 8012b42:	4413      	add	r3, r2
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	021b      	lsls	r3, r3, #8
 8012b48:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012b4c:	3205      	adds	r2, #5
 8012b4e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012b52:	6809      	ldr	r1, [r1, #0]
 8012b54:	440a      	add	r2, r1
 8012b56:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 8012b58:	4313      	orrs	r3, r2
 8012b5a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8012b5e:	9302      	str	r3, [sp, #8]
 8012b60:	9501      	str	r5, [sp, #4]
 8012b62:	9400      	str	r4, [sp, #0]
 8012b64:	4673      	mov	r3, lr
 8012b66:	4632      	mov	r2, r6
 8012b68:	4993      	ldr	r1, [pc, #588]	; (8012db8 <parseMessage+0xaec>)
 8012b6a:	f002 fc2b 	bl	80153c4 <siprintf>

					);
			JSON = addToMsg(JSON, buff);
 8012b6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012b72:	4619      	mov	r1, r3
 8012b74:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012b78:	f7ff fac2 	bl	8012100 <addToMsg>
 8012b7c:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 8012b80:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012b84:	3301      	adds	r3, #1
 8012b86:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
			index = index + 7;
 8012b8a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012b8e:	3307      	adds	r3, #7
 8012b90:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 8012b94:	e3e5      	b.n	8013362 <parseMessage+0x1096>
		case 30:
			// BBOX_command
			if (JSON_len > 0) {
 8012b96:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d006      	beq.n	8012bac <parseMessage+0x8e0>
				JSON = addToMsg(JSON, ",\0");
 8012b9e:	4985      	ldr	r1, [pc, #532]	; (8012db4 <parseMessage+0xae8>)
 8012ba0:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012ba4:	f7ff faac 	bl	8012100 <addToMsg>
 8012ba8:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff, "\"BBOX_command\":{\"FANS\":%d,\"SHD_EN\":%d}",
					(uint8_t) (*(msg + index + 1) & 0b10000000) >> 7,
 8012bac:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012bb6:	6812      	ldr	r2, [r2, #0]
 8012bb8:	4413      	add	r3, r2
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	09db      	lsrs	r3, r3, #7
 8012bbe:	b2db      	uxtb	r3, r3
			sprintf(buff, "\"BBOX_command\":{\"FANS\":%d,\"SHD_EN\":%d}",
 8012bc0:	4619      	mov	r1, r3
					(uint8_t) (*(msg + index + 1) & 0b01000000) >> 6);
 8012bc2:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012bcc:	6812      	ldr	r2, [r2, #0]
 8012bce:	4413      	add	r3, r2
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	119b      	asrs	r3, r3, #6
			sprintf(buff, "\"BBOX_command\":{\"FANS\":%d,\"SHD_EN\":%d}",
 8012bd4:	f003 0301 	and.w	r3, r3, #1
 8012bd8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8012bdc:	460a      	mov	r2, r1
 8012bde:	4977      	ldr	r1, [pc, #476]	; (8012dbc <parseMessage+0xaf0>)
 8012be0:	f002 fbf0 	bl	80153c4 <siprintf>
			JSON = addToMsg(JSON, buff);
 8012be4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012be8:	4619      	mov	r1, r3
 8012bea:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012bee:	f7ff fa87 	bl	8012100 <addToMsg>
 8012bf2:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 8012bf6:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
			index = index + 2;
 8012c00:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012c04:	3302      	adds	r3, #2
 8012c06:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 8012c0a:	e3aa      	b.n	8013362 <parseMessage+0x1096>
		case 40:
			// BMS_Command
			if (JSON_len > 0) {
 8012c0c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d006      	beq.n	8012c22 <parseMessage+0x956>
				JSON = addToMsg(JSON, ",\0");
 8012c14:	4967      	ldr	r1, [pc, #412]	; (8012db4 <parseMessage+0xae8>)
 8012c16:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012c1a:	f7ff fa71 	bl	8012100 <addToMsg>
 8012c1e:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff,
					"\"BMS_Command\":{\"BMS_Balanc\":%d,\"BMS_FullMode\":%d,\"BMS_OK\":%d,\"BMS_ONOFF\":%d,\"BMS_CAN\":%d}",
					(uint8_t) (*(msg + index + 1) & 0b11000000) >> 6,
 8012c22:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012c26:	3301      	adds	r3, #1
 8012c28:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012c2c:	6812      	ldr	r2, [r2, #0]
 8012c2e:	4413      	add	r3, r2
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	099b      	lsrs	r3, r3, #6
 8012c34:	b2db      	uxtb	r3, r3
			sprintf(buff,
 8012c36:	461c      	mov	r4, r3
					(uint8_t) (*(msg + index + 2) & 0b10000000) >> 7,
 8012c38:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012c3c:	3302      	adds	r3, #2
 8012c3e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012c42:	6812      	ldr	r2, [r2, #0]
 8012c44:	4413      	add	r3, r2
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	09db      	lsrs	r3, r3, #7
 8012c4a:	b2db      	uxtb	r3, r3
			sprintf(buff,
 8012c4c:	461d      	mov	r5, r3
					(uint8_t) (*(msg + index + 1) & 0b00110000) >> 4,
 8012c4e:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012c52:	3301      	adds	r3, #1
 8012c54:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012c58:	6812      	ldr	r2, [r2, #0]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	111b      	asrs	r3, r3, #4
			sprintf(buff,
 8012c60:	f003 0303 	and.w	r3, r3, #3
					(uint8_t) (*(msg + index + 1) & 0b00001100) >> 2,
 8012c64:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012c68:	3201      	adds	r2, #1
 8012c6a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012c6e:	6809      	ldr	r1, [r1, #0]
 8012c70:	440a      	add	r2, r1
 8012c72:	7812      	ldrb	r2, [r2, #0]
 8012c74:	1092      	asrs	r2, r2, #2
			sprintf(buff,
 8012c76:	f002 0203 	and.w	r2, r2, #3
					(uint8_t) (*(msg + index + 1) & 0b00000011));
 8012c7a:	f8b7 114e 	ldrh.w	r1, [r7, #334]	; 0x14e
 8012c7e:	3101      	adds	r1, #1
 8012c80:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012c84:	6800      	ldr	r0, [r0, #0]
 8012c86:	4401      	add	r1, r0
 8012c88:	7809      	ldrb	r1, [r1, #0]
			sprintf(buff,
 8012c8a:	f001 0103 	and.w	r1, r1, #3
 8012c8e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8012c92:	9102      	str	r1, [sp, #8]
 8012c94:	9201      	str	r2, [sp, #4]
 8012c96:	9300      	str	r3, [sp, #0]
 8012c98:	462b      	mov	r3, r5
 8012c9a:	4622      	mov	r2, r4
 8012c9c:	4948      	ldr	r1, [pc, #288]	; (8012dc0 <parseMessage+0xaf4>)
 8012c9e:	f002 fb91 	bl	80153c4 <siprintf>
			JSON = addToMsg(JSON, buff);
 8012ca2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012ca6:	4619      	mov	r1, r3
 8012ca8:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012cac:	f7ff fa28 	bl	8012100 <addToMsg>
 8012cb0:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 8012cb4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012cb8:	3301      	adds	r3, #1
 8012cba:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
			index = index + 3;
 8012cbe:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012cc2:	3303      	adds	r3, #3
 8012cc4:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 8012cc8:	e34b      	b.n	8013362 <parseMessage+0x1096>
		case 50:
			// BMS_State
			if (JSON_len > 0) {
 8012cca:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d006      	beq.n	8012ce0 <parseMessage+0xa14>
				JSON = addToMsg(JSON, ",\0");
 8012cd2:	4938      	ldr	r1, [pc, #224]	; (8012db4 <parseMessage+0xae8>)
 8012cd4:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012cd8:	f7ff fa12 	bl	8012100 <addToMsg>
 8012cdc:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff,
					"\"BMS_State\":{\"BMS_Mode\":%d,\"BMS_Faults\":%d,\"CellVolt_L\":%d,\"CellVolt_H\":%d,\"CellTemp_L\":%d,\"CellTemp_H\":%d,\"BMS_Ident\":%d}",
					(uint8_t) *(msg + index + 1),
 8012ce0:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012cea:	6812      	ldr	r2, [r2, #0]
 8012cec:	4413      	add	r3, r2
 8012cee:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012cf0:	469e      	mov	lr, r3
					((uint16_t) *(msg + index + 3) << 8) | *(msg + index + 2),
 8012cf2:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012cf6:	3303      	adds	r3, #3
 8012cf8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012cfc:	6812      	ldr	r2, [r2, #0]
 8012cfe:	4413      	add	r3, r2
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	021b      	lsls	r3, r3, #8
 8012d04:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012d08:	3202      	adds	r2, #2
 8012d0a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012d0e:	6809      	ldr	r1, [r1, #0]
 8012d10:	440a      	add	r2, r1
 8012d12:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 8012d14:	ea43 0102 	orr.w	r1, r3, r2
					(uint8_t) *(msg + index + 4), (uint8_t) *(msg + index + 5),
 8012d18:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012d1c:	3304      	adds	r3, #4
 8012d1e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012d22:	6812      	ldr	r2, [r2, #0]
 8012d24:	4413      	add	r3, r2
 8012d26:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012d28:	461c      	mov	r4, r3
					(uint8_t) *(msg + index + 4), (uint8_t) *(msg + index + 5),
 8012d2a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012d2e:	3305      	adds	r3, #5
 8012d30:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012d34:	6812      	ldr	r2, [r2, #0]
 8012d36:	4413      	add	r3, r2
 8012d38:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012d3a:	461d      	mov	r5, r3
					(uint8_t) *(msg + index + 6), (uint8_t) *(msg + index + 7),
 8012d3c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012d40:	3306      	adds	r3, #6
 8012d42:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012d46:	6812      	ldr	r2, [r2, #0]
 8012d48:	4413      	add	r3, r2
 8012d4a:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012d4c:	461e      	mov	r6, r3
					(uint8_t) *(msg + index + 6), (uint8_t) *(msg + index + 7),
 8012d4e:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012d52:	3307      	adds	r3, #7
 8012d54:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012d58:	6812      	ldr	r2, [r2, #0]
 8012d5a:	4413      	add	r3, r2
 8012d5c:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012d5e:	61fb      	str	r3, [r7, #28]
					(uint8_t) *(msg + index + 8));
 8012d60:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012d64:	3308      	adds	r3, #8
 8012d66:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012d6a:	6812      	ldr	r2, [r2, #0]
 8012d6c:	4413      	add	r3, r2
 8012d6e:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012d70:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8012d74:	9304      	str	r3, [sp, #16]
 8012d76:	69fb      	ldr	r3, [r7, #28]
 8012d78:	9303      	str	r3, [sp, #12]
 8012d7a:	9602      	str	r6, [sp, #8]
 8012d7c:	9501      	str	r5, [sp, #4]
 8012d7e:	9400      	str	r4, [sp, #0]
 8012d80:	460b      	mov	r3, r1
 8012d82:	4672      	mov	r2, lr
 8012d84:	490f      	ldr	r1, [pc, #60]	; (8012dc4 <parseMessage+0xaf8>)
 8012d86:	f002 fb1d 	bl	80153c4 <siprintf>
			JSON = addToMsg(JSON, buff);
 8012d8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012d8e:	4619      	mov	r1, r3
 8012d90:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012d94:	f7ff f9b4 	bl	8012100 <addToMsg>
 8012d98:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 8012d9c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012da0:	3301      	adds	r3, #1
 8012da2:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
			index = index + 9;
 8012da6:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012daa:	3309      	adds	r3, #9
 8012dac:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 8012db0:	e2d7      	b.n	8013362 <parseMessage+0x1096>
 8012db2:	bf00      	nop
 8012db4:	08015b6c 	.word	0x08015b6c
 8012db8:	08015d34 	.word	0x08015d34
 8012dbc:	08015d80 	.word	0x08015d80
 8012dc0:	08015da8 	.word	0x08015da8
 8012dc4:	08015e04 	.word	0x08015e04
		case 60:
			// ECU_State
			if (JSON_len > 0) {
 8012dc8:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d006      	beq.n	8012dde <parseMessage+0xb12>
				JSON = addToMsg(JSON, ",\0");
 8012dd0:	4986      	ldr	r1, [pc, #536]	; (8012fec <parseMessage+0xd20>)
 8012dd2:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012dd6:	f7ff f993 	bl	8012100 <addToMsg>
 8012dda:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff,
					"\"ECU_State\":{\"ECU_Status\":%d,\"FL_AMK_Status\":%d,\"FR_AMK_Status\":%d,\"RL_AMK_Status\":%d,\"RR_AMK_Status\":%d,\"TempMotor_H\":%d,\"TempInverter_H\":%d,\"TempIGBT_H\":%d}",
					(uint8_t) *(msg + index + 1), (uint8_t) *(msg + index + 2),
 8012dde:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012de2:	3301      	adds	r3, #1
 8012de4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012de8:	6812      	ldr	r2, [r2, #0]
 8012dea:	4413      	add	r3, r2
 8012dec:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012dee:	469e      	mov	lr, r3
					(uint8_t) *(msg + index + 1), (uint8_t) *(msg + index + 2),
 8012df0:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012df4:	3302      	adds	r3, #2
 8012df6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012dfa:	6812      	ldr	r2, [r2, #0]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012e00:	469c      	mov	ip, r3
					(uint8_t) *(msg + index + 3), (uint8_t) *(msg + index + 4),
 8012e02:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012e06:	3303      	adds	r3, #3
 8012e08:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012e0c:	6812      	ldr	r2, [r2, #0]
 8012e0e:	4413      	add	r3, r2
 8012e10:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012e12:	4619      	mov	r1, r3
					(uint8_t) *(msg + index + 3), (uint8_t) *(msg + index + 4),
 8012e14:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012e18:	3304      	adds	r3, #4
 8012e1a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012e1e:	6812      	ldr	r2, [r2, #0]
 8012e20:	4413      	add	r3, r2
 8012e22:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012e24:	461c      	mov	r4, r3
					(uint8_t) *(msg + index + 5), (uint8_t) *(msg + index + 6),
 8012e26:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012e2a:	3305      	adds	r3, #5
 8012e2c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012e30:	6812      	ldr	r2, [r2, #0]
 8012e32:	4413      	add	r3, r2
 8012e34:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012e36:	461d      	mov	r5, r3
					(uint8_t) *(msg + index + 5), (uint8_t) *(msg + index + 6),
 8012e38:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012e3c:	3306      	adds	r3, #6
 8012e3e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012e42:	6812      	ldr	r2, [r2, #0]
 8012e44:	4413      	add	r3, r2
 8012e46:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012e48:	461e      	mov	r6, r3
					(uint8_t) *(msg + index + 7), (uint8_t) *(msg + index + 8));
 8012e4a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012e4e:	3307      	adds	r3, #7
 8012e50:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012e54:	6812      	ldr	r2, [r2, #0]
 8012e56:	4413      	add	r3, r2
 8012e58:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012e5a:	61fb      	str	r3, [r7, #28]
					(uint8_t) *(msg + index + 7), (uint8_t) *(msg + index + 8));
 8012e5c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012e60:	3308      	adds	r3, #8
 8012e62:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012e66:	6812      	ldr	r2, [r2, #0]
 8012e68:	4413      	add	r3, r2
 8012e6a:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8012e6c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8012e70:	9305      	str	r3, [sp, #20]
 8012e72:	69fb      	ldr	r3, [r7, #28]
 8012e74:	9304      	str	r3, [sp, #16]
 8012e76:	9603      	str	r6, [sp, #12]
 8012e78:	9502      	str	r5, [sp, #8]
 8012e7a:	9401      	str	r4, [sp, #4]
 8012e7c:	9100      	str	r1, [sp, #0]
 8012e7e:	4663      	mov	r3, ip
 8012e80:	4672      	mov	r2, lr
 8012e82:	495b      	ldr	r1, [pc, #364]	; (8012ff0 <parseMessage+0xd24>)
 8012e84:	f002 fa9e 	bl	80153c4 <siprintf>
			JSON = addToMsg(JSON, buff);
 8012e88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012e92:	f7ff f935 	bl	8012100 <addToMsg>
 8012e96:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 8012e9a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
			index = index + 9;
 8012ea4:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012ea8:	3309      	adds	r3, #9
 8012eaa:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 8012eae:	e258      	b.n	8013362 <parseMessage+0x1096>
		case 70:
			// FU_Values_2
			if (JSON_len > 0) {
 8012eb0:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d006      	beq.n	8012ec6 <parseMessage+0xbfa>
				JSON = addToMsg(JSON, ",\0");
 8012eb8:	494c      	ldr	r1, [pc, #304]	; (8012fec <parseMessage+0xd20>)
 8012eba:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012ebe:	f7ff f91f 	bl	8012100 <addToMsg>
 8012ec2:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff,
					"\"FU_Values_2\":{\"steer\":%d,\"susp_FL\":%d,\"susp_FR\":%d,\"brake_pos\":%d,\"RTD\":%d,\"BOTS\":%d,\"SHDB\":%d,\"INERTIA_SW\":%d,\"reserve\":%d}",
					(int8_t) *(msg + index + 1),
 8012ec6:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012eca:	3301      	adds	r3, #1
 8012ecc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012ed0:	6812      	ldr	r2, [r2, #0]
 8012ed2:	4413      	add	r3, r2
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	b25b      	sxtb	r3, r3
			sprintf(buff,
 8012ed8:	469e      	mov	lr, r3
					((uint16_t) *(msg + index + 3) << 8) | *(msg + index + 2),
 8012eda:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012ede:	3303      	adds	r3, #3
 8012ee0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012ee4:	6812      	ldr	r2, [r2, #0]
 8012ee6:	4413      	add	r3, r2
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	021b      	lsls	r3, r3, #8
 8012eec:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012ef0:	3202      	adds	r2, #2
 8012ef2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012ef6:	6809      	ldr	r1, [r1, #0]
 8012ef8:	440a      	add	r2, r1
 8012efa:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 8012efc:	ea43 0602 	orr.w	r6, r3, r2
					((uint16_t) *(msg + index + 5) << 8) | *(msg + index + 4),
 8012f00:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012f04:	3305      	adds	r3, #5
 8012f06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012f0a:	6812      	ldr	r2, [r2, #0]
 8012f0c:	4413      	add	r3, r2
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	021b      	lsls	r3, r3, #8
 8012f12:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012f16:	3204      	adds	r2, #4
 8012f18:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012f1c:	6809      	ldr	r1, [r1, #0]
 8012f1e:	440a      	add	r2, r1
 8012f20:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 8012f22:	4313      	orrs	r3, r2
					(uint8_t) *(msg + index + 6),
 8012f24:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012f28:	3206      	adds	r2, #6
 8012f2a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012f2e:	6809      	ldr	r1, [r1, #0]
 8012f30:	440a      	add	r2, r1
 8012f32:	7812      	ldrb	r2, [r2, #0]
			sprintf(buff,
 8012f34:	61fa      	str	r2, [r7, #28]
					(uint8_t) (*(msg + index + 7) & 0b10000000) >> 7,
 8012f36:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012f3a:	3207      	adds	r2, #7
 8012f3c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012f40:	6809      	ldr	r1, [r1, #0]
 8012f42:	440a      	add	r2, r1
 8012f44:	7812      	ldrb	r2, [r2, #0]
 8012f46:	09d2      	lsrs	r2, r2, #7
 8012f48:	b2d2      	uxtb	r2, r2
			sprintf(buff,
 8012f4a:	61ba      	str	r2, [r7, #24]
					(uint8_t) (*(msg + index + 7) & 0b01000000) >> 6,
 8012f4c:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8012f50:	3207      	adds	r2, #7
 8012f52:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012f56:	6809      	ldr	r1, [r1, #0]
 8012f58:	440a      	add	r2, r1
 8012f5a:	7812      	ldrb	r2, [r2, #0]
 8012f5c:	1192      	asrs	r2, r2, #6
			sprintf(buff,
 8012f5e:	f002 0201 	and.w	r2, r2, #1
					(uint8_t) (*(msg + index + 7) & 0b00100000) >> 5,
 8012f62:	f8b7 114e 	ldrh.w	r1, [r7, #334]	; 0x14e
 8012f66:	3107      	adds	r1, #7
 8012f68:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012f6c:	6800      	ldr	r0, [r0, #0]
 8012f6e:	4401      	add	r1, r0
 8012f70:	7809      	ldrb	r1, [r1, #0]
 8012f72:	1149      	asrs	r1, r1, #5
			sprintf(buff,
 8012f74:	f001 0101 	and.w	r1, r1, #1
					(uint8_t) (*(msg + index + 7) & 0b00010000) >> 4,
 8012f78:	f8b7 014e 	ldrh.w	r0, [r7, #334]	; 0x14e
 8012f7c:	3007      	adds	r0, #7
 8012f7e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8012f82:	6824      	ldr	r4, [r4, #0]
 8012f84:	4420      	add	r0, r4
 8012f86:	7800      	ldrb	r0, [r0, #0]
 8012f88:	1100      	asrs	r0, r0, #4
			sprintf(buff,
 8012f8a:	f000 0001 	and.w	r0, r0, #1
					(uint8_t) *(msg + index + 8));
 8012f8e:	f8b7 414e 	ldrh.w	r4, [r7, #334]	; 0x14e
 8012f92:	3408      	adds	r4, #8
 8012f94:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8012f98:	682d      	ldr	r5, [r5, #0]
 8012f9a:	442c      	add	r4, r5
 8012f9c:	7824      	ldrb	r4, [r4, #0]
			sprintf(buff,
 8012f9e:	4625      	mov	r5, r4
 8012fa0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8012fa4:	9506      	str	r5, [sp, #24]
 8012fa6:	9005      	str	r0, [sp, #20]
 8012fa8:	9104      	str	r1, [sp, #16]
 8012faa:	9203      	str	r2, [sp, #12]
 8012fac:	69b9      	ldr	r1, [r7, #24]
 8012fae:	9102      	str	r1, [sp, #8]
 8012fb0:	69fa      	ldr	r2, [r7, #28]
 8012fb2:	9201      	str	r2, [sp, #4]
 8012fb4:	9300      	str	r3, [sp, #0]
 8012fb6:	4633      	mov	r3, r6
 8012fb8:	4672      	mov	r2, lr
 8012fba:	490e      	ldr	r1, [pc, #56]	; (8012ff4 <parseMessage+0xd28>)
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	f002 fa01 	bl	80153c4 <siprintf>
			JSON = addToMsg(JSON, buff);
 8012fc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012fc6:	4619      	mov	r1, r3
 8012fc8:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8012fcc:	f7ff f898 	bl	8012100 <addToMsg>
 8012fd0:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 8012fd4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012fd8:	3301      	adds	r3, #1
 8012fda:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
			index = index + 9;
 8012fde:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8012fe2:	3309      	adds	r3, #9
 8012fe4:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 8012fe8:	e1bb      	b.n	8013362 <parseMessage+0x1096>
 8012fea:	bf00      	nop
 8012fec:	08015b6c 	.word	0x08015b6c
 8012ff0:	08015e80 	.word	0x08015e80
 8012ff4:	08015f20 	.word	0x08015f20
		case 80:
			// Interconnect
			if (JSON_len > 0) {
 8012ff8:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d006      	beq.n	801300e <parseMessage+0xd42>
				JSON = addToMsg(JSON, ",\0");
 8013000:	4999      	ldr	r1, [pc, #612]	; (8013268 <parseMessage+0xf9c>)
 8013002:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8013006:	f7ff f87b 	bl	8012100 <addToMsg>
 801300a:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff,
					"\"Interconnect\":{\"car_state\":%d,\"left_w_pump\":%d,\"right_w_pump\":%d,\"brake_red\":%d,\"brake_white\":%d,\"tsas\":%d,\"killswitch_R\":%d,\"killswitch_L\":%d,\"reserve\":%d,\"susp_RR\":%d,\"susp_RL\":%d}",
					(uint8_t) *(msg + index + 1),
 801300e:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8013012:	3301      	adds	r3, #1
 8013014:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013018:	6812      	ldr	r2, [r2, #0]
 801301a:	4413      	add	r3, r2
 801301c:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 801301e:	4699      	mov	r9, r3
					(uint8_t) (*(msg + index + 2) & 0b10000000) >> 7,
 8013020:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8013024:	3302      	adds	r3, #2
 8013026:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801302a:	6812      	ldr	r2, [r2, #0]
 801302c:	4413      	add	r3, r2
 801302e:	781b      	ldrb	r3, [r3, #0]
 8013030:	09db      	lsrs	r3, r3, #7
 8013032:	b2db      	uxtb	r3, r3
			sprintf(buff,
 8013034:	469a      	mov	sl, r3
					(uint8_t) (*(msg + index + 2) & 0b01000000) >> 6,
 8013036:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801303a:	3302      	adds	r3, #2
 801303c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013040:	6812      	ldr	r2, [r2, #0]
 8013042:	4413      	add	r3, r2
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	119b      	asrs	r3, r3, #6
			sprintf(buff,
 8013048:	f003 0301 	and.w	r3, r3, #1
 801304c:	61fb      	str	r3, [r7, #28]
					(uint8_t) (*(msg + index + 2) & 0b00100000) >> 5,
 801304e:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8013052:	3202      	adds	r2, #2
 8013054:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8013058:	6809      	ldr	r1, [r1, #0]
 801305a:	440a      	add	r2, r1
 801305c:	7812      	ldrb	r2, [r2, #0]
 801305e:	1152      	asrs	r2, r2, #5
			sprintf(buff,
 8013060:	f002 0201 	and.w	r2, r2, #1
					(uint8_t) (*(msg + index + 2) & 0b00010000) >> 4,
 8013064:	f8b7 114e 	ldrh.w	r1, [r7, #334]	; 0x14e
 8013068:	3102      	adds	r1, #2
 801306a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801306e:	6800      	ldr	r0, [r0, #0]
 8013070:	4401      	add	r1, r0
 8013072:	7809      	ldrb	r1, [r1, #0]
 8013074:	1109      	asrs	r1, r1, #4
			sprintf(buff,
 8013076:	f001 0101 	and.w	r1, r1, #1
					(uint8_t) (*(msg + index + 2) & 0b00001000) >> 3,
 801307a:	f8b7 014e 	ldrh.w	r0, [r7, #334]	; 0x14e
 801307e:	3002      	adds	r0, #2
 8013080:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8013084:	6824      	ldr	r4, [r4, #0]
 8013086:	4420      	add	r0, r4
 8013088:	7800      	ldrb	r0, [r0, #0]
 801308a:	10c0      	asrs	r0, r0, #3
			sprintf(buff,
 801308c:	f000 0001 	and.w	r0, r0, #1
					(uint8_t) (*(msg + index + 2) & 0b00000100) >> 2,
 8013090:	f8b7 414e 	ldrh.w	r4, [r7, #334]	; 0x14e
 8013094:	3402      	adds	r4, #2
 8013096:	f107 0524 	add.w	r5, r7, #36	; 0x24
 801309a:	682d      	ldr	r5, [r5, #0]
 801309c:	442c      	add	r4, r5
 801309e:	7824      	ldrb	r4, [r4, #0]
 80130a0:	10a4      	asrs	r4, r4, #2
			sprintf(buff,
 80130a2:	f004 0401 	and.w	r4, r4, #1
					(uint8_t) (*(msg + index + 2) & 0b00000010) >> 1,
 80130a6:	f8b7 514e 	ldrh.w	r5, [r7, #334]	; 0x14e
 80130aa:	3502      	adds	r5, #2
 80130ac:	f107 0624 	add.w	r6, r7, #36	; 0x24
 80130b0:	6836      	ldr	r6, [r6, #0]
 80130b2:	4435      	add	r5, r6
 80130b4:	782d      	ldrb	r5, [r5, #0]
 80130b6:	106d      	asrs	r5, r5, #1
			sprintf(buff,
 80130b8:	f005 0501 	and.w	r5, r5, #1
					(uint8_t) *(msg + index + 3),
 80130bc:	f8b7 614e 	ldrh.w	r6, [r7, #334]	; 0x14e
 80130c0:	3603      	adds	r6, #3
 80130c2:	f107 0e24 	add.w	lr, r7, #36	; 0x24
 80130c6:	f8de 3000 	ldr.w	r3, [lr]
 80130ca:	441e      	add	r6, r3
 80130cc:	7836      	ldrb	r6, [r6, #0]
			sprintf(buff,
 80130ce:	61be      	str	r6, [r7, #24]
					((uint16_t) *(msg + index + 5) << 8) | *(msg + index + 4),
 80130d0:	f8b7 614e 	ldrh.w	r6, [r7, #334]	; 0x14e
 80130d4:	3605      	adds	r6, #5
 80130d6:	f107 0e24 	add.w	lr, r7, #36	; 0x24
 80130da:	f8de 3000 	ldr.w	r3, [lr]
 80130de:	441e      	add	r6, r3
 80130e0:	7836      	ldrb	r6, [r6, #0]
 80130e2:	0236      	lsls	r6, r6, #8
 80130e4:	f8b7 e14e 	ldrh.w	lr, [r7, #334]	; 0x14e
 80130e8:	f10e 0e04 	add.w	lr, lr, #4
 80130ec:	f107 0c24 	add.w	ip, r7, #36	; 0x24
 80130f0:	f8dc 3000 	ldr.w	r3, [ip]
 80130f4:	449e      	add	lr, r3
 80130f6:	f89e e000 	ldrb.w	lr, [lr]
			sprintf(buff,
 80130fa:	ea46 060e 	orr.w	r6, r6, lr
					((uint16_t) *(msg + index + 7) << 8) | *(msg + index + 6));
 80130fe:	f8b7 e14e 	ldrh.w	lr, [r7, #334]	; 0x14e
 8013102:	f10e 0e07 	add.w	lr, lr, #7
 8013106:	f107 0c24 	add.w	ip, r7, #36	; 0x24
 801310a:	f8dc 3000 	ldr.w	r3, [ip]
 801310e:	449e      	add	lr, r3
 8013110:	f89e e000 	ldrb.w	lr, [lr]
 8013114:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 8013118:	f8b7 c14e 	ldrh.w	ip, [r7, #334]	; 0x14e
 801311c:	f10c 0c06 	add.w	ip, ip, #6
 8013120:	f107 0824 	add.w	r8, r7, #36	; 0x24
 8013124:	f8d8 3000 	ldr.w	r3, [r8]
 8013128:	449c      	add	ip, r3
 801312a:	f89c c000 	ldrb.w	ip, [ip]
			sprintf(buff,
 801312e:	ea4e 030c 	orr.w	r3, lr, ip
 8013132:	f107 0e38 	add.w	lr, r7, #56	; 0x38
 8013136:	9308      	str	r3, [sp, #32]
 8013138:	9607      	str	r6, [sp, #28]
 801313a:	69bb      	ldr	r3, [r7, #24]
 801313c:	9306      	str	r3, [sp, #24]
 801313e:	9505      	str	r5, [sp, #20]
 8013140:	9404      	str	r4, [sp, #16]
 8013142:	9003      	str	r0, [sp, #12]
 8013144:	9102      	str	r1, [sp, #8]
 8013146:	9201      	str	r2, [sp, #4]
 8013148:	69fb      	ldr	r3, [r7, #28]
 801314a:	9300      	str	r3, [sp, #0]
 801314c:	4653      	mov	r3, sl
 801314e:	464a      	mov	r2, r9
 8013150:	4946      	ldr	r1, [pc, #280]	; (801326c <parseMessage+0xfa0>)
 8013152:	4670      	mov	r0, lr
 8013154:	f002 f936 	bl	80153c4 <siprintf>
			JSON = addToMsg(JSON, buff);
 8013158:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801315c:	4619      	mov	r1, r3
 801315e:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8013162:	f7fe ffcd 	bl	8012100 <addToMsg>
 8013166:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 801316a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 801316e:	3301      	adds	r3, #1
 8013170:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
			index = index + 8;
 8013174:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8013178:	3308      	adds	r3, #8
 801317a:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 801317e:	e0f0      	b.n	8013362 <parseMessage+0x1096>
		case 90:
			// BMS_Voltages
			if (JSON_len > 0) {
 8013180:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8013184:	2b00      	cmp	r3, #0
 8013186:	d006      	beq.n	8013196 <parseMessage+0xeca>
				JSON = addToMsg(JSON, ",\0");
 8013188:	4937      	ldr	r1, [pc, #220]	; (8013268 <parseMessage+0xf9c>)
 801318a:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 801318e:	f7fe ffb7 	bl	8012100 <addToMsg>
 8013192:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff,
					"\"BMS_Voltages\":{\"BMS_VoltIdent\":%d,\"BMS_Volt1\":%d,\"BMS_Volt2\":%d,\"BMS_Volt3\":%d,\"BMS_Volt4\":%d,\"BMS_Volt5\":%d,\"BMS_Volt6\":%d,\"BMS_Volt7\":%d}",
					(uint8_t) *(msg + index + 1), (uint8_t) *(msg + index + 2),
 8013196:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801319a:	3301      	adds	r3, #1
 801319c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80131a0:	6812      	ldr	r2, [r2, #0]
 80131a2:	4413      	add	r3, r2
 80131a4:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 80131a6:	469e      	mov	lr, r3
					(uint8_t) *(msg + index + 1), (uint8_t) *(msg + index + 2),
 80131a8:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80131ac:	3302      	adds	r3, #2
 80131ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80131b2:	6812      	ldr	r2, [r2, #0]
 80131b4:	4413      	add	r3, r2
 80131b6:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 80131b8:	469c      	mov	ip, r3
					(uint8_t) *(msg + index + 3), (uint8_t) *(msg + index + 4),
 80131ba:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80131be:	3303      	adds	r3, #3
 80131c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80131c4:	6812      	ldr	r2, [r2, #0]
 80131c6:	4413      	add	r3, r2
 80131c8:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 80131ca:	4619      	mov	r1, r3
					(uint8_t) *(msg + index + 3), (uint8_t) *(msg + index + 4),
 80131cc:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80131d0:	3304      	adds	r3, #4
 80131d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80131d6:	6812      	ldr	r2, [r2, #0]
 80131d8:	4413      	add	r3, r2
 80131da:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 80131dc:	461c      	mov	r4, r3
					(uint8_t) *(msg + index + 5), (uint8_t) *(msg + index + 6),
 80131de:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80131e2:	3305      	adds	r3, #5
 80131e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80131e8:	6812      	ldr	r2, [r2, #0]
 80131ea:	4413      	add	r3, r2
 80131ec:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 80131ee:	461d      	mov	r5, r3
					(uint8_t) *(msg + index + 5), (uint8_t) *(msg + index + 6),
 80131f0:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80131f4:	3306      	adds	r3, #6
 80131f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80131fa:	6812      	ldr	r2, [r2, #0]
 80131fc:	4413      	add	r3, r2
 80131fe:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8013200:	461e      	mov	r6, r3
					(uint8_t) *(msg + index + 7), (uint8_t) *(msg + index + 8));
 8013202:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8013206:	3307      	adds	r3, #7
 8013208:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801320c:	6812      	ldr	r2, [r2, #0]
 801320e:	4413      	add	r3, r2
 8013210:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8013212:	61fb      	str	r3, [r7, #28]
					(uint8_t) *(msg + index + 7), (uint8_t) *(msg + index + 8));
 8013214:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8013218:	3308      	adds	r3, #8
 801321a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801321e:	6812      	ldr	r2, [r2, #0]
 8013220:	4413      	add	r3, r2
 8013222:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8013224:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8013228:	9305      	str	r3, [sp, #20]
 801322a:	69fb      	ldr	r3, [r7, #28]
 801322c:	9304      	str	r3, [sp, #16]
 801322e:	9603      	str	r6, [sp, #12]
 8013230:	9502      	str	r5, [sp, #8]
 8013232:	9401      	str	r4, [sp, #4]
 8013234:	9100      	str	r1, [sp, #0]
 8013236:	4663      	mov	r3, ip
 8013238:	4672      	mov	r2, lr
 801323a:	490d      	ldr	r1, [pc, #52]	; (8013270 <parseMessage+0xfa4>)
 801323c:	f002 f8c2 	bl	80153c4 <siprintf>
			JSON = addToMsg(JSON, buff);
 8013240:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013244:	4619      	mov	r1, r3
 8013246:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 801324a:	f7fe ff59 	bl	8012100 <addToMsg>
 801324e:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 8013252:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8013256:	3301      	adds	r3, #1
 8013258:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
			index = index + 9;
 801325c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8013260:	3309      	adds	r3, #9
 8013262:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 8013266:	e07c      	b.n	8013362 <parseMessage+0x1096>
 8013268:	08015b6c 	.word	0x08015b6c
 801326c:	08015fa0 	.word	0x08015fa0
 8013270:	08016058 	.word	0x08016058
		case 95:
			// BMS_Voltages
			if (JSON_len > 0) {
 8013274:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8013278:	2b00      	cmp	r3, #0
 801327a:	d006      	beq.n	801328a <parseMessage+0xfbe>
				JSON = addToMsg(JSON, ",\0");
 801327c:	494f      	ldr	r1, [pc, #316]	; (80133bc <parseMessage+0x10f0>)
 801327e:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8013282:	f7fe ff3d 	bl	8012100 <addToMsg>
 8013286:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			}
			sprintf(buff,
					"\"BMS_Temps\":{\"BMS_TempIdent\":%d,\"BMS_Temp1\":%d,\"BMS_Temp2\":%d,\"BMS_Temp3\":%d,\"BMS_Temp4\":%d,\"BMS_Temp5\":%d,\"BMS_Temp6\":%d,\"BMS_Temp7\":%d}",
					(uint8_t) *(msg + index + 1), (uint8_t) *(msg + index + 2),
 801328a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801328e:	3301      	adds	r3, #1
 8013290:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013294:	6812      	ldr	r2, [r2, #0]
 8013296:	4413      	add	r3, r2
 8013298:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 801329a:	469e      	mov	lr, r3
					(uint8_t) *(msg + index + 1), (uint8_t) *(msg + index + 2),
 801329c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80132a0:	3302      	adds	r3, #2
 80132a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80132a6:	6812      	ldr	r2, [r2, #0]
 80132a8:	4413      	add	r3, r2
 80132aa:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 80132ac:	469c      	mov	ip, r3
					(uint8_t) *(msg + index + 3), (uint8_t) *(msg + index + 4),
 80132ae:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80132b2:	3303      	adds	r3, #3
 80132b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80132b8:	6812      	ldr	r2, [r2, #0]
 80132ba:	4413      	add	r3, r2
 80132bc:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 80132be:	4619      	mov	r1, r3
					(uint8_t) *(msg + index + 3), (uint8_t) *(msg + index + 4),
 80132c0:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80132c4:	3304      	adds	r3, #4
 80132c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80132ca:	6812      	ldr	r2, [r2, #0]
 80132cc:	4413      	add	r3, r2
 80132ce:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 80132d0:	461c      	mov	r4, r3
					(uint8_t) *(msg + index + 5), (uint8_t) *(msg + index + 6),
 80132d2:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80132d6:	3305      	adds	r3, #5
 80132d8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80132dc:	6812      	ldr	r2, [r2, #0]
 80132de:	4413      	add	r3, r2
 80132e0:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 80132e2:	461d      	mov	r5, r3
					(uint8_t) *(msg + index + 5), (uint8_t) *(msg + index + 6),
 80132e4:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80132e8:	3306      	adds	r3, #6
 80132ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80132ee:	6812      	ldr	r2, [r2, #0]
 80132f0:	4413      	add	r3, r2
 80132f2:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 80132f4:	461e      	mov	r6, r3
					(uint8_t) *(msg + index + 7), (uint8_t) *(msg + index + 8));
 80132f6:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80132fa:	3307      	adds	r3, #7
 80132fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013300:	6812      	ldr	r2, [r2, #0]
 8013302:	4413      	add	r3, r2
 8013304:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8013306:	61fb      	str	r3, [r7, #28]
					(uint8_t) *(msg + index + 7), (uint8_t) *(msg + index + 8));
 8013308:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801330c:	3308      	adds	r3, #8
 801330e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013312:	6812      	ldr	r2, [r2, #0]
 8013314:	4413      	add	r3, r2
 8013316:	781b      	ldrb	r3, [r3, #0]
			sprintf(buff,
 8013318:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801331c:	9305      	str	r3, [sp, #20]
 801331e:	69fb      	ldr	r3, [r7, #28]
 8013320:	9304      	str	r3, [sp, #16]
 8013322:	9603      	str	r6, [sp, #12]
 8013324:	9502      	str	r5, [sp, #8]
 8013326:	9401      	str	r4, [sp, #4]
 8013328:	9100      	str	r1, [sp, #0]
 801332a:	4663      	mov	r3, ip
 801332c:	4672      	mov	r2, lr
 801332e:	4924      	ldr	r1, [pc, #144]	; (80133c0 <parseMessage+0x10f4>)
 8013330:	f002 f848 	bl	80153c4 <siprintf>
			JSON = addToMsg(JSON, buff);
 8013334:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013338:	4619      	mov	r1, r3
 801333a:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 801333e:	f7fe fedf 	bl	8012100 <addToMsg>
 8013342:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			JSON_len++;
 8013346:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 801334a:	3301      	adds	r3, #1
 801334c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
			index = index + 9;
 8013350:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8013354:	3309      	adds	r3, #9
 8013356:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
			break;
 801335a:	e002      	b.n	8013362 <parseMessage+0x1096>
		default:
			// unknown CAN ID
			switchError = 1;
 801335c:	2301      	movs	r3, #1
 801335e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	while ((index < *msg_len) && (switchError == 0)) {
 8013362:	f107 0320 	add.w	r3, r7, #32
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	881b      	ldrh	r3, [r3, #0]
 801336a:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 801336e:	429a      	cmp	r2, r3
 8013370:	d204      	bcs.n	801337c <parseMessage+0x10b0>
 8013372:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8013376:	2b00      	cmp	r3, #0
 8013378:	f43f a80f 	beq.w	801239a <parseMessage+0xce>
		}
	}
	hcSentenceProcessing = 0;	// done with processing HC-12 sentence
 801337c:	4b11      	ldr	r3, [pc, #68]	; (80133c4 <parseMessage+0x10f8>)
 801337e:	2200      	movs	r2, #0
 8013380:	701a      	strb	r2, [r3, #0]
	JSON = addToMsg(JSON, "}}\r\n");	// append last chars to final JSON
 8013382:	4911      	ldr	r1, [pc, #68]	; (80133c8 <parseMessage+0x10fc>)
 8013384:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8013388:	f7fe feba 	bl	8012100 <addToMsg>
 801338c:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
	//vypis(JSON);	// print final JSON to serial (station)
	HAL_UART_Transmit(&huart2, (uint8_t*) JSON, strlen(JSON), 200);	// TODO: timeout correction?
 8013390:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8013394:	f001 fd1a 	bl	8014dcc <strlen>
 8013398:	4603      	mov	r3, r0
 801339a:	b29a      	uxth	r2, r3
 801339c:	23c8      	movs	r3, #200	; 0xc8
 801339e:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80133a2:	480a      	ldr	r0, [pc, #40]	; (80133cc <parseMessage+0x1100>)
 80133a4:	f7fd f938 	bl	8010618 <HAL_UART_Transmit>
	free(JSON);
 80133a8:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 80133ac:	f001 ff46 	bl	801523c <free>
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80133b6:	46bd      	mov	sp, r7
 80133b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133bc:	08015b6c 	.word	0x08015b6c
 80133c0:	080160e8 	.word	0x080160e8
 80133c4:	2000008e 	.word	0x2000008e
 80133c8:	08016174 	.word	0x08016174
 80133cc:	20000ad8 	.word	0x20000ad8

080133d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b082      	sub	sp, #8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80133d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80133dc:	4896      	ldr	r0, [pc, #600]	; (8013638 <HAL_UART_RxCpltCallback+0x268>)
 80133de:	f7ef fe3a 	bl	8003056 <HAL_GPIO_TogglePin>
	if (huart == &huart8) {
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	4a95      	ldr	r2, [pc, #596]	; (801363c <HAL_UART_RxCpltCallback+0x26c>)
 80133e6:	4293      	cmp	r3, r2
 80133e8:	d174      	bne.n	80134d4 <HAL_UART_RxCpltCallback+0x104>
		if (hcSentenceProcessing) {
 80133ea:	4b95      	ldr	r3, [pc, #596]	; (8013640 <HAL_UART_RxCpltCallback+0x270>)
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d16b      	bne.n	80134ca <HAL_UART_RxCpltCallback+0xfa>
			// if hcSentence (buffer) is processing, do not change data
		} else if ((hcSentenceLength >= 2) && (hcRxChar[0] == '\0')
 80133f2:	4b94      	ldr	r3, [pc, #592]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 80133f4:	881b      	ldrh	r3, [r3, #0]
 80133f6:	2b01      	cmp	r3, #1
 80133f8:	d937      	bls.n	801346a <HAL_UART_RxCpltCallback+0x9a>
 80133fa:	4b93      	ldr	r3, [pc, #588]	; (8013648 <HAL_UART_RxCpltCallback+0x278>)
 80133fc:	781b      	ldrb	r3, [r3, #0]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d133      	bne.n	801346a <HAL_UART_RxCpltCallback+0x9a>
				&& (hcSentence[hcSentenceLength - 2] == 0x00)
 8013402:	4b90      	ldr	r3, [pc, #576]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 8013404:	881b      	ldrh	r3, [r3, #0]
 8013406:	3b02      	subs	r3, #2
 8013408:	4a90      	ldr	r2, [pc, #576]	; (801364c <HAL_UART_RxCpltCallback+0x27c>)
 801340a:	5cd3      	ldrb	r3, [r2, r3]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d12c      	bne.n	801346a <HAL_UART_RxCpltCallback+0x9a>
				&& (hcSentence[hcSentenceLength - 1] == 0xfe)) {
 8013410:	4b8c      	ldr	r3, [pc, #560]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 8013412:	881b      	ldrh	r3, [r3, #0]
 8013414:	3b01      	subs	r3, #1
 8013416:	4a8d      	ldr	r2, [pc, #564]	; (801364c <HAL_UART_RxCpltCallback+0x27c>)
 8013418:	5cd3      	ldrb	r3, [r2, r3]
 801341a:	2bfe      	cmp	r3, #254	; 0xfe
 801341c:	d125      	bne.n	801346a <HAL_UART_RxCpltCallback+0x9a>
			hcSentenceLength = 0;
 801341e:	4b89      	ldr	r3, [pc, #548]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 8013420:	2200      	movs	r2, #0
 8013422:	801a      	strh	r2, [r3, #0]
			hcSentence[hcSentenceLength++] = 0x00;
 8013424:	4b87      	ldr	r3, [pc, #540]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 8013426:	881b      	ldrh	r3, [r3, #0]
 8013428:	1c5a      	adds	r2, r3, #1
 801342a:	b291      	uxth	r1, r2
 801342c:	4a85      	ldr	r2, [pc, #532]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 801342e:	8011      	strh	r1, [r2, #0]
 8013430:	461a      	mov	r2, r3
 8013432:	4b86      	ldr	r3, [pc, #536]	; (801364c <HAL_UART_RxCpltCallback+0x27c>)
 8013434:	2100      	movs	r1, #0
 8013436:	5499      	strb	r1, [r3, r2]
			hcSentence[hcSentenceLength++] = 0xfe;
 8013438:	4b82      	ldr	r3, [pc, #520]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 801343a:	881b      	ldrh	r3, [r3, #0]
 801343c:	1c5a      	adds	r2, r3, #1
 801343e:	b291      	uxth	r1, r2
 8013440:	4a80      	ldr	r2, [pc, #512]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 8013442:	8011      	strh	r1, [r2, #0]
 8013444:	461a      	mov	r2, r3
 8013446:	4b81      	ldr	r3, [pc, #516]	; (801364c <HAL_UART_RxCpltCallback+0x27c>)
 8013448:	21fe      	movs	r1, #254	; 0xfe
 801344a:	5499      	strb	r1, [r3, r2]
			hcSentence[hcSentenceLength++] = hcRxChar[0];
 801344c:	4b7d      	ldr	r3, [pc, #500]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 801344e:	881b      	ldrh	r3, [r3, #0]
 8013450:	1c5a      	adds	r2, r3, #1
 8013452:	b291      	uxth	r1, r2
 8013454:	4a7b      	ldr	r2, [pc, #492]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 8013456:	8011      	strh	r1, [r2, #0]
 8013458:	461a      	mov	r2, r3
 801345a:	4b7b      	ldr	r3, [pc, #492]	; (8013648 <HAL_UART_RxCpltCallback+0x278>)
 801345c:	7819      	ldrb	r1, [r3, #0]
 801345e:	4b7b      	ldr	r3, [pc, #492]	; (801364c <HAL_UART_RxCpltCallback+0x27c>)
 8013460:	5499      	strb	r1, [r3, r2]
			hcSentenceReady = 0;
 8013462:	4b7b      	ldr	r3, [pc, #492]	; (8013650 <HAL_UART_RxCpltCallback+0x280>)
 8013464:	2200      	movs	r2, #0
 8013466:	701a      	strb	r2, [r3, #0]
 8013468:	e02f      	b.n	80134ca <HAL_UART_RxCpltCallback+0xfa>
		} else if ((hcSentenceLength > 3) && (hcRxChar[0] == '\0')
 801346a:	4b76      	ldr	r3, [pc, #472]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 801346c:	881b      	ldrh	r3, [r3, #0]
 801346e:	2b03      	cmp	r3, #3
 8013470:	d920      	bls.n	80134b4 <HAL_UART_RxCpltCallback+0xe4>
 8013472:	4b75      	ldr	r3, [pc, #468]	; (8013648 <HAL_UART_RxCpltCallback+0x278>)
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d11c      	bne.n	80134b4 <HAL_UART_RxCpltCallback+0xe4>
				&& (hcSentence[hcSentenceLength - 1] == 0xff)
 801347a:	4b72      	ldr	r3, [pc, #456]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 801347c:	881b      	ldrh	r3, [r3, #0]
 801347e:	3b01      	subs	r3, #1
 8013480:	4a72      	ldr	r2, [pc, #456]	; (801364c <HAL_UART_RxCpltCallback+0x27c>)
 8013482:	5cd3      	ldrb	r3, [r2, r3]
 8013484:	2bff      	cmp	r3, #255	; 0xff
 8013486:	d115      	bne.n	80134b4 <HAL_UART_RxCpltCallback+0xe4>
				&& (hcSentence[hcSentenceLength - 2] == 0x00)) {
 8013488:	4b6e      	ldr	r3, [pc, #440]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 801348a:	881b      	ldrh	r3, [r3, #0]
 801348c:	3b02      	subs	r3, #2
 801348e:	4a6f      	ldr	r2, [pc, #444]	; (801364c <HAL_UART_RxCpltCallback+0x27c>)
 8013490:	5cd3      	ldrb	r3, [r2, r3]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d10e      	bne.n	80134b4 <HAL_UART_RxCpltCallback+0xe4>
			hcSentence[hcSentenceLength++] = hcRxChar[0];
 8013496:	4b6b      	ldr	r3, [pc, #428]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 8013498:	881b      	ldrh	r3, [r3, #0]
 801349a:	1c5a      	adds	r2, r3, #1
 801349c:	b291      	uxth	r1, r2
 801349e:	4a69      	ldr	r2, [pc, #420]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 80134a0:	8011      	strh	r1, [r2, #0]
 80134a2:	461a      	mov	r2, r3
 80134a4:	4b68      	ldr	r3, [pc, #416]	; (8013648 <HAL_UART_RxCpltCallback+0x278>)
 80134a6:	7819      	ldrb	r1, [r3, #0]
 80134a8:	4b68      	ldr	r3, [pc, #416]	; (801364c <HAL_UART_RxCpltCallback+0x27c>)
 80134aa:	5499      	strb	r1, [r3, r2]
			hcSentenceReady = 1;
 80134ac:	4b68      	ldr	r3, [pc, #416]	; (8013650 <HAL_UART_RxCpltCallback+0x280>)
 80134ae:	2201      	movs	r2, #1
 80134b0:	701a      	strb	r2, [r3, #0]
 80134b2:	e00a      	b.n	80134ca <HAL_UART_RxCpltCallback+0xfa>
		} else {
			hcSentence[hcSentenceLength++] = hcRxChar[0];
 80134b4:	4b63      	ldr	r3, [pc, #396]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 80134b6:	881b      	ldrh	r3, [r3, #0]
 80134b8:	1c5a      	adds	r2, r3, #1
 80134ba:	b291      	uxth	r1, r2
 80134bc:	4a61      	ldr	r2, [pc, #388]	; (8013644 <HAL_UART_RxCpltCallback+0x274>)
 80134be:	8011      	strh	r1, [r2, #0]
 80134c0:	461a      	mov	r2, r3
 80134c2:	4b61      	ldr	r3, [pc, #388]	; (8013648 <HAL_UART_RxCpltCallback+0x278>)
 80134c4:	7819      	ldrb	r1, [r3, #0]
 80134c6:	4b61      	ldr	r3, [pc, #388]	; (801364c <HAL_UART_RxCpltCallback+0x27c>)
 80134c8:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(&huart8, hcRxChar, 1);
 80134ca:	2201      	movs	r2, #1
 80134cc:	495e      	ldr	r1, [pc, #376]	; (8013648 <HAL_UART_RxCpltCallback+0x278>)
 80134ce:	485b      	ldr	r0, [pc, #364]	; (801363c <HAL_UART_RxCpltCallback+0x26c>)
 80134d0:	f7fd fa25 	bl	801091e <HAL_UART_Receive_IT>
	}
	if (huart == &huart7) {
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	4a5f      	ldr	r2, [pc, #380]	; (8013654 <HAL_UART_RxCpltCallback+0x284>)
 80134d8:	4293      	cmp	r3, r2
 80134da:	f040 80d5 	bne.w	8013688 <HAL_UART_RxCpltCallback+0x2b8>
		// WiFi - Esp32
		// experimental code wait until last TX finish
		// while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY) {}
		//HAL_UART_Transmit(&huart2, esp32RxChar, 1, 1);

		Esp32_Sentence_length = Esp32_Sentence_length % ESP32SENTENCE;
 80134de:	4b5e      	ldr	r3, [pc, #376]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 80134e0:	681a      	ldr	r2, [r3, #0]
 80134e2:	4b5e      	ldr	r3, [pc, #376]	; (801365c <HAL_UART_RxCpltCallback+0x28c>)
 80134e4:	fb83 1302 	smull	r1, r3, r3, r2
 80134e8:	1159      	asrs	r1, r3, #5
 80134ea:	17d3      	asrs	r3, r2, #31
 80134ec:	1acb      	subs	r3, r1, r3
 80134ee:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80134f2:	fb01 f303 	mul.w	r3, r1, r3
 80134f6:	1ad3      	subs	r3, r2, r3
 80134f8:	4a57      	ldr	r2, [pc, #348]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 80134fa:	6013      	str	r3, [r2, #0]
		// begin: {"Id":
		if ((esp32RxChar[0] == ':') && (Esp32_Sentence_length >= 5)
 80134fc:	4b58      	ldr	r3, [pc, #352]	; (8013660 <HAL_UART_RxCpltCallback+0x290>)
 80134fe:	781b      	ldrb	r3, [r3, #0]
 8013500:	2b3a      	cmp	r3, #58	; 0x3a
 8013502:	d15e      	bne.n	80135c2 <HAL_UART_RxCpltCallback+0x1f2>
 8013504:	4b54      	ldr	r3, [pc, #336]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	2b04      	cmp	r3, #4
 801350a:	dd5a      	ble.n	80135c2 <HAL_UART_RxCpltCallback+0x1f2>
				&& (Esp32_Sentence[Esp32_Sentence_length - 1] == '"')
 801350c:	4b52      	ldr	r3, [pc, #328]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	3b01      	subs	r3, #1
 8013512:	4a54      	ldr	r2, [pc, #336]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 8013514:	5cd3      	ldrb	r3, [r2, r3]
 8013516:	2b22      	cmp	r3, #34	; 0x22
 8013518:	d153      	bne.n	80135c2 <HAL_UART_RxCpltCallback+0x1f2>
				&& (Esp32_Sentence[Esp32_Sentence_length - 2] == 'd')
 801351a:	4b4f      	ldr	r3, [pc, #316]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	3b02      	subs	r3, #2
 8013520:	4a50      	ldr	r2, [pc, #320]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 8013522:	5cd3      	ldrb	r3, [r2, r3]
 8013524:	2b64      	cmp	r3, #100	; 0x64
 8013526:	d14c      	bne.n	80135c2 <HAL_UART_RxCpltCallback+0x1f2>
				&& (Esp32_Sentence[Esp32_Sentence_length - 3] == 'I')
 8013528:	4b4b      	ldr	r3, [pc, #300]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	3b03      	subs	r3, #3
 801352e:	4a4d      	ldr	r2, [pc, #308]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 8013530:	5cd3      	ldrb	r3, [r2, r3]
 8013532:	2b49      	cmp	r3, #73	; 0x49
 8013534:	d145      	bne.n	80135c2 <HAL_UART_RxCpltCallback+0x1f2>
				&& (Esp32_Sentence[Esp32_Sentence_length - 4] == '"')
 8013536:	4b48      	ldr	r3, [pc, #288]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	3b04      	subs	r3, #4
 801353c:	4a49      	ldr	r2, [pc, #292]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 801353e:	5cd3      	ldrb	r3, [r2, r3]
 8013540:	2b22      	cmp	r3, #34	; 0x22
 8013542:	d13e      	bne.n	80135c2 <HAL_UART_RxCpltCallback+0x1f2>
				&& (Esp32_Sentence[Esp32_Sentence_length - 5] == '{')) {
 8013544:	4b44      	ldr	r3, [pc, #272]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	3b05      	subs	r3, #5
 801354a:	4a46      	ldr	r2, [pc, #280]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 801354c:	5cd3      	ldrb	r3, [r2, r3]
 801354e:	2b7b      	cmp	r3, #123	; 0x7b
 8013550:	d137      	bne.n	80135c2 <HAL_UART_RxCpltCallback+0x1f2>
			Esp32_Sentence_length = 0;
 8013552:	4b41      	ldr	r3, [pc, #260]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013554:	2200      	movs	r2, #0
 8013556:	601a      	str	r2, [r3, #0]
			esp32SentenceReady = 0;
 8013558:	4b43      	ldr	r3, [pc, #268]	; (8013668 <HAL_UART_RxCpltCallback+0x298>)
 801355a:	2200      	movs	r2, #0
 801355c:	701a      	strb	r2, [r3, #0]
			Esp32_Sentence[Esp32_Sentence_length++] = '{';
 801355e:	4b3e      	ldr	r3, [pc, #248]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	1c5a      	adds	r2, r3, #1
 8013564:	493c      	ldr	r1, [pc, #240]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013566:	600a      	str	r2, [r1, #0]
 8013568:	4a3e      	ldr	r2, [pc, #248]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 801356a:	217b      	movs	r1, #123	; 0x7b
 801356c:	54d1      	strb	r1, [r2, r3]
			Esp32_Sentence[Esp32_Sentence_length++] = '"';
 801356e:	4b3a      	ldr	r3, [pc, #232]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	1c5a      	adds	r2, r3, #1
 8013574:	4938      	ldr	r1, [pc, #224]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013576:	600a      	str	r2, [r1, #0]
 8013578:	4a3a      	ldr	r2, [pc, #232]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 801357a:	2122      	movs	r1, #34	; 0x22
 801357c:	54d1      	strb	r1, [r2, r3]
			Esp32_Sentence[Esp32_Sentence_length++] = 'I';
 801357e:	4b36      	ldr	r3, [pc, #216]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	1c5a      	adds	r2, r3, #1
 8013584:	4934      	ldr	r1, [pc, #208]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013586:	600a      	str	r2, [r1, #0]
 8013588:	4a36      	ldr	r2, [pc, #216]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 801358a:	2149      	movs	r1, #73	; 0x49
 801358c:	54d1      	strb	r1, [r2, r3]
			Esp32_Sentence[Esp32_Sentence_length++] = 'd';
 801358e:	4b32      	ldr	r3, [pc, #200]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	1c5a      	adds	r2, r3, #1
 8013594:	4930      	ldr	r1, [pc, #192]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013596:	600a      	str	r2, [r1, #0]
 8013598:	4a32      	ldr	r2, [pc, #200]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 801359a:	2164      	movs	r1, #100	; 0x64
 801359c:	54d1      	strb	r1, [r2, r3]
			Esp32_Sentence[Esp32_Sentence_length++] = '"';
 801359e:	4b2e      	ldr	r3, [pc, #184]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	1c5a      	adds	r2, r3, #1
 80135a4:	492c      	ldr	r1, [pc, #176]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 80135a6:	600a      	str	r2, [r1, #0]
 80135a8:	4a2e      	ldr	r2, [pc, #184]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 80135aa:	2122      	movs	r1, #34	; 0x22
 80135ac:	54d1      	strb	r1, [r2, r3]
			Esp32_Sentence[Esp32_Sentence_length++] = esp32RxChar[0];
 80135ae:	4b2a      	ldr	r3, [pc, #168]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	1c5a      	adds	r2, r3, #1
 80135b4:	4928      	ldr	r1, [pc, #160]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 80135b6:	600a      	str	r2, [r1, #0]
 80135b8:	4a29      	ldr	r2, [pc, #164]	; (8013660 <HAL_UART_RxCpltCallback+0x290>)
 80135ba:	7811      	ldrb	r1, [r2, #0]
 80135bc:	4a29      	ldr	r2, [pc, #164]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 80135be:	54d1      	strb	r1, [r2, r3]
 80135c0:	e05d      	b.n	801367e <HAL_UART_RxCpltCallback+0x2ae>
			// end: }}}
		} else if ((esp32RxChar[0] == '}') && (Esp32_Sentence_length >= 2)
 80135c2:	4b27      	ldr	r3, [pc, #156]	; (8013660 <HAL_UART_RxCpltCallback+0x290>)
 80135c4:	781b      	ldrb	r3, [r3, #0]
 80135c6:	2b7d      	cmp	r3, #125	; 0x7d
 80135c8:	d150      	bne.n	801366c <HAL_UART_RxCpltCallback+0x29c>
 80135ca:	4b23      	ldr	r3, [pc, #140]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	2b01      	cmp	r3, #1
 80135d0:	dd4c      	ble.n	801366c <HAL_UART_RxCpltCallback+0x29c>
				&& (Esp32_Sentence[Esp32_Sentence_length - 1] == '}')
 80135d2:	4b21      	ldr	r3, [pc, #132]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	3b01      	subs	r3, #1
 80135d8:	4a22      	ldr	r2, [pc, #136]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 80135da:	5cd3      	ldrb	r3, [r2, r3]
 80135dc:	2b7d      	cmp	r3, #125	; 0x7d
 80135de:	d145      	bne.n	801366c <HAL_UART_RxCpltCallback+0x29c>
				&& (Esp32_Sentence[Esp32_Sentence_length - 2] == '}')) {
 80135e0:	4b1d      	ldr	r3, [pc, #116]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	3b02      	subs	r3, #2
 80135e6:	4a1f      	ldr	r2, [pc, #124]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 80135e8:	5cd3      	ldrb	r3, [r2, r3]
 80135ea:	2b7d      	cmp	r3, #125	; 0x7d
 80135ec:	d13e      	bne.n	801366c <HAL_UART_RxCpltCallback+0x29c>
			Esp32_Sentence[Esp32_Sentence_length++] = '}';
 80135ee:	4b1a      	ldr	r3, [pc, #104]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	1c5a      	adds	r2, r3, #1
 80135f4:	4918      	ldr	r1, [pc, #96]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 80135f6:	600a      	str	r2, [r1, #0]
 80135f8:	4a1a      	ldr	r2, [pc, #104]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 80135fa:	217d      	movs	r1, #125	; 0x7d
 80135fc:	54d1      	strb	r1, [r2, r3]
			Esp32_Sentence[Esp32_Sentence_length++] = '\n';
 80135fe:	4b16      	ldr	r3, [pc, #88]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	1c5a      	adds	r2, r3, #1
 8013604:	4914      	ldr	r1, [pc, #80]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013606:	600a      	str	r2, [r1, #0]
 8013608:	4a16      	ldr	r2, [pc, #88]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 801360a:	210a      	movs	r1, #10
 801360c:	54d1      	strb	r1, [r2, r3]
			Esp32_Sentence[Esp32_Sentence_length++] = '\r';
 801360e:	4b12      	ldr	r3, [pc, #72]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	1c5a      	adds	r2, r3, #1
 8013614:	4910      	ldr	r1, [pc, #64]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013616:	600a      	str	r2, [r1, #0]
 8013618:	4a12      	ldr	r2, [pc, #72]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 801361a:	210d      	movs	r1, #13
 801361c:	54d1      	strb	r1, [r2, r3]
			Esp32_Sentence[Esp32_Sentence_length++] = '\0';
 801361e:	4b0e      	ldr	r3, [pc, #56]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	1c5a      	adds	r2, r3, #1
 8013624:	490c      	ldr	r1, [pc, #48]	; (8013658 <HAL_UART_RxCpltCallback+0x288>)
 8013626:	600a      	str	r2, [r1, #0]
 8013628:	4a0e      	ldr	r2, [pc, #56]	; (8013664 <HAL_UART_RxCpltCallback+0x294>)
 801362a:	2100      	movs	r1, #0
 801362c:	54d1      	strb	r1, [r2, r3]
			esp32SentenceReady = 1;
 801362e:	4b0e      	ldr	r3, [pc, #56]	; (8013668 <HAL_UART_RxCpltCallback+0x298>)
 8013630:	2201      	movs	r2, #1
 8013632:	701a      	strb	r2, [r3, #0]
 8013634:	e023      	b.n	801367e <HAL_UART_RxCpltCallback+0x2ae>
 8013636:	bf00      	nop
 8013638:	40020c00 	.word	0x40020c00
 801363c:	20000a7c 	.word	0x20000a7c
 8013640:	2000008e 	.word	0x2000008e
 8013644:	2000008c 	.word	0x2000008c
 8013648:	20000334 	.word	0x20000334
 801364c:	200000b4 	.word	0x200000b4
 8013650:	2000008f 	.word	0x2000008f
 8013654:	2000020c 	.word	0x2000020c
 8013658:	20000094 	.word	0x20000094
 801365c:	057619f1 	.word	0x057619f1
 8013660:	200000b0 	.word	0x200000b0
 8013664:	20000448 	.word	0x20000448
 8013668:	20000098 	.word	0x20000098

		} else {
			Esp32_Sentence[Esp32_Sentence_length++] = esp32RxChar[0];
 801366c:	4b08      	ldr	r3, [pc, #32]	; (8013690 <HAL_UART_RxCpltCallback+0x2c0>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	1c5a      	adds	r2, r3, #1
 8013672:	4907      	ldr	r1, [pc, #28]	; (8013690 <HAL_UART_RxCpltCallback+0x2c0>)
 8013674:	600a      	str	r2, [r1, #0]
 8013676:	4a07      	ldr	r2, [pc, #28]	; (8013694 <HAL_UART_RxCpltCallback+0x2c4>)
 8013678:	7811      	ldrb	r1, [r2, #0]
 801367a:	4a07      	ldr	r2, [pc, #28]	; (8013698 <HAL_UART_RxCpltCallback+0x2c8>)
 801367c:	54d1      	strb	r1, [r2, r3]
		}


		HAL_UART_Receive_IT(&huart7, esp32RxChar, 1);
 801367e:	2201      	movs	r2, #1
 8013680:	4904      	ldr	r1, [pc, #16]	; (8013694 <HAL_UART_RxCpltCallback+0x2c4>)
 8013682:	4806      	ldr	r0, [pc, #24]	; (801369c <HAL_UART_RxCpltCallback+0x2cc>)
 8013684:	f7fd f94b 	bl	801091e <HAL_UART_Receive_IT>
	}
}
 8013688:	bf00      	nop
 801368a:	3708      	adds	r7, #8
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	20000094 	.word	0x20000094
 8013694:	200000b0 	.word	0x200000b0
 8013698:	20000448 	.word	0x20000448
 801369c:	2000020c 	.word	0x2000020c

080136a0 <vypis>:
 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 HAL_Delay(50);
 }
 }
 */
void vypis(char str[]) {
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b082      	sub	sp, #8
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 200);
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f001 fb8f 	bl	8014dcc <strlen>
 80136ae:	4603      	mov	r3, r0
 80136b0:	b29a      	uxth	r2, r3
 80136b2:	23c8      	movs	r3, #200	; 0xc8
 80136b4:	6879      	ldr	r1, [r7, #4]
 80136b6:	4803      	ldr	r0, [pc, #12]	; (80136c4 <vypis+0x24>)
 80136b8:	f7fc ffae 	bl	8010618 <HAL_UART_Transmit>
	//hcNeedPrint = 0;
}
 80136bc:	bf00      	nop
 80136be:	3708      	adds	r7, #8
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}
 80136c4:	20000ad8 	.word	0x20000ad8

080136c8 <main>:
/**
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void) {
 80136c8:	b580      	push	{r7, lr}
 80136ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80136cc:	f7ec fd90 	bl	80001f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80136d0:	f000 f87e 	bl	80137d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80136d4:	f000 fb8c 	bl	8013df0 <MX_GPIO_Init>
	//MX_CAN1_Init();
	MX_I2C1_Init();
 80136d8:	f000 f936 	bl	8013948 <MX_I2C1_Init>
	MX_I2C2_Init();
 80136dc:	f000 f968 	bl	80139b0 <MX_I2C2_Init>
	MX_SPI2_Init();
 80136e0:	f000 f99a 	bl	8013a18 <MX_SPI2_Init>
	MX_SPI3_Init();
 80136e4:	f000 f9d4 	bl	8013a90 <MX_SPI3_Init>
	MX_SPI4_Init();
 80136e8:	f000 fa0e 	bl	8013b08 <MX_SPI4_Init>
	MX_UART7_Init();
 80136ec:	f000 fa96 	bl	8013c1c <MX_UART7_Init>
	MX_UART8_Init();
 80136f0:	f000 fac2 	bl	8013c78 <MX_UART8_Init>
	MX_USART1_UART_Init();
 80136f4:	f000 faee 	bl	8013cd4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80136f8:	f000 fb1a 	bl	8013d30 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80136fc:	f000 fb48 	bl	8013d90 <MX_USART3_UART_Init>
	MX_TIM1_Init();
 8013700:	f000 fa3e 	bl	8013b80 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim1);
 8013704:	4823      	ldr	r0, [pc, #140]	; (8013794 <main+0xcc>)
 8013706:	f7f7 fcee 	bl	800b0e6 <HAL_TIM_Base_Start_IT>
	//vypis("### Zakladna ###\r\n");
	if (HAL_UART_Receive_IT(&huart8, hcRxChar, 1) != HAL_OK) {
 801370a:	2201      	movs	r2, #1
 801370c:	4922      	ldr	r1, [pc, #136]	; (8013798 <main+0xd0>)
 801370e:	4823      	ldr	r0, [pc, #140]	; (801379c <main+0xd4>)
 8013710:	f7fd f905 	bl	801091e <HAL_UART_Receive_IT>
 8013714:	4603      	mov	r3, r0
 8013716:	2b00      	cmp	r3, #0
 8013718:	d002      	beq.n	8013720 <main+0x58>
		vypis("Error: HC-12\r\n");
 801371a:	4821      	ldr	r0, [pc, #132]	; (80137a0 <main+0xd8>)
 801371c:	f7ff ffc0 	bl	80136a0 <vypis>
	}

	if (HAL_UART_Receive_IT(&huart7, esp32RxChar, 1) != HAL_OK) {
 8013720:	2201      	movs	r2, #1
 8013722:	4920      	ldr	r1, [pc, #128]	; (80137a4 <main+0xdc>)
 8013724:	4820      	ldr	r0, [pc, #128]	; (80137a8 <main+0xe0>)
 8013726:	f7fd f8fa 	bl	801091e <HAL_UART_Receive_IT>
 801372a:	4603      	mov	r3, r0
 801372c:	2b00      	cmp	r3, #0
 801372e:	d002      	beq.n	8013736 <main+0x6e>
		vypis("Error: Esp32\r\n");
 8013730:	481e      	ldr	r0, [pc, #120]	; (80137ac <main+0xe4>)
 8013732:	f7ff ffb5 	bl	80136a0 <vypis>
	 HAL_UART_Transmit(&huart8, "AT\0", 3, 100);
	 HAL_Delay(100);
	 */

	// set HC-12 to normal mode
	HAL_GPIO_WritePin(HC_SET_GPIO_Port, HC_SET_Pin, GPIO_PIN_SET); // HC-12 transcieve mode
 8013736:	2201      	movs	r2, #1
 8013738:	2108      	movs	r1, #8
 801373a:	481d      	ldr	r0, [pc, #116]	; (80137b0 <main+0xe8>)
 801373c:	f7ef fc72 	bl	8003024 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8013740:	2032      	movs	r0, #50	; 0x32
 8013742:	f7ec fe39 	bl	80003b8 <HAL_Delay>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		// FUNGUJE! Nechytat
		if (esp32SentenceReady == 1) {
 8013746:	4b1b      	ldr	r3, [pc, #108]	; (80137b4 <main+0xec>)
 8013748:	781b      	ldrb	r3, [r3, #0]
 801374a:	2b01      	cmp	r3, #1
 801374c:	d10d      	bne.n	801376a <main+0xa2>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 801374e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013752:	4819      	ldr	r0, [pc, #100]	; (80137b8 <main+0xf0>)
 8013754:	f7ef fc7f 	bl	8003056 <HAL_GPIO_TogglePin>
			//Esp32_Sentence[Esp32_Sentence_length] = '\0';
			vypis(Esp32_Sentence);
 8013758:	4818      	ldr	r0, [pc, #96]	; (80137bc <main+0xf4>)
 801375a:	f7ff ffa1 	bl	80136a0 <vypis>
			esp32SentenceReady = 0;
 801375e:	4b15      	ldr	r3, [pc, #84]	; (80137b4 <main+0xec>)
 8013760:	2200      	movs	r2, #0
 8013762:	701a      	strb	r2, [r3, #0]
			Esp32_Sentence_length = 0;
 8013764:	4b16      	ldr	r3, [pc, #88]	; (80137c0 <main+0xf8>)
 8013766:	2200      	movs	r2, #0
 8013768:	601a      	str	r2, [r3, #0]
		}

		if (hcSentenceReady == 1) {
 801376a:	4b16      	ldr	r3, [pc, #88]	; (80137c4 <main+0xfc>)
 801376c:	781b      	ldrb	r3, [r3, #0]
 801376e:	2b01      	cmp	r3, #1
 8013770:	d1e9      	bne.n	8013746 <main+0x7e>
			parseMessage(&hcSentence, &hcSentenceLength);
 8013772:	4915      	ldr	r1, [pc, #84]	; (80137c8 <main+0x100>)
 8013774:	4815      	ldr	r0, [pc, #84]	; (80137cc <main+0x104>)
 8013776:	f7fe fda9 	bl	80122cc <parseMessage>

			//TODO: do i need to null?
			//for (int x = 0; x < hcSentenceLength; ++x) {
			//	hcSentence[x] = '\0';
			//}
			hcSentenceLength = 0;
 801377a:	4b13      	ldr	r3, [pc, #76]	; (80137c8 <main+0x100>)
 801377c:	2200      	movs	r2, #0
 801377e:	801a      	strh	r2, [r3, #0]
			hcSentenceReady = 0;
 8013780:	4b10      	ldr	r3, [pc, #64]	; (80137c4 <main+0xfc>)
 8013782:	2200      	movs	r2, #0
 8013784:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8013786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801378a:	480b      	ldr	r0, [pc, #44]	; (80137b8 <main+0xf0>)
 801378c:	f7ef fc63 	bl	8003056 <HAL_GPIO_TogglePin>
		if (esp32SentenceReady == 1) {
 8013790:	e7d9      	b.n	8013746 <main+0x7e>
 8013792:	bf00      	nop
 8013794:	20000a40 	.word	0x20000a40
 8013798:	20000334 	.word	0x20000334
 801379c:	20000a7c 	.word	0x20000a7c
 80137a0:	0801617c 	.word	0x0801617c
 80137a4:	200000b0 	.word	0x200000b0
 80137a8:	2000020c 	.word	0x2000020c
 80137ac:	0801618c 	.word	0x0801618c
 80137b0:	40020800 	.word	0x40020800
 80137b4:	20000098 	.word	0x20000098
 80137b8:	40020c00 	.word	0x40020c00
 80137bc:	20000448 	.word	0x20000448
 80137c0:	20000094 	.word	0x20000094
 80137c4:	2000008f 	.word	0x2000008f
 80137c8:	2000008c 	.word	0x2000008c
 80137cc:	200000b4 	.word	0x200000b4

080137d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b094      	sub	sp, #80	; 0x50
 80137d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 80137d6:	2300      	movs	r3, #0
 80137d8:	60bb      	str	r3, [r7, #8]
 80137da:	4a3a      	ldr	r2, [pc, #232]	; (80138c4 <SystemClock_Config+0xf4>)
 80137dc:	4b39      	ldr	r3, [pc, #228]	; (80138c4 <SystemClock_Config+0xf4>)
 80137de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137e4:	6413      	str	r3, [r2, #64]	; 0x40
 80137e6:	4b37      	ldr	r3, [pc, #220]	; (80138c4 <SystemClock_Config+0xf4>)
 80137e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80137ee:	60bb      	str	r3, [r7, #8]
 80137f0:	68bb      	ldr	r3, [r7, #8]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80137f2:	2300      	movs	r3, #0
 80137f4:	607b      	str	r3, [r7, #4]
 80137f6:	4a34      	ldr	r2, [pc, #208]	; (80138c8 <SystemClock_Config+0xf8>)
 80137f8:	4b33      	ldr	r3, [pc, #204]	; (80138c8 <SystemClock_Config+0xf8>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013800:	6013      	str	r3, [r2, #0]
 8013802:	4b31      	ldr	r3, [pc, #196]	; (80138c8 <SystemClock_Config+0xf8>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801380a:	607b      	str	r3, [r7, #4]
 801380c:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 801380e:	2302      	movs	r3, #2
 8013810:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8013812:	2301      	movs	r3, #1
 8013814:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8013816:	2310      	movs	r3, #16
 8013818:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801381a:	2302      	movs	r3, #2
 801381c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801381e:	2300      	movs	r3, #0
 8013820:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8013822:	2308      	movs	r3, #8
 8013824:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8013826:	23b4      	movs	r3, #180	; 0xb4
 8013828:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801382a:	2302      	movs	r3, #2
 801382c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 801382e:	2304      	movs	r3, #4
 8013830:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8013832:	f107 0320 	add.w	r3, r7, #32
 8013836:	4618      	mov	r0, r3
 8013838:	f7f4 fd66 	bl	8008308 <HAL_RCC_OscConfig>
 801383c:	4603      	mov	r3, r0
 801383e:	2b00      	cmp	r3, #0
 8013840:	d004      	beq.n	801384c <SystemClock_Config+0x7c>
		_Error_Handler(__FILE__, __LINE__);
 8013842:	f240 4132 	movw	r1, #1074	; 0x432
 8013846:	4821      	ldr	r0, [pc, #132]	; (80138cc <SystemClock_Config+0xfc>)
 8013848:	f000 fbc9 	bl	8013fde <_Error_Handler>
	}

	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 801384c:	f7f4 fc62 	bl	8008114 <HAL_PWREx_EnableOverDrive>
 8013850:	4603      	mov	r3, r0
 8013852:	2b00      	cmp	r3, #0
 8013854:	d004      	beq.n	8013860 <SystemClock_Config+0x90>
		_Error_Handler(__FILE__, __LINE__);
 8013856:	f44f 6187 	mov.w	r1, #1080	; 0x438
 801385a:	481c      	ldr	r0, [pc, #112]	; (80138cc <SystemClock_Config+0xfc>)
 801385c:	f000 fbbf 	bl	8013fde <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8013860:	230f      	movs	r3, #15
 8013862:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013864:	2302      	movs	r3, #2
 8013866:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013868:	2300      	movs	r3, #0
 801386a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801386c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013870:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013876:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8013878:	f107 030c 	add.w	r3, r7, #12
 801387c:	2105      	movs	r1, #5
 801387e:	4618      	mov	r0, r3
 8013880:	f7f4 ff84 	bl	800878c <HAL_RCC_ClockConfig>
 8013884:	4603      	mov	r3, r0
 8013886:	2b00      	cmp	r3, #0
 8013888:	d004      	beq.n	8013894 <SystemClock_Config+0xc4>
		_Error_Handler(__FILE__, __LINE__);
 801388a:	f240 4145 	movw	r1, #1093	; 0x445
 801388e:	480f      	ldr	r0, [pc, #60]	; (80138cc <SystemClock_Config+0xfc>)
 8013890:	f000 fba5 	bl	8013fde <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8013894:	f7f5 f992 	bl	8008bbc <HAL_RCC_GetHCLKFreq>
 8013898:	4602      	mov	r2, r0
 801389a:	4b0d      	ldr	r3, [pc, #52]	; (80138d0 <SystemClock_Config+0x100>)
 801389c:	fba3 2302 	umull	r2, r3, r3, r2
 80138a0:	099b      	lsrs	r3, r3, #6
 80138a2:	4618      	mov	r0, r3
 80138a4:	f7ee f9a5 	bl	8001bf2 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80138a8:	2004      	movs	r0, #4
 80138aa:	f7ee fa7e 	bl	8001daa <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80138ae:	2200      	movs	r2, #0
 80138b0:	2100      	movs	r1, #0
 80138b2:	f04f 30ff 	mov.w	r0, #4294967295
 80138b6:	f7ee f95e 	bl	8001b76 <HAL_NVIC_SetPriority>
}
 80138ba:	bf00      	nop
 80138bc:	3750      	adds	r7, #80	; 0x50
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop
 80138c4:	40023800 	.word	0x40023800
 80138c8:	40007000 	.word	0x40007000
 80138cc:	0801619c 	.word	0x0801619c
 80138d0:	10624dd3 	.word	0x10624dd3

080138d4 <MX_CAN1_Init>:

/* CAN1 init function */
static void MX_CAN1_Init(void) {
 80138d4:	b580      	push	{r7, lr}
 80138d6:	af00      	add	r7, sp, #0

	hcan1.Instance = CAN1;
 80138d8:	4b18      	ldr	r3, [pc, #96]	; (801393c <MX_CAN1_Init+0x68>)
 80138da:	4a19      	ldr	r2, [pc, #100]	; (8013940 <MX_CAN1_Init+0x6c>)
 80138dc:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 80138de:	4b17      	ldr	r3, [pc, #92]	; (801393c <MX_CAN1_Init+0x68>)
 80138e0:	2210      	movs	r2, #16
 80138e2:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80138e4:	4b15      	ldr	r3, [pc, #84]	; (801393c <MX_CAN1_Init+0x68>)
 80138e6:	2200      	movs	r2, #0
 80138e8:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80138ea:	4b14      	ldr	r3, [pc, #80]	; (801393c <MX_CAN1_Init+0x68>)
 80138ec:	2200      	movs	r2, #0
 80138ee:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80138f0:	4b12      	ldr	r3, [pc, #72]	; (801393c <MX_CAN1_Init+0x68>)
 80138f2:	2200      	movs	r2, #0
 80138f4:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80138f6:	4b11      	ldr	r3, [pc, #68]	; (801393c <MX_CAN1_Init+0x68>)
 80138f8:	2200      	movs	r2, #0
 80138fa:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80138fc:	4b0f      	ldr	r3, [pc, #60]	; (801393c <MX_CAN1_Init+0x68>)
 80138fe:	2200      	movs	r2, #0
 8013900:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8013902:	4b0e      	ldr	r3, [pc, #56]	; (801393c <MX_CAN1_Init+0x68>)
 8013904:	2200      	movs	r2, #0
 8013906:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8013908:	4b0c      	ldr	r3, [pc, #48]	; (801393c <MX_CAN1_Init+0x68>)
 801390a:	2200      	movs	r2, #0
 801390c:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 801390e:	4b0b      	ldr	r3, [pc, #44]	; (801393c <MX_CAN1_Init+0x68>)
 8013910:	2200      	movs	r2, #0
 8013912:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8013914:	4b09      	ldr	r3, [pc, #36]	; (801393c <MX_CAN1_Init+0x68>)
 8013916:	2200      	movs	r2, #0
 8013918:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 801391a:	4b08      	ldr	r3, [pc, #32]	; (801393c <MX_CAN1_Init+0x68>)
 801391c:	2200      	movs	r2, #0
 801391e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8013920:	4806      	ldr	r0, [pc, #24]	; (801393c <MX_CAN1_Init+0x68>)
 8013922:	f7ec fe5d 	bl	80005e0 <HAL_CAN_Init>
 8013926:	4603      	mov	r3, r0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d004      	beq.n	8013936 <MX_CAN1_Init+0x62>
		_Error_Handler(__FILE__, __LINE__);
 801392c:	f240 4164 	movw	r1, #1124	; 0x464
 8013930:	4804      	ldr	r0, [pc, #16]	; (8013944 <MX_CAN1_Init+0x70>)
 8013932:	f000 fb54 	bl	8013fde <_Error_Handler>
	}

}
 8013936:	bf00      	nop
 8013938:	bd80      	pop	{r7, pc}
 801393a:	bf00      	nop
 801393c:	20000b18 	.word	0x20000b18
 8013940:	40006400 	.word	0x40006400
 8013944:	0801619c 	.word	0x0801619c

08013948 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void) {
 8013948:	b580      	push	{r7, lr}
 801394a:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 801394c:	4b14      	ldr	r3, [pc, #80]	; (80139a0 <MX_I2C1_Init+0x58>)
 801394e:	4a15      	ldr	r2, [pc, #84]	; (80139a4 <MX_I2C1_Init+0x5c>)
 8013950:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8013952:	4b13      	ldr	r3, [pc, #76]	; (80139a0 <MX_I2C1_Init+0x58>)
 8013954:	4a14      	ldr	r2, [pc, #80]	; (80139a8 <MX_I2C1_Init+0x60>)
 8013956:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8013958:	4b11      	ldr	r3, [pc, #68]	; (80139a0 <MX_I2C1_Init+0x58>)
 801395a:	2200      	movs	r2, #0
 801395c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 801395e:	4b10      	ldr	r3, [pc, #64]	; (80139a0 <MX_I2C1_Init+0x58>)
 8013960:	2200      	movs	r2, #0
 8013962:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013964:	4b0e      	ldr	r3, [pc, #56]	; (80139a0 <MX_I2C1_Init+0x58>)
 8013966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801396a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801396c:	4b0c      	ldr	r3, [pc, #48]	; (80139a0 <MX_I2C1_Init+0x58>)
 801396e:	2200      	movs	r2, #0
 8013970:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8013972:	4b0b      	ldr	r3, [pc, #44]	; (80139a0 <MX_I2C1_Init+0x58>)
 8013974:	2200      	movs	r2, #0
 8013976:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013978:	4b09      	ldr	r3, [pc, #36]	; (80139a0 <MX_I2C1_Init+0x58>)
 801397a:	2200      	movs	r2, #0
 801397c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801397e:	4b08      	ldr	r3, [pc, #32]	; (80139a0 <MX_I2C1_Init+0x58>)
 8013980:	2200      	movs	r2, #0
 8013982:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8013984:	4806      	ldr	r0, [pc, #24]	; (80139a0 <MX_I2C1_Init+0x58>)
 8013986:	f7ef fbc5 	bl	8003114 <HAL_I2C_Init>
 801398a:	4603      	mov	r3, r0
 801398c:	2b00      	cmp	r3, #0
 801398e:	d004      	beq.n	801399a <MX_I2C1_Init+0x52>
		_Error_Handler(__FILE__, __LINE__);
 8013990:	f240 4176 	movw	r1, #1142	; 0x476
 8013994:	4805      	ldr	r0, [pc, #20]	; (80139ac <MX_I2C1_Init+0x64>)
 8013996:	f000 fb22 	bl	8013fde <_Error_Handler>
	}

}
 801399a:	bf00      	nop
 801399c:	bd80      	pop	{r7, pc}
 801399e:	bf00      	nop
 80139a0:	2000028c 	.word	0x2000028c
 80139a4:	40005400 	.word	0x40005400
 80139a8:	000186a0 	.word	0x000186a0
 80139ac:	0801619c 	.word	0x0801619c

080139b0 <MX_I2C2_Init>:

/* I2C2 init function */
static void MX_I2C2_Init(void) {
 80139b0:	b580      	push	{r7, lr}
 80139b2:	af00      	add	r7, sp, #0

	hi2c2.Instance = I2C2;
 80139b4:	4b14      	ldr	r3, [pc, #80]	; (8013a08 <MX_I2C2_Init+0x58>)
 80139b6:	4a15      	ldr	r2, [pc, #84]	; (8013a0c <MX_I2C2_Init+0x5c>)
 80139b8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80139ba:	4b13      	ldr	r3, [pc, #76]	; (8013a08 <MX_I2C2_Init+0x58>)
 80139bc:	4a14      	ldr	r2, [pc, #80]	; (8013a10 <MX_I2C2_Init+0x60>)
 80139be:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80139c0:	4b11      	ldr	r3, [pc, #68]	; (8013a08 <MX_I2C2_Init+0x58>)
 80139c2:	2200      	movs	r2, #0
 80139c4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80139c6:	4b10      	ldr	r3, [pc, #64]	; (8013a08 <MX_I2C2_Init+0x58>)
 80139c8:	2200      	movs	r2, #0
 80139ca:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80139cc:	4b0e      	ldr	r3, [pc, #56]	; (8013a08 <MX_I2C2_Init+0x58>)
 80139ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80139d2:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80139d4:	4b0c      	ldr	r3, [pc, #48]	; (8013a08 <MX_I2C2_Init+0x58>)
 80139d6:	2200      	movs	r2, #0
 80139d8:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80139da:	4b0b      	ldr	r3, [pc, #44]	; (8013a08 <MX_I2C2_Init+0x58>)
 80139dc:	2200      	movs	r2, #0
 80139de:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80139e0:	4b09      	ldr	r3, [pc, #36]	; (8013a08 <MX_I2C2_Init+0x58>)
 80139e2:	2200      	movs	r2, #0
 80139e4:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80139e6:	4b08      	ldr	r3, [pc, #32]	; (8013a08 <MX_I2C2_Init+0x58>)
 80139e8:	2200      	movs	r2, #0
 80139ea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80139ec:	4806      	ldr	r0, [pc, #24]	; (8013a08 <MX_I2C2_Init+0x58>)
 80139ee:	f7ef fb91 	bl	8003114 <HAL_I2C_Init>
 80139f2:	4603      	mov	r3, r0
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d004      	beq.n	8013a02 <MX_I2C2_Init+0x52>
		_Error_Handler(__FILE__, __LINE__);
 80139f8:	f44f 6191 	mov.w	r1, #1160	; 0x488
 80139fc:	4805      	ldr	r0, [pc, #20]	; (8013a14 <MX_I2C2_Init+0x64>)
 80139fe:	f000 faee 	bl	8013fde <_Error_Handler>
	}

}
 8013a02:	bf00      	nop
 8013a04:	bd80      	pop	{r7, pc}
 8013a06:	bf00      	nop
 8013a08:	200002e0 	.word	0x200002e0
 8013a0c:	40005800 	.word	0x40005800
 8013a10:	000186a0 	.word	0x000186a0
 8013a14:	0801619c 	.word	0x0801619c

08013a18 <MX_SPI2_Init>:

/* SPI2 init function */
static void MX_SPI2_Init(void) {
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	af00      	add	r7, sp, #0

	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8013a1c:	4b19      	ldr	r3, [pc, #100]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a1e:	4a1a      	ldr	r2, [pc, #104]	; (8013a88 <MX_SPI2_Init+0x70>)
 8013a20:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8013a22:	4b18      	ldr	r3, [pc, #96]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8013a28:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8013a2a:	4b16      	ldr	r3, [pc, #88]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8013a30:	4b14      	ldr	r3, [pc, #80]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a32:	2200      	movs	r2, #0
 8013a34:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8013a36:	4b13      	ldr	r3, [pc, #76]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a38:	2200      	movs	r2, #0
 8013a3a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8013a3c:	4b11      	ldr	r3, [pc, #68]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a3e:	2200      	movs	r2, #0
 8013a40:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8013a42:	4b10      	ldr	r3, [pc, #64]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a48:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013a4a:	4b0e      	ldr	r3, [pc, #56]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013a50:	4b0c      	ldr	r3, [pc, #48]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a52:	2200      	movs	r2, #0
 8013a54:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8013a56:	4b0b      	ldr	r3, [pc, #44]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a58:	2200      	movs	r2, #0
 8013a5a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013a5c:	4b09      	ldr	r3, [pc, #36]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a5e:	2200      	movs	r2, #0
 8013a60:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8013a62:	4b08      	ldr	r3, [pc, #32]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a64:	220a      	movs	r2, #10
 8013a66:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8013a68:	4806      	ldr	r0, [pc, #24]	; (8013a84 <MX_SPI2_Init+0x6c>)
 8013a6a:	f7f5 f9bd 	bl	8008de8 <HAL_SPI_Init>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d004      	beq.n	8013a7e <MX_SPI2_Init+0x66>
		_Error_Handler(__FILE__, __LINE__);
 8013a74:	f240 419e 	movw	r1, #1182	; 0x49e
 8013a78:	4804      	ldr	r0, [pc, #16]	; (8013a8c <MX_SPI2_Init+0x74>)
 8013a7a:	f000 fab0 	bl	8013fde <_Error_Handler>
	}

}
 8013a7e:	bf00      	nop
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	200001b4 	.word	0x200001b4
 8013a88:	40003800 	.word	0x40003800
 8013a8c:	0801619c 	.word	0x0801619c

08013a90 <MX_SPI3_Init>:

/* SPI3 init function */
static void MX_SPI3_Init(void) {
 8013a90:	b580      	push	{r7, lr}
 8013a92:	af00      	add	r7, sp, #0

	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8013a94:	4b19      	ldr	r3, [pc, #100]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013a96:	4a1a      	ldr	r2, [pc, #104]	; (8013b00 <MX_SPI3_Init+0x70>)
 8013a98:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8013a9a:	4b18      	ldr	r3, [pc, #96]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013a9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8013aa0:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8013aa2:	4b16      	ldr	r3, [pc, #88]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8013aa8:	4b14      	ldr	r3, [pc, #80]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013aaa:	2200      	movs	r2, #0
 8013aac:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8013aae:	4b13      	ldr	r3, [pc, #76]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8013ab4:	4b11      	ldr	r3, [pc, #68]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8013aba:	4b10      	ldr	r3, [pc, #64]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013abc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8013ac0:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013ac2:	4b0e      	ldr	r3, [pc, #56]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013ac8:	4b0c      	ldr	r3, [pc, #48]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013aca:	2200      	movs	r2, #0
 8013acc:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8013ace:	4b0b      	ldr	r3, [pc, #44]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013ad4:	4b09      	ldr	r3, [pc, #36]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8013ada:	4b08      	ldr	r3, [pc, #32]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013adc:	220a      	movs	r2, #10
 8013ade:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8013ae0:	4806      	ldr	r0, [pc, #24]	; (8013afc <MX_SPI3_Init+0x6c>)
 8013ae2:	f7f5 f981 	bl	8008de8 <HAL_SPI_Init>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d004      	beq.n	8013af6 <MX_SPI3_Init+0x66>
		_Error_Handler(__FILE__, __LINE__);
 8013aec:	f240 41b4 	movw	r1, #1204	; 0x4b4
 8013af0:	4804      	ldr	r0, [pc, #16]	; (8013b04 <MX_SPI3_Init+0x74>)
 8013af2:	f000 fa74 	bl	8013fde <_Error_Handler>
	}

}
 8013af6:	bf00      	nop
 8013af8:	bd80      	pop	{r7, pc}
 8013afa:	bf00      	nop
 8013afc:	20000338 	.word	0x20000338
 8013b00:	40003c00 	.word	0x40003c00
 8013b04:	0801619c 	.word	0x0801619c

08013b08 <MX_SPI4_Init>:

/* SPI4 init function */
static void MX_SPI4_Init(void) {
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	af00      	add	r7, sp, #0

	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8013b0c:	4b19      	ldr	r3, [pc, #100]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b0e:	4a1a      	ldr	r2, [pc, #104]	; (8013b78 <MX_SPI4_Init+0x70>)
 8013b10:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8013b12:	4b18      	ldr	r3, [pc, #96]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8013b18:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8013b1a:	4b16      	ldr	r3, [pc, #88]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8013b20:	4b14      	ldr	r3, [pc, #80]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b22:	2200      	movs	r2, #0
 8013b24:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;	// LOW
 8013b26:	4b13      	ldr	r3, [pc, #76]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b28:	2200      	movs	r2, #0
 8013b2a:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;	//1
 8013b2c:	4b11      	ldr	r3, [pc, #68]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b2e:	2200      	movs	r2, #0
 8013b30:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_SOFT;	// soft
 8013b32:	4b10      	ldr	r3, [pc, #64]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b38:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; //2
 8013b3a:	4b0e      	ldr	r3, [pc, #56]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b3c:	2230      	movs	r2, #48	; 0x30
 8013b3e:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB; // MSB
 8013b40:	4b0c      	ldr	r3, [pc, #48]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b42:	2200      	movs	r2, #0
 8013b44:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE; // disable
 8013b46:	4b0b      	ldr	r3, [pc, #44]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b48:	2200      	movs	r2, #0
 8013b4a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE; // disable
 8013b4c:	4b09      	ldr	r3, [pc, #36]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013b52:	629a      	str	r2, [r3, #40]	; 0x28
	hspi4.Init.CRCPolynomial = 10;
 8013b54:	4b07      	ldr	r3, [pc, #28]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b56:	220a      	movs	r2, #10
 8013b58:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8013b5a:	4806      	ldr	r0, [pc, #24]	; (8013b74 <MX_SPI4_Init+0x6c>)
 8013b5c:	f7f5 f944 	bl	8008de8 <HAL_SPI_Init>
 8013b60:	4603      	mov	r3, r0
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d004      	beq.n	8013b70 <MX_SPI4_Init+0x68>
		_Error_Handler(__FILE__, __LINE__);
 8013b66:	f240 41ca 	movw	r1, #1226	; 0x4ca
 8013b6a:	4804      	ldr	r0, [pc, #16]	; (8013b7c <MX_SPI4_Init+0x74>)
 8013b6c:	f000 fa37 	bl	8013fde <_Error_Handler>
	}

}
 8013b70:	bf00      	nop
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	200003f0 	.word	0x200003f0
 8013b78:	40013400 	.word	0x40013400
 8013b7c:	0801619c 	.word	0x0801619c

08013b80 <MX_TIM1_Init>:

/* TIM1 init function */
static void MX_TIM1_Init(void) {
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b086      	sub	sp, #24
 8013b84:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim1.Instance = TIM1;
 8013b86:	4b22      	ldr	r3, [pc, #136]	; (8013c10 <MX_TIM1_Init+0x90>)
 8013b88:	4a22      	ldr	r2, [pc, #136]	; (8013c14 <MX_TIM1_Init+0x94>)
 8013b8a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1439;
 8013b8c:	4b20      	ldr	r3, [pc, #128]	; (8013c10 <MX_TIM1_Init+0x90>)
 8013b8e:	f240 529f 	movw	r2, #1439	; 0x59f
 8013b92:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013b94:	4b1e      	ldr	r3, [pc, #120]	; (8013c10 <MX_TIM1_Init+0x90>)
 8013b96:	2200      	movs	r2, #0
 8013b98:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 62499;
 8013b9a:	4b1d      	ldr	r3, [pc, #116]	; (8013c10 <MX_TIM1_Init+0x90>)
 8013b9c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8013ba0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013ba2:	4b1b      	ldr	r3, [pc, #108]	; (8013c10 <MX_TIM1_Init+0x90>)
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8013ba8:	4b19      	ldr	r3, [pc, #100]	; (8013c10 <MX_TIM1_Init+0x90>)
 8013baa:	2200      	movs	r2, #0
 8013bac:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8013bae:	4818      	ldr	r0, [pc, #96]	; (8013c10 <MX_TIM1_Init+0x90>)
 8013bb0:	f7f7 f9e4 	bl	800af7c <HAL_TIM_Base_Init>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d004      	beq.n	8013bc4 <MX_TIM1_Init+0x44>
		_Error_Handler(__FILE__, __LINE__);
 8013bba:	f240 41dc 	movw	r1, #1244	; 0x4dc
 8013bbe:	4816      	ldr	r0, [pc, #88]	; (8013c18 <MX_TIM1_Init+0x98>)
 8013bc0:	f000 fa0d 	bl	8013fde <_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013bc8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8013bca:	f107 0308 	add.w	r3, r7, #8
 8013bce:	4619      	mov	r1, r3
 8013bd0:	480f      	ldr	r0, [pc, #60]	; (8013c10 <MX_TIM1_Init+0x90>)
 8013bd2:	f7fa f923 	bl	800de1c <HAL_TIM_ConfigClockSource>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d004      	beq.n	8013be6 <MX_TIM1_Init+0x66>
		_Error_Handler(__FILE__, __LINE__);
 8013bdc:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8013be0:	480d      	ldr	r0, [pc, #52]	; (8013c18 <MX_TIM1_Init+0x98>)
 8013be2:	f000 f9fc 	bl	8013fde <_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013be6:	2300      	movs	r3, #0
 8013be8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013bea:	2300      	movs	r3, #0
 8013bec:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8013bee:	463b      	mov	r3, r7
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	4807      	ldr	r0, [pc, #28]	; (8013c10 <MX_TIM1_Init+0x90>)
 8013bf4:	f7fc fa48 	bl	8010088 <HAL_TIMEx_MasterConfigSynchronization>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d004      	beq.n	8013c08 <MX_TIM1_Init+0x88>
			!= HAL_OK) {
		_Error_Handler(__FILE__, __LINE__);
 8013bfe:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 8013c02:	4805      	ldr	r0, [pc, #20]	; (8013c18 <MX_TIM1_Init+0x98>)
 8013c04:	f000 f9eb 	bl	8013fde <_Error_Handler>
	}

}
 8013c08:	bf00      	nop
 8013c0a:	3718      	adds	r7, #24
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}
 8013c10:	20000a40 	.word	0x20000a40
 8013c14:	40010000 	.word	0x40010000
 8013c18:	0801619c 	.word	0x0801619c

08013c1c <MX_UART7_Init>:

/* UART7 init function */
static void MX_UART7_Init(void) {
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	af00      	add	r7, sp, #0

	huart7.Instance = UART7;
 8013c20:	4b12      	ldr	r3, [pc, #72]	; (8013c6c <MX_UART7_Init+0x50>)
 8013c22:	4a13      	ldr	r2, [pc, #76]	; (8013c70 <MX_UART7_Init+0x54>)
 8013c24:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 8013c26:	4b11      	ldr	r3, [pc, #68]	; (8013c6c <MX_UART7_Init+0x50>)
 8013c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013c2c:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8013c2e:	4b0f      	ldr	r3, [pc, #60]	; (8013c6c <MX_UART7_Init+0x50>)
 8013c30:	2200      	movs	r2, #0
 8013c32:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8013c34:	4b0d      	ldr	r3, [pc, #52]	; (8013c6c <MX_UART7_Init+0x50>)
 8013c36:	2200      	movs	r2, #0
 8013c38:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 8013c3a:	4b0c      	ldr	r3, [pc, #48]	; (8013c6c <MX_UART7_Init+0x50>)
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8013c40:	4b0a      	ldr	r3, [pc, #40]	; (8013c6c <MX_UART7_Init+0x50>)
 8013c42:	220c      	movs	r2, #12
 8013c44:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013c46:	4b09      	ldr	r3, [pc, #36]	; (8013c6c <MX_UART7_Init+0x50>)
 8013c48:	2200      	movs	r2, #0
 8013c4a:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8013c4c:	4b07      	ldr	r3, [pc, #28]	; (8013c6c <MX_UART7_Init+0x50>)
 8013c4e:	2200      	movs	r2, #0
 8013c50:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8013c52:	4806      	ldr	r0, [pc, #24]	; (8013c6c <MX_UART7_Init+0x50>)
 8013c54:	f7fc fb30 	bl	80102b8 <HAL_UART_Init>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d004      	beq.n	8013c68 <MX_UART7_Init+0x4c>
		_Error_Handler(__FILE__, __LINE__);
 8013c5e:	f240 41f9 	movw	r1, #1273	; 0x4f9
 8013c62:	4804      	ldr	r0, [pc, #16]	; (8013c74 <MX_UART7_Init+0x58>)
 8013c64:	f000 f9bb 	bl	8013fde <_Error_Handler>
	}

}
 8013c68:	bf00      	nop
 8013c6a:	bd80      	pop	{r7, pc}
 8013c6c:	2000020c 	.word	0x2000020c
 8013c70:	40007800 	.word	0x40007800
 8013c74:	0801619c 	.word	0x0801619c

08013c78 <MX_UART8_Init>:

/* UART8 init function */
static void MX_UART8_Init(void) {
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	af00      	add	r7, sp, #0

	huart8.Instance = UART8;
 8013c7c:	4b12      	ldr	r3, [pc, #72]	; (8013cc8 <MX_UART8_Init+0x50>)
 8013c7e:	4a13      	ldr	r2, [pc, #76]	; (8013ccc <MX_UART8_Init+0x54>)
 8013c80:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 9600;
 8013c82:	4b11      	ldr	r3, [pc, #68]	; (8013cc8 <MX_UART8_Init+0x50>)
 8013c84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8013c88:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8013c8a:	4b0f      	ldr	r3, [pc, #60]	; (8013cc8 <MX_UART8_Init+0x50>)
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8013c90:	4b0d      	ldr	r3, [pc, #52]	; (8013cc8 <MX_UART8_Init+0x50>)
 8013c92:	2200      	movs	r2, #0
 8013c94:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8013c96:	4b0c      	ldr	r3, [pc, #48]	; (8013cc8 <MX_UART8_Init+0x50>)
 8013c98:	2200      	movs	r2, #0
 8013c9a:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8013c9c:	4b0a      	ldr	r3, [pc, #40]	; (8013cc8 <MX_UART8_Init+0x50>)
 8013c9e:	220c      	movs	r2, #12
 8013ca0:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013ca2:	4b09      	ldr	r3, [pc, #36]	; (8013cc8 <MX_UART8_Init+0x50>)
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8013ca8:	4b07      	ldr	r3, [pc, #28]	; (8013cc8 <MX_UART8_Init+0x50>)
 8013caa:	2200      	movs	r2, #0
 8013cac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 8013cae:	4806      	ldr	r0, [pc, #24]	; (8013cc8 <MX_UART8_Init+0x50>)
 8013cb0:	f7fc fb02 	bl	80102b8 <HAL_UART_Init>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d004      	beq.n	8013cc4 <MX_UART8_Init+0x4c>
		_Error_Handler(__FILE__, __LINE__);
 8013cba:	f240 510a 	movw	r1, #1290	; 0x50a
 8013cbe:	4804      	ldr	r0, [pc, #16]	; (8013cd0 <MX_UART8_Init+0x58>)
 8013cc0:	f000 f98d 	bl	8013fde <_Error_Handler>
	}

}
 8013cc4:	bf00      	nop
 8013cc6:	bd80      	pop	{r7, pc}
 8013cc8:	20000a7c 	.word	0x20000a7c
 8013ccc:	40007c00 	.word	0x40007c00
 8013cd0:	0801619c 	.word	0x0801619c

08013cd4 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void) {
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 8013cd8:	4b12      	ldr	r3, [pc, #72]	; (8013d24 <MX_USART1_UART_Init+0x50>)
 8013cda:	4a13      	ldr	r2, [pc, #76]	; (8013d28 <MX_USART1_UART_Init+0x54>)
 8013cdc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8013cde:	4b11      	ldr	r3, [pc, #68]	; (8013d24 <MX_USART1_UART_Init+0x50>)
 8013ce0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8013ce4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013ce6:	4b0f      	ldr	r3, [pc, #60]	; (8013d24 <MX_USART1_UART_Init+0x50>)
 8013ce8:	2200      	movs	r2, #0
 8013cea:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8013cec:	4b0d      	ldr	r3, [pc, #52]	; (8013d24 <MX_USART1_UART_Init+0x50>)
 8013cee:	2200      	movs	r2, #0
 8013cf0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8013cf2:	4b0c      	ldr	r3, [pc, #48]	; (8013d24 <MX_USART1_UART_Init+0x50>)
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8013cf8:	4b0a      	ldr	r3, [pc, #40]	; (8013d24 <MX_USART1_UART_Init+0x50>)
 8013cfa:	220c      	movs	r2, #12
 8013cfc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013cfe:	4b09      	ldr	r3, [pc, #36]	; (8013d24 <MX_USART1_UART_Init+0x50>)
 8013d00:	2200      	movs	r2, #0
 8013d02:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013d04:	4b07      	ldr	r3, [pc, #28]	; (8013d24 <MX_USART1_UART_Init+0x50>)
 8013d06:	2200      	movs	r2, #0
 8013d08:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8013d0a:	4806      	ldr	r0, [pc, #24]	; (8013d24 <MX_USART1_UART_Init+0x50>)
 8013d0c:	f7fc fad4 	bl	80102b8 <HAL_UART_Init>
 8013d10:	4603      	mov	r3, r0
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d004      	beq.n	8013d20 <MX_USART1_UART_Init+0x4c>
		_Error_Handler(__FILE__, __LINE__);
 8013d16:	f240 511b 	movw	r1, #1307	; 0x51b
 8013d1a:	4804      	ldr	r0, [pc, #16]	; (8013d2c <MX_USART1_UART_Init+0x58>)
 8013d1c:	f000 f95f 	bl	8013fde <_Error_Handler>
	}

}
 8013d20:	bf00      	nop
 8013d22:	bd80      	pop	{r7, pc}
 8013d24:	20000390 	.word	0x20000390
 8013d28:	40011000 	.word	0x40011000
 8013d2c:	0801619c 	.word	0x0801619c

08013d30 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void) {
 8013d30:	b580      	push	{r7, lr}
 8013d32:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8013d34:	4b13      	ldr	r3, [pc, #76]	; (8013d84 <MX_USART2_UART_Init+0x54>)
 8013d36:	4a14      	ldr	r2, [pc, #80]	; (8013d88 <MX_USART2_UART_Init+0x58>)
 8013d38:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8013d3a:	4b12      	ldr	r3, [pc, #72]	; (8013d84 <MX_USART2_UART_Init+0x54>)
 8013d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013d40:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8013d42:	4b10      	ldr	r3, [pc, #64]	; (8013d84 <MX_USART2_UART_Init+0x54>)
 8013d44:	2200      	movs	r2, #0
 8013d46:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8013d48:	4b0e      	ldr	r3, [pc, #56]	; (8013d84 <MX_USART2_UART_Init+0x54>)
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8013d4e:	4b0d      	ldr	r3, [pc, #52]	; (8013d84 <MX_USART2_UART_Init+0x54>)
 8013d50:	2200      	movs	r2, #0
 8013d52:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8013d54:	4b0b      	ldr	r3, [pc, #44]	; (8013d84 <MX_USART2_UART_Init+0x54>)
 8013d56:	220c      	movs	r2, #12
 8013d58:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8013d5a:	4b0a      	ldr	r3, [pc, #40]	; (8013d84 <MX_USART2_UART_Init+0x54>)
 8013d5c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8013d60:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8013d62:	4b08      	ldr	r3, [pc, #32]	; (8013d84 <MX_USART2_UART_Init+0x54>)
 8013d64:	2200      	movs	r2, #0
 8013d66:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8013d68:	4806      	ldr	r0, [pc, #24]	; (8013d84 <MX_USART2_UART_Init+0x54>)
 8013d6a:	f7fc faa5 	bl	80102b8 <HAL_UART_Init>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d004      	beq.n	8013d7e <MX_USART2_UART_Init+0x4e>
		_Error_Handler(__FILE__, __LINE__);
 8013d74:	f240 512c 	movw	r1, #1324	; 0x52c
 8013d78:	4804      	ldr	r0, [pc, #16]	; (8013d8c <MX_USART2_UART_Init+0x5c>)
 8013d7a:	f000 f930 	bl	8013fde <_Error_Handler>
	}

}
 8013d7e:	bf00      	nop
 8013d80:	bd80      	pop	{r7, pc}
 8013d82:	bf00      	nop
 8013d84:	20000ad8 	.word	0x20000ad8
 8013d88:	40004400 	.word	0x40004400
 8013d8c:	0801619c 	.word	0x0801619c

08013d90 <MX_USART3_UART_Init>:

/* USART3 init function */
static void MX_USART3_UART_Init(void) {
 8013d90:	b580      	push	{r7, lr}
 8013d92:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 8013d94:	4b13      	ldr	r3, [pc, #76]	; (8013de4 <MX_USART3_UART_Init+0x54>)
 8013d96:	4a14      	ldr	r2, [pc, #80]	; (8013de8 <MX_USART3_UART_Init+0x58>)
 8013d98:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8013d9a:	4b12      	ldr	r3, [pc, #72]	; (8013de4 <MX_USART3_UART_Init+0x54>)
 8013d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013da0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8013da2:	4b10      	ldr	r3, [pc, #64]	; (8013de4 <MX_USART3_UART_Init+0x54>)
 8013da4:	2200      	movs	r2, #0
 8013da6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8013da8:	4b0e      	ldr	r3, [pc, #56]	; (8013de4 <MX_USART3_UART_Init+0x54>)
 8013daa:	2200      	movs	r2, #0
 8013dac:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8013dae:	4b0d      	ldr	r3, [pc, #52]	; (8013de4 <MX_USART3_UART_Init+0x54>)
 8013db0:	2200      	movs	r2, #0
 8013db2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8013db4:	4b0b      	ldr	r3, [pc, #44]	; (8013de4 <MX_USART3_UART_Init+0x54>)
 8013db6:	220c      	movs	r2, #12
 8013db8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8013dba:	4b0a      	ldr	r3, [pc, #40]	; (8013de4 <MX_USART3_UART_Init+0x54>)
 8013dbc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8013dc0:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8013dc2:	4b08      	ldr	r3, [pc, #32]	; (8013de4 <MX_USART3_UART_Init+0x54>)
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8013dc8:	4806      	ldr	r0, [pc, #24]	; (8013de4 <MX_USART3_UART_Init+0x54>)
 8013dca:	f7fc fa75 	bl	80102b8 <HAL_UART_Init>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d004      	beq.n	8013dde <MX_USART3_UART_Init+0x4e>
		_Error_Handler(__FILE__, __LINE__);
 8013dd4:	f240 513d 	movw	r1, #1341	; 0x53d
 8013dd8:	4804      	ldr	r0, [pc, #16]	; (8013dec <MX_USART3_UART_Init+0x5c>)
 8013dda:	f000 f900 	bl	8013fde <_Error_Handler>
	}

}
 8013dde:	bf00      	nop
 8013de0:	bd80      	pop	{r7, pc}
 8013de2:	bf00      	nop
 8013de4:	2000024c 	.word	0x2000024c
 8013de8:	40004800 	.word	0x40004800
 8013dec:	0801619c 	.word	0x0801619c

08013df0 <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
static void MX_GPIO_Init(void) {
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b08a      	sub	sp, #40	; 0x28
 8013df4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 8013df6:	2300      	movs	r3, #0
 8013df8:	613b      	str	r3, [r7, #16]
 8013dfa:	4a51      	ldr	r2, [pc, #324]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013dfc:	4b50      	ldr	r3, [pc, #320]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e00:	f043 0310 	orr.w	r3, r3, #16
 8013e04:	6313      	str	r3, [r2, #48]	; 0x30
 8013e06:	4b4e      	ldr	r3, [pc, #312]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e0a:	f003 0310 	and.w	r3, r3, #16
 8013e0e:	613b      	str	r3, [r7, #16]
 8013e10:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8013e12:	2300      	movs	r3, #0
 8013e14:	60fb      	str	r3, [r7, #12]
 8013e16:	4a4a      	ldr	r2, [pc, #296]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e18:	4b49      	ldr	r3, [pc, #292]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e1c:	f043 0304 	orr.w	r3, r3, #4
 8013e20:	6313      	str	r3, [r2, #48]	; 0x30
 8013e22:	4b47      	ldr	r3, [pc, #284]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e26:	f003 0304 	and.w	r3, r3, #4
 8013e2a:	60fb      	str	r3, [r7, #12]
 8013e2c:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8013e2e:	2300      	movs	r3, #0
 8013e30:	60bb      	str	r3, [r7, #8]
 8013e32:	4a43      	ldr	r2, [pc, #268]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e34:	4b42      	ldr	r3, [pc, #264]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e38:	f043 0301 	orr.w	r3, r3, #1
 8013e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8013e3e:	4b40      	ldr	r3, [pc, #256]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e42:	f003 0301 	and.w	r3, r3, #1
 8013e46:	60bb      	str	r3, [r7, #8]
 8013e48:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	607b      	str	r3, [r7, #4]
 8013e4e:	4a3c      	ldr	r2, [pc, #240]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e50:	4b3b      	ldr	r3, [pc, #236]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e54:	f043 0302 	orr.w	r3, r3, #2
 8013e58:	6313      	str	r3, [r2, #48]	; 0x30
 8013e5a:	4b39      	ldr	r3, [pc, #228]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e5e:	f003 0302 	and.w	r3, r3, #2
 8013e62:	607b      	str	r3, [r7, #4]
 8013e64:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8013e66:	2300      	movs	r3, #0
 8013e68:	603b      	str	r3, [r7, #0]
 8013e6a:	4a35      	ldr	r2, [pc, #212]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e6c:	4b34      	ldr	r3, [pc, #208]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e70:	f043 0308 	orr.w	r3, r3, #8
 8013e74:	6313      	str	r3, [r2, #48]	; 0x30
 8013e76:	4b32      	ldr	r3, [pc, #200]	; (8013f40 <MX_GPIO_Init+0x150>)
 8013e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e7a:	f003 0308 	and.w	r3, r3, #8
 8013e7e:	603b      	str	r3, [r7, #0]
 8013e80:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LoRa_RST_Pin | LoRa_SPI4_NSS_Pin, GPIO_PIN_RESET);
 8013e82:	2200      	movs	r2, #0
 8013e84:	2118      	movs	r1, #24
 8013e86:	482f      	ldr	r0, [pc, #188]	; (8013f44 <MX_GPIO_Init+0x154>)
 8013e88:	f7ef f8cc 	bl	8003024 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, HC_SET_Pin | LED1_Pin, GPIO_PIN_RESET);
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	2148      	movs	r1, #72	; 0x48
 8013e90:	482d      	ldr	r0, [pc, #180]	; (8013f48 <MX_GPIO_Init+0x158>)
 8013e92:	f7ef f8c7 	bl	8003024 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(M_PWR_GPIO_Port, M_PWR_Pin, GPIO_PIN_RESET);
 8013e96:	2200      	movs	r2, #0
 8013e98:	2140      	movs	r1, #64	; 0x40
 8013e9a:	482c      	ldr	r0, [pc, #176]	; (8013f4c <MX_GPIO_Init+0x15c>)
 8013e9c:	f7ef f8c2 	bl	8003024 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED4_Pin | LED3_Pin | LED2_Pin | CAN_STB_Pin,
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	f24e 0104 	movw	r1, #57348	; 0xe004
 8013ea6:	482a      	ldr	r0, [pc, #168]	; (8013f50 <MX_GPIO_Init+0x160>)
 8013ea8:	f7ef f8bc 	bl	8003024 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LoRa_RST_Pin LoRa_SPI4_NSS_Pin */
	GPIO_InitStruct.Pin = LoRa_RST_Pin | LoRa_SPI4_NSS_Pin;
 8013eac:	2318      	movs	r3, #24
 8013eae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8013ebc:	f107 0314 	add.w	r3, r7, #20
 8013ec0:	4619      	mov	r1, r3
 8013ec2:	4820      	ldr	r0, [pc, #128]	; (8013f44 <MX_GPIO_Init+0x154>)
 8013ec4:	f7ee fde0 	bl	8002a88 <HAL_GPIO_Init>

	/*Configure GPIO pins : HC_SET_Pin LED1_Pin */
	GPIO_InitStruct.Pin = HC_SET_Pin | LED1_Pin;
 8013ec8:	2348      	movs	r3, #72	; 0x48
 8013eca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013ecc:	2301      	movs	r3, #1
 8013ece:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013ed8:	f107 0314 	add.w	r3, r7, #20
 8013edc:	4619      	mov	r1, r3
 8013ede:	481a      	ldr	r0, [pc, #104]	; (8013f48 <MX_GPIO_Init+0x158>)
 8013ee0:	f7ee fdd2 	bl	8002a88 <HAL_GPIO_Init>

	/*Configure GPIO pins : M_STAT_Pin M_RI_Pin */
	GPIO_InitStruct.Pin = M_STAT_Pin | M_RI_Pin;
 8013ee4:	2330      	movs	r3, #48	; 0x30
 8013ee6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013ee8:	2300      	movs	r3, #0
 8013eea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013eec:	2300      	movs	r3, #0
 8013eee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013ef0:	f107 0314 	add.w	r3, r7, #20
 8013ef4:	4619      	mov	r1, r3
 8013ef6:	4815      	ldr	r0, [pc, #84]	; (8013f4c <MX_GPIO_Init+0x15c>)
 8013ef8:	f7ee fdc6 	bl	8002a88 <HAL_GPIO_Init>

	/*Configure GPIO pin : M_PWR_Pin */
	GPIO_InitStruct.Pin = M_PWR_Pin;
 8013efc:	2340      	movs	r3, #64	; 0x40
 8013efe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013f00:	2301      	movs	r3, #1
 8013f02:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f04:	2300      	movs	r3, #0
 8013f06:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(M_PWR_GPIO_Port, &GPIO_InitStruct);
 8013f0c:	f107 0314 	add.w	r3, r7, #20
 8013f10:	4619      	mov	r1, r3
 8013f12:	480e      	ldr	r0, [pc, #56]	; (8013f4c <MX_GPIO_Init+0x15c>)
 8013f14:	f7ee fdb8 	bl	8002a88 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin CAN_STB_Pin */
	GPIO_InitStruct.Pin = LED4_Pin | LED3_Pin | LED2_Pin | CAN_STB_Pin;
 8013f18:	f24e 0304 	movw	r3, #57348	; 0xe004
 8013f1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013f1e:	2301      	movs	r3, #1
 8013f20:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f22:	2300      	movs	r3, #0
 8013f24:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013f26:	2300      	movs	r3, #0
 8013f28:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013f2a:	f107 0314 	add.w	r3, r7, #20
 8013f2e:	4619      	mov	r1, r3
 8013f30:	4807      	ldr	r0, [pc, #28]	; (8013f50 <MX_GPIO_Init+0x160>)
 8013f32:	f7ee fda9 	bl	8002a88 <HAL_GPIO_Init>

}
 8013f36:	bf00      	nop
 8013f38:	3728      	adds	r7, #40	; 0x28
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	40023800 	.word	0x40023800
 8013f44:	40021000 	.word	0x40021000
 8013f48:	40020800 	.word	0x40020800
 8013f4c:	40020000 	.word	0x40020000
 8013f50:	40020c00 	.word	0x40020c00

08013f54 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b084      	sub	sp, #16
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim1.Instance) {
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681a      	ldr	r2, [r3, #0]
 8013f60:	4b13      	ldr	r3, [pc, #76]	; (8013fb0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	429a      	cmp	r2, r3
 8013f66:	d11e      	bne.n	8013fa6 <HAL_TIM_PeriodElapsedCallback+0x52>
		//  Prescaler = 2879; Period = 62499; // every 1 second
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8013f68:	2140      	movs	r1, #64	; 0x40
 8013f6a:	4812      	ldr	r0, [pc, #72]	; (8013fb4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8013f6c:	f7ef f873 	bl	8003056 <HAL_GPIO_TogglePin>

		if (timer == 0) {
 8013f70:	4b11      	ldr	r3, [pc, #68]	; (8013fb8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d10b      	bne.n	8013f90 <HAL_TIM_PeriodElapsedCallback+0x3c>
			uint8_t x = HAL_UART_Transmit(&huart7, "OK", 2, 5);	// WiFi OK
 8013f78:	2305      	movs	r3, #5
 8013f7a:	2202      	movs	r2, #2
 8013f7c:	490f      	ldr	r1, [pc, #60]	; (8013fbc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8013f7e:	4810      	ldr	r0, [pc, #64]	; (8013fc0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8013f80:	f7fc fb4a 	bl	8010618 <HAL_UART_Transmit>
 8013f84:	4603      	mov	r3, r0
 8013f86:	73fb      	strb	r3, [r7, #15]
			//vypis("wifi OK\r\n");
			timer = 1;
 8013f88:	4b0b      	ldr	r3, [pc, #44]	; (8013fb8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8013f8a:	2201      	movs	r2, #1
 8013f8c:	701a      	strb	r2, [r3, #0]
		}


		//vypis("");
	}
}
 8013f8e:	e00a      	b.n	8013fa6 <HAL_TIM_PeriodElapsedCallback+0x52>
			uint8_t y = HAL_UART_Transmit(&huart8, "OK", 2, 5);	// HC-12 OK
 8013f90:	2305      	movs	r3, #5
 8013f92:	2202      	movs	r2, #2
 8013f94:	4909      	ldr	r1, [pc, #36]	; (8013fbc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8013f96:	480b      	ldr	r0, [pc, #44]	; (8013fc4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8013f98:	f7fc fb3e 	bl	8010618 <HAL_UART_Transmit>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	73bb      	strb	r3, [r7, #14]
			timer = 0;
 8013fa0:	4b05      	ldr	r3, [pc, #20]	; (8013fb8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	701a      	strb	r2, [r3, #0]
}
 8013fa6:	bf00      	nop
 8013fa8:	3710      	adds	r7, #16
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	20000a40 	.word	0x20000a40
 8013fb4:	40020800 	.word	0x40020800
 8013fb8:	20000090 	.word	0x20000090
 8013fbc:	080161ac 	.word	0x080161ac
 8013fc0:	2000020c 	.word	0x2000020c
 8013fc4:	20000a7c 	.word	0x20000a7c

08013fc8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8013fc8:	b480      	push	{r7}
 8013fca:	b083      	sub	sp, #12
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("nop");
 8013fd0:	bf00      	nop
	__NOP();
}
 8013fd2:	bf00      	nop
 8013fd4:	370c      	adds	r7, #12
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr

08013fde <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 8013fde:	b480      	push	{r7}
 8013fe0:	b083      	sub	sp, #12
 8013fe2:	af00      	add	r7, sp, #0
 8013fe4:	6078      	str	r0, [r7, #4]
 8013fe6:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8013fe8:	e7fe      	b.n	8013fe8 <_Error_Handler+0xa>
 8013fea:	bf00      	nop

08013fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013ff0:	2003      	movs	r0, #3
 8013ff2:	f7ed fdb5 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	2100      	movs	r1, #0
 8013ffa:	f06f 000b 	mvn.w	r0, #11
 8013ffe:	f7ed fdba 	bl	8001b76 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8014002:	2200      	movs	r2, #0
 8014004:	2100      	movs	r1, #0
 8014006:	f06f 000a 	mvn.w	r0, #10
 801400a:	f7ed fdb4 	bl	8001b76 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 801400e:	2200      	movs	r2, #0
 8014010:	2100      	movs	r1, #0
 8014012:	f06f 0009 	mvn.w	r0, #9
 8014016:	f7ed fdae 	bl	8001b76 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 801401a:	2200      	movs	r2, #0
 801401c:	2100      	movs	r1, #0
 801401e:	f06f 0004 	mvn.w	r0, #4
 8014022:	f7ed fda8 	bl	8001b76 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8014026:	2200      	movs	r2, #0
 8014028:	2100      	movs	r1, #0
 801402a:	f06f 0003 	mvn.w	r0, #3
 801402e:	f7ed fda2 	bl	8001b76 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8014032:	2200      	movs	r2, #0
 8014034:	2100      	movs	r1, #0
 8014036:	f06f 0001 	mvn.w	r0, #1
 801403a:	f7ed fd9c 	bl	8001b76 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801403e:	2200      	movs	r2, #0
 8014040:	2100      	movs	r1, #0
 8014042:	f04f 30ff 	mov.w	r0, #4294967295
 8014046:	f7ed fd96 	bl	8001b76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801404a:	bf00      	nop
 801404c:	bd80      	pop	{r7, pc}

0801404e <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 801404e:	b580      	push	{r7, lr}
 8014050:	b088      	sub	sp, #32
 8014052:	af00      	add	r7, sp, #0
 8014054:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	4a12      	ldr	r2, [pc, #72]	; (80140a4 <HAL_CAN_MspInit+0x56>)
 801405c:	4293      	cmp	r3, r2
 801405e:	d11d      	bne.n	801409c <HAL_CAN_MspInit+0x4e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8014060:	2300      	movs	r3, #0
 8014062:	60bb      	str	r3, [r7, #8]
 8014064:	4a10      	ldr	r2, [pc, #64]	; (80140a8 <HAL_CAN_MspInit+0x5a>)
 8014066:	4b10      	ldr	r3, [pc, #64]	; (80140a8 <HAL_CAN_MspInit+0x5a>)
 8014068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801406a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801406e:	6413      	str	r3, [r2, #64]	; 0x40
 8014070:	4b0d      	ldr	r3, [pc, #52]	; (80140a8 <HAL_CAN_MspInit+0x5a>)
 8014072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014078:	60bb      	str	r3, [r7, #8]
 801407a:	68bb      	ldr	r3, [r7, #8]
  
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801407c:	2303      	movs	r3, #3
 801407e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014080:	2302      	movs	r3, #2
 8014082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014084:	2300      	movs	r3, #0
 8014086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014088:	2303      	movs	r3, #3
 801408a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 801408c:	2309      	movs	r3, #9
 801408e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014090:	f107 030c 	add.w	r3, r7, #12
 8014094:	4619      	mov	r1, r3
 8014096:	4805      	ldr	r0, [pc, #20]	; (80140ac <HAL_CAN_MspInit+0x5e>)
 8014098:	f7ee fcf6 	bl	8002a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 801409c:	bf00      	nop
 801409e:	3720      	adds	r7, #32
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}
 80140a4:	40006400 	.word	0x40006400
 80140a8:	40023800 	.word	0x40023800
 80140ac:	40020c00 	.word	0x40020c00

080140b0 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]

  if(hcan->Instance==CAN1)
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	4a08      	ldr	r2, [pc, #32]	; (80140e0 <HAL_CAN_MspDeInit+0x30>)
 80140be:	4293      	cmp	r3, r2
 80140c0:	d109      	bne.n	80140d6 <HAL_CAN_MspDeInit+0x26>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 80140c2:	4a08      	ldr	r2, [pc, #32]	; (80140e4 <HAL_CAN_MspDeInit+0x34>)
 80140c4:	4b07      	ldr	r3, [pc, #28]	; (80140e4 <HAL_CAN_MspDeInit+0x34>)
 80140c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140c8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80140cc:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 80140ce:	2103      	movs	r1, #3
 80140d0:	4805      	ldr	r0, [pc, #20]	; (80140e8 <HAL_CAN_MspDeInit+0x38>)
 80140d2:	f7ee fe83 	bl	8002ddc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 80140d6:	bf00      	nop
 80140d8:	3708      	adds	r7, #8
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
 80140de:	bf00      	nop
 80140e0:	40006400 	.word	0x40006400
 80140e4:	40023800 	.word	0x40023800
 80140e8:	40020c00 	.word	0x40020c00

080140ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b08a      	sub	sp, #40	; 0x28
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	4a24      	ldr	r2, [pc, #144]	; (801418c <HAL_I2C_MspInit+0xa0>)
 80140fa:	4293      	cmp	r3, r2
 80140fc:	d11e      	bne.n	801413c <HAL_I2C_MspInit+0x50>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPS_I2C1_SCL_Pin|GPS_I2C2_SCL_Pin;
 80140fe:	23c0      	movs	r3, #192	; 0xc0
 8014100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014102:	2312      	movs	r3, #18
 8014104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014106:	2301      	movs	r3, #1
 8014108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801410a:	2303      	movs	r3, #3
 801410c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801410e:	2304      	movs	r3, #4
 8014110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014112:	f107 0314 	add.w	r3, r7, #20
 8014116:	4619      	mov	r1, r3
 8014118:	481d      	ldr	r0, [pc, #116]	; (8014190 <HAL_I2C_MspInit+0xa4>)
 801411a:	f7ee fcb5 	bl	8002a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801411e:	2300      	movs	r3, #0
 8014120:	613b      	str	r3, [r7, #16]
 8014122:	4a1c      	ldr	r2, [pc, #112]	; (8014194 <HAL_I2C_MspInit+0xa8>)
 8014124:	4b1b      	ldr	r3, [pc, #108]	; (8014194 <HAL_I2C_MspInit+0xa8>)
 8014126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801412c:	6413      	str	r3, [r2, #64]	; 0x40
 801412e:	4b19      	ldr	r3, [pc, #100]	; (8014194 <HAL_I2C_MspInit+0xa8>)
 8014130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014136:	613b      	str	r3, [r7, #16]
 8014138:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 801413a:	e023      	b.n	8014184 <HAL_I2C_MspInit+0x98>
  else if(hi2c->Instance==I2C2)
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	4a15      	ldr	r2, [pc, #84]	; (8014198 <HAL_I2C_MspInit+0xac>)
 8014142:	4293      	cmp	r3, r2
 8014144:	d11e      	bne.n	8014184 <HAL_I2C_MspInit+0x98>
    GPIO_InitStruct.Pin = M_I2C2_SCL_Pin|M_I2C2_SDA_Pin;
 8014146:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801414a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801414c:	2312      	movs	r3, #18
 801414e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014150:	2301      	movs	r3, #1
 8014152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014154:	2303      	movs	r3, #3
 8014156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8014158:	2304      	movs	r3, #4
 801415a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801415c:	f107 0314 	add.w	r3, r7, #20
 8014160:	4619      	mov	r1, r3
 8014162:	480b      	ldr	r0, [pc, #44]	; (8014190 <HAL_I2C_MspInit+0xa4>)
 8014164:	f7ee fc90 	bl	8002a88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8014168:	2300      	movs	r3, #0
 801416a:	60fb      	str	r3, [r7, #12]
 801416c:	4a09      	ldr	r2, [pc, #36]	; (8014194 <HAL_I2C_MspInit+0xa8>)
 801416e:	4b09      	ldr	r3, [pc, #36]	; (8014194 <HAL_I2C_MspInit+0xa8>)
 8014170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014172:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8014176:	6413      	str	r3, [r2, #64]	; 0x40
 8014178:	4b06      	ldr	r3, [pc, #24]	; (8014194 <HAL_I2C_MspInit+0xa8>)
 801417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801417c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014180:	60fb      	str	r3, [r7, #12]
 8014182:	68fb      	ldr	r3, [r7, #12]
}
 8014184:	bf00      	nop
 8014186:	3728      	adds	r7, #40	; 0x28
 8014188:	46bd      	mov	sp, r7
 801418a:	bd80      	pop	{r7, pc}
 801418c:	40005400 	.word	0x40005400
 8014190:	40020400 	.word	0x40020400
 8014194:	40023800 	.word	0x40023800
 8014198:	40005800 	.word	0x40005800

0801419c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]

  if(hi2c->Instance==I2C1)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	4a10      	ldr	r2, [pc, #64]	; (80141ec <HAL_I2C_MspDeInit+0x50>)
 80141aa:	4293      	cmp	r3, r2
 80141ac:	d10a      	bne.n	80141c4 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80141ae:	4a10      	ldr	r2, [pc, #64]	; (80141f0 <HAL_I2C_MspDeInit+0x54>)
 80141b0:	4b0f      	ldr	r3, [pc, #60]	; (80141f0 <HAL_I2C_MspDeInit+0x54>)
 80141b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80141b8:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPS_I2C1_SCL_Pin|GPS_I2C2_SCL_Pin);
 80141ba:	21c0      	movs	r1, #192	; 0xc0
 80141bc:	480d      	ldr	r0, [pc, #52]	; (80141f4 <HAL_I2C_MspDeInit+0x58>)
 80141be:	f7ee fe0d 	bl	8002ddc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80141c2:	e00f      	b.n	80141e4 <HAL_I2C_MspDeInit+0x48>
  else if(hi2c->Instance==I2C2)
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	4a0b      	ldr	r2, [pc, #44]	; (80141f8 <HAL_I2C_MspDeInit+0x5c>)
 80141ca:	4293      	cmp	r3, r2
 80141cc:	d10a      	bne.n	80141e4 <HAL_I2C_MspDeInit+0x48>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80141ce:	4a08      	ldr	r2, [pc, #32]	; (80141f0 <HAL_I2C_MspDeInit+0x54>)
 80141d0:	4b07      	ldr	r3, [pc, #28]	; (80141f0 <HAL_I2C_MspDeInit+0x54>)
 80141d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141d4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80141d8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, M_I2C2_SCL_Pin|M_I2C2_SDA_Pin);
 80141da:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80141de:	4805      	ldr	r0, [pc, #20]	; (80141f4 <HAL_I2C_MspDeInit+0x58>)
 80141e0:	f7ee fdfc 	bl	8002ddc <HAL_GPIO_DeInit>
}
 80141e4:	bf00      	nop
 80141e6:	3708      	adds	r7, #8
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	40005400 	.word	0x40005400
 80141f0:	40023800 	.word	0x40023800
 80141f4:	40020400 	.word	0x40020400
 80141f8:	40005800 	.word	0x40005800

080141fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b08a      	sub	sp, #40	; 0x28
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	4a43      	ldr	r2, [pc, #268]	; (8014318 <HAL_SPI_MspInit+0x11c>)
 801420a:	4293      	cmp	r3, r2
 801420c:	d11f      	bne.n	801424e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 801420e:	2300      	movs	r3, #0
 8014210:	613b      	str	r3, [r7, #16]
 8014212:	4a42      	ldr	r2, [pc, #264]	; (801431c <HAL_SPI_MspInit+0x120>)
 8014214:	4b41      	ldr	r3, [pc, #260]	; (801431c <HAL_SPI_MspInit+0x120>)
 8014216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801421c:	6413      	str	r3, [r2, #64]	; 0x40
 801421e:	4b3f      	ldr	r3, [pc, #252]	; (801431c <HAL_SPI_MspInit+0x120>)
 8014220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014226:	613b      	str	r3, [r7, #16]
 8014228:	693b      	ldr	r3, [r7, #16]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = M_SPI2_NSS_Pin|M_SPI2_SCK_Pin|M_SPI2_MISO_Pin|M_SPI2_MOSI_Pin;
 801422a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 801422e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014230:	2302      	movs	r3, #2
 8014232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014234:	2300      	movs	r3, #0
 8014236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014238:	2303      	movs	r3, #3
 801423a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801423c:	2305      	movs	r3, #5
 801423e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014240:	f107 0314 	add.w	r3, r7, #20
 8014244:	4619      	mov	r1, r3
 8014246:	4836      	ldr	r0, [pc, #216]	; (8014320 <HAL_SPI_MspInit+0x124>)
 8014248:	f7ee fc1e 	bl	8002a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 801424c:	e060      	b.n	8014310 <HAL_SPI_MspInit+0x114>
  else if(hspi->Instance==SPI3)
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	4a34      	ldr	r2, [pc, #208]	; (8014324 <HAL_SPI_MspInit+0x128>)
 8014254:	4293      	cmp	r3, r2
 8014256:	d130      	bne.n	80142ba <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8014258:	2300      	movs	r3, #0
 801425a:	60fb      	str	r3, [r7, #12]
 801425c:	4a2f      	ldr	r2, [pc, #188]	; (801431c <HAL_SPI_MspInit+0x120>)
 801425e:	4b2f      	ldr	r3, [pc, #188]	; (801431c <HAL_SPI_MspInit+0x120>)
 8014260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014266:	6413      	str	r3, [r2, #64]	; 0x40
 8014268:	4b2c      	ldr	r3, [pc, #176]	; (801431c <HAL_SPI_MspInit+0x120>)
 801426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801426c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014270:	60fb      	str	r3, [r7, #12]
 8014272:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SPI3_NSS_Pin;
 8014274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801427a:	2302      	movs	r3, #2
 801427c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801427e:	2300      	movs	r3, #0
 8014280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014282:	2303      	movs	r3, #3
 8014284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8014286:	2306      	movs	r3, #6
 8014288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_SPI3_NSS_GPIO_Port, &GPIO_InitStruct);
 801428a:	f107 0314 	add.w	r3, r7, #20
 801428e:	4619      	mov	r1, r3
 8014290:	4825      	ldr	r0, [pc, #148]	; (8014328 <HAL_SPI_MspInit+0x12c>)
 8014292:	f7ee fbf9 	bl	8002a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI3_SCK_Pin|SD_SPI_MISO_Pin|SD_SPI3_MOSI_Pin;
 8014296:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801429a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801429c:	2302      	movs	r3, #2
 801429e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142a0:	2300      	movs	r3, #0
 80142a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80142a4:	2303      	movs	r3, #3
 80142a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80142a8:	2306      	movs	r3, #6
 80142aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80142ac:	f107 0314 	add.w	r3, r7, #20
 80142b0:	4619      	mov	r1, r3
 80142b2:	481e      	ldr	r0, [pc, #120]	; (801432c <HAL_SPI_MspInit+0x130>)
 80142b4:	f7ee fbe8 	bl	8002a88 <HAL_GPIO_Init>
}
 80142b8:	e02a      	b.n	8014310 <HAL_SPI_MspInit+0x114>
  else if(hspi->Instance==SPI4)
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	4a1c      	ldr	r2, [pc, #112]	; (8014330 <HAL_SPI_MspInit+0x134>)
 80142c0:	4293      	cmp	r3, r2
 80142c2:	d125      	bne.n	8014310 <HAL_SPI_MspInit+0x114>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80142c4:	2300      	movs	r3, #0
 80142c6:	60bb      	str	r3, [r7, #8]
 80142c8:	4a14      	ldr	r2, [pc, #80]	; (801431c <HAL_SPI_MspInit+0x120>)
 80142ca:	4b14      	ldr	r3, [pc, #80]	; (801431c <HAL_SPI_MspInit+0x120>)
 80142cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80142d2:	6453      	str	r3, [r2, #68]	; 0x44
 80142d4:	4b11      	ldr	r3, [pc, #68]	; (801431c <HAL_SPI_MspInit+0x120>)
 80142d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80142dc:	60bb      	str	r3, [r7, #8]
 80142de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LoRa_SPI4_SCK_Pin|LoRa_SPI4_MISO_Pin|LoRa_SPI4_MOSI_Pin;
 80142e0:	2364      	movs	r3, #100	; 0x64
 80142e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80142e4:	2302      	movs	r3, #2
 80142e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142e8:	2300      	movs	r3, #0
 80142ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80142ec:	2303      	movs	r3, #3
 80142ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80142f0:	2305      	movs	r3, #5
 80142f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80142f4:	f107 0314 	add.w	r3, r7, #20
 80142f8:	4619      	mov	r1, r3
 80142fa:	480e      	ldr	r0, [pc, #56]	; (8014334 <HAL_SPI_MspInit+0x138>)
 80142fc:	f7ee fbc4 	bl	8002a88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8014300:	2200      	movs	r2, #0
 8014302:	2100      	movs	r1, #0
 8014304:	2054      	movs	r0, #84	; 0x54
 8014306:	f7ed fc36 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 801430a:	2054      	movs	r0, #84	; 0x54
 801430c:	f7ed fc4f 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 8014310:	bf00      	nop
 8014312:	3728      	adds	r7, #40	; 0x28
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}
 8014318:	40003800 	.word	0x40003800
 801431c:	40023800 	.word	0x40023800
 8014320:	40020400 	.word	0x40020400
 8014324:	40003c00 	.word	0x40003c00
 8014328:	40020000 	.word	0x40020000
 801432c:	40020800 	.word	0x40020800
 8014330:	40013400 	.word	0x40013400
 8014334:	40021000 	.word	0x40021000

08014338 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]

  if(hspi->Instance==SPI2)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	4a1d      	ldr	r2, [pc, #116]	; (80143bc <HAL_SPI_MspDeInit+0x84>)
 8014346:	4293      	cmp	r3, r2
 8014348:	d10b      	bne.n	8014362 <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 801434a:	4a1d      	ldr	r2, [pc, #116]	; (80143c0 <HAL_SPI_MspDeInit+0x88>)
 801434c:	4b1c      	ldr	r3, [pc, #112]	; (80143c0 <HAL_SPI_MspDeInit+0x88>)
 801434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014354:	6413      	str	r3, [r2, #64]	; 0x40
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    HAL_GPIO_DeInit(GPIOB, M_SPI2_NSS_Pin|M_SPI2_SCK_Pin|M_SPI2_MISO_Pin|M_SPI2_MOSI_Pin);
 8014356:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 801435a:	481a      	ldr	r0, [pc, #104]	; (80143c4 <HAL_SPI_MspDeInit+0x8c>)
 801435c:	f7ee fd3e 	bl	8002ddc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 8014360:	e027      	b.n	80143b2 <HAL_SPI_MspDeInit+0x7a>
  else if(hspi->Instance==SPI3)
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	4a18      	ldr	r2, [pc, #96]	; (80143c8 <HAL_SPI_MspDeInit+0x90>)
 8014368:	4293      	cmp	r3, r2
 801436a:	d110      	bne.n	801438e <HAL_SPI_MspDeInit+0x56>
    __HAL_RCC_SPI3_CLK_DISABLE();
 801436c:	4a14      	ldr	r2, [pc, #80]	; (80143c0 <HAL_SPI_MspDeInit+0x88>)
 801436e:	4b14      	ldr	r3, [pc, #80]	; (80143c0 <HAL_SPI_MspDeInit+0x88>)
 8014370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014372:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014376:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(SD_SPI3_NSS_GPIO_Port, SD_SPI3_NSS_Pin);
 8014378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801437c:	4813      	ldr	r0, [pc, #76]	; (80143cc <HAL_SPI_MspDeInit+0x94>)
 801437e:	f7ee fd2d 	bl	8002ddc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, SD_SPI3_SCK_Pin|SD_SPI_MISO_Pin|SD_SPI3_MOSI_Pin);
 8014382:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8014386:	4812      	ldr	r0, [pc, #72]	; (80143d0 <HAL_SPI_MspDeInit+0x98>)
 8014388:	f7ee fd28 	bl	8002ddc <HAL_GPIO_DeInit>
}
 801438c:	e011      	b.n	80143b2 <HAL_SPI_MspDeInit+0x7a>
  else if(hspi->Instance==SPI4)
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	4a10      	ldr	r2, [pc, #64]	; (80143d4 <HAL_SPI_MspDeInit+0x9c>)
 8014394:	4293      	cmp	r3, r2
 8014396:	d10c      	bne.n	80143b2 <HAL_SPI_MspDeInit+0x7a>
    __HAL_RCC_SPI4_CLK_DISABLE();
 8014398:	4a09      	ldr	r2, [pc, #36]	; (80143c0 <HAL_SPI_MspDeInit+0x88>)
 801439a:	4b09      	ldr	r3, [pc, #36]	; (80143c0 <HAL_SPI_MspDeInit+0x88>)
 801439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801439e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80143a2:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOE, LoRa_SPI4_SCK_Pin|LoRa_SPI4_MISO_Pin|LoRa_SPI4_MOSI_Pin);
 80143a4:	2164      	movs	r1, #100	; 0x64
 80143a6:	480c      	ldr	r0, [pc, #48]	; (80143d8 <HAL_SPI_MspDeInit+0xa0>)
 80143a8:	f7ee fd18 	bl	8002ddc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI4_IRQn);
 80143ac:	2054      	movs	r0, #84	; 0x54
 80143ae:	f7ed fc0c 	bl	8001bca <HAL_NVIC_DisableIRQ>
}
 80143b2:	bf00      	nop
 80143b4:	3708      	adds	r7, #8
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}
 80143ba:	bf00      	nop
 80143bc:	40003800 	.word	0x40003800
 80143c0:	40023800 	.word	0x40023800
 80143c4:	40020400 	.word	0x40020400
 80143c8:	40003c00 	.word	0x40003c00
 80143cc:	40020000 	.word	0x40020000
 80143d0:	40020800 	.word	0x40020800
 80143d4:	40013400 	.word	0x40013400
 80143d8:	40021000 	.word	0x40021000

080143dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b084      	sub	sp, #16
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM1)
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	4a1a      	ldr	r2, [pc, #104]	; (8014454 <HAL_TIM_Base_MspInit+0x78>)
 80143ea:	4293      	cmp	r3, r2
 80143ec:	d12d      	bne.n	801444a <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80143ee:	2300      	movs	r3, #0
 80143f0:	60fb      	str	r3, [r7, #12]
 80143f2:	4a19      	ldr	r2, [pc, #100]	; (8014458 <HAL_TIM_Base_MspInit+0x7c>)
 80143f4:	4b18      	ldr	r3, [pc, #96]	; (8014458 <HAL_TIM_Base_MspInit+0x7c>)
 80143f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143f8:	f043 0301 	orr.w	r3, r3, #1
 80143fc:	6453      	str	r3, [r2, #68]	; 0x44
 80143fe:	4b16      	ldr	r3, [pc, #88]	; (8014458 <HAL_TIM_Base_MspInit+0x7c>)
 8014400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014402:	f003 0301 	and.w	r3, r3, #1
 8014406:	60fb      	str	r3, [r7, #12]
 8014408:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 801440a:	2200      	movs	r2, #0
 801440c:	2100      	movs	r1, #0
 801440e:	2018      	movs	r0, #24
 8014410:	f7ed fbb1 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8014414:	2018      	movs	r0, #24
 8014416:	f7ed fbca 	bl	8001bae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 801441a:	2200      	movs	r2, #0
 801441c:	2100      	movs	r1, #0
 801441e:	2019      	movs	r0, #25
 8014420:	f7ed fba9 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8014424:	2019      	movs	r0, #25
 8014426:	f7ed fbc2 	bl	8001bae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 801442a:	2200      	movs	r2, #0
 801442c:	2100      	movs	r1, #0
 801442e:	201a      	movs	r0, #26
 8014430:	f7ed fba1 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8014434:	201a      	movs	r0, #26
 8014436:	f7ed fbba 	bl	8001bae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 801443a:	2200      	movs	r2, #0
 801443c:	2100      	movs	r1, #0
 801443e:	201b      	movs	r0, #27
 8014440:	f7ed fb99 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8014444:	201b      	movs	r0, #27
 8014446:	f7ed fbb2 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 801444a:	bf00      	nop
 801444c:	3710      	adds	r7, #16
 801444e:	46bd      	mov	sp, r7
 8014450:	bd80      	pop	{r7, pc}
 8014452:	bf00      	nop
 8014454:	40010000 	.word	0x40010000
 8014458:	40023800 	.word	0x40023800

0801445c <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b082      	sub	sp, #8
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM1)
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	4a0c      	ldr	r2, [pc, #48]	; (801449c <HAL_TIM_Base_MspDeInit+0x40>)
 801446a:	4293      	cmp	r3, r2
 801446c:	d111      	bne.n	8014492 <HAL_TIM_Base_MspDeInit+0x36>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 801446e:	4a0c      	ldr	r2, [pc, #48]	; (80144a0 <HAL_TIM_Base_MspDeInit+0x44>)
 8014470:	4b0b      	ldr	r3, [pc, #44]	; (80144a0 <HAL_TIM_Base_MspDeInit+0x44>)
 8014472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014474:	f023 0301 	bic.w	r3, r3, #1
 8014478:	6453      	str	r3, [r2, #68]	; 0x44

    /* TIM1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_BRK_TIM9_IRQn);
 801447a:	2018      	movs	r0, #24
 801447c:	f7ed fba5 	bl	8001bca <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 8014480:	2019      	movs	r0, #25
 8014482:	f7ed fba2 	bl	8001bca <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8014486:	201a      	movs	r0, #26
 8014488:	f7ed fb9f 	bl	8001bca <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 801448c:	201b      	movs	r0, #27
 801448e:	f7ed fb9c 	bl	8001bca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }

}
 8014492:	bf00      	nop
 8014494:	3708      	adds	r7, #8
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}
 801449a:	bf00      	nop
 801449c:	40010000 	.word	0x40010000
 80144a0:	40023800 	.word	0x40023800

080144a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b08c      	sub	sp, #48	; 0x30
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART7)
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	4a80      	ldr	r2, [pc, #512]	; (80146b4 <HAL_UART_MspInit+0x210>)
 80144b2:	4293      	cmp	r3, r2
 80144b4:	d127      	bne.n	8014506 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80144b6:	2300      	movs	r3, #0
 80144b8:	61bb      	str	r3, [r7, #24]
 80144ba:	4a7f      	ldr	r2, [pc, #508]	; (80146b8 <HAL_UART_MspInit+0x214>)
 80144bc:	4b7e      	ldr	r3, [pc, #504]	; (80146b8 <HAL_UART_MspInit+0x214>)
 80144be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80144c4:	6413      	str	r3, [r2, #64]	; 0x40
 80144c6:	4b7c      	ldr	r3, [pc, #496]	; (80146b8 <HAL_UART_MspInit+0x214>)
 80144c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80144ce:	61bb      	str	r3, [r7, #24]
 80144d0:	69bb      	ldr	r3, [r7, #24]
  
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = ESP_UART7_RX_Pin|ESP_UART7_TX_Pin;
 80144d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80144d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144d8:	2302      	movs	r3, #2
 80144da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80144dc:	2301      	movs	r3, #1
 80144de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144e0:	2303      	movs	r3, #3
 80144e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80144e4:	2308      	movs	r3, #8
 80144e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80144e8:	f107 031c 	add.w	r3, r7, #28
 80144ec:	4619      	mov	r1, r3
 80144ee:	4873      	ldr	r0, [pc, #460]	; (80146bc <HAL_UART_MspInit+0x218>)
 80144f0:	f7ee faca 	bl	8002a88 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80144f4:	2200      	movs	r2, #0
 80144f6:	2100      	movs	r1, #0
 80144f8:	2052      	movs	r0, #82	; 0x52
 80144fa:	f7ed fb3c 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80144fe:	2052      	movs	r0, #82	; 0x52
 8014500:	f7ed fb55 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8014504:	e0d1      	b.n	80146aa <HAL_UART_MspInit+0x206>
  else if(huart->Instance==UART8)
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	4a6d      	ldr	r2, [pc, #436]	; (80146c0 <HAL_UART_MspInit+0x21c>)
 801450c:	4293      	cmp	r3, r2
 801450e:	d126      	bne.n	801455e <HAL_UART_MspInit+0xba>
    __HAL_RCC_UART8_CLK_ENABLE();
 8014510:	2300      	movs	r3, #0
 8014512:	617b      	str	r3, [r7, #20]
 8014514:	4a68      	ldr	r2, [pc, #416]	; (80146b8 <HAL_UART_MspInit+0x214>)
 8014516:	4b68      	ldr	r3, [pc, #416]	; (80146b8 <HAL_UART_MspInit+0x214>)
 8014518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801451a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801451e:	6413      	str	r3, [r2, #64]	; 0x40
 8014520:	4b65      	ldr	r3, [pc, #404]	; (80146b8 <HAL_UART_MspInit+0x214>)
 8014522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014528:	617b      	str	r3, [r7, #20]
 801452a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HC_UART8_RX_Pin|HC_UART8_TX_Pin;
 801452c:	2303      	movs	r3, #3
 801452e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014530:	2302      	movs	r3, #2
 8014532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014534:	2301      	movs	r3, #1
 8014536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014538:	2303      	movs	r3, #3
 801453a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 801453c:	2308      	movs	r3, #8
 801453e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014540:	f107 031c 	add.w	r3, r7, #28
 8014544:	4619      	mov	r1, r3
 8014546:	485d      	ldr	r0, [pc, #372]	; (80146bc <HAL_UART_MspInit+0x218>)
 8014548:	f7ee fa9e 	bl	8002a88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 801454c:	2200      	movs	r2, #0
 801454e:	2100      	movs	r1, #0
 8014550:	2053      	movs	r0, #83	; 0x53
 8014552:	f7ed fb10 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8014556:	2053      	movs	r0, #83	; 0x53
 8014558:	f7ed fb29 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 801455c:	e0a5      	b.n	80146aa <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	4a58      	ldr	r2, [pc, #352]	; (80146c4 <HAL_UART_MspInit+0x220>)
 8014564:	4293      	cmp	r3, r2
 8014566:	d127      	bne.n	80145b8 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 8014568:	2300      	movs	r3, #0
 801456a:	613b      	str	r3, [r7, #16]
 801456c:	4a52      	ldr	r2, [pc, #328]	; (80146b8 <HAL_UART_MspInit+0x214>)
 801456e:	4b52      	ldr	r3, [pc, #328]	; (80146b8 <HAL_UART_MspInit+0x214>)
 8014570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014572:	f043 0310 	orr.w	r3, r3, #16
 8014576:	6453      	str	r3, [r2, #68]	; 0x44
 8014578:	4b4f      	ldr	r3, [pc, #316]	; (80146b8 <HAL_UART_MspInit+0x214>)
 801457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801457c:	f003 0310 	and.w	r3, r3, #16
 8014580:	613b      	str	r3, [r7, #16]
 8014582:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPS_UART1_TX_Pin|GPS_UART1_RX_Pin;
 8014584:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8014588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801458a:	2302      	movs	r3, #2
 801458c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801458e:	2301      	movs	r3, #1
 8014590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014592:	2303      	movs	r3, #3
 8014594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014596:	2307      	movs	r3, #7
 8014598:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801459a:	f107 031c 	add.w	r3, r7, #28
 801459e:	4619      	mov	r1, r3
 80145a0:	4849      	ldr	r0, [pc, #292]	; (80146c8 <HAL_UART_MspInit+0x224>)
 80145a2:	f7ee fa71 	bl	8002a88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80145a6:	2200      	movs	r2, #0
 80145a8:	2100      	movs	r1, #0
 80145aa:	2025      	movs	r0, #37	; 0x25
 80145ac:	f7ed fae3 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80145b0:	2025      	movs	r0, #37	; 0x25
 80145b2:	f7ed fafc 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 80145b6:	e078      	b.n	80146aa <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART2)
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	4a43      	ldr	r2, [pc, #268]	; (80146cc <HAL_UART_MspInit+0x228>)
 80145be:	4293      	cmp	r3, r2
 80145c0:	d136      	bne.n	8014630 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80145c2:	2300      	movs	r3, #0
 80145c4:	60fb      	str	r3, [r7, #12]
 80145c6:	4a3c      	ldr	r2, [pc, #240]	; (80146b8 <HAL_UART_MspInit+0x214>)
 80145c8:	4b3b      	ldr	r3, [pc, #236]	; (80146b8 <HAL_UART_MspInit+0x214>)
 80145ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80145d0:	6413      	str	r3, [r2, #64]	; 0x40
 80145d2:	4b39      	ldr	r3, [pc, #228]	; (80146b8 <HAL_UART_MspInit+0x214>)
 80145d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80145da:	60fb      	str	r3, [r7, #12]
 80145dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_USART2_CTS_Pin|STM_USART2_RTS_Pin;
 80145de:	2303      	movs	r3, #3
 80145e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80145e2:	2302      	movs	r3, #2
 80145e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80145e6:	2300      	movs	r3, #0
 80145e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80145ea:	2303      	movs	r3, #3
 80145ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80145ee:	2307      	movs	r3, #7
 80145f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80145f2:	f107 031c 	add.w	r3, r7, #28
 80145f6:	4619      	mov	r1, r3
 80145f8:	4833      	ldr	r0, [pc, #204]	; (80146c8 <HAL_UART_MspInit+0x224>)
 80145fa:	f7ee fa45 	bl	8002a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STM_USART2_TX_Pin|STM_USART2_RX_Pin;
 80145fe:	230c      	movs	r3, #12
 8014600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014602:	2302      	movs	r3, #2
 8014604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014606:	2301      	movs	r3, #1
 8014608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801460a:	2303      	movs	r3, #3
 801460c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801460e:	2307      	movs	r3, #7
 8014610:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014612:	f107 031c 	add.w	r3, r7, #28
 8014616:	4619      	mov	r1, r3
 8014618:	482b      	ldr	r0, [pc, #172]	; (80146c8 <HAL_UART_MspInit+0x224>)
 801461a:	f7ee fa35 	bl	8002a88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 801461e:	2200      	movs	r2, #0
 8014620:	2100      	movs	r1, #0
 8014622:	2026      	movs	r0, #38	; 0x26
 8014624:	f7ed faa7 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8014628:	2026      	movs	r0, #38	; 0x26
 801462a:	f7ed fac0 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 801462e:	e03c      	b.n	80146aa <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART3)
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	4a26      	ldr	r2, [pc, #152]	; (80146d0 <HAL_UART_MspInit+0x22c>)
 8014636:	4293      	cmp	r3, r2
 8014638:	d137      	bne.n	80146aa <HAL_UART_MspInit+0x206>
    __HAL_RCC_USART3_CLK_ENABLE();
 801463a:	2300      	movs	r3, #0
 801463c:	60bb      	str	r3, [r7, #8]
 801463e:	4a1e      	ldr	r2, [pc, #120]	; (80146b8 <HAL_UART_MspInit+0x214>)
 8014640:	4b1d      	ldr	r3, [pc, #116]	; (80146b8 <HAL_UART_MspInit+0x214>)
 8014642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014648:	6413      	str	r3, [r2, #64]	; 0x40
 801464a:	4b1b      	ldr	r3, [pc, #108]	; (80146b8 <HAL_UART_MspInit+0x214>)
 801464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801464e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014652:	60bb      	str	r3, [r7, #8]
 8014654:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M_USART3_TX_Pin|M_USART3_RX_Pin;
 8014656:	f44f 7340 	mov.w	r3, #768	; 0x300
 801465a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801465c:	2302      	movs	r3, #2
 801465e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014660:	2301      	movs	r3, #1
 8014662:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014664:	2303      	movs	r3, #3
 8014666:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8014668:	2307      	movs	r3, #7
 801466a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801466c:	f107 031c 	add.w	r3, r7, #28
 8014670:	4619      	mov	r1, r3
 8014672:	4818      	ldr	r0, [pc, #96]	; (80146d4 <HAL_UART_MspInit+0x230>)
 8014674:	f7ee fa08 	bl	8002a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M_USART3_CTS_Pin|M_USART3_RTS_Pin;
 8014678:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801467c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801467e:	2302      	movs	r3, #2
 8014680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014682:	2300      	movs	r3, #0
 8014684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014686:	2303      	movs	r3, #3
 8014688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801468a:	2307      	movs	r3, #7
 801468c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801468e:	f107 031c 	add.w	r3, r7, #28
 8014692:	4619      	mov	r1, r3
 8014694:	480f      	ldr	r0, [pc, #60]	; (80146d4 <HAL_UART_MspInit+0x230>)
 8014696:	f7ee f9f7 	bl	8002a88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 801469a:	2200      	movs	r2, #0
 801469c:	2100      	movs	r1, #0
 801469e:	2027      	movs	r0, #39	; 0x27
 80146a0:	f7ed fa69 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80146a4:	2027      	movs	r0, #39	; 0x27
 80146a6:	f7ed fa82 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 80146aa:	bf00      	nop
 80146ac:	3730      	adds	r7, #48	; 0x30
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	40007800 	.word	0x40007800
 80146b8:	40023800 	.word	0x40023800
 80146bc:	40021000 	.word	0x40021000
 80146c0:	40007c00 	.word	0x40007c00
 80146c4:	40011000 	.word	0x40011000
 80146c8:	40020000 	.word	0x40020000
 80146cc:	40004400 	.word	0x40004400
 80146d0:	40004800 	.word	0x40004800
 80146d4:	40020c00 	.word	0x40020c00

080146d8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]

  if(huart->Instance==UART7)
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	4a31      	ldr	r2, [pc, #196]	; (80147ac <HAL_UART_MspDeInit+0xd4>)
 80146e6:	4293      	cmp	r3, r2
 80146e8:	d10e      	bne.n	8014708 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN UART7_MspDeInit 0 */

  /* USER CODE END UART7_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART7_CLK_DISABLE();
 80146ea:	4a31      	ldr	r2, [pc, #196]	; (80147b0 <HAL_UART_MspDeInit+0xd8>)
 80146ec:	4b30      	ldr	r3, [pc, #192]	; (80147b0 <HAL_UART_MspDeInit+0xd8>)
 80146ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80146f4:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    HAL_GPIO_DeInit(GPIOE, ESP_UART7_RX_Pin|ESP_UART7_TX_Pin);
 80146f6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80146fa:	482e      	ldr	r0, [pc, #184]	; (80147b4 <HAL_UART_MspDeInit+0xdc>)
 80146fc:	f7ee fb6e 	bl	8002ddc <HAL_GPIO_DeInit>

    /* UART7 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART7_IRQn);
 8014700:	2052      	movs	r0, #82	; 0x52
 8014702:	f7ed fa62 	bl	8001bca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8014706:	e04c      	b.n	80147a2 <HAL_UART_MspDeInit+0xca>
  else if(huart->Instance==UART8)
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	4a2a      	ldr	r2, [pc, #168]	; (80147b8 <HAL_UART_MspDeInit+0xe0>)
 801470e:	4293      	cmp	r3, r2
 8014710:	d10d      	bne.n	801472e <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_UART8_CLK_DISABLE();
 8014712:	4a27      	ldr	r2, [pc, #156]	; (80147b0 <HAL_UART_MspDeInit+0xd8>)
 8014714:	4b26      	ldr	r3, [pc, #152]	; (80147b0 <HAL_UART_MspDeInit+0xd8>)
 8014716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801471c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, HC_UART8_RX_Pin|HC_UART8_TX_Pin);
 801471e:	2103      	movs	r1, #3
 8014720:	4824      	ldr	r0, [pc, #144]	; (80147b4 <HAL_UART_MspDeInit+0xdc>)
 8014722:	f7ee fb5b 	bl	8002ddc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8014726:	2053      	movs	r0, #83	; 0x53
 8014728:	f7ed fa4f 	bl	8001bca <HAL_NVIC_DisableIRQ>
}
 801472c:	e039      	b.n	80147a2 <HAL_UART_MspDeInit+0xca>
  else if(huart->Instance==USART1)
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	4a22      	ldr	r2, [pc, #136]	; (80147bc <HAL_UART_MspDeInit+0xe4>)
 8014734:	4293      	cmp	r3, r2
 8014736:	d10e      	bne.n	8014756 <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART1_CLK_DISABLE();
 8014738:	4a1d      	ldr	r2, [pc, #116]	; (80147b0 <HAL_UART_MspDeInit+0xd8>)
 801473a:	4b1d      	ldr	r3, [pc, #116]	; (80147b0 <HAL_UART_MspDeInit+0xd8>)
 801473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801473e:	f023 0310 	bic.w	r3, r3, #16
 8014742:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPS_UART1_TX_Pin|GPS_UART1_RX_Pin);
 8014744:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8014748:	481d      	ldr	r0, [pc, #116]	; (80147c0 <HAL_UART_MspDeInit+0xe8>)
 801474a:	f7ee fb47 	bl	8002ddc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 801474e:	2025      	movs	r0, #37	; 0x25
 8014750:	f7ed fa3b 	bl	8001bca <HAL_NVIC_DisableIRQ>
}
 8014754:	e025      	b.n	80147a2 <HAL_UART_MspDeInit+0xca>
  else if(huart->Instance==USART2)
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	4a1a      	ldr	r2, [pc, #104]	; (80147c4 <HAL_UART_MspDeInit+0xec>)
 801475c:	4293      	cmp	r3, r2
 801475e:	d10d      	bne.n	801477c <HAL_UART_MspDeInit+0xa4>
    __HAL_RCC_USART2_CLK_DISABLE();
 8014760:	4a13      	ldr	r2, [pc, #76]	; (80147b0 <HAL_UART_MspDeInit+0xd8>)
 8014762:	4b13      	ldr	r3, [pc, #76]	; (80147b0 <HAL_UART_MspDeInit+0xd8>)
 8014764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014766:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801476a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, STM_USART2_CTS_Pin|STM_USART2_RTS_Pin|STM_USART2_TX_Pin|STM_USART2_RX_Pin);
 801476c:	210f      	movs	r1, #15
 801476e:	4814      	ldr	r0, [pc, #80]	; (80147c0 <HAL_UART_MspDeInit+0xe8>)
 8014770:	f7ee fb34 	bl	8002ddc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8014774:	2026      	movs	r0, #38	; 0x26
 8014776:	f7ed fa28 	bl	8001bca <HAL_NVIC_DisableIRQ>
}
 801477a:	e012      	b.n	80147a2 <HAL_UART_MspDeInit+0xca>
  else if(huart->Instance==USART3)
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	4a11      	ldr	r2, [pc, #68]	; (80147c8 <HAL_UART_MspDeInit+0xf0>)
 8014782:	4293      	cmp	r3, r2
 8014784:	d10d      	bne.n	80147a2 <HAL_UART_MspDeInit+0xca>
    __HAL_RCC_USART3_CLK_DISABLE();
 8014786:	4a0a      	ldr	r2, [pc, #40]	; (80147b0 <HAL_UART_MspDeInit+0xd8>)
 8014788:	4b09      	ldr	r3, [pc, #36]	; (80147b0 <HAL_UART_MspDeInit+0xd8>)
 801478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801478c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014790:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, M_USART3_TX_Pin|M_USART3_RX_Pin|M_USART3_CTS_Pin|M_USART3_RTS_Pin);
 8014792:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
 8014796:	480d      	ldr	r0, [pc, #52]	; (80147cc <HAL_UART_MspDeInit+0xf4>)
 8014798:	f7ee fb20 	bl	8002ddc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 801479c:	2027      	movs	r0, #39	; 0x27
 801479e:	f7ed fa14 	bl	8001bca <HAL_NVIC_DisableIRQ>
}
 80147a2:	bf00      	nop
 80147a4:	3708      	adds	r7, #8
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}
 80147aa:	bf00      	nop
 80147ac:	40007800 	.word	0x40007800
 80147b0:	40023800 	.word	0x40023800
 80147b4:	40021000 	.word	0x40021000
 80147b8:	40007c00 	.word	0x40007c00
 80147bc:	40011000 	.word	0x40011000
 80147c0:	40020000 	.word	0x40020000
 80147c4:	40004400 	.word	0x40004400
 80147c8:	40004800 	.word	0x40004800
 80147cc:	40020c00 	.word	0x40020c00

080147d0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80147d0:	b480      	push	{r7}
 80147d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80147d4:	bf00      	nop
 80147d6:	46bd      	mov	sp, r7
 80147d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147dc:	4770      	bx	lr

080147de <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80147de:	b480      	push	{r7}
 80147e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80147e2:	e7fe      	b.n	80147e2 <HardFault_Handler+0x4>

080147e4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80147e4:	b480      	push	{r7}
 80147e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80147e8:	e7fe      	b.n	80147e8 <MemManage_Handler+0x4>

080147ea <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80147ea:	b480      	push	{r7}
 80147ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80147ee:	e7fe      	b.n	80147ee <BusFault_Handler+0x4>

080147f0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80147f0:	b480      	push	{r7}
 80147f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80147f4:	e7fe      	b.n	80147f4 <UsageFault_Handler+0x4>

080147f6 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80147f6:	b480      	push	{r7}
 80147f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80147fa:	bf00      	nop
 80147fc:	46bd      	mov	sp, r7
 80147fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014802:	4770      	bx	lr

08014804 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8014804:	b480      	push	{r7}
 8014806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014808:	bf00      	nop
 801480a:	46bd      	mov	sp, r7
 801480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014810:	4770      	bx	lr

08014812 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8014812:	b480      	push	{r7}
 8014814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014816:	bf00      	nop
 8014818:	46bd      	mov	sp, r7
 801481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481e:	4770      	bx	lr

08014820 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014824:	f7eb fd70 	bl	8000308 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8014828:	f7ed fadc 	bl	8001de4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801482c:	bf00      	nop
 801482e:	bd80      	pop	{r7, pc}

08014830 <TIM1_BRK_TIM9_IRQHandler>:

/**
* @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
*/
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014834:	4802      	ldr	r0, [pc, #8]	; (8014840 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8014836:	f7f8 fc03 	bl	800d040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 801483a:	bf00      	nop
 801483c:	bd80      	pop	{r7, pc}
 801483e:	bf00      	nop
 8014840:	20000a40 	.word	0x20000a40

08014844 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014848:	4802      	ldr	r0, [pc, #8]	; (8014854 <TIM1_UP_TIM10_IRQHandler+0x10>)
 801484a:	f7f8 fbf9 	bl	800d040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 801484e:	bf00      	nop
 8014850:	bd80      	pop	{r7, pc}
 8014852:	bf00      	nop
 8014854:	20000a40 	.word	0x20000a40

08014858 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
* @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
*/
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 801485c:	4802      	ldr	r0, [pc, #8]	; (8014868 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 801485e:	f7f8 fbef 	bl	800d040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8014862:	bf00      	nop
 8014864:	bd80      	pop	{r7, pc}
 8014866:	bf00      	nop
 8014868:	20000a40 	.word	0x20000a40

0801486c <TIM1_CC_IRQHandler>:

/**
* @brief This function handles TIM1 capture compare interrupt.
*/
void TIM1_CC_IRQHandler(void)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014870:	4802      	ldr	r0, [pc, #8]	; (801487c <TIM1_CC_IRQHandler+0x10>)
 8014872:	f7f8 fbe5 	bl	800d040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8014876:	bf00      	nop
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	20000a40 	.word	0x20000a40

08014880 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8014884:	4802      	ldr	r0, [pc, #8]	; (8014890 <USART1_IRQHandler+0x10>)
 8014886:	f7fc fcb1 	bl	80111ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 801488a:	bf00      	nop
 801488c:	bd80      	pop	{r7, pc}
 801488e:	bf00      	nop
 8014890:	20000390 	.word	0x20000390

08014894 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8014898:	4802      	ldr	r0, [pc, #8]	; (80148a4 <USART2_IRQHandler+0x10>)
 801489a:	f7fc fca7 	bl	80111ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801489e:	bf00      	nop
 80148a0:	bd80      	pop	{r7, pc}
 80148a2:	bf00      	nop
 80148a4:	20000ad8 	.word	0x20000ad8

080148a8 <USART3_IRQHandler>:

/**
* @brief This function handles USART3 global interrupt.
*/
void USART3_IRQHandler(void)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80148ac:	4802      	ldr	r0, [pc, #8]	; (80148b8 <USART3_IRQHandler+0x10>)
 80148ae:	f7fc fc9d 	bl	80111ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80148b2:	bf00      	nop
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	bf00      	nop
 80148b8:	2000024c 	.word	0x2000024c

080148bc <UART7_IRQHandler>:

/**
* @brief This function handles UART7 global interrupt.
*/
void UART7_IRQHandler(void)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80148c0:	4802      	ldr	r0, [pc, #8]	; (80148cc <UART7_IRQHandler+0x10>)
 80148c2:	f7fc fc93 	bl	80111ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80148c6:	bf00      	nop
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	bf00      	nop
 80148cc:	2000020c 	.word	0x2000020c

080148d0 <UART8_IRQHandler>:

/**
* @brief This function handles UART8 global interrupt.
*/
void UART8_IRQHandler(void)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80148d4:	4802      	ldr	r0, [pc, #8]	; (80148e0 <UART8_IRQHandler+0x10>)
 80148d6:	f7fc fc89 	bl	80111ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80148da:	bf00      	nop
 80148dc:	bd80      	pop	{r7, pc}
 80148de:	bf00      	nop
 80148e0:	20000a7c 	.word	0x20000a7c

080148e4 <SPI4_IRQHandler>:

/**
* @brief This function handles SPI4 global interrupt.
*/
void SPI4_IRQHandler(void)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80148e8:	4802      	ldr	r0, [pc, #8]	; (80148f4 <SPI4_IRQHandler+0x10>)
 80148ea:	f7f5 fcee 	bl	800a2ca <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80148ee:	bf00      	nop
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop
 80148f4:	200003f0 	.word	0x200003f0

080148f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80148f8:	b480      	push	{r7}
 80148fa:	b083      	sub	sp, #12
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8014900:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8014904:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8014908:	f003 0301 	and.w	r3, r3, #1
 801490c:	2b00      	cmp	r3, #0
 801490e:	d013      	beq.n	8014938 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8014910:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8014914:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8014918:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801491c:	2b00      	cmp	r3, #0
 801491e:	d00b      	beq.n	8014938 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8014920:	e000      	b.n	8014924 <ITM_SendChar+0x2c>
 8014922:	bf00      	nop
 8014924:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d0f9      	beq.n	8014922 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 801492e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8014932:	687a      	ldr	r2, [r7, #4]
 8014934:	b2d2      	uxtb	r2, r2
 8014936:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8014938:	687b      	ldr	r3, [r7, #4]
}
 801493a:	4618      	mov	r0, r3
 801493c:	370c      	adds	r7, #12
 801493e:	46bd      	mov	sp, r7
 8014940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014944:	4770      	bx	lr

08014946 <initialise_monitor_handles>:
uint8_t **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8014946:	b480      	push	{r7}
 8014948:	af00      	add	r7, sp, #0
}
 801494a:	bf00      	nop
 801494c:	46bd      	mov	sp, r7
 801494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014952:	4770      	bx	lr

08014954 <_getpid>:

int _getpid(void)
{
 8014954:	b480      	push	{r7}
 8014956:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 8014958:	4b04      	ldr	r3, [pc, #16]	; (801496c <_getpid+0x18>)
 801495a:	2258      	movs	r2, #88	; 0x58
 801495c:	601a      	str	r2, [r3, #0]
	return -1;
 801495e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014962:	4618      	mov	r0, r3
 8014964:	46bd      	mov	sp, r7
 8014966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496a:	4770      	bx	lr
 801496c:	20000b40 	.word	0x20000b40

08014970 <_gettimeofday>:

int _gettimeofday(struct timeval  *ptimeval, void *ptimezone)
{
 8014970:	b480      	push	{r7}
 8014972:	b083      	sub	sp, #12
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	6039      	str	r1, [r7, #0]
  errno = ENOSYS;
 801497a:	4b05      	ldr	r3, [pc, #20]	; (8014990 <_gettimeofday+0x20>)
 801497c:	2258      	movs	r2, #88	; 0x58
 801497e:	601a      	str	r2, [r3, #0]
  return -1;
 8014980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014984:	4618      	mov	r0, r3
 8014986:	370c      	adds	r7, #12
 8014988:	46bd      	mov	sp, r7
 801498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498e:	4770      	bx	lr
 8014990:	20000b40 	.word	0x20000b40

08014994 <_kill>:

int _kill(int32_t pid, int32_t sig)
{
 8014994:	b480      	push	{r7}
 8014996:	b083      	sub	sp, #12
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
 801499c:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 801499e:	4b05      	ldr	r3, [pc, #20]	; (80149b4 <_kill+0x20>)
 80149a0:	2258      	movs	r2, #88	; 0x58
 80149a2:	601a      	str	r2, [r3, #0]
	return -1;
 80149a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	370c      	adds	r7, #12
 80149ac:	46bd      	mov	sp, r7
 80149ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b2:	4770      	bx	lr
 80149b4:	20000b40 	.word	0x20000b40

080149b8 <_exit>:

void _exit(int32_t status)
{
 80149b8:	b480      	push	{r7}
 80149ba:	b083      	sub	sp, #12
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 80149c0:	e7fe      	b.n	80149c0 <_exit+0x8>

080149c2 <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80149c2:	b580      	push	{r7, lr}
 80149c4:	b086      	sub	sp, #24
 80149c6:	af00      	add	r7, sp, #0
 80149c8:	60f8      	str	r0, [r7, #12]
 80149ca:	60b9      	str	r1, [r7, #8]
 80149cc:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i = 0; i<len;i++)
 80149ce:	2300      	movs	r3, #0
 80149d0:	617b      	str	r3, [r7, #20]
 80149d2:	e009      	b.n	80149e8 <_write+0x26>
		ITM_SendChar(*ptr++);
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	1c5a      	adds	r2, r3, #1
 80149d8:	60ba      	str	r2, [r7, #8]
 80149da:	781b      	ldrb	r3, [r3, #0]
 80149dc:	4618      	mov	r0, r3
 80149de:	f7ff ff8b 	bl	80148f8 <ITM_SendChar>
	for(i = 0; i<len;i++)
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	3301      	adds	r3, #1
 80149e6:	617b      	str	r3, [r7, #20]
 80149e8:	697a      	ldr	r2, [r7, #20]
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	429a      	cmp	r2, r3
 80149ee:	dbf1      	blt.n	80149d4 <_write+0x12>
	errno = ENOSYS;
 80149f0:	4b04      	ldr	r3, [pc, #16]	; (8014a04 <_write+0x42>)
 80149f2:	2258      	movs	r2, #88	; 0x58
 80149f4:	601a      	str	r2, [r3, #0]
	return -1;
 80149f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3718      	adds	r7, #24
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	20000b40 	.word	0x20000b40

08014a08 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8014a08:	b480      	push	{r7}
 8014a0a:	b085      	sub	sp, #20
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8014a10:	4b0b      	ldr	r3, [pc, #44]	; (8014a40 <_sbrk+0x38>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d102      	bne.n	8014a1e <_sbrk+0x16>
		heap_end = & end;
 8014a18:	4b09      	ldr	r3, [pc, #36]	; (8014a40 <_sbrk+0x38>)
 8014a1a:	4a0a      	ldr	r2, [pc, #40]	; (8014a44 <_sbrk+0x3c>)
 8014a1c:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8014a1e:	4b08      	ldr	r3, [pc, #32]	; (8014a40 <_sbrk+0x38>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8014a24:	4b06      	ldr	r3, [pc, #24]	; (8014a40 <_sbrk+0x38>)
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	4413      	add	r3, r2
 8014a2c:	4a04      	ldr	r2, [pc, #16]	; (8014a40 <_sbrk+0x38>)
 8014a2e:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8014a30:	68fb      	ldr	r3, [r7, #12]
}
 8014a32:	4618      	mov	r0, r3
 8014a34:	3714      	adds	r7, #20
 8014a36:	46bd      	mov	sp, r7
 8014a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3c:	4770      	bx	lr
 8014a3e:	bf00      	nop
 8014a40:	200000a0 	.word	0x200000a0
 8014a44:	20000b44 	.word	0x20000b44

08014a48 <_close>:

int _close(int32_t file)
{
 8014a48:	b480      	push	{r7}
 8014a4a:	b083      	sub	sp, #12
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8014a50:	4b05      	ldr	r3, [pc, #20]	; (8014a68 <_close+0x20>)
 8014a52:	2258      	movs	r2, #88	; 0x58
 8014a54:	601a      	str	r2, [r3, #0]
	return -1;
 8014a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	370c      	adds	r7, #12
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a64:	4770      	bx	lr
 8014a66:	bf00      	nop
 8014a68:	20000b40 	.word	0x20000b40

08014a6c <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	b083      	sub	sp, #12
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
 8014a74:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8014a76:	4b05      	ldr	r3, [pc, #20]	; (8014a8c <_fstat+0x20>)
 8014a78:	2258      	movs	r2, #88	; 0x58
 8014a7a:	601a      	str	r2, [r3, #0]
	return -1;
 8014a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014a80:	4618      	mov	r0, r3
 8014a82:	370c      	adds	r7, #12
 8014a84:	46bd      	mov	sp, r7
 8014a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8a:	4770      	bx	lr
 8014a8c:	20000b40 	.word	0x20000b40

08014a90 <_isatty>:

int _isatty(int32_t file)
{
 8014a90:	b480      	push	{r7}
 8014a92:	b083      	sub	sp, #12
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8014a98:	4b04      	ldr	r3, [pc, #16]	; (8014aac <_isatty+0x1c>)
 8014a9a:	2258      	movs	r2, #88	; 0x58
 8014a9c:	601a      	str	r2, [r3, #0]
	return 0;
 8014a9e:	2300      	movs	r3, #0
}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	370c      	adds	r7, #12
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aaa:	4770      	bx	lr
 8014aac:	20000b40 	.word	0x20000b40

08014ab0 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8014ab0:	b480      	push	{r7}
 8014ab2:	b085      	sub	sp, #20
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	60b9      	str	r1, [r7, #8]
 8014aba:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8014abc:	4b05      	ldr	r3, [pc, #20]	; (8014ad4 <_lseek+0x24>)
 8014abe:	2258      	movs	r2, #88	; 0x58
 8014ac0:	601a      	str	r2, [r3, #0]
	return -1;
 8014ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3714      	adds	r7, #20
 8014aca:	46bd      	mov	sp, r7
 8014acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad0:	4770      	bx	lr
 8014ad2:	bf00      	nop
 8014ad4:	20000b40 	.word	0x20000b40

08014ad8 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8014ad8:	b480      	push	{r7}
 8014ada:	b085      	sub	sp, #20
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	60f8      	str	r0, [r7, #12]
 8014ae0:	60b9      	str	r1, [r7, #8]
 8014ae2:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8014ae4:	4b05      	ldr	r3, [pc, #20]	; (8014afc <_read+0x24>)
 8014ae6:	2258      	movs	r2, #88	; 0x58
 8014ae8:	601a      	str	r2, [r3, #0]
	return -1;
 8014aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3714      	adds	r7, #20
 8014af2:	46bd      	mov	sp, r7
 8014af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af8:	4770      	bx	lr
 8014afa:	bf00      	nop
 8014afc:	20000b40 	.word	0x20000b40

08014b00 <_readlink>:

int _readlink(const char *path, char *buf, size_t bufsize)
{
 8014b00:	b480      	push	{r7}
 8014b02:	b085      	sub	sp, #20
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	60f8      	str	r0, [r7, #12]
 8014b08:	60b9      	str	r1, [r7, #8]
 8014b0a:	607a      	str	r2, [r7, #4]
  errno = ENOSYS;
 8014b0c:	4b05      	ldr	r3, [pc, #20]	; (8014b24 <_readlink+0x24>)
 8014b0e:	2258      	movs	r2, #88	; 0x58
 8014b10:	601a      	str	r2, [r3, #0]
  return -1;
 8014b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b16:	4618      	mov	r0, r3
 8014b18:	3714      	adds	r7, #20
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b20:	4770      	bx	lr
 8014b22:	bf00      	nop
 8014b24:	20000b40 	.word	0x20000b40

08014b28 <_open>:

int _open(const uint8_t *path, int32_t flags, int32_t mode)
{
 8014b28:	b480      	push	{r7}
 8014b2a:	b085      	sub	sp, #20
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	60f8      	str	r0, [r7, #12]
 8014b30:	60b9      	str	r1, [r7, #8]
 8014b32:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8014b34:	4b05      	ldr	r3, [pc, #20]	; (8014b4c <_open+0x24>)
 8014b36:	2258      	movs	r2, #88	; 0x58
 8014b38:	601a      	str	r2, [r3, #0]
	return -1;
 8014b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3714      	adds	r7, #20
 8014b42:	46bd      	mov	sp, r7
 8014b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b48:	4770      	bx	lr
 8014b4a:	bf00      	nop
 8014b4c:	20000b40 	.word	0x20000b40

08014b50 <_wait>:

int _wait(int32_t *status)
{
 8014b50:	b480      	push	{r7}
 8014b52:	b083      	sub	sp, #12
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8014b58:	4b05      	ldr	r3, [pc, #20]	; (8014b70 <_wait+0x20>)
 8014b5a:	2258      	movs	r2, #88	; 0x58
 8014b5c:	601a      	str	r2, [r3, #0]
	return -1;
 8014b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	370c      	adds	r7, #12
 8014b66:	46bd      	mov	sp, r7
 8014b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6c:	4770      	bx	lr
 8014b6e:	bf00      	nop
 8014b70:	20000b40 	.word	0x20000b40

08014b74 <_unlink>:

int _unlink(const uint8_t *name)
{
 8014b74:	b480      	push	{r7}
 8014b76:	b083      	sub	sp, #12
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8014b7c:	4b05      	ldr	r3, [pc, #20]	; (8014b94 <_unlink+0x20>)
 8014b7e:	2258      	movs	r2, #88	; 0x58
 8014b80:	601a      	str	r2, [r3, #0]
	return -1;
 8014b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	370c      	adds	r7, #12
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b90:	4770      	bx	lr
 8014b92:	bf00      	nop
 8014b94:	20000b40 	.word	0x20000b40

08014b98 <_times>:

int _times(struct tms *buf)
{
 8014b98:	b480      	push	{r7}
 8014b9a:	b083      	sub	sp, #12
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8014ba0:	4b05      	ldr	r3, [pc, #20]	; (8014bb8 <_times+0x20>)
 8014ba2:	2258      	movs	r2, #88	; 0x58
 8014ba4:	601a      	str	r2, [r3, #0]
	return -1;
 8014ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	370c      	adds	r7, #12
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb4:	4770      	bx	lr
 8014bb6:	bf00      	nop
 8014bb8:	20000b40 	.word	0x20000b40

08014bbc <_stat>:

int _stat(const uint8_t *file, struct stat *st)
{
 8014bbc:	b480      	push	{r7}
 8014bbe:	b083      	sub	sp, #12
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8014bc6:	4b05      	ldr	r3, [pc, #20]	; (8014bdc <_stat+0x20>)
 8014bc8:	2258      	movs	r2, #88	; 0x58
 8014bca:	601a      	str	r2, [r3, #0]
	return -1;
 8014bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	370c      	adds	r7, #12
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr
 8014bdc:	20000b40 	.word	0x20000b40

08014be0 <_symlink>:

int _symlink(const char *path1, const char *path2)
{
 8014be0:	b480      	push	{r7}
 8014be2:	b083      	sub	sp, #12
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
  errno = ENOSYS;
 8014bea:	4b05      	ldr	r3, [pc, #20]	; (8014c00 <_symlink+0x20>)
 8014bec:	2258      	movs	r2, #88	; 0x58
 8014bee:	601a      	str	r2, [r3, #0]
  return -1;
 8014bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	370c      	adds	r7, #12
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfe:	4770      	bx	lr
 8014c00:	20000b40 	.word	0x20000b40

08014c04 <_link>:

int _link(const uint8_t *old, const uint8_t *new)
{
 8014c04:	b480      	push	{r7}
 8014c06:	b083      	sub	sp, #12
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8014c0e:	4b05      	ldr	r3, [pc, #20]	; (8014c24 <_link+0x20>)
 8014c10:	2258      	movs	r2, #88	; 0x58
 8014c12:	601a      	str	r2, [r3, #0]
	return -1;
 8014c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	370c      	adds	r7, #12
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c22:	4770      	bx	lr
 8014c24:	20000b40 	.word	0x20000b40

08014c28 <_fork>:

int _fork(void)
{
 8014c28:	b480      	push	{r7}
 8014c2a:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 8014c2c:	4b04      	ldr	r3, [pc, #16]	; (8014c40 <_fork+0x18>)
 8014c2e:	2258      	movs	r2, #88	; 0x58
 8014c30:	601a      	str	r2, [r3, #0]
	return -1;
 8014c32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3e:	4770      	bx	lr
 8014c40:	20000b40 	.word	0x20000b40

08014c44 <_execve>:

int _execve(const uint8_t *name, uint8_t * const *argv, uint8_t * const *env)
{
 8014c44:	b480      	push	{r7}
 8014c46:	b085      	sub	sp, #20
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	60f8      	str	r0, [r7, #12]
 8014c4c:	60b9      	str	r1, [r7, #8]
 8014c4e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8014c50:	4b05      	ldr	r3, [pc, #20]	; (8014c68 <_execve+0x24>)
 8014c52:	2258      	movs	r2, #88	; 0x58
 8014c54:	601a      	str	r2, [r3, #0]
	return -1;
 8014c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3714      	adds	r7, #20
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c64:	4770      	bx	lr
 8014c66:	bf00      	nop
 8014c68:	20000b40 	.word	0x20000b40

08014c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014c6c:	b480      	push	{r7}
 8014c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014c70:	4a16      	ldr	r2, [pc, #88]	; (8014ccc <SystemInit+0x60>)
 8014c72:	4b16      	ldr	r3, [pc, #88]	; (8014ccc <SystemInit+0x60>)
 8014c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8014c80:	4a13      	ldr	r2, [pc, #76]	; (8014cd0 <SystemInit+0x64>)
 8014c82:	4b13      	ldr	r3, [pc, #76]	; (8014cd0 <SystemInit+0x64>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	f043 0301 	orr.w	r3, r3, #1
 8014c8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8014c8c:	4b10      	ldr	r3, [pc, #64]	; (8014cd0 <SystemInit+0x64>)
 8014c8e:	2200      	movs	r2, #0
 8014c90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8014c92:	4a0f      	ldr	r2, [pc, #60]	; (8014cd0 <SystemInit+0x64>)
 8014c94:	4b0e      	ldr	r3, [pc, #56]	; (8014cd0 <SystemInit+0x64>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8014c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014ca0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8014ca2:	4b0b      	ldr	r3, [pc, #44]	; (8014cd0 <SystemInit+0x64>)
 8014ca4:	4a0b      	ldr	r2, [pc, #44]	; (8014cd4 <SystemInit+0x68>)
 8014ca6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8014ca8:	4a09      	ldr	r2, [pc, #36]	; (8014cd0 <SystemInit+0x64>)
 8014caa:	4b09      	ldr	r3, [pc, #36]	; (8014cd0 <SystemInit+0x64>)
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014cb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8014cb4:	4b06      	ldr	r3, [pc, #24]	; (8014cd0 <SystemInit+0x64>)
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8014cba:	4b04      	ldr	r3, [pc, #16]	; (8014ccc <SystemInit+0x60>)
 8014cbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014cc0:	609a      	str	r2, [r3, #8]
#endif
}
 8014cc2:	bf00      	nop
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cca:	4770      	bx	lr
 8014ccc:	e000ed00 	.word	0xe000ed00
 8014cd0:	40023800 	.word	0x40023800
 8014cd4:	24003010 	.word	0x24003010

08014cd8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b087      	sub	sp, #28
 8014cdc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	613b      	str	r3, [r7, #16]
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	617b      	str	r3, [r7, #20]
 8014ce6:	2302      	movs	r3, #2
 8014ce8:	60fb      	str	r3, [r7, #12]
 8014cea:	2300      	movs	r3, #0
 8014cec:	60bb      	str	r3, [r7, #8]
 8014cee:	2302      	movs	r3, #2
 8014cf0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8014cf2:	4b31      	ldr	r3, [pc, #196]	; (8014db8 <SystemCoreClockUpdate+0xe0>)
 8014cf4:	689b      	ldr	r3, [r3, #8]
 8014cf6:	f003 030c 	and.w	r3, r3, #12
 8014cfa:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	2b04      	cmp	r3, #4
 8014d00:	d007      	beq.n	8014d12 <SystemCoreClockUpdate+0x3a>
 8014d02:	2b08      	cmp	r3, #8
 8014d04:	d009      	beq.n	8014d1a <SystemCoreClockUpdate+0x42>
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d13d      	bne.n	8014d86 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8014d0a:	4b2c      	ldr	r3, [pc, #176]	; (8014dbc <SystemCoreClockUpdate+0xe4>)
 8014d0c:	4a2c      	ldr	r2, [pc, #176]	; (8014dc0 <SystemCoreClockUpdate+0xe8>)
 8014d0e:	601a      	str	r2, [r3, #0]
      break;
 8014d10:	e03d      	b.n	8014d8e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8014d12:	4b2a      	ldr	r3, [pc, #168]	; (8014dbc <SystemCoreClockUpdate+0xe4>)
 8014d14:	4a2b      	ldr	r2, [pc, #172]	; (8014dc4 <SystemCoreClockUpdate+0xec>)
 8014d16:	601a      	str	r2, [r3, #0]
      break;
 8014d18:	e039      	b.n	8014d8e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8014d1a:	4b27      	ldr	r3, [pc, #156]	; (8014db8 <SystemCoreClockUpdate+0xe0>)
 8014d1c:	685b      	ldr	r3, [r3, #4]
 8014d1e:	0d9b      	lsrs	r3, r3, #22
 8014d20:	f003 0301 	and.w	r3, r3, #1
 8014d24:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014d26:	4b24      	ldr	r3, [pc, #144]	; (8014db8 <SystemCoreClockUpdate+0xe0>)
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014d2e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d00c      	beq.n	8014d50 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8014d36:	4a23      	ldr	r2, [pc, #140]	; (8014dc4 <SystemCoreClockUpdate+0xec>)
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d3e:	4a1e      	ldr	r2, [pc, #120]	; (8014db8 <SystemCoreClockUpdate+0xe0>)
 8014d40:	6852      	ldr	r2, [r2, #4]
 8014d42:	0992      	lsrs	r2, r2, #6
 8014d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014d48:	fb02 f303 	mul.w	r3, r2, r3
 8014d4c:	617b      	str	r3, [r7, #20]
 8014d4e:	e00b      	b.n	8014d68 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8014d50:	4a1b      	ldr	r2, [pc, #108]	; (8014dc0 <SystemCoreClockUpdate+0xe8>)
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d58:	4a17      	ldr	r2, [pc, #92]	; (8014db8 <SystemCoreClockUpdate+0xe0>)
 8014d5a:	6852      	ldr	r2, [r2, #4]
 8014d5c:	0992      	lsrs	r2, r2, #6
 8014d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014d62:	fb02 f303 	mul.w	r3, r2, r3
 8014d66:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8014d68:	4b13      	ldr	r3, [pc, #76]	; (8014db8 <SystemCoreClockUpdate+0xe0>)
 8014d6a:	685b      	ldr	r3, [r3, #4]
 8014d6c:	0c1b      	lsrs	r3, r3, #16
 8014d6e:	f003 0303 	and.w	r3, r3, #3
 8014d72:	3301      	adds	r3, #1
 8014d74:	005b      	lsls	r3, r3, #1
 8014d76:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8014d78:	697a      	ldr	r2, [r7, #20]
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d80:	4a0e      	ldr	r2, [pc, #56]	; (8014dbc <SystemCoreClockUpdate+0xe4>)
 8014d82:	6013      	str	r3, [r2, #0]
      break;
 8014d84:	e003      	b.n	8014d8e <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8014d86:	4b0d      	ldr	r3, [pc, #52]	; (8014dbc <SystemCoreClockUpdate+0xe4>)
 8014d88:	4a0d      	ldr	r2, [pc, #52]	; (8014dc0 <SystemCoreClockUpdate+0xe8>)
 8014d8a:	601a      	str	r2, [r3, #0]
      break;
 8014d8c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8014d8e:	4b0a      	ldr	r3, [pc, #40]	; (8014db8 <SystemCoreClockUpdate+0xe0>)
 8014d90:	689b      	ldr	r3, [r3, #8]
 8014d92:	091b      	lsrs	r3, r3, #4
 8014d94:	f003 030f 	and.w	r3, r3, #15
 8014d98:	4a0b      	ldr	r2, [pc, #44]	; (8014dc8 <SystemCoreClockUpdate+0xf0>)
 8014d9a:	5cd3      	ldrb	r3, [r2, r3]
 8014d9c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8014d9e:	4b07      	ldr	r3, [pc, #28]	; (8014dbc <SystemCoreClockUpdate+0xe4>)
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	693b      	ldr	r3, [r7, #16]
 8014da4:	fa22 f303 	lsr.w	r3, r2, r3
 8014da8:	4a04      	ldr	r2, [pc, #16]	; (8014dbc <SystemCoreClockUpdate+0xe4>)
 8014daa:	6013      	str	r3, [r2, #0]
}
 8014dac:	bf00      	nop
 8014dae:	371c      	adds	r7, #28
 8014db0:	46bd      	mov	sp, r7
 8014db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db6:	4770      	bx	lr
 8014db8:	40023800 	.word	0x40023800
 8014dbc:	20000008 	.word	0x20000008
 8014dc0:	00f42400 	.word	0x00f42400
 8014dc4:	017d7840 	.word	0x017d7840
 8014dc8:	080161b0 	.word	0x080161b0

08014dcc <strlen>:
 8014dcc:	4603      	mov	r3, r0
 8014dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dd2:	2a00      	cmp	r2, #0
 8014dd4:	d1fb      	bne.n	8014dce <strlen+0x2>
 8014dd6:	1a18      	subs	r0, r3, r0
 8014dd8:	3801      	subs	r0, #1
 8014dda:	4770      	bx	lr
 8014ddc:	0000      	movs	r0, r0
	...

08014de0 <memchr>:
 8014de0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8014de4:	2a10      	cmp	r2, #16
 8014de6:	db2b      	blt.n	8014e40 <memchr+0x60>
 8014de8:	f010 0f07 	tst.w	r0, #7
 8014dec:	d008      	beq.n	8014e00 <memchr+0x20>
 8014dee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014df2:	3a01      	subs	r2, #1
 8014df4:	428b      	cmp	r3, r1
 8014df6:	d02d      	beq.n	8014e54 <memchr+0x74>
 8014df8:	f010 0f07 	tst.w	r0, #7
 8014dfc:	b342      	cbz	r2, 8014e50 <memchr+0x70>
 8014dfe:	d1f6      	bne.n	8014dee <memchr+0xe>
 8014e00:	b4f0      	push	{r4, r5, r6, r7}
 8014e02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8014e06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8014e0a:	f022 0407 	bic.w	r4, r2, #7
 8014e0e:	f07f 0700 	mvns.w	r7, #0
 8014e12:	2300      	movs	r3, #0
 8014e14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8014e18:	3c08      	subs	r4, #8
 8014e1a:	ea85 0501 	eor.w	r5, r5, r1
 8014e1e:	ea86 0601 	eor.w	r6, r6, r1
 8014e22:	fa85 f547 	uadd8	r5, r5, r7
 8014e26:	faa3 f587 	sel	r5, r3, r7
 8014e2a:	fa86 f647 	uadd8	r6, r6, r7
 8014e2e:	faa5 f687 	sel	r6, r5, r7
 8014e32:	b98e      	cbnz	r6, 8014e58 <memchr+0x78>
 8014e34:	d1ee      	bne.n	8014e14 <memchr+0x34>
 8014e36:	bcf0      	pop	{r4, r5, r6, r7}
 8014e38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8014e3c:	f002 0207 	and.w	r2, r2, #7
 8014e40:	b132      	cbz	r2, 8014e50 <memchr+0x70>
 8014e42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014e46:	3a01      	subs	r2, #1
 8014e48:	ea83 0301 	eor.w	r3, r3, r1
 8014e4c:	b113      	cbz	r3, 8014e54 <memchr+0x74>
 8014e4e:	d1f8      	bne.n	8014e42 <memchr+0x62>
 8014e50:	2000      	movs	r0, #0
 8014e52:	4770      	bx	lr
 8014e54:	3801      	subs	r0, #1
 8014e56:	4770      	bx	lr
 8014e58:	2d00      	cmp	r5, #0
 8014e5a:	bf06      	itte	eq
 8014e5c:	4635      	moveq	r5, r6
 8014e5e:	3803      	subeq	r0, #3
 8014e60:	3807      	subne	r0, #7
 8014e62:	f015 0f01 	tst.w	r5, #1
 8014e66:	d107      	bne.n	8014e78 <memchr+0x98>
 8014e68:	3001      	adds	r0, #1
 8014e6a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8014e6e:	bf02      	ittt	eq
 8014e70:	3001      	addeq	r0, #1
 8014e72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8014e76:	3001      	addeq	r0, #1
 8014e78:	bcf0      	pop	{r4, r5, r6, r7}
 8014e7a:	3801      	subs	r0, #1
 8014e7c:	4770      	bx	lr
 8014e7e:	bf00      	nop

08014e80 <__aeabi_uldivmod>:
 8014e80:	b953      	cbnz	r3, 8014e98 <__aeabi_uldivmod+0x18>
 8014e82:	b94a      	cbnz	r2, 8014e98 <__aeabi_uldivmod+0x18>
 8014e84:	2900      	cmp	r1, #0
 8014e86:	bf08      	it	eq
 8014e88:	2800      	cmpeq	r0, #0
 8014e8a:	bf1c      	itt	ne
 8014e8c:	f04f 31ff 	movne.w	r1, #4294967295
 8014e90:	f04f 30ff 	movne.w	r0, #4294967295
 8014e94:	f000 b97a 	b.w	801518c <__aeabi_idiv0>
 8014e98:	f1ad 0c08 	sub.w	ip, sp, #8
 8014e9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8014ea0:	f000 f806 	bl	8014eb0 <__udivmoddi4>
 8014ea4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014eac:	b004      	add	sp, #16
 8014eae:	4770      	bx	lr

08014eb0 <__udivmoddi4>:
 8014eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eb4:	468c      	mov	ip, r1
 8014eb6:	460d      	mov	r5, r1
 8014eb8:	4604      	mov	r4, r0
 8014eba:	9e08      	ldr	r6, [sp, #32]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d151      	bne.n	8014f64 <__udivmoddi4+0xb4>
 8014ec0:	428a      	cmp	r2, r1
 8014ec2:	4617      	mov	r7, r2
 8014ec4:	d96d      	bls.n	8014fa2 <__udivmoddi4+0xf2>
 8014ec6:	fab2 fe82 	clz	lr, r2
 8014eca:	f1be 0f00 	cmp.w	lr, #0
 8014ece:	d00b      	beq.n	8014ee8 <__udivmoddi4+0x38>
 8014ed0:	f1ce 0c20 	rsb	ip, lr, #32
 8014ed4:	fa01 f50e 	lsl.w	r5, r1, lr
 8014ed8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8014edc:	fa02 f70e 	lsl.w	r7, r2, lr
 8014ee0:	ea4c 0c05 	orr.w	ip, ip, r5
 8014ee4:	fa00 f40e 	lsl.w	r4, r0, lr
 8014ee8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8014eec:	0c25      	lsrs	r5, r4, #16
 8014eee:	fbbc f8fa 	udiv	r8, ip, sl
 8014ef2:	fa1f f987 	uxth.w	r9, r7
 8014ef6:	fb0a cc18 	mls	ip, sl, r8, ip
 8014efa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8014efe:	fb08 f309 	mul.w	r3, r8, r9
 8014f02:	42ab      	cmp	r3, r5
 8014f04:	d90a      	bls.n	8014f1c <__udivmoddi4+0x6c>
 8014f06:	19ed      	adds	r5, r5, r7
 8014f08:	f108 32ff 	add.w	r2, r8, #4294967295
 8014f0c:	f080 8123 	bcs.w	8015156 <__udivmoddi4+0x2a6>
 8014f10:	42ab      	cmp	r3, r5
 8014f12:	f240 8120 	bls.w	8015156 <__udivmoddi4+0x2a6>
 8014f16:	f1a8 0802 	sub.w	r8, r8, #2
 8014f1a:	443d      	add	r5, r7
 8014f1c:	1aed      	subs	r5, r5, r3
 8014f1e:	b2a4      	uxth	r4, r4
 8014f20:	fbb5 f0fa 	udiv	r0, r5, sl
 8014f24:	fb0a 5510 	mls	r5, sl, r0, r5
 8014f28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8014f2c:	fb00 f909 	mul.w	r9, r0, r9
 8014f30:	45a1      	cmp	r9, r4
 8014f32:	d909      	bls.n	8014f48 <__udivmoddi4+0x98>
 8014f34:	19e4      	adds	r4, r4, r7
 8014f36:	f100 33ff 	add.w	r3, r0, #4294967295
 8014f3a:	f080 810a 	bcs.w	8015152 <__udivmoddi4+0x2a2>
 8014f3e:	45a1      	cmp	r9, r4
 8014f40:	f240 8107 	bls.w	8015152 <__udivmoddi4+0x2a2>
 8014f44:	3802      	subs	r0, #2
 8014f46:	443c      	add	r4, r7
 8014f48:	eba4 0409 	sub.w	r4, r4, r9
 8014f4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8014f50:	2100      	movs	r1, #0
 8014f52:	2e00      	cmp	r6, #0
 8014f54:	d061      	beq.n	801501a <__udivmoddi4+0x16a>
 8014f56:	fa24 f40e 	lsr.w	r4, r4, lr
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	6034      	str	r4, [r6, #0]
 8014f5e:	6073      	str	r3, [r6, #4]
 8014f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f64:	428b      	cmp	r3, r1
 8014f66:	d907      	bls.n	8014f78 <__udivmoddi4+0xc8>
 8014f68:	2e00      	cmp	r6, #0
 8014f6a:	d054      	beq.n	8015016 <__udivmoddi4+0x166>
 8014f6c:	2100      	movs	r1, #0
 8014f6e:	e886 0021 	stmia.w	r6, {r0, r5}
 8014f72:	4608      	mov	r0, r1
 8014f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f78:	fab3 f183 	clz	r1, r3
 8014f7c:	2900      	cmp	r1, #0
 8014f7e:	f040 808e 	bne.w	801509e <__udivmoddi4+0x1ee>
 8014f82:	42ab      	cmp	r3, r5
 8014f84:	d302      	bcc.n	8014f8c <__udivmoddi4+0xdc>
 8014f86:	4282      	cmp	r2, r0
 8014f88:	f200 80fa 	bhi.w	8015180 <__udivmoddi4+0x2d0>
 8014f8c:	1a84      	subs	r4, r0, r2
 8014f8e:	eb65 0503 	sbc.w	r5, r5, r3
 8014f92:	2001      	movs	r0, #1
 8014f94:	46ac      	mov	ip, r5
 8014f96:	2e00      	cmp	r6, #0
 8014f98:	d03f      	beq.n	801501a <__udivmoddi4+0x16a>
 8014f9a:	e886 1010 	stmia.w	r6, {r4, ip}
 8014f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fa2:	b912      	cbnz	r2, 8014faa <__udivmoddi4+0xfa>
 8014fa4:	2701      	movs	r7, #1
 8014fa6:	fbb7 f7f2 	udiv	r7, r7, r2
 8014faa:	fab7 fe87 	clz	lr, r7
 8014fae:	f1be 0f00 	cmp.w	lr, #0
 8014fb2:	d134      	bne.n	801501e <__udivmoddi4+0x16e>
 8014fb4:	1beb      	subs	r3, r5, r7
 8014fb6:	0c3a      	lsrs	r2, r7, #16
 8014fb8:	fa1f fc87 	uxth.w	ip, r7
 8014fbc:	2101      	movs	r1, #1
 8014fbe:	fbb3 f8f2 	udiv	r8, r3, r2
 8014fc2:	0c25      	lsrs	r5, r4, #16
 8014fc4:	fb02 3318 	mls	r3, r2, r8, r3
 8014fc8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8014fcc:	fb0c f308 	mul.w	r3, ip, r8
 8014fd0:	42ab      	cmp	r3, r5
 8014fd2:	d907      	bls.n	8014fe4 <__udivmoddi4+0x134>
 8014fd4:	19ed      	adds	r5, r5, r7
 8014fd6:	f108 30ff 	add.w	r0, r8, #4294967295
 8014fda:	d202      	bcs.n	8014fe2 <__udivmoddi4+0x132>
 8014fdc:	42ab      	cmp	r3, r5
 8014fde:	f200 80d1 	bhi.w	8015184 <__udivmoddi4+0x2d4>
 8014fe2:	4680      	mov	r8, r0
 8014fe4:	1aed      	subs	r5, r5, r3
 8014fe6:	b2a3      	uxth	r3, r4
 8014fe8:	fbb5 f0f2 	udiv	r0, r5, r2
 8014fec:	fb02 5510 	mls	r5, r2, r0, r5
 8014ff0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8014ff4:	fb0c fc00 	mul.w	ip, ip, r0
 8014ff8:	45a4      	cmp	ip, r4
 8014ffa:	d907      	bls.n	801500c <__udivmoddi4+0x15c>
 8014ffc:	19e4      	adds	r4, r4, r7
 8014ffe:	f100 33ff 	add.w	r3, r0, #4294967295
 8015002:	d202      	bcs.n	801500a <__udivmoddi4+0x15a>
 8015004:	45a4      	cmp	ip, r4
 8015006:	f200 80b8 	bhi.w	801517a <__udivmoddi4+0x2ca>
 801500a:	4618      	mov	r0, r3
 801500c:	eba4 040c 	sub.w	r4, r4, ip
 8015010:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8015014:	e79d      	b.n	8014f52 <__udivmoddi4+0xa2>
 8015016:	4631      	mov	r1, r6
 8015018:	4630      	mov	r0, r6
 801501a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801501e:	f1ce 0420 	rsb	r4, lr, #32
 8015022:	fa05 f30e 	lsl.w	r3, r5, lr
 8015026:	fa07 f70e 	lsl.w	r7, r7, lr
 801502a:	fa20 f804 	lsr.w	r8, r0, r4
 801502e:	0c3a      	lsrs	r2, r7, #16
 8015030:	fa25 f404 	lsr.w	r4, r5, r4
 8015034:	ea48 0803 	orr.w	r8, r8, r3
 8015038:	fbb4 f1f2 	udiv	r1, r4, r2
 801503c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8015040:	fb02 4411 	mls	r4, r2, r1, r4
 8015044:	fa1f fc87 	uxth.w	ip, r7
 8015048:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 801504c:	fb01 f30c 	mul.w	r3, r1, ip
 8015050:	42ab      	cmp	r3, r5
 8015052:	fa00 f40e 	lsl.w	r4, r0, lr
 8015056:	d909      	bls.n	801506c <__udivmoddi4+0x1bc>
 8015058:	19ed      	adds	r5, r5, r7
 801505a:	f101 30ff 	add.w	r0, r1, #4294967295
 801505e:	f080 808a 	bcs.w	8015176 <__udivmoddi4+0x2c6>
 8015062:	42ab      	cmp	r3, r5
 8015064:	f240 8087 	bls.w	8015176 <__udivmoddi4+0x2c6>
 8015068:	3902      	subs	r1, #2
 801506a:	443d      	add	r5, r7
 801506c:	1aeb      	subs	r3, r5, r3
 801506e:	fa1f f588 	uxth.w	r5, r8
 8015072:	fbb3 f0f2 	udiv	r0, r3, r2
 8015076:	fb02 3310 	mls	r3, r2, r0, r3
 801507a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 801507e:	fb00 f30c 	mul.w	r3, r0, ip
 8015082:	42ab      	cmp	r3, r5
 8015084:	d907      	bls.n	8015096 <__udivmoddi4+0x1e6>
 8015086:	19ed      	adds	r5, r5, r7
 8015088:	f100 38ff 	add.w	r8, r0, #4294967295
 801508c:	d26f      	bcs.n	801516e <__udivmoddi4+0x2be>
 801508e:	42ab      	cmp	r3, r5
 8015090:	d96d      	bls.n	801516e <__udivmoddi4+0x2be>
 8015092:	3802      	subs	r0, #2
 8015094:	443d      	add	r5, r7
 8015096:	1aeb      	subs	r3, r5, r3
 8015098:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801509c:	e78f      	b.n	8014fbe <__udivmoddi4+0x10e>
 801509e:	f1c1 0720 	rsb	r7, r1, #32
 80150a2:	fa22 f807 	lsr.w	r8, r2, r7
 80150a6:	408b      	lsls	r3, r1
 80150a8:	fa05 f401 	lsl.w	r4, r5, r1
 80150ac:	ea48 0303 	orr.w	r3, r8, r3
 80150b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80150b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80150b8:	40fd      	lsrs	r5, r7
 80150ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80150be:	fbb5 f9fc 	udiv	r9, r5, ip
 80150c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80150c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80150ca:	fa1f f883 	uxth.w	r8, r3
 80150ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80150d2:	fb09 f408 	mul.w	r4, r9, r8
 80150d6:	42ac      	cmp	r4, r5
 80150d8:	fa02 f201 	lsl.w	r2, r2, r1
 80150dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80150e0:	d908      	bls.n	80150f4 <__udivmoddi4+0x244>
 80150e2:	18ed      	adds	r5, r5, r3
 80150e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80150e8:	d243      	bcs.n	8015172 <__udivmoddi4+0x2c2>
 80150ea:	42ac      	cmp	r4, r5
 80150ec:	d941      	bls.n	8015172 <__udivmoddi4+0x2c2>
 80150ee:	f1a9 0902 	sub.w	r9, r9, #2
 80150f2:	441d      	add	r5, r3
 80150f4:	1b2d      	subs	r5, r5, r4
 80150f6:	fa1f fe8e 	uxth.w	lr, lr
 80150fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80150fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8015102:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8015106:	fb00 f808 	mul.w	r8, r0, r8
 801510a:	45a0      	cmp	r8, r4
 801510c:	d907      	bls.n	801511e <__udivmoddi4+0x26e>
 801510e:	18e4      	adds	r4, r4, r3
 8015110:	f100 35ff 	add.w	r5, r0, #4294967295
 8015114:	d229      	bcs.n	801516a <__udivmoddi4+0x2ba>
 8015116:	45a0      	cmp	r8, r4
 8015118:	d927      	bls.n	801516a <__udivmoddi4+0x2ba>
 801511a:	3802      	subs	r0, #2
 801511c:	441c      	add	r4, r3
 801511e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8015122:	eba4 0408 	sub.w	r4, r4, r8
 8015126:	fba0 8902 	umull	r8, r9, r0, r2
 801512a:	454c      	cmp	r4, r9
 801512c:	46c6      	mov	lr, r8
 801512e:	464d      	mov	r5, r9
 8015130:	d315      	bcc.n	801515e <__udivmoddi4+0x2ae>
 8015132:	d012      	beq.n	801515a <__udivmoddi4+0x2aa>
 8015134:	b156      	cbz	r6, 801514c <__udivmoddi4+0x29c>
 8015136:	ebba 030e 	subs.w	r3, sl, lr
 801513a:	eb64 0405 	sbc.w	r4, r4, r5
 801513e:	fa04 f707 	lsl.w	r7, r4, r7
 8015142:	40cb      	lsrs	r3, r1
 8015144:	431f      	orrs	r7, r3
 8015146:	40cc      	lsrs	r4, r1
 8015148:	6037      	str	r7, [r6, #0]
 801514a:	6074      	str	r4, [r6, #4]
 801514c:	2100      	movs	r1, #0
 801514e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015152:	4618      	mov	r0, r3
 8015154:	e6f8      	b.n	8014f48 <__udivmoddi4+0x98>
 8015156:	4690      	mov	r8, r2
 8015158:	e6e0      	b.n	8014f1c <__udivmoddi4+0x6c>
 801515a:	45c2      	cmp	sl, r8
 801515c:	d2ea      	bcs.n	8015134 <__udivmoddi4+0x284>
 801515e:	ebb8 0e02 	subs.w	lr, r8, r2
 8015162:	eb69 0503 	sbc.w	r5, r9, r3
 8015166:	3801      	subs	r0, #1
 8015168:	e7e4      	b.n	8015134 <__udivmoddi4+0x284>
 801516a:	4628      	mov	r0, r5
 801516c:	e7d7      	b.n	801511e <__udivmoddi4+0x26e>
 801516e:	4640      	mov	r0, r8
 8015170:	e791      	b.n	8015096 <__udivmoddi4+0x1e6>
 8015172:	4681      	mov	r9, r0
 8015174:	e7be      	b.n	80150f4 <__udivmoddi4+0x244>
 8015176:	4601      	mov	r1, r0
 8015178:	e778      	b.n	801506c <__udivmoddi4+0x1bc>
 801517a:	3802      	subs	r0, #2
 801517c:	443c      	add	r4, r7
 801517e:	e745      	b.n	801500c <__udivmoddi4+0x15c>
 8015180:	4608      	mov	r0, r1
 8015182:	e708      	b.n	8014f96 <__udivmoddi4+0xe6>
 8015184:	f1a8 0802 	sub.w	r8, r8, #2
 8015188:	443d      	add	r5, r7
 801518a:	e72b      	b.n	8014fe4 <__udivmoddi4+0x134>

0801518c <__aeabi_idiv0>:
 801518c:	4770      	bx	lr
 801518e:	bf00      	nop

08015190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8015190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80151c8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8015194:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8015196:	e003      	b.n	80151a0 <LoopCopyDataInit>

08015198 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8015198:	4b0c      	ldr	r3, [pc, #48]	; (80151cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801519a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801519c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801519e:	3104      	adds	r1, #4

080151a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80151a0:	480b      	ldr	r0, [pc, #44]	; (80151d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80151a2:	4b0c      	ldr	r3, [pc, #48]	; (80151d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80151a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80151a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80151a8:	d3f6      	bcc.n	8015198 <CopyDataInit>
  ldr  r2, =_sbss
 80151aa:	4a0b      	ldr	r2, [pc, #44]	; (80151d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80151ac:	e002      	b.n	80151b4 <LoopFillZerobss>

080151ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80151ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80151b0:	f842 3b04 	str.w	r3, [r2], #4

080151b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80151b4:	4b09      	ldr	r3, [pc, #36]	; (80151dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80151b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80151b8:	d3f9      	bcc.n	80151ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80151ba:	f7ff fd57 	bl	8014c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80151be:	f000 f811 	bl	80151e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80151c2:	f7fe fa81 	bl	80136c8 <main>
  bx  lr    
 80151c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80151c8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80151cc:	0801620c 	.word	0x0801620c
  ldr  r0, =_sdata
 80151d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80151d4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80151d8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80151dc:	20000b44 	.word	0x20000b44

080151e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80151e0:	e7fe      	b.n	80151e0 <ADC_IRQHandler>
	...

080151e4 <__libc_init_array>:
 80151e4:	b570      	push	{r4, r5, r6, lr}
 80151e6:	4e0d      	ldr	r6, [pc, #52]	; (801521c <__libc_init_array+0x38>)
 80151e8:	4c0d      	ldr	r4, [pc, #52]	; (8015220 <__libc_init_array+0x3c>)
 80151ea:	1ba4      	subs	r4, r4, r6
 80151ec:	10a4      	asrs	r4, r4, #2
 80151ee:	2500      	movs	r5, #0
 80151f0:	42a5      	cmp	r5, r4
 80151f2:	d109      	bne.n	8015208 <__libc_init_array+0x24>
 80151f4:	4e0b      	ldr	r6, [pc, #44]	; (8015224 <__libc_init_array+0x40>)
 80151f6:	4c0c      	ldr	r4, [pc, #48]	; (8015228 <__libc_init_array+0x44>)
 80151f8:	f000 fc4c 	bl	8015a94 <_init>
 80151fc:	1ba4      	subs	r4, r4, r6
 80151fe:	10a4      	asrs	r4, r4, #2
 8015200:	2500      	movs	r5, #0
 8015202:	42a5      	cmp	r5, r4
 8015204:	d105      	bne.n	8015212 <__libc_init_array+0x2e>
 8015206:	bd70      	pop	{r4, r5, r6, pc}
 8015208:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801520c:	4798      	blx	r3
 801520e:	3501      	adds	r5, #1
 8015210:	e7ee      	b.n	80151f0 <__libc_init_array+0xc>
 8015212:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015216:	4798      	blx	r3
 8015218:	3501      	adds	r5, #1
 801521a:	e7f2      	b.n	8015202 <__libc_init_array+0x1e>
 801521c:	08016204 	.word	0x08016204
 8015220:	08016204 	.word	0x08016204
 8015224:	08016204 	.word	0x08016204
 8015228:	08016208 	.word	0x08016208

0801522c <malloc>:
 801522c:	4b02      	ldr	r3, [pc, #8]	; (8015238 <malloc+0xc>)
 801522e:	4601      	mov	r1, r0
 8015230:	6818      	ldr	r0, [r3, #0]
 8015232:	f000 b859 	b.w	80152e8 <_malloc_r>
 8015236:	bf00      	nop
 8015238:	2000000c 	.word	0x2000000c

0801523c <free>:
 801523c:	4b02      	ldr	r3, [pc, #8]	; (8015248 <free+0xc>)
 801523e:	4601      	mov	r1, r0
 8015240:	6818      	ldr	r0, [r3, #0]
 8015242:	f000 b803 	b.w	801524c <_free_r>
 8015246:	bf00      	nop
 8015248:	2000000c 	.word	0x2000000c

0801524c <_free_r>:
 801524c:	b538      	push	{r3, r4, r5, lr}
 801524e:	4605      	mov	r5, r0
 8015250:	2900      	cmp	r1, #0
 8015252:	d045      	beq.n	80152e0 <_free_r+0x94>
 8015254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015258:	1f0c      	subs	r4, r1, #4
 801525a:	2b00      	cmp	r3, #0
 801525c:	bfb8      	it	lt
 801525e:	18e4      	addlt	r4, r4, r3
 8015260:	f000 f8dc 	bl	801541c <__malloc_lock>
 8015264:	4a1f      	ldr	r2, [pc, #124]	; (80152e4 <_free_r+0x98>)
 8015266:	6813      	ldr	r3, [r2, #0]
 8015268:	4610      	mov	r0, r2
 801526a:	b933      	cbnz	r3, 801527a <_free_r+0x2e>
 801526c:	6063      	str	r3, [r4, #4]
 801526e:	6014      	str	r4, [r2, #0]
 8015270:	4628      	mov	r0, r5
 8015272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015276:	f000 b8d2 	b.w	801541e <__malloc_unlock>
 801527a:	42a3      	cmp	r3, r4
 801527c:	d90c      	bls.n	8015298 <_free_r+0x4c>
 801527e:	6821      	ldr	r1, [r4, #0]
 8015280:	1862      	adds	r2, r4, r1
 8015282:	4293      	cmp	r3, r2
 8015284:	bf04      	itt	eq
 8015286:	681a      	ldreq	r2, [r3, #0]
 8015288:	685b      	ldreq	r3, [r3, #4]
 801528a:	6063      	str	r3, [r4, #4]
 801528c:	bf04      	itt	eq
 801528e:	1852      	addeq	r2, r2, r1
 8015290:	6022      	streq	r2, [r4, #0]
 8015292:	6004      	str	r4, [r0, #0]
 8015294:	e7ec      	b.n	8015270 <_free_r+0x24>
 8015296:	4613      	mov	r3, r2
 8015298:	685a      	ldr	r2, [r3, #4]
 801529a:	b10a      	cbz	r2, 80152a0 <_free_r+0x54>
 801529c:	42a2      	cmp	r2, r4
 801529e:	d9fa      	bls.n	8015296 <_free_r+0x4a>
 80152a0:	6819      	ldr	r1, [r3, #0]
 80152a2:	1858      	adds	r0, r3, r1
 80152a4:	42a0      	cmp	r0, r4
 80152a6:	d10b      	bne.n	80152c0 <_free_r+0x74>
 80152a8:	6820      	ldr	r0, [r4, #0]
 80152aa:	4401      	add	r1, r0
 80152ac:	1858      	adds	r0, r3, r1
 80152ae:	4282      	cmp	r2, r0
 80152b0:	6019      	str	r1, [r3, #0]
 80152b2:	d1dd      	bne.n	8015270 <_free_r+0x24>
 80152b4:	6810      	ldr	r0, [r2, #0]
 80152b6:	6852      	ldr	r2, [r2, #4]
 80152b8:	605a      	str	r2, [r3, #4]
 80152ba:	4401      	add	r1, r0
 80152bc:	6019      	str	r1, [r3, #0]
 80152be:	e7d7      	b.n	8015270 <_free_r+0x24>
 80152c0:	d902      	bls.n	80152c8 <_free_r+0x7c>
 80152c2:	230c      	movs	r3, #12
 80152c4:	602b      	str	r3, [r5, #0]
 80152c6:	e7d3      	b.n	8015270 <_free_r+0x24>
 80152c8:	6820      	ldr	r0, [r4, #0]
 80152ca:	1821      	adds	r1, r4, r0
 80152cc:	428a      	cmp	r2, r1
 80152ce:	bf04      	itt	eq
 80152d0:	6811      	ldreq	r1, [r2, #0]
 80152d2:	6852      	ldreq	r2, [r2, #4]
 80152d4:	6062      	str	r2, [r4, #4]
 80152d6:	bf04      	itt	eq
 80152d8:	1809      	addeq	r1, r1, r0
 80152da:	6021      	streq	r1, [r4, #0]
 80152dc:	605c      	str	r4, [r3, #4]
 80152de:	e7c7      	b.n	8015270 <_free_r+0x24>
 80152e0:	bd38      	pop	{r3, r4, r5, pc}
 80152e2:	bf00      	nop
 80152e4:	200000a4 	.word	0x200000a4

080152e8 <_malloc_r>:
 80152e8:	b570      	push	{r4, r5, r6, lr}
 80152ea:	1ccd      	adds	r5, r1, #3
 80152ec:	f025 0503 	bic.w	r5, r5, #3
 80152f0:	3508      	adds	r5, #8
 80152f2:	2d0c      	cmp	r5, #12
 80152f4:	bf38      	it	cc
 80152f6:	250c      	movcc	r5, #12
 80152f8:	2d00      	cmp	r5, #0
 80152fa:	4606      	mov	r6, r0
 80152fc:	db01      	blt.n	8015302 <_malloc_r+0x1a>
 80152fe:	42a9      	cmp	r1, r5
 8015300:	d903      	bls.n	801530a <_malloc_r+0x22>
 8015302:	230c      	movs	r3, #12
 8015304:	6033      	str	r3, [r6, #0]
 8015306:	2000      	movs	r0, #0
 8015308:	bd70      	pop	{r4, r5, r6, pc}
 801530a:	f000 f887 	bl	801541c <__malloc_lock>
 801530e:	4a23      	ldr	r2, [pc, #140]	; (801539c <_malloc_r+0xb4>)
 8015310:	6814      	ldr	r4, [r2, #0]
 8015312:	4621      	mov	r1, r4
 8015314:	b991      	cbnz	r1, 801533c <_malloc_r+0x54>
 8015316:	4c22      	ldr	r4, [pc, #136]	; (80153a0 <_malloc_r+0xb8>)
 8015318:	6823      	ldr	r3, [r4, #0]
 801531a:	b91b      	cbnz	r3, 8015324 <_malloc_r+0x3c>
 801531c:	4630      	mov	r0, r6
 801531e:	f000 f841 	bl	80153a4 <_sbrk_r>
 8015322:	6020      	str	r0, [r4, #0]
 8015324:	4629      	mov	r1, r5
 8015326:	4630      	mov	r0, r6
 8015328:	f000 f83c 	bl	80153a4 <_sbrk_r>
 801532c:	1c43      	adds	r3, r0, #1
 801532e:	d126      	bne.n	801537e <_malloc_r+0x96>
 8015330:	230c      	movs	r3, #12
 8015332:	6033      	str	r3, [r6, #0]
 8015334:	4630      	mov	r0, r6
 8015336:	f000 f872 	bl	801541e <__malloc_unlock>
 801533a:	e7e4      	b.n	8015306 <_malloc_r+0x1e>
 801533c:	680b      	ldr	r3, [r1, #0]
 801533e:	1b5b      	subs	r3, r3, r5
 8015340:	d41a      	bmi.n	8015378 <_malloc_r+0x90>
 8015342:	2b0b      	cmp	r3, #11
 8015344:	d90f      	bls.n	8015366 <_malloc_r+0x7e>
 8015346:	600b      	str	r3, [r1, #0]
 8015348:	50cd      	str	r5, [r1, r3]
 801534a:	18cc      	adds	r4, r1, r3
 801534c:	4630      	mov	r0, r6
 801534e:	f000 f866 	bl	801541e <__malloc_unlock>
 8015352:	f104 000b 	add.w	r0, r4, #11
 8015356:	1d23      	adds	r3, r4, #4
 8015358:	f020 0007 	bic.w	r0, r0, #7
 801535c:	1ac3      	subs	r3, r0, r3
 801535e:	d01b      	beq.n	8015398 <_malloc_r+0xb0>
 8015360:	425a      	negs	r2, r3
 8015362:	50e2      	str	r2, [r4, r3]
 8015364:	bd70      	pop	{r4, r5, r6, pc}
 8015366:	428c      	cmp	r4, r1
 8015368:	bf0d      	iteet	eq
 801536a:	6863      	ldreq	r3, [r4, #4]
 801536c:	684b      	ldrne	r3, [r1, #4]
 801536e:	6063      	strne	r3, [r4, #4]
 8015370:	6013      	streq	r3, [r2, #0]
 8015372:	bf18      	it	ne
 8015374:	460c      	movne	r4, r1
 8015376:	e7e9      	b.n	801534c <_malloc_r+0x64>
 8015378:	460c      	mov	r4, r1
 801537a:	6849      	ldr	r1, [r1, #4]
 801537c:	e7ca      	b.n	8015314 <_malloc_r+0x2c>
 801537e:	1cc4      	adds	r4, r0, #3
 8015380:	f024 0403 	bic.w	r4, r4, #3
 8015384:	42a0      	cmp	r0, r4
 8015386:	d005      	beq.n	8015394 <_malloc_r+0xac>
 8015388:	1a21      	subs	r1, r4, r0
 801538a:	4630      	mov	r0, r6
 801538c:	f000 f80a 	bl	80153a4 <_sbrk_r>
 8015390:	3001      	adds	r0, #1
 8015392:	d0cd      	beq.n	8015330 <_malloc_r+0x48>
 8015394:	6025      	str	r5, [r4, #0]
 8015396:	e7d9      	b.n	801534c <_malloc_r+0x64>
 8015398:	bd70      	pop	{r4, r5, r6, pc}
 801539a:	bf00      	nop
 801539c:	200000a4 	.word	0x200000a4
 80153a0:	200000a8 	.word	0x200000a8

080153a4 <_sbrk_r>:
 80153a4:	b538      	push	{r3, r4, r5, lr}
 80153a6:	4c06      	ldr	r4, [pc, #24]	; (80153c0 <_sbrk_r+0x1c>)
 80153a8:	2300      	movs	r3, #0
 80153aa:	4605      	mov	r5, r0
 80153ac:	4608      	mov	r0, r1
 80153ae:	6023      	str	r3, [r4, #0]
 80153b0:	f7ff fb2a 	bl	8014a08 <_sbrk>
 80153b4:	1c43      	adds	r3, r0, #1
 80153b6:	d102      	bne.n	80153be <_sbrk_r+0x1a>
 80153b8:	6823      	ldr	r3, [r4, #0]
 80153ba:	b103      	cbz	r3, 80153be <_sbrk_r+0x1a>
 80153bc:	602b      	str	r3, [r5, #0]
 80153be:	bd38      	pop	{r3, r4, r5, pc}
 80153c0:	20000b40 	.word	0x20000b40

080153c4 <siprintf>:
 80153c4:	b40e      	push	{r1, r2, r3}
 80153c6:	b500      	push	{lr}
 80153c8:	b09c      	sub	sp, #112	; 0x70
 80153ca:	f44f 7102 	mov.w	r1, #520	; 0x208
 80153ce:	ab1d      	add	r3, sp, #116	; 0x74
 80153d0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80153d4:	9002      	str	r0, [sp, #8]
 80153d6:	9006      	str	r0, [sp, #24]
 80153d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80153dc:	480a      	ldr	r0, [pc, #40]	; (8015408 <siprintf+0x44>)
 80153de:	9104      	str	r1, [sp, #16]
 80153e0:	9107      	str	r1, [sp, #28]
 80153e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80153e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80153ea:	f8ad 1016 	strh.w	r1, [sp, #22]
 80153ee:	6800      	ldr	r0, [r0, #0]
 80153f0:	9301      	str	r3, [sp, #4]
 80153f2:	a902      	add	r1, sp, #8
 80153f4:	f000 f870 	bl	80154d8 <_svfiprintf_r>
 80153f8:	9b02      	ldr	r3, [sp, #8]
 80153fa:	2200      	movs	r2, #0
 80153fc:	701a      	strb	r2, [r3, #0]
 80153fe:	b01c      	add	sp, #112	; 0x70
 8015400:	f85d eb04 	ldr.w	lr, [sp], #4
 8015404:	b003      	add	sp, #12
 8015406:	4770      	bx	lr
 8015408:	2000000c 	.word	0x2000000c

0801540c <strcpy>:
 801540c:	4603      	mov	r3, r0
 801540e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015412:	f803 2b01 	strb.w	r2, [r3], #1
 8015416:	2a00      	cmp	r2, #0
 8015418:	d1f9      	bne.n	801540e <strcpy+0x2>
 801541a:	4770      	bx	lr

0801541c <__malloc_lock>:
 801541c:	4770      	bx	lr

0801541e <__malloc_unlock>:
 801541e:	4770      	bx	lr

08015420 <__ssputs_r>:
 8015420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015424:	688e      	ldr	r6, [r1, #8]
 8015426:	429e      	cmp	r6, r3
 8015428:	4682      	mov	sl, r0
 801542a:	460c      	mov	r4, r1
 801542c:	4691      	mov	r9, r2
 801542e:	4698      	mov	r8, r3
 8015430:	d835      	bhi.n	801549e <__ssputs_r+0x7e>
 8015432:	898a      	ldrh	r2, [r1, #12]
 8015434:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015438:	d031      	beq.n	801549e <__ssputs_r+0x7e>
 801543a:	6825      	ldr	r5, [r4, #0]
 801543c:	6909      	ldr	r1, [r1, #16]
 801543e:	1a6f      	subs	r7, r5, r1
 8015440:	6965      	ldr	r5, [r4, #20]
 8015442:	2302      	movs	r3, #2
 8015444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015448:	fb95 f5f3 	sdiv	r5, r5, r3
 801544c:	f108 0301 	add.w	r3, r8, #1
 8015450:	443b      	add	r3, r7
 8015452:	429d      	cmp	r5, r3
 8015454:	bf38      	it	cc
 8015456:	461d      	movcc	r5, r3
 8015458:	0553      	lsls	r3, r2, #21
 801545a:	d531      	bpl.n	80154c0 <__ssputs_r+0xa0>
 801545c:	4629      	mov	r1, r5
 801545e:	f7ff ff43 	bl	80152e8 <_malloc_r>
 8015462:	4606      	mov	r6, r0
 8015464:	b950      	cbnz	r0, 801547c <__ssputs_r+0x5c>
 8015466:	230c      	movs	r3, #12
 8015468:	f8ca 3000 	str.w	r3, [sl]
 801546c:	89a3      	ldrh	r3, [r4, #12]
 801546e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015472:	81a3      	strh	r3, [r4, #12]
 8015474:	f04f 30ff 	mov.w	r0, #4294967295
 8015478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801547c:	463a      	mov	r2, r7
 801547e:	6921      	ldr	r1, [r4, #16]
 8015480:	f000 fab4 	bl	80159ec <memcpy>
 8015484:	89a3      	ldrh	r3, [r4, #12]
 8015486:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801548a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801548e:	81a3      	strh	r3, [r4, #12]
 8015490:	6126      	str	r6, [r4, #16]
 8015492:	6165      	str	r5, [r4, #20]
 8015494:	443e      	add	r6, r7
 8015496:	1bed      	subs	r5, r5, r7
 8015498:	6026      	str	r6, [r4, #0]
 801549a:	60a5      	str	r5, [r4, #8]
 801549c:	4646      	mov	r6, r8
 801549e:	4546      	cmp	r6, r8
 80154a0:	bf28      	it	cs
 80154a2:	4646      	movcs	r6, r8
 80154a4:	4632      	mov	r2, r6
 80154a6:	4649      	mov	r1, r9
 80154a8:	6820      	ldr	r0, [r4, #0]
 80154aa:	f000 faaa 	bl	8015a02 <memmove>
 80154ae:	68a3      	ldr	r3, [r4, #8]
 80154b0:	1b9b      	subs	r3, r3, r6
 80154b2:	60a3      	str	r3, [r4, #8]
 80154b4:	6823      	ldr	r3, [r4, #0]
 80154b6:	441e      	add	r6, r3
 80154b8:	6026      	str	r6, [r4, #0]
 80154ba:	2000      	movs	r0, #0
 80154bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154c0:	462a      	mov	r2, r5
 80154c2:	f000 fab8 	bl	8015a36 <_realloc_r>
 80154c6:	4606      	mov	r6, r0
 80154c8:	2800      	cmp	r0, #0
 80154ca:	d1e1      	bne.n	8015490 <__ssputs_r+0x70>
 80154cc:	6921      	ldr	r1, [r4, #16]
 80154ce:	4650      	mov	r0, sl
 80154d0:	f7ff febc 	bl	801524c <_free_r>
 80154d4:	e7c7      	b.n	8015466 <__ssputs_r+0x46>
	...

080154d8 <_svfiprintf_r>:
 80154d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154dc:	b09d      	sub	sp, #116	; 0x74
 80154de:	4680      	mov	r8, r0
 80154e0:	9303      	str	r3, [sp, #12]
 80154e2:	898b      	ldrh	r3, [r1, #12]
 80154e4:	061c      	lsls	r4, r3, #24
 80154e6:	460d      	mov	r5, r1
 80154e8:	4616      	mov	r6, r2
 80154ea:	d50f      	bpl.n	801550c <_svfiprintf_r+0x34>
 80154ec:	690b      	ldr	r3, [r1, #16]
 80154ee:	b96b      	cbnz	r3, 801550c <_svfiprintf_r+0x34>
 80154f0:	2140      	movs	r1, #64	; 0x40
 80154f2:	f7ff fef9 	bl	80152e8 <_malloc_r>
 80154f6:	6028      	str	r0, [r5, #0]
 80154f8:	6128      	str	r0, [r5, #16]
 80154fa:	b928      	cbnz	r0, 8015508 <_svfiprintf_r+0x30>
 80154fc:	230c      	movs	r3, #12
 80154fe:	f8c8 3000 	str.w	r3, [r8]
 8015502:	f04f 30ff 	mov.w	r0, #4294967295
 8015506:	e0c5      	b.n	8015694 <_svfiprintf_r+0x1bc>
 8015508:	2340      	movs	r3, #64	; 0x40
 801550a:	616b      	str	r3, [r5, #20]
 801550c:	2300      	movs	r3, #0
 801550e:	9309      	str	r3, [sp, #36]	; 0x24
 8015510:	2320      	movs	r3, #32
 8015512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015516:	2330      	movs	r3, #48	; 0x30
 8015518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801551c:	f04f 0b01 	mov.w	fp, #1
 8015520:	4637      	mov	r7, r6
 8015522:	463c      	mov	r4, r7
 8015524:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015528:	2b00      	cmp	r3, #0
 801552a:	d13c      	bne.n	80155a6 <_svfiprintf_r+0xce>
 801552c:	ebb7 0a06 	subs.w	sl, r7, r6
 8015530:	d00b      	beq.n	801554a <_svfiprintf_r+0x72>
 8015532:	4653      	mov	r3, sl
 8015534:	4632      	mov	r2, r6
 8015536:	4629      	mov	r1, r5
 8015538:	4640      	mov	r0, r8
 801553a:	f7ff ff71 	bl	8015420 <__ssputs_r>
 801553e:	3001      	adds	r0, #1
 8015540:	f000 80a3 	beq.w	801568a <_svfiprintf_r+0x1b2>
 8015544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015546:	4453      	add	r3, sl
 8015548:	9309      	str	r3, [sp, #36]	; 0x24
 801554a:	783b      	ldrb	r3, [r7, #0]
 801554c:	2b00      	cmp	r3, #0
 801554e:	f000 809c 	beq.w	801568a <_svfiprintf_r+0x1b2>
 8015552:	2300      	movs	r3, #0
 8015554:	f04f 32ff 	mov.w	r2, #4294967295
 8015558:	9304      	str	r3, [sp, #16]
 801555a:	9307      	str	r3, [sp, #28]
 801555c:	9205      	str	r2, [sp, #20]
 801555e:	9306      	str	r3, [sp, #24]
 8015560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015564:	931a      	str	r3, [sp, #104]	; 0x68
 8015566:	2205      	movs	r2, #5
 8015568:	7821      	ldrb	r1, [r4, #0]
 801556a:	4850      	ldr	r0, [pc, #320]	; (80156ac <_svfiprintf_r+0x1d4>)
 801556c:	f7ff fc38 	bl	8014de0 <memchr>
 8015570:	1c67      	adds	r7, r4, #1
 8015572:	9b04      	ldr	r3, [sp, #16]
 8015574:	b9d8      	cbnz	r0, 80155ae <_svfiprintf_r+0xd6>
 8015576:	06d9      	lsls	r1, r3, #27
 8015578:	bf44      	itt	mi
 801557a:	2220      	movmi	r2, #32
 801557c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015580:	071a      	lsls	r2, r3, #28
 8015582:	bf44      	itt	mi
 8015584:	222b      	movmi	r2, #43	; 0x2b
 8015586:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801558a:	7822      	ldrb	r2, [r4, #0]
 801558c:	2a2a      	cmp	r2, #42	; 0x2a
 801558e:	d016      	beq.n	80155be <_svfiprintf_r+0xe6>
 8015590:	9a07      	ldr	r2, [sp, #28]
 8015592:	2100      	movs	r1, #0
 8015594:	200a      	movs	r0, #10
 8015596:	4627      	mov	r7, r4
 8015598:	3401      	adds	r4, #1
 801559a:	783b      	ldrb	r3, [r7, #0]
 801559c:	3b30      	subs	r3, #48	; 0x30
 801559e:	2b09      	cmp	r3, #9
 80155a0:	d951      	bls.n	8015646 <_svfiprintf_r+0x16e>
 80155a2:	b1c9      	cbz	r1, 80155d8 <_svfiprintf_r+0x100>
 80155a4:	e011      	b.n	80155ca <_svfiprintf_r+0xf2>
 80155a6:	2b25      	cmp	r3, #37	; 0x25
 80155a8:	d0c0      	beq.n	801552c <_svfiprintf_r+0x54>
 80155aa:	4627      	mov	r7, r4
 80155ac:	e7b9      	b.n	8015522 <_svfiprintf_r+0x4a>
 80155ae:	4a3f      	ldr	r2, [pc, #252]	; (80156ac <_svfiprintf_r+0x1d4>)
 80155b0:	1a80      	subs	r0, r0, r2
 80155b2:	fa0b f000 	lsl.w	r0, fp, r0
 80155b6:	4318      	orrs	r0, r3
 80155b8:	9004      	str	r0, [sp, #16]
 80155ba:	463c      	mov	r4, r7
 80155bc:	e7d3      	b.n	8015566 <_svfiprintf_r+0x8e>
 80155be:	9a03      	ldr	r2, [sp, #12]
 80155c0:	1d11      	adds	r1, r2, #4
 80155c2:	6812      	ldr	r2, [r2, #0]
 80155c4:	9103      	str	r1, [sp, #12]
 80155c6:	2a00      	cmp	r2, #0
 80155c8:	db01      	blt.n	80155ce <_svfiprintf_r+0xf6>
 80155ca:	9207      	str	r2, [sp, #28]
 80155cc:	e004      	b.n	80155d8 <_svfiprintf_r+0x100>
 80155ce:	4252      	negs	r2, r2
 80155d0:	f043 0302 	orr.w	r3, r3, #2
 80155d4:	9207      	str	r2, [sp, #28]
 80155d6:	9304      	str	r3, [sp, #16]
 80155d8:	783b      	ldrb	r3, [r7, #0]
 80155da:	2b2e      	cmp	r3, #46	; 0x2e
 80155dc:	d10e      	bne.n	80155fc <_svfiprintf_r+0x124>
 80155de:	787b      	ldrb	r3, [r7, #1]
 80155e0:	2b2a      	cmp	r3, #42	; 0x2a
 80155e2:	f107 0101 	add.w	r1, r7, #1
 80155e6:	d132      	bne.n	801564e <_svfiprintf_r+0x176>
 80155e8:	9b03      	ldr	r3, [sp, #12]
 80155ea:	1d1a      	adds	r2, r3, #4
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	9203      	str	r2, [sp, #12]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	bfb8      	it	lt
 80155f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80155f8:	3702      	adds	r7, #2
 80155fa:	9305      	str	r3, [sp, #20]
 80155fc:	4c2c      	ldr	r4, [pc, #176]	; (80156b0 <_svfiprintf_r+0x1d8>)
 80155fe:	7839      	ldrb	r1, [r7, #0]
 8015600:	2203      	movs	r2, #3
 8015602:	4620      	mov	r0, r4
 8015604:	f7ff fbec 	bl	8014de0 <memchr>
 8015608:	b138      	cbz	r0, 801561a <_svfiprintf_r+0x142>
 801560a:	2340      	movs	r3, #64	; 0x40
 801560c:	1b00      	subs	r0, r0, r4
 801560e:	fa03 f000 	lsl.w	r0, r3, r0
 8015612:	9b04      	ldr	r3, [sp, #16]
 8015614:	4303      	orrs	r3, r0
 8015616:	9304      	str	r3, [sp, #16]
 8015618:	3701      	adds	r7, #1
 801561a:	7839      	ldrb	r1, [r7, #0]
 801561c:	4825      	ldr	r0, [pc, #148]	; (80156b4 <_svfiprintf_r+0x1dc>)
 801561e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015622:	2206      	movs	r2, #6
 8015624:	1c7e      	adds	r6, r7, #1
 8015626:	f7ff fbdb 	bl	8014de0 <memchr>
 801562a:	2800      	cmp	r0, #0
 801562c:	d035      	beq.n	801569a <_svfiprintf_r+0x1c2>
 801562e:	4b22      	ldr	r3, [pc, #136]	; (80156b8 <_svfiprintf_r+0x1e0>)
 8015630:	b9fb      	cbnz	r3, 8015672 <_svfiprintf_r+0x19a>
 8015632:	9b03      	ldr	r3, [sp, #12]
 8015634:	3307      	adds	r3, #7
 8015636:	f023 0307 	bic.w	r3, r3, #7
 801563a:	3308      	adds	r3, #8
 801563c:	9303      	str	r3, [sp, #12]
 801563e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015640:	444b      	add	r3, r9
 8015642:	9309      	str	r3, [sp, #36]	; 0x24
 8015644:	e76c      	b.n	8015520 <_svfiprintf_r+0x48>
 8015646:	fb00 3202 	mla	r2, r0, r2, r3
 801564a:	2101      	movs	r1, #1
 801564c:	e7a3      	b.n	8015596 <_svfiprintf_r+0xbe>
 801564e:	2300      	movs	r3, #0
 8015650:	9305      	str	r3, [sp, #20]
 8015652:	4618      	mov	r0, r3
 8015654:	240a      	movs	r4, #10
 8015656:	460f      	mov	r7, r1
 8015658:	3101      	adds	r1, #1
 801565a:	783a      	ldrb	r2, [r7, #0]
 801565c:	3a30      	subs	r2, #48	; 0x30
 801565e:	2a09      	cmp	r2, #9
 8015660:	d903      	bls.n	801566a <_svfiprintf_r+0x192>
 8015662:	2b00      	cmp	r3, #0
 8015664:	d0ca      	beq.n	80155fc <_svfiprintf_r+0x124>
 8015666:	9005      	str	r0, [sp, #20]
 8015668:	e7c8      	b.n	80155fc <_svfiprintf_r+0x124>
 801566a:	fb04 2000 	mla	r0, r4, r0, r2
 801566e:	2301      	movs	r3, #1
 8015670:	e7f1      	b.n	8015656 <_svfiprintf_r+0x17e>
 8015672:	ab03      	add	r3, sp, #12
 8015674:	9300      	str	r3, [sp, #0]
 8015676:	462a      	mov	r2, r5
 8015678:	4b10      	ldr	r3, [pc, #64]	; (80156bc <_svfiprintf_r+0x1e4>)
 801567a:	a904      	add	r1, sp, #16
 801567c:	4640      	mov	r0, r8
 801567e:	f3af 8000 	nop.w
 8015682:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015686:	4681      	mov	r9, r0
 8015688:	d1d9      	bne.n	801563e <_svfiprintf_r+0x166>
 801568a:	89ab      	ldrh	r3, [r5, #12]
 801568c:	065b      	lsls	r3, r3, #25
 801568e:	f53f af38 	bmi.w	8015502 <_svfiprintf_r+0x2a>
 8015692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015694:	b01d      	add	sp, #116	; 0x74
 8015696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801569a:	ab03      	add	r3, sp, #12
 801569c:	9300      	str	r3, [sp, #0]
 801569e:	462a      	mov	r2, r5
 80156a0:	4b06      	ldr	r3, [pc, #24]	; (80156bc <_svfiprintf_r+0x1e4>)
 80156a2:	a904      	add	r1, sp, #16
 80156a4:	4640      	mov	r0, r8
 80156a6:	f000 f881 	bl	80157ac <_printf_i>
 80156aa:	e7ea      	b.n	8015682 <_svfiprintf_r+0x1aa>
 80156ac:	080161c8 	.word	0x080161c8
 80156b0:	080161ce 	.word	0x080161ce
 80156b4:	080161d2 	.word	0x080161d2
 80156b8:	00000000 	.word	0x00000000
 80156bc:	08015421 	.word	0x08015421

080156c0 <_printf_common>:
 80156c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156c4:	4691      	mov	r9, r2
 80156c6:	461f      	mov	r7, r3
 80156c8:	688a      	ldr	r2, [r1, #8]
 80156ca:	690b      	ldr	r3, [r1, #16]
 80156cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80156d0:	4293      	cmp	r3, r2
 80156d2:	bfb8      	it	lt
 80156d4:	4613      	movlt	r3, r2
 80156d6:	f8c9 3000 	str.w	r3, [r9]
 80156da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80156de:	4606      	mov	r6, r0
 80156e0:	460c      	mov	r4, r1
 80156e2:	b112      	cbz	r2, 80156ea <_printf_common+0x2a>
 80156e4:	3301      	adds	r3, #1
 80156e6:	f8c9 3000 	str.w	r3, [r9]
 80156ea:	6823      	ldr	r3, [r4, #0]
 80156ec:	0699      	lsls	r1, r3, #26
 80156ee:	bf42      	ittt	mi
 80156f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80156f4:	3302      	addmi	r3, #2
 80156f6:	f8c9 3000 	strmi.w	r3, [r9]
 80156fa:	6825      	ldr	r5, [r4, #0]
 80156fc:	f015 0506 	ands.w	r5, r5, #6
 8015700:	d107      	bne.n	8015712 <_printf_common+0x52>
 8015702:	f104 0a19 	add.w	sl, r4, #25
 8015706:	68e3      	ldr	r3, [r4, #12]
 8015708:	f8d9 2000 	ldr.w	r2, [r9]
 801570c:	1a9b      	subs	r3, r3, r2
 801570e:	429d      	cmp	r5, r3
 8015710:	db29      	blt.n	8015766 <_printf_common+0xa6>
 8015712:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015716:	6822      	ldr	r2, [r4, #0]
 8015718:	3300      	adds	r3, #0
 801571a:	bf18      	it	ne
 801571c:	2301      	movne	r3, #1
 801571e:	0692      	lsls	r2, r2, #26
 8015720:	d42e      	bmi.n	8015780 <_printf_common+0xc0>
 8015722:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015726:	4639      	mov	r1, r7
 8015728:	4630      	mov	r0, r6
 801572a:	47c0      	blx	r8
 801572c:	3001      	adds	r0, #1
 801572e:	d021      	beq.n	8015774 <_printf_common+0xb4>
 8015730:	6823      	ldr	r3, [r4, #0]
 8015732:	68e5      	ldr	r5, [r4, #12]
 8015734:	f8d9 2000 	ldr.w	r2, [r9]
 8015738:	f003 0306 	and.w	r3, r3, #6
 801573c:	2b04      	cmp	r3, #4
 801573e:	bf08      	it	eq
 8015740:	1aad      	subeq	r5, r5, r2
 8015742:	68a3      	ldr	r3, [r4, #8]
 8015744:	6922      	ldr	r2, [r4, #16]
 8015746:	bf0c      	ite	eq
 8015748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801574c:	2500      	movne	r5, #0
 801574e:	4293      	cmp	r3, r2
 8015750:	bfc4      	itt	gt
 8015752:	1a9b      	subgt	r3, r3, r2
 8015754:	18ed      	addgt	r5, r5, r3
 8015756:	f04f 0900 	mov.w	r9, #0
 801575a:	341a      	adds	r4, #26
 801575c:	454d      	cmp	r5, r9
 801575e:	d11b      	bne.n	8015798 <_printf_common+0xd8>
 8015760:	2000      	movs	r0, #0
 8015762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015766:	2301      	movs	r3, #1
 8015768:	4652      	mov	r2, sl
 801576a:	4639      	mov	r1, r7
 801576c:	4630      	mov	r0, r6
 801576e:	47c0      	blx	r8
 8015770:	3001      	adds	r0, #1
 8015772:	d103      	bne.n	801577c <_printf_common+0xbc>
 8015774:	f04f 30ff 	mov.w	r0, #4294967295
 8015778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801577c:	3501      	adds	r5, #1
 801577e:	e7c2      	b.n	8015706 <_printf_common+0x46>
 8015780:	18e1      	adds	r1, r4, r3
 8015782:	1c5a      	adds	r2, r3, #1
 8015784:	2030      	movs	r0, #48	; 0x30
 8015786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801578a:	4422      	add	r2, r4
 801578c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015794:	3302      	adds	r3, #2
 8015796:	e7c4      	b.n	8015722 <_printf_common+0x62>
 8015798:	2301      	movs	r3, #1
 801579a:	4622      	mov	r2, r4
 801579c:	4639      	mov	r1, r7
 801579e:	4630      	mov	r0, r6
 80157a0:	47c0      	blx	r8
 80157a2:	3001      	adds	r0, #1
 80157a4:	d0e6      	beq.n	8015774 <_printf_common+0xb4>
 80157a6:	f109 0901 	add.w	r9, r9, #1
 80157aa:	e7d7      	b.n	801575c <_printf_common+0x9c>

080157ac <_printf_i>:
 80157ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157b0:	4617      	mov	r7, r2
 80157b2:	7e0a      	ldrb	r2, [r1, #24]
 80157b4:	b085      	sub	sp, #20
 80157b6:	2a6e      	cmp	r2, #110	; 0x6e
 80157b8:	4698      	mov	r8, r3
 80157ba:	4606      	mov	r6, r0
 80157bc:	460c      	mov	r4, r1
 80157be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157c0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80157c4:	f000 80bc 	beq.w	8015940 <_printf_i+0x194>
 80157c8:	d81a      	bhi.n	8015800 <_printf_i+0x54>
 80157ca:	2a63      	cmp	r2, #99	; 0x63
 80157cc:	d02e      	beq.n	801582c <_printf_i+0x80>
 80157ce:	d80a      	bhi.n	80157e6 <_printf_i+0x3a>
 80157d0:	2a00      	cmp	r2, #0
 80157d2:	f000 80c8 	beq.w	8015966 <_printf_i+0x1ba>
 80157d6:	2a58      	cmp	r2, #88	; 0x58
 80157d8:	f000 808a 	beq.w	80158f0 <_printf_i+0x144>
 80157dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80157e0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80157e4:	e02a      	b.n	801583c <_printf_i+0x90>
 80157e6:	2a64      	cmp	r2, #100	; 0x64
 80157e8:	d001      	beq.n	80157ee <_printf_i+0x42>
 80157ea:	2a69      	cmp	r2, #105	; 0x69
 80157ec:	d1f6      	bne.n	80157dc <_printf_i+0x30>
 80157ee:	6821      	ldr	r1, [r4, #0]
 80157f0:	681a      	ldr	r2, [r3, #0]
 80157f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80157f6:	d023      	beq.n	8015840 <_printf_i+0x94>
 80157f8:	1d11      	adds	r1, r2, #4
 80157fa:	6019      	str	r1, [r3, #0]
 80157fc:	6813      	ldr	r3, [r2, #0]
 80157fe:	e027      	b.n	8015850 <_printf_i+0xa4>
 8015800:	2a73      	cmp	r2, #115	; 0x73
 8015802:	f000 80b4 	beq.w	801596e <_printf_i+0x1c2>
 8015806:	d808      	bhi.n	801581a <_printf_i+0x6e>
 8015808:	2a6f      	cmp	r2, #111	; 0x6f
 801580a:	d02a      	beq.n	8015862 <_printf_i+0xb6>
 801580c:	2a70      	cmp	r2, #112	; 0x70
 801580e:	d1e5      	bne.n	80157dc <_printf_i+0x30>
 8015810:	680a      	ldr	r2, [r1, #0]
 8015812:	f042 0220 	orr.w	r2, r2, #32
 8015816:	600a      	str	r2, [r1, #0]
 8015818:	e003      	b.n	8015822 <_printf_i+0x76>
 801581a:	2a75      	cmp	r2, #117	; 0x75
 801581c:	d021      	beq.n	8015862 <_printf_i+0xb6>
 801581e:	2a78      	cmp	r2, #120	; 0x78
 8015820:	d1dc      	bne.n	80157dc <_printf_i+0x30>
 8015822:	2278      	movs	r2, #120	; 0x78
 8015824:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8015828:	496e      	ldr	r1, [pc, #440]	; (80159e4 <_printf_i+0x238>)
 801582a:	e064      	b.n	80158f6 <_printf_i+0x14a>
 801582c:	681a      	ldr	r2, [r3, #0]
 801582e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8015832:	1d11      	adds	r1, r2, #4
 8015834:	6019      	str	r1, [r3, #0]
 8015836:	6813      	ldr	r3, [r2, #0]
 8015838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801583c:	2301      	movs	r3, #1
 801583e:	e0a3      	b.n	8015988 <_printf_i+0x1dc>
 8015840:	f011 0f40 	tst.w	r1, #64	; 0x40
 8015844:	f102 0104 	add.w	r1, r2, #4
 8015848:	6019      	str	r1, [r3, #0]
 801584a:	d0d7      	beq.n	80157fc <_printf_i+0x50>
 801584c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8015850:	2b00      	cmp	r3, #0
 8015852:	da03      	bge.n	801585c <_printf_i+0xb0>
 8015854:	222d      	movs	r2, #45	; 0x2d
 8015856:	425b      	negs	r3, r3
 8015858:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801585c:	4962      	ldr	r1, [pc, #392]	; (80159e8 <_printf_i+0x23c>)
 801585e:	220a      	movs	r2, #10
 8015860:	e017      	b.n	8015892 <_printf_i+0xe6>
 8015862:	6820      	ldr	r0, [r4, #0]
 8015864:	6819      	ldr	r1, [r3, #0]
 8015866:	f010 0f80 	tst.w	r0, #128	; 0x80
 801586a:	d003      	beq.n	8015874 <_printf_i+0xc8>
 801586c:	1d08      	adds	r0, r1, #4
 801586e:	6018      	str	r0, [r3, #0]
 8015870:	680b      	ldr	r3, [r1, #0]
 8015872:	e006      	b.n	8015882 <_printf_i+0xd6>
 8015874:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015878:	f101 0004 	add.w	r0, r1, #4
 801587c:	6018      	str	r0, [r3, #0]
 801587e:	d0f7      	beq.n	8015870 <_printf_i+0xc4>
 8015880:	880b      	ldrh	r3, [r1, #0]
 8015882:	4959      	ldr	r1, [pc, #356]	; (80159e8 <_printf_i+0x23c>)
 8015884:	2a6f      	cmp	r2, #111	; 0x6f
 8015886:	bf14      	ite	ne
 8015888:	220a      	movne	r2, #10
 801588a:	2208      	moveq	r2, #8
 801588c:	2000      	movs	r0, #0
 801588e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8015892:	6865      	ldr	r5, [r4, #4]
 8015894:	60a5      	str	r5, [r4, #8]
 8015896:	2d00      	cmp	r5, #0
 8015898:	f2c0 809c 	blt.w	80159d4 <_printf_i+0x228>
 801589c:	6820      	ldr	r0, [r4, #0]
 801589e:	f020 0004 	bic.w	r0, r0, #4
 80158a2:	6020      	str	r0, [r4, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d13f      	bne.n	8015928 <_printf_i+0x17c>
 80158a8:	2d00      	cmp	r5, #0
 80158aa:	f040 8095 	bne.w	80159d8 <_printf_i+0x22c>
 80158ae:	4675      	mov	r5, lr
 80158b0:	2a08      	cmp	r2, #8
 80158b2:	d10b      	bne.n	80158cc <_printf_i+0x120>
 80158b4:	6823      	ldr	r3, [r4, #0]
 80158b6:	07da      	lsls	r2, r3, #31
 80158b8:	d508      	bpl.n	80158cc <_printf_i+0x120>
 80158ba:	6923      	ldr	r3, [r4, #16]
 80158bc:	6862      	ldr	r2, [r4, #4]
 80158be:	429a      	cmp	r2, r3
 80158c0:	bfde      	ittt	le
 80158c2:	2330      	movle	r3, #48	; 0x30
 80158c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80158c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80158cc:	ebae 0305 	sub.w	r3, lr, r5
 80158d0:	6123      	str	r3, [r4, #16]
 80158d2:	f8cd 8000 	str.w	r8, [sp]
 80158d6:	463b      	mov	r3, r7
 80158d8:	aa03      	add	r2, sp, #12
 80158da:	4621      	mov	r1, r4
 80158dc:	4630      	mov	r0, r6
 80158de:	f7ff feef 	bl	80156c0 <_printf_common>
 80158e2:	3001      	adds	r0, #1
 80158e4:	d155      	bne.n	8015992 <_printf_i+0x1e6>
 80158e6:	f04f 30ff 	mov.w	r0, #4294967295
 80158ea:	b005      	add	sp, #20
 80158ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158f0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80158f4:	493c      	ldr	r1, [pc, #240]	; (80159e8 <_printf_i+0x23c>)
 80158f6:	6822      	ldr	r2, [r4, #0]
 80158f8:	6818      	ldr	r0, [r3, #0]
 80158fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80158fe:	f100 0504 	add.w	r5, r0, #4
 8015902:	601d      	str	r5, [r3, #0]
 8015904:	d001      	beq.n	801590a <_printf_i+0x15e>
 8015906:	6803      	ldr	r3, [r0, #0]
 8015908:	e002      	b.n	8015910 <_printf_i+0x164>
 801590a:	0655      	lsls	r5, r2, #25
 801590c:	d5fb      	bpl.n	8015906 <_printf_i+0x15a>
 801590e:	8803      	ldrh	r3, [r0, #0]
 8015910:	07d0      	lsls	r0, r2, #31
 8015912:	bf44      	itt	mi
 8015914:	f042 0220 	orrmi.w	r2, r2, #32
 8015918:	6022      	strmi	r2, [r4, #0]
 801591a:	b91b      	cbnz	r3, 8015924 <_printf_i+0x178>
 801591c:	6822      	ldr	r2, [r4, #0]
 801591e:	f022 0220 	bic.w	r2, r2, #32
 8015922:	6022      	str	r2, [r4, #0]
 8015924:	2210      	movs	r2, #16
 8015926:	e7b1      	b.n	801588c <_printf_i+0xe0>
 8015928:	4675      	mov	r5, lr
 801592a:	fbb3 f0f2 	udiv	r0, r3, r2
 801592e:	fb02 3310 	mls	r3, r2, r0, r3
 8015932:	5ccb      	ldrb	r3, [r1, r3]
 8015934:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015938:	4603      	mov	r3, r0
 801593a:	2800      	cmp	r0, #0
 801593c:	d1f5      	bne.n	801592a <_printf_i+0x17e>
 801593e:	e7b7      	b.n	80158b0 <_printf_i+0x104>
 8015940:	6808      	ldr	r0, [r1, #0]
 8015942:	681a      	ldr	r2, [r3, #0]
 8015944:	6949      	ldr	r1, [r1, #20]
 8015946:	f010 0f80 	tst.w	r0, #128	; 0x80
 801594a:	d004      	beq.n	8015956 <_printf_i+0x1aa>
 801594c:	1d10      	adds	r0, r2, #4
 801594e:	6018      	str	r0, [r3, #0]
 8015950:	6813      	ldr	r3, [r2, #0]
 8015952:	6019      	str	r1, [r3, #0]
 8015954:	e007      	b.n	8015966 <_printf_i+0x1ba>
 8015956:	f010 0f40 	tst.w	r0, #64	; 0x40
 801595a:	f102 0004 	add.w	r0, r2, #4
 801595e:	6018      	str	r0, [r3, #0]
 8015960:	6813      	ldr	r3, [r2, #0]
 8015962:	d0f6      	beq.n	8015952 <_printf_i+0x1a6>
 8015964:	8019      	strh	r1, [r3, #0]
 8015966:	2300      	movs	r3, #0
 8015968:	6123      	str	r3, [r4, #16]
 801596a:	4675      	mov	r5, lr
 801596c:	e7b1      	b.n	80158d2 <_printf_i+0x126>
 801596e:	681a      	ldr	r2, [r3, #0]
 8015970:	1d11      	adds	r1, r2, #4
 8015972:	6019      	str	r1, [r3, #0]
 8015974:	6815      	ldr	r5, [r2, #0]
 8015976:	6862      	ldr	r2, [r4, #4]
 8015978:	2100      	movs	r1, #0
 801597a:	4628      	mov	r0, r5
 801597c:	f7ff fa30 	bl	8014de0 <memchr>
 8015980:	b108      	cbz	r0, 8015986 <_printf_i+0x1da>
 8015982:	1b40      	subs	r0, r0, r5
 8015984:	6060      	str	r0, [r4, #4]
 8015986:	6863      	ldr	r3, [r4, #4]
 8015988:	6123      	str	r3, [r4, #16]
 801598a:	2300      	movs	r3, #0
 801598c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015990:	e79f      	b.n	80158d2 <_printf_i+0x126>
 8015992:	6923      	ldr	r3, [r4, #16]
 8015994:	462a      	mov	r2, r5
 8015996:	4639      	mov	r1, r7
 8015998:	4630      	mov	r0, r6
 801599a:	47c0      	blx	r8
 801599c:	3001      	adds	r0, #1
 801599e:	d0a2      	beq.n	80158e6 <_printf_i+0x13a>
 80159a0:	6823      	ldr	r3, [r4, #0]
 80159a2:	079b      	lsls	r3, r3, #30
 80159a4:	d507      	bpl.n	80159b6 <_printf_i+0x20a>
 80159a6:	2500      	movs	r5, #0
 80159a8:	f104 0919 	add.w	r9, r4, #25
 80159ac:	68e3      	ldr	r3, [r4, #12]
 80159ae:	9a03      	ldr	r2, [sp, #12]
 80159b0:	1a9b      	subs	r3, r3, r2
 80159b2:	429d      	cmp	r5, r3
 80159b4:	db05      	blt.n	80159c2 <_printf_i+0x216>
 80159b6:	68e0      	ldr	r0, [r4, #12]
 80159b8:	9b03      	ldr	r3, [sp, #12]
 80159ba:	4298      	cmp	r0, r3
 80159bc:	bfb8      	it	lt
 80159be:	4618      	movlt	r0, r3
 80159c0:	e793      	b.n	80158ea <_printf_i+0x13e>
 80159c2:	2301      	movs	r3, #1
 80159c4:	464a      	mov	r2, r9
 80159c6:	4639      	mov	r1, r7
 80159c8:	4630      	mov	r0, r6
 80159ca:	47c0      	blx	r8
 80159cc:	3001      	adds	r0, #1
 80159ce:	d08a      	beq.n	80158e6 <_printf_i+0x13a>
 80159d0:	3501      	adds	r5, #1
 80159d2:	e7eb      	b.n	80159ac <_printf_i+0x200>
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d1a7      	bne.n	8015928 <_printf_i+0x17c>
 80159d8:	780b      	ldrb	r3, [r1, #0]
 80159da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80159de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80159e2:	e765      	b.n	80158b0 <_printf_i+0x104>
 80159e4:	080161ea 	.word	0x080161ea
 80159e8:	080161d9 	.word	0x080161d9

080159ec <memcpy>:
 80159ec:	b510      	push	{r4, lr}
 80159ee:	1e43      	subs	r3, r0, #1
 80159f0:	440a      	add	r2, r1
 80159f2:	4291      	cmp	r1, r2
 80159f4:	d100      	bne.n	80159f8 <memcpy+0xc>
 80159f6:	bd10      	pop	{r4, pc}
 80159f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a00:	e7f7      	b.n	80159f2 <memcpy+0x6>

08015a02 <memmove>:
 8015a02:	4288      	cmp	r0, r1
 8015a04:	b510      	push	{r4, lr}
 8015a06:	eb01 0302 	add.w	r3, r1, r2
 8015a0a:	d803      	bhi.n	8015a14 <memmove+0x12>
 8015a0c:	1e42      	subs	r2, r0, #1
 8015a0e:	4299      	cmp	r1, r3
 8015a10:	d10c      	bne.n	8015a2c <memmove+0x2a>
 8015a12:	bd10      	pop	{r4, pc}
 8015a14:	4298      	cmp	r0, r3
 8015a16:	d2f9      	bcs.n	8015a0c <memmove+0xa>
 8015a18:	1881      	adds	r1, r0, r2
 8015a1a:	1ad2      	subs	r2, r2, r3
 8015a1c:	42d3      	cmn	r3, r2
 8015a1e:	d100      	bne.n	8015a22 <memmove+0x20>
 8015a20:	bd10      	pop	{r4, pc}
 8015a22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a26:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015a2a:	e7f7      	b.n	8015a1c <memmove+0x1a>
 8015a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015a34:	e7eb      	b.n	8015a0e <memmove+0xc>

08015a36 <_realloc_r>:
 8015a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a38:	4607      	mov	r7, r0
 8015a3a:	4614      	mov	r4, r2
 8015a3c:	460e      	mov	r6, r1
 8015a3e:	b921      	cbnz	r1, 8015a4a <_realloc_r+0x14>
 8015a40:	4611      	mov	r1, r2
 8015a42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015a46:	f7ff bc4f 	b.w	80152e8 <_malloc_r>
 8015a4a:	b922      	cbnz	r2, 8015a56 <_realloc_r+0x20>
 8015a4c:	f7ff fbfe 	bl	801524c <_free_r>
 8015a50:	4625      	mov	r5, r4
 8015a52:	4628      	mov	r0, r5
 8015a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a56:	f000 f814 	bl	8015a82 <_malloc_usable_size_r>
 8015a5a:	4284      	cmp	r4, r0
 8015a5c:	d90f      	bls.n	8015a7e <_realloc_r+0x48>
 8015a5e:	4621      	mov	r1, r4
 8015a60:	4638      	mov	r0, r7
 8015a62:	f7ff fc41 	bl	80152e8 <_malloc_r>
 8015a66:	4605      	mov	r5, r0
 8015a68:	2800      	cmp	r0, #0
 8015a6a:	d0f2      	beq.n	8015a52 <_realloc_r+0x1c>
 8015a6c:	4631      	mov	r1, r6
 8015a6e:	4622      	mov	r2, r4
 8015a70:	f7ff ffbc 	bl	80159ec <memcpy>
 8015a74:	4631      	mov	r1, r6
 8015a76:	4638      	mov	r0, r7
 8015a78:	f7ff fbe8 	bl	801524c <_free_r>
 8015a7c:	e7e9      	b.n	8015a52 <_realloc_r+0x1c>
 8015a7e:	4635      	mov	r5, r6
 8015a80:	e7e7      	b.n	8015a52 <_realloc_r+0x1c>

08015a82 <_malloc_usable_size_r>:
 8015a82:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8015a86:	2800      	cmp	r0, #0
 8015a88:	f1a0 0004 	sub.w	r0, r0, #4
 8015a8c:	bfbc      	itt	lt
 8015a8e:	580b      	ldrlt	r3, [r1, r0]
 8015a90:	18c0      	addlt	r0, r0, r3
 8015a92:	4770      	bx	lr

08015a94 <_init>:
 8015a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a96:	bf00      	nop
 8015a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a9a:	bc08      	pop	{r3}
 8015a9c:	469e      	mov	lr, r3
 8015a9e:	4770      	bx	lr

08015aa0 <_fini>:
 8015aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aa2:	bf00      	nop
 8015aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015aa6:	bc08      	pop	{r3}
 8015aa8:	469e      	mov	lr, r3
 8015aaa:	4770      	bx	lr
